#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_BM0S, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0050);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_NSSI, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_R7ZO, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, StartTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PrerollTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostrollTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_G7U7, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_WTF0, 0x00CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E0);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_QFGG, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, bIsEvalDisabled, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_ACIS, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0058);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0058);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, PrecompiledEvaluationTemplate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bPlayableDirectly, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_COSN, 0x0343);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0348);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_883W, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_ZV3X, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_NR37, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Sequence, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, StartTime, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_WF01, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_N3NK, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_P3XB, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, NetSyncProps, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackClient, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_OWYR, 0x0848);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x0888);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PrerollTime, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_7601, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0158);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0068);
		}

		// class UMovieSceneCustomClockSource : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneCustomClockSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCustomClockSource, 0x0028);
		}

		// class UMovieScenePlaybackClient : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePlaybackClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePlaybackClient, 0x0028);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, BindingGroups, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_2NW1, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CustomClockSourcePath, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MarkedFrames, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x0148);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_MGB7, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0090);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0028);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_T0LI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, Type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_5WIS, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0038);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_NG2N, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, Curve, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0038);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0028);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_5XPF, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0070);
		}

		// class UMovieSceneKeyProxy : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0028);
		}

		// class UTestMovieSceneTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_0DHP, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0070);
		}

		// class UTestMovieSceneSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E0);
		}

		// class UTestMovieSceneSequence : public UMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0350);
		}

		// class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSubTrack, SectionArray, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubTrack, 0x0078);
		}

		// class UTestMovieSceneSubSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubSection, 0x0158);
		}

		// class UTwAIBTComposite_Parallel : public UBTCompositeNode
		TEST_METHOD(Class__TwAIFramework__TwAIBTComposite_Parallel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTComposite_Parallel, 0x0090);
		}

		// class UTwAIBTComposite_Random : public UBTCompositeNode
		TEST_METHOD(Class__TwAIFramework__TwAIBTComposite_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTComposite_Random, ChildrenProbabilities, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTComposite_Random, 0x00A0);
		}

		// class UTwAIBTDecorator_CanPlayerSee : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__TwAIFramework__TwAIBTDecorator_CanPlayerSee)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTDecorator_CanPlayerSee, 0x0090);
		}

		// class UTwAIBTDecorator_SpatialBase : public UBTDecorator
		TEST_METHOD(Class__TwAIFramework__TwAIBTDecorator_SpatialBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_SpatialBase, SourceKey, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_SpatialBase, TargetKey, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTDecorator_SpatialBase, 0x00B8);
		}

		// class UTwAIBTDecorator_ClearNavTrace : public UTwAIBTDecorator_SpatialBase
		TEST_METHOD(Class__TwAIFramework__TwAIBTDecorator_ClearNavTrace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_ClearNavTrace, FilterClass, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTDecorator_ClearNavTrace, 0x00C0);
		}

		// class UTwAIBTDecorator_Distance : public UTwAIBTDecorator_SpatialBase
		TEST_METHOD(Class__TwAIFramework__TwAIBTDecorator_Distance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, DistanceCheckType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, UnknownData_IT8A, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, ComparisonValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, ComparisonOp, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, bUseSourceRadius, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, bUseTargetRadius, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, UnknownData_PN5Z, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, SourceRadiusOverride, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, TargetRadiusOverride, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, bOverrideSourceRadius, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, bOverrideTargetRadius, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, UnknownData_AH9B, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, UpdateFrequency, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, UpdateFrequencyDeviation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Distance, UnknownData_S3J0, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTDecorator_Distance, 0x0180);
		}

		// class UTwAIBTDecorator_Gate : public UBTDecorator
		TEST_METHOD(Class__TwAIFramework__TwAIBTDecorator_Gate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Gate, bIncrementOnSuccess, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Gate, UnknownData_FGIJ, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Gate, NumAccessesUntilClosure, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTDecorator_Gate, 0x0070);
		}

		// class UTwAIBTDecorator_HasClearLoS : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__TwAIFramework__TwAIBTDecorator_HasClearLoS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_HasClearLoS, SourceBlackboardKey, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_HasClearLoS, TraceChannel, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_HasClearLoS, UnknownData_F3IX, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_HasClearLoS, FoVCheck, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_HasClearLoS, FoVType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_HasClearLoS, UnknownData_7V7Y, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_HasClearLoS, LoSExtentSize, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_HasClearLoS, LoSExtentSizeInaccuracy, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_HasClearLoS, UnknownData_V4EW, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTDecorator_HasClearLoS, 0x0108);
		}

		// class UTwAIBTDecorator_HasPatrol : public UBTDecorator
		TEST_METHOD(Class__TwAIFramework__TwAIBTDecorator_HasPatrol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTDecorator_HasPatrol, 0x0068);
		}

		// class UTwAIBTDecorator_IsRightOrLeft : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__TwAIFramework__TwAIBTDecorator_IsRightOrLeft)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_IsRightOrLeft, ExpectedAzimuth, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_IsRightOrLeft, ComparisonOp, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_IsRightOrLeft, UnknownData_P3M4, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTDecorator_IsRightOrLeft, 0x00D0);
		}

		// class UTwAIBTDecorator_LoopWhileResult : public UBTDecorator
		TEST_METHOD(Class__TwAIFramework__TwAIBTDecorator_LoopWhileResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_LoopWhileResult, ExpectedNodeResult, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_LoopWhileResult, UnknownData_KKC3, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTDecorator_LoopWhileResult, 0x0070);
		}

		// class UTwAIBTDecorator_MovementMode : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__TwAIFramework__TwAIBTDecorator_MovementMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_MovementMode, MovementMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_MovementMode, UnknownData_UXQS, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_MovementMode, UpdateTimeFrequency, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_MovementMode, UpdateTimeDeviation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_MovementMode, UnknownData_5RLN, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTDecorator_MovementMode, 0x00A0);
		}

		// class UTwAIBTDecorator_Random : public UBTDecorator
		TEST_METHOD(Class__TwAIFramework__TwAIBTDecorator_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Random, SuccessProbability, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Random, UpdateFrequency, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIBTDecorator_Random, UnknownData_XINM, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTDecorator_Random, 0x00A8);
		}

		// class UTwAIBTService_GameplayFocus : public UBTService_DefaultFocus
		TEST_METHOD(Class__TwAIFramework__TwAIBTService_GameplayFocus)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIBTService_GameplayFocus, 0x00A0);
		}

		// class UTwAIDataProvider_CollisionHalfHeight : public UAIDataProvider
		TEST_METHOD(Class__TwAIFramework__TwAIDataProvider_CollisionHalfHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIDataProvider_CollisionHalfHeight, FloatValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIDataProvider_CollisionHalfHeight, IntValue, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIDataProvider_CollisionHalfHeight, 0x0030);
		}

		// class UTwAIDataProvider_CollisionRadius : public UAIDataProvider
		TEST_METHOD(Class__TwAIFramework__TwAIDataProvider_CollisionRadius)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIDataProvider_CollisionRadius, FloatValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAIDataProvider_CollisionRadius, IntValue, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIDataProvider_CollisionRadius, 0x0030);
		}

		// class UTwAIHelperLibrary : public UObject
		TEST_METHOD(Class__TwAIFramework__TwAIHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIHelperLibrary, 0x0028);
		}

		// class UTwAIPatrolableInterface : public UInterface
		TEST_METHOD(Class__TwAIFramework__TwAIPatrolableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIPatrolableInterface, 0x0028);
		}

		// class ATwAIPatrolPlotter : public AActor
		TEST_METHOD(Class__TwAIFramework__TwAIPatrolPlotter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAIPatrolPlotter, PatrolType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAIPatrolPlotter, UnknownData_LWBY, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAIPatrolPlotter, UnknownData_EB3N, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAIPatrolPlotter, PatrolSplineComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATwAIPatrolPlotter, 0x0230);
		}

		// class UTwAIPatrolSplineComponent : public USplineComponent
		TEST_METHOD(Class__TwAIFramework__TwAIPatrolSplineComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAIPatrolSplineComponent, 0x0500);
		}

		// class UTwEnvQueryContext_QuerierRight : public UEnvQueryContext
		TEST_METHOD(Class__TwAIFramework__TwEnvQueryContext_QuerierRight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwEnvQueryContext_QuerierRight, 0x0028);
		}

		// class UTwEnvQueryContext_QuerierUp : public UEnvQueryContext
		TEST_METHOD(Class__TwAIFramework__TwEnvQueryContext_QuerierUp)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwEnvQueryContext_QuerierUp, 0x0028);
		}

		// class UTwEnvQueryContext_WorldUp : public UEnvQueryContext
		TEST_METHOD(Class__TwAIFramework__TwEnvQueryContext_WorldUp)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwEnvQueryContext_WorldUp, 0x0028);
		}

		// class UTwEnvQueryGenerator_ConeOffset : public UEnvQueryGenerator_Cone
		TEST_METHOD(Class__TwAIFramework__TwEnvQueryGenerator_ConeOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwEnvQueryGenerator_ConeOffset, AngleOffset, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwEnvQueryGenerator_ConeOffset, 0x01A8);
		}

		// class UTwEnvQueryGenerator_SimpleGridOuter : public UEnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__TwAIFramework__TwEnvQueryGenerator_SimpleGridOuter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwEnvQueryGenerator_SimpleGridOuter, MinDistanceFromContext, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwEnvQueryGenerator_SimpleGridOuter, 0x0130);
		}

		// class UAnimSharingStateInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingStateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, AnimationToPlay, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PermutationTimeOffset, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PlayRate, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, bStateBool, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_ARE9, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, Instance, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_7PMO, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingStateInstance, 0x0290);
		}

		// class UAnimSharingTransitionInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingTransitionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, FromComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, ToComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, BlendTime, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, bBlendBool, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, UnknownData_HG19, 0x027D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingTransitionInstance, 0x0280);
		}

		// class UAnimSharingAdditiveInstance : public UAnimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingAdditiveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, BaseComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, AdditiveAnimation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, Alpha, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, bStateBool, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, UnknownData_FXH7, 0x027D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingAdditiveInstance, 0x0280);
		}

		// class UAnimSharingInstance : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimSharingInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, RegisteredActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_TS8V, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateProcessor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_RV1Z, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UsedAnimationSequences, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_M5A9, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateEnum, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, SharingActor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_ETLN, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingInstance, 0x0138);
		}

		// class UAnimationSharingManager : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, Skeletons, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, PerSkeletonData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, UnknownData_SBSO, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingManager, 0x0088);
		}

		// class UAnimationSharingSetup : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, SkeletonSetups, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, ScalabilitySettings, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingSetup, 0x0048);
		}

		// class UAnimationSharingStateProcessor : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingStateProcessor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingStateProcessor, AnimationStateEnum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingStateProcessor, 0x0050);
		}

		// class UEditableMeshAdapter : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0028);
		}

		// class UEditableGeometryCollectionAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableGeometryCollectionAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, OriginalGeometryCollection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollectionLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, UnknownData_DUXK, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGeometryCollectionAdapter, 0x00D8);
		}

		// class UEditableMesh : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_QJEF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_F014, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_4PL0, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_7Z0H, 0x0524);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0708);
		}

		// class UEditableMeshFactory : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0028);
		}

		// class UEditableStaticMeshAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_Y03F, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E0);
		}

		// class UMovieSceneGeometryCollectionSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionSection, Params, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionSection, 0x0110);
		}

		// class UMovieSceneGeometryCollectionTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionTrack, AnimationSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionTrack, 0x0068);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0028);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_256H, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_V3VS, 0x0442);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_4GKE, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x04A0);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0028);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_E24A, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0068);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_TVDK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0080);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_VMHR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0078);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_JBJM, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x0098);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_GDLS, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0078);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_ASWY, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0080);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_QM9L, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0078);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_F3EK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0090);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_2ZWT, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0088);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_ZOJB, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0080);
		}

		// class UInAppPurchaseCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, UnknownData_9P76, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy2, 0x00A8);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_43AM, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseQueryCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, UnknownData_F8MT, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy2, 0x0068);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_BHB0, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseRestoreCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, UnknownData_1J2L, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy2, 0x00A8);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_6AM4, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, SocketErrorDisconnectDelay, 0x1A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_E0RY, 0x1A84);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1AD0);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_C0ES, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_OJU5, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_GAX9, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxSecondsInReceive, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, NbPacketsBetweenReceiveTimeTest, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ResolutionConnectionTimeout, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_HEY4, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x07B8);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_AUUA, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0180);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0028);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_UL4L, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0068);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_QGS3, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x0098);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_S6G6, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0068);
		}

		// class AOnlineBeacon : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_NNXB, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionInitialTimeout, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, BeaconConnectionTimeout, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, NetDriver, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeacon, UnknownData_C0EP, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeacon, 0x0250);
		}

		// class AOnlineBeaconClient : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconOwner, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, BeaconConnection, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, ConnectionState, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconClient, UnknownData_G6HN, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconClient, 0x02B0);
		}

		// class AOnlineBeaconHost : public AOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ListenPort, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_M1YX, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, ClientActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHost, UnknownData_7T76, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHost, 0x0308);
		}

		// class AOnlineBeaconHostObject : public AActor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, BeaconTypeName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientBeaconActorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOnlineBeaconHostObject, ClientActors, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOnlineBeaconHostObject, 0x0248);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_82F3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0128);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_17LM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0050);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_8DTO, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_02VK, 0x01DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x01E0);
		}

		// class APartyBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_G3CH, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, RequestType, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bPendingReservationSent, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, bCancelReservation, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconClient, UnknownData_C94J, 0x0343);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconClient, 0x0370);
		}

		// class APartyBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_WSQL, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_911C, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APartyBeaconHost, UnknownData_GEKB, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APartyBeaconHost, 0x02C0);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bEnableRemovalRequests, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_W18E, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_XRBL, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0078);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_EN0Q, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0078);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_7TGK, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0060);
		}

		// class ASpectatorBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_KENV, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, DestSessionId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, PendingReservation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, RequestType, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bPendingReservationSent, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, bCancelReservation, 0x036A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconClient, UnknownData_UG5Q, 0x036B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconClient, 0x0398);
		}

		// class ASpectatorBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, State, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_UELA, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, bLogoutOnSessionTimeout, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_EN4L, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, SessionTimeoutSecs, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, TravelSessionTimeoutSecs, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpectatorBeaconHost, UnknownData_FM1W, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorBeaconHost, 0x02C0);
		}

		// class USpectatorBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, SessionName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, NumConsumedReservations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, MaxReservations, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, bRestrictCrossConsole, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_V7XY, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, Reservations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_ZJW6, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorBeaconState, 0x0060);
		}

		// class ATestBeaconClient : public AOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconClient, 0x02B0);
		}

		// class ATestBeaconHost : public AOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATestBeaconHost, 0x0248);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0028);
		}

		// class UVoipListenerSynthComponent : public USynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_9T5V, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x0730);
		}

		// class UWheeledVehicleMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_V2CA, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_MIFL, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_206Q, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_V50U, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_YFUA, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_V677, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceRadius, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOSteeringStep, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOThrottleStep, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceUID, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceGroup, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToAvoid, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToIgnore, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceWeight, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, PendingLaunchVelocity, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_6D44, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawBrakeInput, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_1UNB, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, OverrideController, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x0290);
		}

		// class USimpleWheeledVehicleMovementComponent : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__SimpleWheeledVehicleMovementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleWheeledVehicleMovementComponent, 0x0290);
		}

		// class UTireConfig : public UDataAsset
		TEST_METHOD(Class__PhysXVehicles__TireConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_XX6T, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, TireFrictionScales, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_TE5P, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireConfig, 0x0050);
		}

		// class UVehicleAnimInstance : public UAnimInstance
		TEST_METHOD(Class__PhysXVehicles__VehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_H35F, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_K8RV, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, WheeledVehicleMovementComponent, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_A00G, 0x0978);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x0980);
		}

		// class UVehicleWheel : public UObject
		TEST_METHOD(Class__PhysXVehicles__VehicleWheel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_26YX, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_N6KM, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireConfig, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SweepType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_ERS1, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_3W0F, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_7X7Z, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Location, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_L8R1, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00F0);
		}

		// class AWheeledVehicle : public APawn
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWheeledVehicle, VehicleMovement, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWheeledVehicle, 0x0290);
		}

		// class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0408);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, GenerationGuid, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x0670);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0028);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Radius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSingleInstanceModeOverrideRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_69HJ, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SingleInstanceModeRadius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_OOZ1, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_XD5T, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_N2J8, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_59HV, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_URW5, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_JSJV, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_NPN6, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ExclusionLandscapeLayers, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumExclusionLayerWeight, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_WC99, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_MU6L, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DetailMode, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_OR5O, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_QDJH, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DynamicShadowDetailMode, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bVisibleInRayTracing, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bHideFromRayTracingBelowDepth, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_FJ5W, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_MLA5, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_EDOI, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_096L, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightingChannels, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_3JVL, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_D6GD, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, TranslucencySortPriority, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_TAHL, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_CXYR, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_H8O6, 0x0356);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RuntimeVirtualTextures, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureCullMips, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureRenderPassType, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_YTTS, 0x036D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x0370);
		}

		// class UFoliageType_Actor : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, ActorClass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, bShouldAttachToBaseComponent, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, UnknownData_65XC, 0x0379);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_Actor, 0x0380);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, Mesh, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x0390);
		}

		// class AInstancedFoliageActor : public AActor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInstancedFoliageActor, UnknownData_XLX9, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInstancedFoliageActor, 0x0270);
		}

		// class AInteractiveFoliageActor : public AStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, TouchingActorEntryPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageVelocity, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageForce, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliagePosition, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageTouchImpulseScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffness, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, FoliageDamping, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxDamageImpulse, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxTouchImpulse, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, MaxForce, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, Mass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInteractiveFoliageActor, UnknownData_R1AI, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInteractiveFoliageActor, 0x0290);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_VU2C, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x04B0);
		}

		// class AProceduralFoliageBlockingVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageBlockingVolume, 0x0260);
		}

		// class UProceduralFoliageComponent : public UActorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_Z5A9, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x00D8);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_1UEX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_NEX1, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0068);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_4N4W, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_MV06, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0158);
		}

		// class AProceduralFoliageVolume : public AVolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AProceduralFoliageVolume, ProceduralComponent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AProceduralFoliageVolume, 0x0260);
		}

		// class AControlPointMeshActor : public AActor
		TEST_METHOD(Class__Landscape__ControlPointMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AControlPointMeshActor, ControlPointMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AControlPointMeshActor, 0x0228);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_1R3P, 0x04A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x04B0);
		}

		// class ALandscapeProxy : public AActor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SplineComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeGuid, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeSectionOffset, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MaxLODLevel, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistanceFactor, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODFalloff, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_BO2Y, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentScreenSizeToUseSubSections, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0ScreenSize, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LOD0DistributionSetting, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LODDistributionSetting, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSize, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_H6O4, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, OccluderGeometryLOD, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingLOD, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, DefaultPhysMaterial, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StreamingDistanceMultiplier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_PWLM, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterial, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_ZTDV, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeHoleMaterial, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeMaterialsOverride, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bMeshHoles, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, MeshHolesMaxLod, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_GDV4, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, RuntimeVirtualTextures, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureNumLods, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureLodBias, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, VirtualTextureRenderPassType, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_57QJ, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NegativeZBoundsExtension, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, PositiveZBoundsExtension, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_5GVN, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LandscapeComponents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, FoliageComponents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_8VEW, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLandscapeGrass, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_4LUB, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, StaticLightingResolution, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_Y6YZ, 0x038D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightingChannels, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_OSJ1, 0x0392);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_KKMV, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CustomDepthStencilValue, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LDMaxDrawDistance, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, LightmassSettings, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionMipLevel, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SimpleCollisionMipLevel, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, CollisionThickness, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_OTKH, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, BodyInstance, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_MOFD, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, ComponentSizeQuads, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, SubsectionSizeQuads, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NumSubsections, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, UnknownData_P5PM, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseDynamicMaterialInstance, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, NavigationGeometryGatheringMode, 0x04ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x04EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, bHasLayersContent, 0x04EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeProxy, WeightmapUsageMap, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeProxy, 0x0540);
		}

		// class ALandscape : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscape, 0x0540);
		}

		// class ALandscapeBlueprintBrushBase : public AActor
		TEST_METHOD(Class__Landscape__LandscapeBlueprintBrushBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeBlueprintBrushBase, 0x0220);
		}

		// class ULandscapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseX, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_UHGK, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_CRTV, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_B4U5, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_RELE, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_5XHY, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0600);
		}

		// class ALandscapeGizmoActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActor, 0x0220);
		}

		// class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeGizmoActiveActor, UnknownData_ZEN6, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeGizmoActiveActor, 0x0270);
		}

		// class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0410);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_0VN2, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_FEGI, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0060);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_4ABJ, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_EYG5, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_2O2F, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x04F0);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_VXE2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_5ED3, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0210);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_G1XU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0080);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_EMWB, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0050);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, TextureStreamingInfo, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_24H9, 0x0421);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x0428);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_D8WV, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0510);
		}

		// class ALandscapeMeshProxyActor : public AActor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeMeshProxyActor, 0x0228);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_VNLD, 0x04C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x04D0);
		}

		// class ULandscapeSettings : public UDeveloperSettings
		TEST_METHOD(Class__Landscape__LandscapeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, MaxNumberOfLayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, UnknownData_NRF1, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSettings, 0x0040);
		}

		// class ULandscapeSplinesComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0440);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LayerWidthRatio, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideFalloffFactor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideFalloffFactor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideLayerFalloffFactor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideLayerFalloffFactor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_JRX3, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x00A8);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Points, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_1GDF, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B0);
		}

		// class ALandscapeStreamingProxy : public ALandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, LandscapeActor, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandscapeStreamingProxy, UnknownData_XANF, 0x055C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandscapeStreamingProxy, 0x0560);
		}

		// class ULandscapeSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Landscape__LandscapeSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSubsystem, UnknownData_UR6C, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSubsystem, 0x0098);
		}

		// class ULandscapeWeightmapUsage : public UObject
		TEST_METHOD(Class__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, ChannelUsage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, LayerGuid, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeWeightmapUsage, 0x0058);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0050);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_SQFD, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_F0MY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0058);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, UnknownData_1HYZ, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_N4DS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_W6BT, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_5BS0, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_5DIU, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x0088);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_5WLP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_6QDN, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ParameterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x0090);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0050);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_X67A, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_VVA1, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySet, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Modulation, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_KVS4, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_IDWV, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_UV70, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_YOIL, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x06D0);
		}

		// class UAudioGenerator : public UObject
		TEST_METHOD(Class__AudioMixer__AudioGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioGenerator, UnknownData_ZG35, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioGenerator, 0x00A8);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0028);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_CFV9, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, Settings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x0108);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_68PG, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x0088);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_0KVF, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, Settings, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x00D0);
		}

		// class USubmixEffectReverbFastPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbFastPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbFastPreset, UnknownData_ALGA, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbFastPreset, Settings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbFastPreset, 0x00D8);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, OwningSynthComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_EQK7, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x0380);
		}

		// class ADestructibleActor : public AActor
		TEST_METHOD(Class__ApexDestruction__DestructibleActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, DestructibleComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADestructibleActor, OnActorFracture, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADestructibleActor, 0x0238);
		}

		// class UDestructibleComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__ApexDestruction__DestructibleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_DXRM, 0x0651);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, FractureEffects, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, bEnableHardSleeping, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_J8RK, 0x0669);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, LargeChunkThreshold, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_K1PZ, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, OnComponentFracture, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_AZ3F, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleComponent, 0x072C);
		}

		// class UDestructibleFractureSettings : public UObject
		TEST_METHOD(Class__ApexDestruction__DestructibleFractureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, CellSiteCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, FractureMaterialDesc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, RandomSeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_99JL, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, VoronoiSites, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, OriginalSubmeshCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_WKO9, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, Materials, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, ChunkParameters, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_E60P, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleFractureSettings, 0x00B8);
		}

		// class UDestructibleMesh : public USkeletalMesh
		TEST_METHOD(Class__ApexDestruction__DestructibleMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, DefaultDestructibleParameters, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, FractureEffects, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, UnknownData_IP16, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleMesh, 0x0420);
		}

		// class UUdpMessagingSettings : public UObject
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bAutoRepair, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bStopServiceWhenAppDeactivates, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_KJSY, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MessageFormat, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_DMRM, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_OQQH, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A0);
		}

		// class UActorSequence : public UMovieSceneSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0370);
		}

		// class UActorSequenceComponent : public UActorComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_II3H, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, Sequence, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x00D8);
		}

		// class UActorSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x0888);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_7AAT, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0060);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0028);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02A8);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x05B0);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0420);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x03E8);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0820);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0248);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01D0);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0500);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0258);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_Y00R, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0030);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0318);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x0298);
		}

		// class UToolMenuBase : public UObject
		TEST_METHOD(Class__Slate__ToolMenuBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolMenuBase, 0x0028);
		}

		// class UImageWriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0028);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0078);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_24NG, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0058);
		}

		// class UMyPluginObject : public UObject
		TEST_METHOD(Class__UObjectPlugin__MyPluginObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMyPluginObject, MyStruct, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMyPluginObject, 0x0038);
		}

		// class UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0030);
		}

		// class UTimeManagementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0028);
		}

		// class UTimeSynchronizationSource : public UObject
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_RHLC, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0030);
		}

		// class UTemplateSequence : public UMovieSceneSequence
		TEST_METHOD(Class__TemplateSequence__TemplateSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundPreviewActor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorComponents, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequence, 0x03F0);
		}

		// class UCameraAnimationSequence : public UTemplateSequence
		TEST_METHOD(Class__TemplateSequence__CameraAnimationSequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimationSequence, 0x03F0);
		}

		// class ATemplateSequenceActor : public AActor
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_184Z, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, PlaybackSettings, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_SYHC, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, SequencePlayer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, TemplateSequence, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, BindingOverride, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATemplateSequenceActor, UnknownData_SSOZ, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATemplateSequenceActor, 0x0270);
		}

		// class UTemplateSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__TemplateSequence__TemplateSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequencePlayer, UnknownData_9T9N, 0x0888);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequencePlayer, 0x0890);
		}

		// class UTemplateSequenceSection : public UMovieSceneSubSection
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSection, 0x0158);
		}

		// class UTemplateSequenceTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceTrack, 0x0068);
		}

		// class USoundfieldEncodingSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEncodingSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEncodingSettingsBase, 0x0028);
		}

		// class UAudioEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__AudioEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioEndpointSettingsBase, 0x0028);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0028);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0028);
		}

		// class USoundModulationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundModulationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundModulationPluginSourceSettingsBase, 0x0028);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0028);
		}

		// class USoundfieldEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSettingsBase, 0x0028);
		}

		// class USoundfieldEffectSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectSettingsBase, 0x0028);
		}

		// class USoundfieldEffectBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEffectBase, Settings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectBase, 0x0030);
		}

		// class UAmbisonicsEncodingSettings : public USoundfieldEncodingSettingsBase
		TEST_METHOD(Class__SoundFields__AmbisonicsEncodingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, AmbisonicsOrder, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, UnknownData_NQDT, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsEncodingSettings, 0x0030);
		}

		// class ABP_TimeOfDayTracker_C : public AME_TimeofDayInfo
		TEST_METHOD(BlueprintGeneratedClass__BP_TimeOfDayTracker__BP_TimeOfDayTracker_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TimeOfDayTracker_C, 0x0290);
		}

		// class UManeaterBlueprintStatics_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__ManeaterBlueprintStatics__ManeaterBlueprintStatics_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterBlueprintStatics_C, 0x0028);
		}

		// class UWCRegionObjectiveCollection_C : public UME_RegionObjectiveCollection
		TEST_METHOD(BlueprintGeneratedClass__WCRegionObjectiveCollection__WCRegionObjectiveCollection_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWCRegionObjectiveCollection_C, 0x0040);
		}

		// class UWBRegionObjectiveCollection1_C : public UME_RegionObjectiveCollection
		TEST_METHOD(BlueprintGeneratedClass__WBRegionObjectiveCollection1__WBRegionObjectiveCollection1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWBRegionObjectiveCollection1_C, 0x0040);
		}

		// class UPRORegionObjectiveCollection_C : public UME_RegionObjectiveCollection
		TEST_METHOD(BlueprintGeneratedClass__PRORegionObjectiveCollection__PRORegionObjectiveCollection_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPRORegionObjectiveCollection_C, 0x0040);
		}

		// class ABP_Paddleboat_AIController_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Paddleboat_AIController__BP_Paddleboat_AIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Paddleboat_AIController_C, 0x07E8);
		}

		// class ASHK_GreatWhite_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_GreatWhite_BP__SHK_GreatWhite_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASHK_GreatWhite_BP_C, VoiceGroupComponent_BP1, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASHK_GreatWhite_BP_C, VoiceGroupComponent_BP, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_GreatWhite_BP_C, 0x1050);
		}

		// class UGE_ApexGreatWhite_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_ApexGreatWhite_Native__GE_ApexGreatWhite_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ApexGreatWhite_Native_C, 0x0870);
		}

		// class AAIController_GreatWhite_Apex_BP_C : public AAIController_GreatWhite_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_GreatWhite_Apex_BP__AIController_GreatWhite_Apex_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_GreatWhite_Apex_BP_C, UberGraphFrame, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_GreatWhite_Apex_BP_C, 0x07D8);
		}

		// class UGE_MissingTail_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MissingTail__GE_MissingTail_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MissingTail_C, 0x0870);
		}

		// class UGE_ApexBarracuda_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_ApexBarracuda_Native__GE_ApexBarracuda_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ApexBarracuda_Native_C, 0x0870);
		}

		// class UGE_AI_Slow_50_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AI_Slow_51__GE_AI_Slow_50_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AI_Slow_50_C, 0x07B8);
		}

		// class UGE_Evo_Shadow_Body_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_T4__GE_Evo_Shadow_Body_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_T4_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_LungeBonus_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_LungeBonus_T4__GE_Evo_Shadow_Body_LungeBonus_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_LungeBonus_T4_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Bonus_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Bonus_T4__GE_Evo_Shadow_Body_Bonus_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Bonus_T4_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Body_T5_C : public UGA_Evo_Shadow_Body_T1_C
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_T5__GA_Evo_Shadow_Body_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_T5_C, 0x0448);
		}

		// class UGA_EVO_Shadow_Body_Aura_T5_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_Aura_T5__GA_EVO_Shadow_Body_Aura_T5_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_Aura_T5_C, UberGraphFrame, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_Aura_T5_C, Shadow_Aura, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_Aura_T5_C, 0x0410);
		}

		// class UGA_EVO_Shadow_Body_AOE_End_T5_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_AOE_End_T5__GA_EVO_Shadow_Body_AOE_End_T5_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_AOE_End_T5_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_AOE_End_T5_C, 0x0408);
		}

		// class UGA_Evo_Shadow_Body_Lunge_ImpactVFX_T5_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_Lunge_ImpactVFX_T5__GA_Evo_Shadow_Body_Lunge_ImpactVFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_Lunge_ImpactVFX_T5_C, 0x05E0);
		}

		// class UGA_Evo_Shadow_Body_T4_C : public UGA_Evo_Shadow_Body_T1_C
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_T4__GA_Evo_Shadow_Body_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_T4_C, 0x0448);
		}

		// class UGA_EVO_Shadow_Body_Aura_T4_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_Aura_T4__GA_EVO_Shadow_Body_Aura_T4_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_Aura_T4_C, UberGraphFrame, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_Aura_T4_C, Shadow_Aura, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_Aura_T4_C, 0x0410);
		}

		// class UGA_EVO_Shadow_Body_AOE_End_T4_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_AOE_End_T4__GA_EVO_Shadow_Body_AOE_End_T4_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_AOE_End_T4_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_AOE_End_T4_C, 0x0408);
		}

		// class ABP_EVO_Shadow_Body_AOE_T4_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Body_AOE_T4__BP_EVO_Shadow_Body_AOE_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Body_AOE_T4_C, 0x02D0);
		}

		// class UThrashControlsWidget_BP_C : public UThrashingControlsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ThrashControlsWidget_BP__ThrashControlsWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashControlsWidget_BP_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashControlsWidget_BP_C, ThrashLoop_old, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashControlsWidget_BP_C, ThrashLabel, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrashControlsWidget_BP_C, 0x0278);
		}

		// class UPlayerInfoWidget_BP_C : public UPlayerInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlayerInfoWidget_BP__PlayerInfoWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoWidget_BP_C, UberGraphFrame, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInfoWidget_BP_C, 0x0270);
		}

		// class UObjectiveMapMarkerWidget_BP_C : public UObjectiveMapMarkerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ObjectiveMapMarkerWidget_BP__ObjectiveMapMarkerWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveMapMarkerWidget_BP_C, UberGraphFrame, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveMapMarkerWidget_BP_C, InProgressColor_1, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveMapMarkerWidget_BP_C, 0x0338);
		}

		// class UObjectiveDiscoveredQueueWidget_BP_C : public UObjectiveTrackerQueueWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ObjectiveDiscoveredQueueWidget_BP__ObjectiveDiscoveredQueueWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveDiscoveredQueueWidget_BP_C, 0x0310);
		}

		// class UInputAwareGenericButtonRTB_BP_C : public UTwInputAwareRichTextBlockWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InputAwareGenericButtonRTB_BP__InputAwareGenericButtonRTB_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAwareGenericButtonRTB_BP_C, 0x02C8);
		}

		// class UHUDTipInfo_BP_C : public UHUDTipInfo
		TEST_METHOD(WidgetBlueprintGeneratedClass__HUDTipInfo_BP__HUDTipInfo_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDTipInfo_BP_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDTipInfo_BP_C, ActionIdle, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDTipInfo_BP_C, OutAnimation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDTipInfo_BP_C, InAnimation, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDTipInfo_BP_C, 0x02B0);
		}

		// class UHUDRewardQueueWidget_BP_C : public UHUDRewardQueueWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__HUDRewardQueueWidget_BP__HUDRewardQueueWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDRewardQueueWidget_BP_C, 0x0318);
		}

		// class UME_BaseHoldButton_BP_C : public UME_RadialProgressWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ME_BaseHoldButton_BP__ME_BaseHoldButton_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BaseHoldButton_BP_C, HoldButtonPress, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BaseHoldButton_BP_C, HoldProgressBG, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_BaseHoldButton_BP_C, 0x0278);
		}

		// class UTitleScreenMenuBarItem_BP_C : public UTwBaseMenuBarItem
		TEST_METHOD(WidgetBlueprintGeneratedClass__TitleScreenMenuBarItem_BP__TitleScreenMenuBarItem_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTitleScreenMenuBarItem_BP_C, 0x0270);
		}

		// class UAudioSettingsMenuPanel_BP_C : public UTwBaseMenuPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__AudioSettingsMenuPanel_BP__AudioSettingsMenuPanel_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettingsMenuPanel_BP_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettingsMenuPanel_BP_C, DialogStepper, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettingsMenuPanel_BP_C, MasterStepper, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettingsMenuPanel_BP_C, MusicStepper, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettingsMenuPanel_BP_C, NarratorStepper, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettingsMenuPanel_BP_C, SFX_Stepper, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettingsMenuPanel_BP_C, 0x02C8);
		}

		// class UGE_WhipshotVulnerabilityDelay_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WhipshotVulnerabilityDelay__GE_WhipshotVulnerabilityDelay_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WhipshotVulnerabilityDelay_C, 0x0870);
		}

		// class UInWorldObjectiveIconsWidget_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InWorldObjectiveIconsWidget_BP__InWorldObjectiveIconsWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, PingLoop, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Circle1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Circle2, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Collectible, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, DistanceText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Gate, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Grate, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Grotto, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Hunt, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Invalidator, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Landmark, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Nutrient, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Pete, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, PeteHand, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, PopulationControl, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, QuestionMark, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, StoryQuest, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Switcher, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Terrorize, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Waypoint, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, WaypointNumberContainer, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInWorldObjectiveIconsWidget_BP_C, Actor, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInWorldObjectiveIconsWidget_BP_C, 0x02E8);
		}

		// class UGA_M_Barracuda_Recovery_BP_C : public UGA_M_Base_Recovery_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Barracuda_Recovery_BP__GA_M_Barracuda_Recovery_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Barracuda_Recovery_BP_C, 0x05E0);
		}

		// class UGA_M_Apex_Barracuda_Bite_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Apex_Barracuda_Bite_BP__GA_M_Apex_Barracuda_Bite_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Apex_Barracuda_Bite_BP_C, 0x0510);
		}

		// class UBP_APEX_SM_Bite_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_APEX_SM_Bite_IR__BP_APEX_SM_Bite_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_APEX_SM_Bite_IR_C, 0x0040);
		}

		// class ABP_Whipshot_Explosion_S_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Whipshot_Explosion_S__BP_Whipshot_Explosion_S_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Whipshot_Explosion_S_C, 0x02D0);
		}

		// class UGA_M_GreatWhite_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_GreatWhite_EvadeLeft_BP__GA_M_GreatWhite_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_GreatWhite_EvadeLeft_BP_C, 0x05E0);
		}

		// class UGE_GreatWhite_LungeClampCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GreatWhite_LungeClampCD_BP__GE_GreatWhite_LungeClampCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GreatWhite_LungeClampCD_BP_C, 0x0870);
		}

		// class UGE_GreatWhite_FeintCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GreatWhite_FeintCooldown_BP__GE_GreatWhite_FeintCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GreatWhite_FeintCooldown_BP_C, 0x0870);
		}

		// class UBP_GE_ElectroShieldExplosion_Pete2_C : public UBP_GE_ElectroShieldExplosion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_ElectroShieldExplosion_Pete2__BP_GE_ElectroShieldExplosion_Pete2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_ElectroShieldExplosion_Pete2_C, 0x0870);
		}

		// class ABP_Diver_Hunter_C : public ABP_Diver_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Diver_Hunter__BP_Diver_Hunter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Diver_Hunter_C, UberGraphFrame, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Diver_Hunter_C, AlertKeyName, 0x0F68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Diver_Hunter_C, 0x0F70);
		}

		// class UGE_SpermWhaleVulnerable_Long_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhaleVulnerable_Long_BP__GE_SpermWhaleVulnerable_Long_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhaleVulnerable_Long_BP_C, 0x0870);
		}

		// class UGE_MakoVulnerable_Long_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MakoVulnerable_Long_BP__GE_MakoVulnerable_Long_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MakoVulnerable_Long_BP_C, 0x0870);
		}

		// class UGA_Evo_Bone_Tail_FX_Tailwhip_T3_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Tail_FX_Tailwhip_T3__GA_Evo_Bone_Tail_FX_Tailwhip_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Tail_FX_Tailwhip_T3_C, 0x0400);
		}

		// class UGE_Evo_Bone_TailWhipFX_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_TailWhipFX_T4__GE_Evo_Bone_TailWhipFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_TailWhipFX_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Teeth_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Teeth_T5__GE_Evo_Bone_Teeth_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Teeth_T5_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Tail_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Tail_T2__GE_Evo_Shadow_Tail_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Tail_T2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Tail_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Tail_T1__GE_Evo_Shadow_Tail_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Tail_T1_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Teeth_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Teeth_T1__GA_Evo_Shadow_Teeth_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Teeth_T1_C, 0x0400);
		}

		// class UGA_Evo_Shadow_Teeth_T2_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Teeth_T2__GA_Evo_Shadow_Teeth_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Teeth_T2_C, 0x0400);
		}

		// class UGE_Evo_Shadow_Teeth_Bonus_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Teeth_Bonus_T2__GE_Evo_Shadow_Teeth_Bonus_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Teeth_Bonus_T2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Teeth_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Teeth_T1__GE_Evo_Shadow_Teeth_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Teeth_T1_C, 0x0870);
		}

		// class UGE_Shotgun_Damage_Tier5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Shotgun_Damage_Tier5__GE_Shotgun_Damage_Tier5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Shotgun_Damage_Tier5_C, 0x0870);
		}

		// class UBP_PlayerShark_Jaws_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerShark_Jaws_IR__BP_PlayerShark_Jaws_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerShark_Jaws_IR_C, 0x0040);
		}

		// class UGE_RecentlyHit_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_RecentlyHit__GE_RecentlyHit_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_RecentlyHit_C, 0x07B8);
		}

		// class UGE_MultiHit9_Vulnerability_C : public UGE_MultiHit4_Vulnerability_C
		TEST_METHOD(BlueprintGeneratedClass__GE_MultiHit9_Vulnerability__GE_MultiHit9_Vulnerability_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MultiHit9_Vulnerability_C, 0x0870);
		}

		// class UGE_MultiHit8_Vulnerability_C : public UGE_MultiHit4_Vulnerability_C
		TEST_METHOD(BlueprintGeneratedClass__GE_MultiHit8_Vulnerability__GE_MultiHit8_Vulnerability_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MultiHit8_Vulnerability_C, 0x0870);
		}

		// class UGE_MultiHit7_Vulnerability_C : public UGE_MultiHit4_Vulnerability_C
		TEST_METHOD(BlueprintGeneratedClass__GE_MultiHit7_Vulnerability__GE_MultiHit7_Vulnerability_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MultiHit7_Vulnerability_C, 0x0870);
		}

		// class AAIController_SpermWhale_Hunted_BP_C : public AAIController_SpermWhale_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_SpermWhale_Hunted_BP__AIController_SpermWhale_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_SpermWhale_Hunted_BP_C, 0x07D0);
		}

		// class AAIController_Swordfish_Hunted_BP_C : public AAIController_Swordfish_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Swordfish_Hunted_BP__AIController_Swordfish_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Swordfish_Hunted_BP_C, 0x07D0);
		}

		// class UGA_M_Marlin_ThrashRelease_BP_C : public UGA_M_ThrashRelease_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Marlin_ThrashRelease_BP__GA_M_Marlin_ThrashRelease_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Marlin_ThrashRelease_BP_C, 0x05E0);
		}

		// class ABP_Paddleboat_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Paddleboat_Fragment3__BP_Paddleboat_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Paddleboat_Fragment3_C, 0x0230);
		}

		// class ABP_Paddleboat_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Paddleboat_Fragment4__BP_Paddleboat_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Paddleboat_Fragment4_C, 0x0230);
		}

		// class ASHK_Base_Seal_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_Base_Seal_BP__SHK_Base_Seal_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASHK_Base_Seal_BP_C, VoiceGroupComponent_BP1, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASHK_Base_Seal_BP_C, VoiceGroupComponent_BP, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_Base_Seal_BP_C, 0x1050);
		}

		// class AFSH_Spade_Large_BP_C : public AFSH_Spade_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Spade_Large_BP__FSH_Spade_Large_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Spade_Large_BP_C, 0x1050);
		}

		// class AFSH_Spade_Small_BP_C : public AFSH_Spade_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Spade_Small_BP__FSH_Spade_Small_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Spade_Small_BP_C, 0x1050);
		}

		// class AFSH_Grouper_Large_Albino_BP_C : public AFSH_Grouper_Large_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Grouper_Large_Albino_BP__FSH_Grouper_Large_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Grouper_Large_Albino_BP_C, 0x1050);
		}

		// class AFSH_ParrotFish_Albino_Large_BP_C : public AFSH_ParrotFish_Large_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_ParrotFish_Albino_Large_BP__FSH_ParrotFish_Albino_Large_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_ParrotFish_Albino_Large_BP_C, 0x1050);
		}

		// class AFSH_ParrotFish_Albino_Small_BP_C : public AFSH_ParrotFish_Small_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_ParrotFish_Albino_Small_BP__FSH_ParrotFish_Albino_Small_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_ParrotFish_Albino_Small_BP_C, 0x1050);
		}

		// class AFSH_CoralGrouper_Med_BP_C : public AFSH_Grouper_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_CoralGrouper_Med_BP__FSH_CoralGrouper_Med_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_CoralGrouper_Med_BP_C, 0x1050);
		}

		// class AFSH_KingMackerel_Med_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_KingMackerel_Med_BP__FSH_KingMackerel_Med_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_KingMackerel_Med_BP_C, TwAkEmitterArray, 0x1040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_KingMackerel_Med_BP_C, 0x1048);
		}

		// class AFSH_KingMackerel_Small_BP_C : public AFSH_KingMackerel_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_KingMackerel_Small_BP__FSH_KingMackerel_Small_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_KingMackerel_Small_BP_C, 0x1048);
		}

		// class AFSH_MahiMahi_Large_BP_C : public AFSH_MahiMahi_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_MahiMahi_Large_BP__FSH_MahiMahi_Large_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_MahiMahi_Large_BP_C, 0x1050);
		}

		// class AFSH_MahiMahi_Med_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_MahiMahi_Med_BP__FSH_MahiMahi_Med_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_MahiMahi_Med_BP_C, VoiceGroupComponent_BP, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_MahiMahi_Med_BP_C, TwAkEmitterArray, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_MahiMahi_Med_BP_C, 0x1050);
		}

		// class ASHK_Medium_Seal_Albino_BP_C : public ASHK_Medium_Seal_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_Medium_Seal_Albino_BP__SHK_Medium_Seal_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_Medium_Seal_Albino_BP_C, 0x1050);
		}

		// class ASHK_Large_Seal_BP_C : public ASHK_Base_Seal_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_Large_Seal_BP__SHK_Large_Seal_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_Large_Seal_BP_C, 0x1050);
		}

		// class ASHK_Small_Seal_BP_C : public ASHK_Base_Seal_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_Small_Seal_BP__SHK_Small_Seal_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_Small_Seal_BP_C, 0x1050);
		}

		// class UResourceListWidget_BP_C : public UResourceListWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ResourceListWidget_BP__ResourceListWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceListWidget_BP_C, FatIcon, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceListWidget_BP_C, MineralIcon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceListWidget_BP_C, MutagenIcon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceListWidget_BP_C, ProtienIcon, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResourceListWidget_BP_C, 0x0298);
		}

		// class UTVShowHashtag_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TVShowHashtag_BP__TVShowHashtag_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVShowHashtag_BP_C, HashtagAnimation, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVShowHashtag_BP_C, hashtagtext, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTVShowHashtag_BP_C, 0x0240);
		}

		// class USettingsStepperButton_Next_BP_C : public UTwBaseButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__SettingsStepperButton_Next_BP__SettingsStepperButton_Next_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USettingsStepperButton_Next_BP_C, 0x0438);
		}

		// class UCompass_BP_C : public UCompassWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Compass_BP__Compass_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompass_BP_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompass_BP_C, Compass, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompass_BP_C, 0x03A8);
		}

		// class ABP_BarrelRaft_Barrel_B_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BarrelRaft_Barrel_B__BP_BarrelRaft_Barrel_B_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BarrelRaft_Barrel_B_C, 0x0230);
		}

		// class ABP_BarrelRaft_Fragment_B_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BarrelRaft_Fragment_B__BP_BarrelRaft_Fragment_B_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BarrelRaft_Fragment_B_C, 0x0230);
		}

		// class UMainMenuButton_BP_C : public UTwBaseButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__MainMenuButton_BP__MainMenuButton_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuButton_BP_C, 0x0438);
		}

		// class UGE_SpearGun_Damage_Diver_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpearGun_Damage_Diver__GE_SpearGun_Damage_Diver_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpearGun_Damage_Diver_C, 0x0870);
		}

		// class ABP_USCG_MediumSkiff_Debris_RightRear_Minion_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_RightRear_Minion__BP_USCG_MediumSkiff_Debris_RightRear_Minion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_RightRear_Minion_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_Bow_Minion_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_Bow_Minion__BP_USCG_MediumSkiff_Debris_Bow_Minion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_Bow_Minion_C, 0x0230);
		}

		// class ABP_DynamiteStick_Pete1Battle_C : public ABP_DynamiteStick_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DynamiteStick_Pete1Battle__BP_DynamiteStick_Pete1Battle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DynamiteStick_Pete1Battle_C, 0x0390);
		}

		// class UBP_Speargun_Diver_C : public UBP_Speargun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Speargun_Diver__BP_Speargun_Diver_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Speargun_Diver_C, 0x06E0);
		}

		// class ABP_PetesSupport_V1_AI_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesSupport_V1_AI_Controller__BP_PetesSupport_V1_AI_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesSupport_V1_AI_Controller_C, 0x07E8);
		}

		// class UGE_AssaultRifle_Pete2Phase1_Damage_C : public UGE_AssaultRifle_Damage_Tier3_C
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Pete2Phase1_Damage__GE_AssaultRifle_Pete2Phase1_Damage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Pete2Phase1_Damage_C, 0x0870);
		}

		// class ASpearProjectile_Tier4_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__SpearProjectile_Tier4__SpearProjectile_Tier4_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpearProjectile_Tier4_C, UberGraphFrame, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpearProjectile_Tier4_C, 0x0278);
		}

		// class UBP_Spear_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Spear_IR__BP_Spear_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Spear_IR_C, 0x0040);
		}

		// class ABP_Airboat_Debris_Motor_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Debris_Motor__BP_Airboat_Debris_Motor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Debris_Motor_C, 0x0230);
		}

		// class ULandmarkMapMarkerWidget_BP_C : public ULandmarkMapMarkerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LandmarkMapMarkerWidget_BP__LandmarkMapMarkerWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandmarkMapMarkerWidget_BP_C, UberGraphFrame, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandmarkMapMarkerWidget_BP_C, 0x0300);
		}

		// class UGE_Evo_Bio_Electric_Teeth_BiteFX_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_BiteFX_T2__GE_Evo_Bio_Electric_Teeth_BiteFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_BiteFX_T2_C, 0x0870);
		}

		// class ABP_Evo_Bio_Electric_Teeth_Explosion_T2_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Evo_Bio_Electric_Teeth_Explosion_T2__BP_Evo_Bio_Electric_Teeth_Explosion_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Evo_Bio_Electric_Teeth_Explosion_T2_C, 0x02D0);
		}

		// class UGA_Evo_Bio_Electric_Teeth_AOE_T1_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Teeth_AOE_T1__GA_Evo_Bio_Electric_Teeth_AOE_T1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bio_Electric_Teeth_AOE_T1_C, UberGraphFrame, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Teeth_AOE_T1_C, 0x0440);
		}

		// class UGE_Evo_Bio_Electric_Teeth_BiteFX_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_BiteFX_T4__GE_Evo_Bio_Electric_Teeth_BiteFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_BiteFX_T4_C, 0x0870);
		}

		// class ABP_Evo_Bio_Electric_Teeth_Explosion_T4_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Evo_Bio_Electric_Teeth_Explosion_T4__BP_Evo_Bio_Electric_Teeth_Explosion_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Evo_Bio_Electric_Teeth_Explosion_T4_C, 0x02D0);
		}

		// class UGE_Evo_Bio_Electric_Teeth_BiteFX_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_BiteFX_T3__GE_Evo_Bio_Electric_Teeth_BiteFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_BiteFX_T3_C, 0x0870);
		}

		// class ABP_Evo_Bio_Electric_Teeth_Explosion_T3_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Evo_Bio_Electric_Teeth_Explosion_T3__BP_Evo_Bio_Electric_Teeth_Explosion_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Evo_Bio_Electric_Teeth_Explosion_T3_C, 0x02D0);
		}

		// class ABP_DepthChargeExplosion_Bounty_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthChargeExplosion_Bounty__BP_DepthChargeExplosion_Bounty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthChargeExplosion_Bounty_C, 0x02D0);
		}

		// class ABP_Base_PetesBoat_V1_C : public ABP_BossBoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_PetesBoat_V1__BP_Base_PetesBoat_V1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, UberGraphFrame, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, KillshotCam, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, PeteBeam, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, BeamValid, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, UnknownData_FNWX, 0x0E21);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, PeteDot, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, SourceLoc, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, TargetLoc, 0x0E3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, CurrentFInterpTo, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, CameraMove, 0x0E4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, UnknownData_ABHL, 0x0E4D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, HarpoonCineSEQ, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, HarpoonCam, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, MotherShark, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V1_C, Pete, 0x0E68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_PetesBoat_V1_C, 0x0E70);
		}

		// class UGA_Sonar_C : public UME_GameplayAbility_Sonar
		TEST_METHOD(BlueprintGeneratedClass__GA_Sonar__GA_Sonar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Sonar_C, 0x0438);
		}

		// class UGA_Evo_Bio_Electric_Tail_T5_C : public UME_GameplayAbility_Projectiles
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Tail_T5__GA_Evo_Bio_Electric_Tail_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Tail_T5_C, 0x0458);
		}

		// class UGA_Evo_Bio_Electric_Tail_T4_C : public UME_GameplayAbility_Projectiles
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Tail_T4__GA_Evo_Bio_Electric_Tail_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Tail_T4_C, 0x0458);
		}

		// class UGA_Evo_Bio_Electric_Tail_T3_C : public UME_GameplayAbility_Projectiles
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Tail_T3__GA_Evo_Bio_Electric_Tail_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Tail_T3_C, 0x0458);
		}

		// class UAM_Lunge_T1_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_Lunge_T1__AM_Lunge_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Lunge_T1_C, 0x0620);
		}

		// class UAM_Lunge_Land_C : public UME_GameplayAbility_LandLunge
		TEST_METHOD(BlueprintGeneratedClass__AM_Lunge_Land__AM_Lunge_Land_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Lunge_Land_C, 0x0638);
		}

		// class UAM_EvadeRight_C : public UME_GameplayAbility_SharkEvade
		TEST_METHOD(BlueprintGeneratedClass__AM_EvadeRight__AM_EvadeRight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EvadeRight_C, 0x0620);
		}

		// class UAM_EvadeRight_Breaching_C : public UME_GameplayAbility_SharkEvade
		TEST_METHOD(BlueprintGeneratedClass__AM_EvadeRight_Breaching__AM_EvadeRight_Breaching_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EvadeRight_Breaching_C, 0x0620);
		}

		// class UAM_EvadeLeft_Reversed_C : public UAM_EvadeLeft_C
		TEST_METHOD(BlueprintGeneratedClass__AM_EvadeLeft_Reversed__AM_EvadeLeft_Reversed_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EvadeLeft_Reversed_C, 0x0620);
		}

		// class UAM_ChunkSequence_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_ChunkSequence__AM_ChunkSequence_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAM_ChunkSequence_C, UberGraphFrame, 0x0620);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_ChunkSequence_C, 0x0628);
		}

		// class UAM_ChunkSequence_OnLand_C : public UAM_ChunkSequence_C
		TEST_METHOD(BlueprintGeneratedClass__AM_ChunkSequence_OnLand__AM_ChunkSequence_OnLand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_ChunkSequence_OnLand_C, 0x0628);
		}

		// class UAM_ChunkSequence_Knifing_C : public UAM_ChunkSequence_C
		TEST_METHOD(BlueprintGeneratedClass__AM_ChunkSequence_Knifing__AM_ChunkSequence_Knifing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_ChunkSequence_Knifing_C, 0x0628);
		}

		// class UCreditsScreenView_BP_C : public UCreditsScreenView
		TEST_METHOD(WidgetBlueprintGeneratedClass__CreditsScreenView_BP__CreditsScreenView_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditsScreenView_BP_C, 0x02B8);
		}

		// class UAgeTierInfographic_BP_C : public UAgeTierInfographicWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AgeTierInfographic_BP__AgeTierInfographic_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographic_BP_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographic_BP_C, OutAnimation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographic_BP_C, ageglow, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographic_BP_C, Background, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAgeTierInfographic_BP_C, 0x02F0);
		}

		// class ABP_Hunter_AIController_WithEliteDivers_Dynamite_C : public ABP_Base_Hunter_AIController_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Hunter_AIController_WithEliteDivers_Dynamite__BP_Hunter_AIController_WithEliteDivers_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Hunter_AIController_WithEliteDivers_Dynamite_C, 0x07E8);
		}

		// class UGE_LMG_Damage_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_LMG_Damage__GE_LMG_Damage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_LMG_Damage_C, 0x0870);
		}

		// class UGE_AssaultRifle_Damage_Tier10_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Damage_Tier10__GE_AssaultRifle_Damage_Tier10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Damage_Tier10_C, 0x0870);
		}

		// class UBP_ElectroShieldDestroyed_Interface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BP_ElectroShieldDestroyed_Interface__BP_ElectroShieldDestroyed_Interface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ElectroShieldDestroyed_Interface_C, 0x0028);
		}

		// class ASpearProjectile_Tier3_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__SpearProjectile_Tier3__SpearProjectile_Tier3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpearProjectile_Tier3_C, UberGraphFrame, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpearProjectile_Tier3_C, 0x0278);
		}

		// class ASpearProjectile_Tier5_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__SpearProjectile_Tier5__SpearProjectile_Tier5_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpearProjectile_Tier5_C, UberGraphFrame, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpearProjectile_Tier5_C, 0x0278);
		}

		// class UControlsSettingsMenuPanel_BP_C : public UControlsSettingsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ControlsSettingsMenuPanel_BP__ControlsSettingsMenuPanel_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, ControllerImagePS5, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, ControllerImageXSX, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, DpadDownIcon, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, DpadDownIconPS, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, DpadLeftIcon, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, DpadLeftIconPS, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, DpadRightIcon, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, DpadRightIconPS, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, DpadUpIcon, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, DpadUpIconPS, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, FaceButtonBottomIcon, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, FaceButtonBottomIconPS, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, FaceButtonLeftIcon, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, FaceButtonLeftIconPS, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, FaceButtonRightIcon, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, FaceButtonRightIconPS, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, FaceButtonTopIcon, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, FaceButtonTopIconPS, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, LeftShoulderIcon, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, LeftShoulderIconPS, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, LeftStickClickIcon, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, LeftStickClickIconPS, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, LeftStickMoveIcon, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, LeftStickMoveIconPS, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, LeftTriggerIcon, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, LeftTriggerIconPS, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, RightShoulderIcon, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, RightShoulderIconPS, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, RightStickClickIcon, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, RightStickClickIconPS, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, RightStickMoveIcon, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, RightStickMoveIconPS, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, RightTriggerIcon, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, RightTriggerIconPS, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, SpecialLeftIcon, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, SpecialRightIcon, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsMenuPanel_BP_C, SpecialRightIconPS, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlsSettingsMenuPanel_BP_C, 0x06C0);
		}

		// class UGE_Evo_Shadow_Stack_Count_2_C : public UGE_Evo_Shadow_Stack_Count_1_C
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack_Count_3__GE_Evo_Shadow_Stack_Count_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_Count_2_C, 0x0870);
		}

		// class UGE_Bio_Electric_Stack_Stun_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Stack_Stun__GE_Bio_Electric_Stack_Stun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Stack_Stun_C, 0x0870);
		}

		// class UAbandonShipRagdoll_C : public UAnimNotify
		TEST_METHOD(BlueprintGeneratedClass__AbandonShipRagdoll__AbandonShipRagdoll_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbandonShipRagdoll_C, 0x0038);
		}

		// class USHK_MenuSharkBase_ABP_C : public UME_AnimInst_MenuShark
		TEST_METHOD(AnimBlueprintGeneratedClass__SHK_MenuSharkBase_ABP__SHK_MenuSharkBase_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_MenuSharkBase_ABP_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_MenuSharkBase_ABP_C, AnimGraphNode_Root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_MenuSharkBase_ABP_C, AnimGraphNode_Slot, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_MenuSharkBase_ABP_C, AnimGraphNode_SequencePlayer_6, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_MenuSharkBase_ABP_C, AnimGraphNode_SequencePlayer_5, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_MenuSharkBase_ABP_C, AnimGraphNode_SequencePlayer_4, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_MenuSharkBase_ABP_C, AnimGraphNode_SequencePlayer_3, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_MenuSharkBase_ABP_C, AnimGraphNode_SequencePlayer_2, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_MenuSharkBase_ABP_C, AnimGraphNode_SequencePlayer, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_MenuSharkBase_ABP_C, AnimGraphNode_BlendListByEnum, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_MenuSharkBase_ABP_C, AnimGraphNode_StateResult, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_MenuSharkBase_ABP_C, AnimGraphNode_StateMachine, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USHK_MenuSharkBase_ABP_C, 0x07A0);
		}

		// class ABP_Diver_BossSupport_C : public ABP_Diver_Hunter_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Diver_BossSupport__BP_Diver_BossSupport_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Diver_BossSupport_C, UberGraphFrame, 0x0F70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Diver_BossSupport_C, 0x0F78);
		}

		// class ASpearProjectile_Pete2_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__SpearProjectile_Pete2__SpearProjectile_Pete2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpearProjectile_Pete2_C, UberGraphFrame, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpearProjectile_Pete2_C, 0x0278);
		}

		// class ABP_Diver_Hunter_Elite_Pete2_C : public ABP_Diver_Hunter_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Diver_Hunter_Elite_Pete2__BP_Diver_Hunter_Elite_Pete2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Diver_Hunter_Elite_Pete2_C, 0x0F70);
		}

		// class UBP_GE_Explosion_Pete2_C : public UBP_GE_Explosion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_Explosion_Pete2__BP_GE_Explosion_Pete2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_Explosion_Pete2_C, 0x0870);
		}

		// class UBP_Speargun_Diver_Pete1_C : public UBP_Speargun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Speargun_Diver_Pete1__BP_Speargun_Diver_Pete1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Speargun_Diver_Pete1_C, 0x06E0);
		}

		// class ABP_DiverBossSupport_AIController_C : public ABP_Diver_AIController_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DiverBossSupport_AIController__BP_DiverBossSupport_AIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DiverBossSupport_AIController_C, 0x07B8);
		}

		// class UGE_Apex_KillerWhale_FeintCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Apex_KillerWhale_FeintCD_BP__GE_Apex_KillerWhale_FeintCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Apex_KillerWhale_FeintCD_BP_C, 0x0870);
		}

		// class ABP_TorpedoProjectile_C : public AME_TorpedoProjectile
		TEST_METHOD(BlueprintGeneratedClass__BP_TorpedoProjectile__BP_TorpedoProjectile_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, UberGraphFrame, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, VulnerableVFX, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, VoiceGroupComponent_BP1, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, Minimum_Speed, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, UnknownData_QDB1, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, DynamicMat, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, DeltaTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, CachedRotation, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, TargetRotation, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, IsSpun, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, UnknownData_JGI9, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, MovingRot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, UnknownData_1UJ2, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, CachedTransform, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TorpedoProjectile_C, Maximum_Speed, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TorpedoProjectile_C, 0x03A4);
		}

		// class ABP_PT_Boat_Fragment06_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PT_Boat_Fragment06__BP_PT_Boat_Fragment06_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PT_Boat_Fragment06_C, 0x0230);
		}

		// class ABP_PT_Boat_Fragment05_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PT_Boat_Fragment05__BP_PT_Boat_Fragment05_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PT_Boat_Fragment05_C, 0x0230);
		}

		// class ABP_USCG_Medium_Bounty10_Mixed_MixDivers_C : public ABP_Base_USCG_Medium_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Medium_Bounty10_Mixed_MixDivers__BP_USCG_Medium_Bounty10_Mixed_MixDivers_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Medium_Bounty10_Mixed_MixDivers_C, 0x0CDC);
		}

		// class ABP_USCG_Medium_Bounty10_Assault_MixDivers_C : public ABP_Base_USCG_Medium_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Medium_Bounty10_Assault_MixDivers__BP_USCG_Medium_Bounty10_Assault_MixDivers_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Medium_Bounty10_Assault_MixDivers_C, 0x0CDC);
		}

		// class ABP_USCG_Command_Ship_Electro_EliteDivers_LMGs_Bounty10_Boss_C : public ABP_Base_USCG_Command_Ship_Electro_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Command_Ship_Electro_EliteDivers_LMGs_Bounty10_Boss__BP_USCG_Command_Ship_Electro_EliteDivers_LMGs_Bounty10_Boss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Command_Ship_Electro_EliteDivers_LMGs_Bounty10_Boss_C, UberGraphFrame, 0x0CF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Command_Ship_Electro_EliteDivers_LMGs_Bounty10_Boss_C, 0x0CF8);
		}

		// class ABP_SkiBoat_Bounty6_Mixed_C : public ABP_Base_SkiBoat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Bounty6_Mixed__BP_SkiBoat_Bounty6_Mixed_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Bounty6_Mixed_C, 0x0CD4);
		}

		// class ABP_SkiBoat_Bounty4_Boss_C : public ABP_Base_SkiBoat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Bounty4_Boss__BP_SkiBoat_Bounty4_Boss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SkiBoat_Bounty4_Boss_C, UnknownData_VJ85, 0x0CD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SkiBoat_Bounty4_Boss_C, UberGraphFrame, 0x0CD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Bounty4_Boss_C, 0x0CE0);
		}

		// class ABP_Skiff_Bounty3_Assault_C : public ABP_Base_Skiff_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Bounty3_Assault__BP_Skiff_Bounty3_Assault_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Bounty3_Assault_C, 0x0CDC);
		}

		// class ABP_Skiff_Bounty2_Spearguns_C : public ABP_Base_Skiff_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Bounty2_Spearguns__BP_Skiff_Bounty2_Spearguns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Bounty2_Spearguns_C, 0x0CDC);
		}

		// class ABP_Skiff_Bounty2_Boss_C : public ABP_Base_Skiff_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Bounty2_Boss__BP_Skiff_Bounty2_Boss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Skiff_Bounty2_Boss_C, UnknownData_W1EW, 0x0CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Skiff_Bounty2_Boss_C, UberGraphFrame, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Bounty2_Boss_C, 0x0CE8);
		}

		// class UPlayerCapturedByPete_Widget_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlayerCapturedByPete_Widget_BP__PlayerCapturedByPete_Widget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCapturedByPete_Widget_BP_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCapturedByPete_Widget_BP_C, FadeOut, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCapturedByPete_Widget_BP_C, FadeIn, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCapturedByPete_Widget_BP_C, Captured_Title, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCapturedByPete_Widget_BP_C, Text_PlayerCaptured, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerCapturedByPete_Widget_BP_C, 0x0268);
		}

		// class ABP_SkiBoat_AI_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_AI_Controller__BP_SkiBoat_AI_Controller_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SkiBoat_AI_Controller_C, LastPathTarget, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_AI_Controller_C, 0x07F0);
		}

		// class ABP_SmallFishingBoat_Debris_Roof_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmallFishingBoat_Debris_Roof__BP_SmallFishingBoat_Debris_Roof_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmallFishingBoat_Debris_Roof_C, 0x0230);
		}

		// class ABP_SmallFishingBoat_Debris_Radar_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmallFishingBoat_Debris_Radar__BP_SmallFishingBoat_Debris_Radar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmallFishingBoat_Debris_Radar_C, 0x0230);
		}

		// class ABP_YachtAIController_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_YachtAIController__BP_YachtAIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_YachtAIController_C, 0x07E8);
		}

		// class UGE_AssaultRifle_Damage_Pete1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Damage_Pete1__GE_AssaultRifle_Damage_Pete1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Damage_Pete1_C, 0x0870);
		}

		// class ABP_DynamiteExplosion_Pete1Battle_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_DynamiteExplosion_Pete1Battle__BP_DynamiteExplosion_Pete1Battle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DynamiteExplosion_Pete1Battle_C, 0x02D0);
		}

		// class UBP_Dynamite_Pete3_C : public UBP_Dynamite_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Dynamite_Pete3__BP_Dynamite_Pete3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Dynamite_Pete3_C, 0x06E0);
		}

		// class ASpearProjectile_BossSupport_C : public ASpearProjectile_Tier2_C
		TEST_METHOD(BlueprintGeneratedClass__SpearProjectile_BossSupport__SpearProjectile_BossSupport_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpearProjectile_BossSupport_C, UberGraphFrame, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpearProjectile_BossSupport_C, 0x0280);
		}

		// class UHunterSupport_DepthCharges_BP_C : public UHunterSupportEntry
		TEST_METHOD(BlueprintGeneratedClass__HunterSupport_DepthCharges_BP__HunterSupport_DepthCharges_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHunterSupport_DepthCharges_BP_C, 0x0068);
		}

		// class UBP_PlayerSharkInput_C : public UME_InputComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerSharkInput__BP_PlayerSharkInput_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerSharkInput_C, 0x01B8);
		}

		// class UGE_SprintMaxSpeed_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SprintMaxSpeed_T3__GE_SprintMaxSpeed_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SprintMaxSpeed_T3_C, 0x0870);
		}

		// class ABP_Base_Airboat_Bounty_C : public ABP_Base_Airboat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Airboat_Bounty__BP_Base_Airboat_Bounty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Airboat_Bounty_C, 0x0CDC);
		}

		// class ABP_Yacht_Bounty8_Boss_C : public ABP_Base_Hunter_Yacht_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Yacht_Bounty8_Boss__BP_Yacht_Bounty8_Boss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Yacht_Bounty8_Boss_C, UberGraphFrame, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Yacht_Bounty8_Boss_C, 0x0CE8);
		}

		// class UGA_M_HammerHead_Feint_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_HammerHead_Feint_BP__GA_M_HammerHead_Feint_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_HammerHead_Feint_BP_C, 0x0510);
		}

		// class UGA_M_HammerHead_EvadeUp_BP_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_M_HammerHead_EvadeUp_BP__GA_M_HammerHead_EvadeUp_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_HammerHead_EvadeUp_BP_C, 0x05E0);
		}

		// class UGE_HammerHead_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HammerHead_Native__GE_HammerHead_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HammerHead_Native_C, 0x0870);
		}

		// class UGA_M_KillerWhale_ThrashV2_BP_C : public UGA_M_ThrashBase_V2_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_KillerWhale_ThrashV2_BP__GA_M_KillerWhale_ThrashV2_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_KillerWhale_ThrashV2_BP_C, 0x0510);
		}

		// class UGA_M_KillerWhale_Feint_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_KillerWhale_Feint_BP__GA_M_KillerWhale_Feint_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_KillerWhale_Feint_BP_C, 0x0510);
		}

		// class UGA_M_KillerWhale_Bite_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_KillerWhale_Bite_BP__GA_M_KillerWhale_Bite_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_KillerWhale_Bite_BP_C, 0x0510);
		}

		// class UGE_KillerWhale_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhale_Native__GE_KillerWhale_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhale_Native_C, 0x0870);
		}

		// class UGA_M_KillerWhale_ThrashRelease_BP_C : public UGA_M_ThrashRelease_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_KillerWhale_ThrashRelease_BP__GA_M_KillerWhale_ThrashRelease_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_KillerWhale_ThrashRelease_BP_C, 0x05E0);
		}

		// class UGA_M_KillerWhale_Recovery_BP_C : public UGA_M_Base_Recovery_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_KillerWhale_Recovery_BP__GA_M_KillerWhale_Recovery_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_KillerWhale_Recovery_BP_C, 0x05E0);
		}

		// class UGA_M_Apex_KillerWhale_Tailwhip_BP_C : public UME_GameplayAbility_WildlifeDirectionalLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Apex_KillerWhale_Tailwhip_BP__GA_M_Apex_KillerWhale_Tailwhip_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Apex_KillerWhale_Tailwhip_BP_C, 0x0580);
		}

		// class UGE_MakoBiteDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MakoBiteDamage_BP__GE_MakoBiteDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MakoBiteDamage_BP_C, 0x0870);
		}

		// class UGA_M_Mako_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Mako_EvadeRight_BP__GA_M_Mako_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Mako_EvadeRight_BP_C, 0x05E0);
		}

		// class UGA_M_Mako_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Mako_EvadeLeft_BP__GA_M_Mako_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Mako_EvadeLeft_BP_C, 0x05E0);
		}

		// class UGA_M_Mako_EvadeDown_BP_C : public UGA_M_Mako_EvadeUp_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Mako_EvadeDown_BP__GA_M_Mako_EvadeDown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Mako_EvadeDown_BP_C, 0x05E0);
		}

		// class UGA_M_Mako_ThrashRelease_BP_C : public UGA_M_ThrashRelease_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Mako_ThrashRelease_BP__GA_M_Mako_ThrashRelease_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Mako_ThrashRelease_BP_C, 0x05E0);
		}

		// class AAIController_Mako_BP_C : public AAIController_Hostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Mako_BP__AIController_Mako_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Mako_BP_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Mako_BP_C, 0x07D0);
		}

		// class AAIController_Mako_Apex_BP_C : public AAIController_Mako_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Mako_Apex_BP__AIController_Mako_Apex_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Mako_Apex_BP_C, UberGraphFrame, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Mako_Apex_BP_C, 0x07D8);
		}

		// class UGE_SpermWhale_ThrashDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhale_ThrashDamage_BP__GE_SpermWhale_ThrashDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhale_ThrashDamage_BP_C, 0x0870);
		}

		// class UGE_SpermWhaleVulnerableTaunt_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhaleVulnerableTaunt_BP__GE_SpermWhaleVulnerableTaunt_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhaleVulnerableTaunt_BP_C, 0x0870);
		}

		// class UGE_SpermWhale_BiteDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhale_BiteDamage_BP__GE_SpermWhale_BiteDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhale_BiteDamage_BP_C, 0x0870);
		}

		// class UGE_SpermWhale_ShakeOffCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhale_ShakeOffCD_BP__GE_SpermWhale_ShakeOffCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhale_ShakeOffCD_BP_C, 0x0870);
		}

		// class UGA_M_SpermWhale_Tailwhip_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_SpermWhale_Tailwhip_BP__GA_M_SpermWhale_Tailwhip_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_SpermWhale_Tailwhip_BP_C, 0x0510);
		}

		// class UGA_Bio_Electric_Body_AddResource_Dam_T5_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AddResource_Dam_T5__GA_Bio_Electric_Body_AddResource_Dam_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AddResource_Dam_T5_C, 0x0438);
		}

		// class UGE_Bio_Electric_Body_Bonus_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_Bonus_T5__GE_Bio_Electric_Body_Bonus_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_Bonus_T5_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_T4__GE_Bio_Electric_Body_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_T4_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_LungeBonus_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_LungeBonus_T4__GE_Bio_Electric_Body_LungeBonus_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_LungeBonus_T4_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Fins_Immunity_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Fins_Immunity_T4__GE_Evo_Bio_Electric_Fins_Immunity_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Fins_Immunity_T4_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Head_StunCharacter_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_StunCharacter_T1__GE_Evo_Bio_Electric_Head_StunCharacter_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_StunCharacter_T1_C, 0x0870);
		}

		// class UGA_Evo_Bone_Head_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Head_T1__GA_Evo_Bone_Head_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Head_T1_C, 0x0400);
		}

		// class UGE_Evo_Bone_Fins_Defense_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Defense_T5__GE_Evo_Bone_Fins_Defense_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Defense_T5_C, 0x0870);
		}

		// class UGE_Evo_Adrenal_Gland5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Adrenal_Gland5__GE_Evo_Adrenal_Gland5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Adrenal_Gland5_C, 0x0870);
		}

		// class UGE_Evo_Brutal_Muscles1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Brutal_Muscles1__GE_Evo_Brutal_Muscles1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Brutal_Muscles1_C, 0x0870);
		}

		// class UGA_Evo_Bone_Head_T2_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Head_T2__GA_Evo_Bone_Head_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Head_T2_C, 0x0400);
		}

		// class UGA_Evo_Bone_Head_T3_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Head_T3__GA_Evo_Bone_Head_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Head_T3_C, 0x0400);
		}

		// class UGE_Evo_Hearty4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Hearty4__GE_Evo_Hearty4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Hearty4_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Lunge_ImpactVFX_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Lunge_ImpactVFX_T4__GE_Evo_Shadow_Body_Lunge_ImpactVFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Lunge_ImpactVFX_T4_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_AddResource_Damage_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_AddResource_Damage_T2__GE_Evo_Shadow_Body_AddResource_Damage_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_AddResource_Damage_T2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Bonus_End_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Bonus_End_T2__GE_Evo_Shadow_Body_Bonus_End_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Bonus_End_T2_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Body_Lunge_ImpactVFX_T2_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_Lunge_ImpactVFX_T2__GA_Evo_Shadow_Body_Lunge_ImpactVFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_Lunge_ImpactVFX_T2_C, 0x05E0);
		}

		// class ABP_EVO_Shadow_Tail_AOE_T4_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Tail_AOE_T4__BP_EVO_Shadow_Tail_AOE_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Tail_AOE_T4_C, 0x02D0);
		}

		// class ABP_ManeaterGameMode_C : public AME_GameMode
		TEST_METHOD(BlueprintGeneratedClass__BP_ManeaterGameMode__BP_ManeaterGameMode_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ManeaterGameMode_C, UberGraphFrame, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ManeaterGameMode_C, DefaultSceneRoot, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ManeaterGameMode_C, Gate, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ManeaterGameMode_C, PreviousApexCinematicViewed, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ManeaterGameMode_C, SkyActorReference, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ManeaterGameMode_C, ApexActorRef, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ManeaterGameMode_C, 0x0700);
		}

		// class APetesHandGoreChunk_BP_C : public AME_GoreChunk
		TEST_METHOD(BlueprintGeneratedClass__PetesHandGoreChunk_BP__PetesHandGoreChunk_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APetesHandGoreChunk_BP_C, UberGraphFrame, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APetesHandGoreChunk_BP_C, ParticleSystem, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APetesHandGoreChunk_BP_C, Widget, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APetesHandGoreChunk_BP_C, 0x02F8);
		}

		// class ANightTimeActivityBase_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__NightTimeActivityBase_BP__NightTimeActivityBase_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivityBase_BP_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivityBase_BP_C, DefaultSceneRoot, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivityBase_BP_C, NewVar_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivityBase_BP_C, GameMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivityBase_BP_C, AlawysOn_, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivityBase_BP_C, UnknownData_7NNO, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivityBase_BP_C, OtherActorsToShow, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANightTimeActivityBase_BP_C, 0x0258);
		}

		// class AWC_Sub_Explorable_Paths_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__WC_Sub_Explorable_Paths__WC_Sub_Explorable_Paths_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWC_Sub_Explorable_Paths_C, 0x0228);
		}

		// class AWorldMap_Landscape_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__WorldMap_Landscape__WorldMap_Landscape_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Landscape_C, UberGraphFrame, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldMap_Landscape_C, 0x0230);
		}

		// class AWorldMap_P_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__WorldMap_P__WorldMap_P_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_P_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_P_C, GEHandle, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_P_C, LoadedLevel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_P_C, CurrentRegion, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_P_C, UnknownData_W3H9, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_P_C, cam3_DMIUW_ExecuteUbergraph_WorldMap_P_RefProperty, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_P_C, cam1_DMI1_ExecuteUbergraph_WorldMap_P_RefProperty, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_P_C, cam2_DMI2_ExecuteUbergraph_WorldMap_P_RefProperty, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldMap_P_C, 0x0260);
		}

		// class AFSH_ExploreGrouper_Small_BP_C : public AFSH_Grouper_Small_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_ExploreGrouper_Small_BP__FSH_ExploreGrouper_Small_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_ExploreGrouper_Small_BP_C, 0x1050);
		}

		// class UBP_WeaponSpeargunTranq_C : public UME_WeaponComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_WeaponSpeargunTranq__BP_WeaponSpeargunTranq_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WeaponSpeargunTranq_C, 0x06E0);
		}

		// class UGE_Swordfish_FeintCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Swordfish_FeintCD_BP__GE_Swordfish_FeintCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Swordfish_FeintCD_BP_C, 0x0870);
		}

		// class UGE_Swordfish_BiteCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Swordfish_BiteCD_BP__GE_Swordfish_BiteCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Swordfish_BiteCD_BP_C, 0x0870);
		}

		// class UCanoe_Oar_C : public UME_PassengerAttachment
		TEST_METHOD(BlueprintGeneratedClass__Canoe_Oar__Canoe_Oar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanoe_Oar_C, 0x06E0);
		}

		// class ABP_DepthChargeExplosion_Pete3_C : public ABP_DepthChargeExplosion_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthChargeExplosion_Pete3__BP_DepthChargeExplosion_Pete3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthChargeExplosion_Pete3_C, 0x02D0);
		}

		// class ABP_Tikibar_Fragment9_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment9__BP_Tikibar_Fragment9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment9_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment8_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment8__BP_Tikibar_Fragment8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment8_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment6__BP_Tikibar_Fragment6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment6_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment5__BP_Tikibar_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment5_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment4__BP_Tikibar_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment4_C, 0x0230);
		}

		// class ABP_PeteSupport_Battle3_Phase2_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_PeteSupport_Battle3_Phase2__BP_PeteSupport_Battle3_Phase2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PeteSupport_Battle3_Phase2_C, 0x07E8);
		}

		// class ABP_Superyacht_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Superyacht_Controller__BP_Superyacht_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Superyacht_Controller_C, 0x07E8);
		}

		// class ABP_HunterDiver_Automatic_C : public ABP_Diver_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterDiver_Automatic__BP_HunterDiver_Automatic_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HunterDiver_Automatic_C, BP_AssaultRifle, 0x0F60);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HunterDiver_Automatic_C, 0x0F68);
		}

		// class ABP_Base_SportFishingBoat_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_SportFishingBoat_Controller__BP_Base_SportFishingBoat_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_SportFishingBoat_Controller_C, 0x07E8);
		}

		// class ABP_Base_Small_FishingBoat_Objective_C : public ABP_Small_FishingBoat_Bounty_Mixed_Dynamite_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Small_FishingBoat_Objective__BP_Base_Small_FishingBoat_Objective_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Small_FishingBoat_Objective_C, 0x0CDC);
		}

		// class ABP_Skiff_SeatPiece2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_SeatPiece2__BP_Skiff_SeatPiece2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_SeatPiece2_C, 0x0230);
		}

		// class ABP_Skiff_Bench_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Bench__BP_Skiff_Bench_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Skiff_Bench_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Bench_C, 0x0238);
		}

		// class ABP_Rowboat_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rowboat_Fragment3__BP_Rowboat_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Rowboat_Fragment3_C, 0x0230);
		}

		// class ABP_Rowboat_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rowboat_Fragment2__BP_Rowboat_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Rowboat_Fragment2_C, 0x0230);
		}

		// class ABP_Rowboat_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rowboat_Fragment1__BP_Rowboat_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Rowboat_Fragment1_C, 0x0230);
		}

		// class UGA_M_Marlin_Recovery_BP_C : public UGA_M_Base_Recovery_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Marlin_Recovery_BP__GA_M_Marlin_Recovery_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Marlin_Recovery_BP_C, 0x05E0);
		}

		// class UGE_MarlinLungeCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MarlinLungeCooldown_BP__GE_MarlinLungeCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MarlinLungeCooldown_BP_C, 0x0870);
		}

		// class UGE_Marlin_BiteDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Marlin_BiteDamage_BP__GE_Marlin_BiteDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Marlin_BiteDamage_BP_C, 0x0870);
		}

		// class ABP_WaterTrike_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WaterTrike_Fragment6__BP_WaterTrike_Fragment6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WaterTrike_Fragment6_C, 0x0230);
		}

		// class ABP_FishingBoat_AI_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingBoat_AI_Controller__BP_FishingBoat_AI_Controller_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FishingBoat_AI_Controller_C, LastPathTarget, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingBoat_AI_Controller_C, 0x07F0);
		}

		// class ABP_Kayak_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Kayak_Fragment4__BP_Kayak_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Kayak_Fragment4_C, 0x0230);
		}

		// class ABP_Kayak_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Kayak_Fragment2__BP_Kayak_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Kayak_Fragment2_C, 0x0230);
		}

		// class ABP_Catamaran_Fragment8_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Catamaran_Fragment8__BP_Catamaran_Fragment8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Catamaran_Fragment8_C, 0x0230);
		}

		// class UGA_M_Spade_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Spade_EvadeRight_BP__GA_M_Spade_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Spade_EvadeRight_BP_C, 0x05E0);
		}

		// class UGA_M_Spade_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Spade_EvadeLeft_BP__GA_M_Spade_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Spade_EvadeLeft_BP_C, 0x05E0);
		}

		// class UGA_M_Swordfish_Recovery_BP_C : public UGA_M_Base_Recovery_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Swordfish_Recovery_BP__GA_M_Swordfish_Recovery_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Swordfish_Recovery_BP_C, 0x05E0);
		}

		// class UGA_M_Swordfish_LandLunge_BP_C : public UGA_M_LandLunge_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Swordfish_LandLunge_BP__GA_M_Swordfish_LandLunge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Swordfish_LandLunge_BP_C, 0x05E0);
		}

		// class AFSH_Grouper_Base_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Grouper_Base_BP__FSH_Grouper_Base_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Grouper_Base_BP_C, VoiceGroupComponent_BP, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Grouper_Base_BP_C, TwAkEmitterArray, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Grouper_Base_BP_C, 0x1050);
		}

		// class AFSH_Grouper_Small_BP_C : public AFSH_Grouper_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Grouper_Small_BP__FSH_Grouper_Small_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Grouper_Small_BP_C, 0x1050);
		}

		// class AFSH_ParrotFish_Med_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_ParrotFish_Med_BP__FSH_ParrotFish_Med_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_ParrotFish_Med_BP_C, VoiceGroupComponent_BP1, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_ParrotFish_Med_BP_C, VoiceGroupComponent_BP, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_ParrotFish_Med_BP_C, 0x1050);
		}

		// class AFSH_ParrotFish_Large_BP_C : public AFSH_ParrotFish_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_ParrotFish_Large_BP__FSH_ParrotFish_Large_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_ParrotFish_Large_BP_C, 0x1050);
		}

		// class ABP_Base_DepthFishingBoat_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_DepthFishingBoat_Empty__BP_Base_DepthFishingBoat_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_DepthFishingBoat_Empty_C, ME_DistanceSignificance, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_DepthFishingBoat_Empty_C, 0x0C00);
		}

		// class ABP_UnicornRaft_DepthCharge_C : public ABP_Base_UnicornRaft_C
		TEST_METHOD(BlueprintGeneratedClass__BP_UnicornRaft_DepthCharge__BP_UnicornRaft_DepthCharge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_UnicornRaft_DepthCharge_C, 0x0CDC);
		}

		// class ABP_FishingTrawler_Objective_SE_C : public ABP_Base_FishingTrawler_Objective_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawler_Objective_SE__BP_FishingTrawler_Objective_SE_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawler_Objective_SE_C, 0x0CD4);
		}

		// class ABP_DiverController_C : public ABP_HumanController_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DiverController__BP_DiverController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DiverController_C, ThreatAlertLevelKeyName_1, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DiverController_C, 0x07F8);
		}

		// class ABP_AISharkBase_C : public AME_SharkCharacter
		TEST_METHOD(BlueprintGeneratedClass__BP_AISharkBase__BP_AISharkBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AISharkBase_C, UberGraphFrame, 0x0FB0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AISharkBase_C, 0x0FB8);
		}

		// class ABP_PontoonBoat_Fragment18_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment18__BP_PontoonBoat_Fragment18_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment18_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment18_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment16_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment16__BP_PontoonBoat_Fragment16_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment16_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment16_C, 0x0238);
		}

		// class ABP_Base_TikiBoat_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_TikiBoat__BP_Base_TikiBoat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_TikiBoat_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_TikiBoat_C, 0x0CD4);
		}

		// class ABP_Base_Superyacht_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Superyacht__BP_Base_Superyacht_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Superyacht_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Superyacht_C, 0x0CD4);
		}

		// class ABP_SkiBoat_Objective_IC_C : public ABP_Base_SkiBoat_Objective_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Objective_IC__BP_SkiBoat_Objective_IC_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Objective_IC_C, 0x0CD4);
		}

		// class ABP_Sailboat_Fragment5_Yellow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment5_Yellow__BP_Sailboat_Fragment5_Yellow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment5_Yellow_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment4_Yellow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment4_Yellow__BP_Sailboat_Fragment4_Yellow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment4_Yellow_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment3_Yellow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment3_Yellow__BP_Sailboat_Fragment3_Yellow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment3_Yellow_C, 0x0230);
		}

		// class ABP_BoatBaseNoNav_C : public AME_BoatPawnNoNav
		TEST_METHOD(BlueprintGeneratedClass__BP_BoatBaseNoNav__BP_BoatBaseNoNav_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BoatBaseNoNav_C, 0x0BF8);
		}

		// class ABP_Base_Sailboat_Yellow_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Sailboat_Yellow_Empty__BP_Base_Sailboat_Yellow_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Sailboat_Yellow_Empty_C, ME_DistanceSignificance_1, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Sailboat_Yellow_Empty_C, LastHitTime_0_1, 0x0C00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Sailboat_Yellow_Empty_C, 0x0C04);
		}

		// class ABP_Base_Sailboat_Green_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Sailboat_Green_Empty__BP_Base_Sailboat_Green_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Sailboat_Green_Empty_C, ME_DistanceSignificance_1, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Sailboat_Green_Empty_C, LastHitTime_0_1, 0x0C00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Sailboat_Green_Empty_C, 0x0C04);
		}

		// class ABP_Base_PaddleBoatEmpty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_PaddleBoatEmpty__BP_Base_PaddleBoatEmpty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PaddleBoatEmpty_C, ME_DistanceSignificance, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_PaddleBoatEmpty_C, 0x0C00);
		}

		// class UFSH_SwordFish_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__FSH_SwordFish_ABP__FSH_SwordFish_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFSH_SwordFish_ABP_C, UnknownData_JOQW, 0x5C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFSH_SwordFish_ABP_C, UberGraphFrame, 0x5C90);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFSH_SwordFish_ABP_C, 0x5C98);
		}

		// class APipeSpline_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PipeSpline_BP__PipeSpline_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, TwAkSplineProximityEffects, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, Spline, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, SplineMeshArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, SplineMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, GenerateDetail, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, UnknownData_B2G9, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, DetailMesh, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, DetailSpacing, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, DetailZOffset, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, DetailXStart, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, DetailXRandomOffset, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, DetailYStart, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, DetailYRandomOffset, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, DetailDrawScaleMAX, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, UnknownData_U4AA, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, SplineMeshTempArray, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, NormalizeTangents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, UnknownData_M5M5, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, Length, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, MeshTileLength, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, Segments, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, CurrentIndex, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, UnknownData_VNJX, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, CurrentMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, MeshIndex, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, CurrentPointDistance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, NextPointDistance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, Roll, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, StartScale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, EndScale, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, DetailDrawScaleMIN, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, DetailMaxDrawDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, SplineMaxDrawDistance, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, StartDrawIndex, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, Last_Draw_Index, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, SplineScale, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, UpdateSplineMesh, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, UnknownData_K4ZA, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, TEMPStaticMeshLocation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, TEMPStaticMesh, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, TEMPInstanceComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, InstanceGroup, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, TEMPNumberMeshToSpawn, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, TEMPAddMeshToNewGroup_, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, UnknownData_D567, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, PipeSplineInstanceST, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, TEMPSplineInstance, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, TempStaticMeshST, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, MeshGenerationSeed, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, Detail_Percentage, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, UnknownData_6KFS, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, Hierarchical_Instance_Array, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, TEMPMeshArray, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, TEMPRotation, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, SpawnLights_, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, UnknownData_47M1, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, BuiltSplineMesh, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, LightSocketTransform, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, SpawnedLights, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, LightInfo_DT, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, TableRowName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, LightInformationDTRow, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, UnknownData_RXND, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, SplineMat1Override, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, SplineMat2Override, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, SplineMat3Override, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeSpline_BP_C, CoverMeshOffset, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APipeSpline_BP_C, 0x048C);
		}

		// class APipeJunction_Grotto_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PipeJunction_Grotto_BP__PipeJunction_Grotto_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Trash_Particle_SM, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Trashburg_FX_SM, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Algae_Cump_LRG_SM8, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Algae_Cump_LRG_SM7, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Algae_Cump_LRG_SM6, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Algae_Cump_LRG_SM5, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Algae_Cump_LRG_SM4, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Algae_Cump_LRG_SM3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Algae_Cump_LRG_SM2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Algae_Cump_LRG_SM1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Algae_Cump_LRG_SM, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Sewer_Junction_Ribs_SM, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_T, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_B, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_13, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_12, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_11, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_10, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_9, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, RightCap_3, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_8, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_7, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_6, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_5, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_4, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_3, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Cap_Light_2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Sewer_Junction_LRG_Deco_SM, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Box, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, TwAkSplineProximityEffects, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, LargePipe, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, NoMeshZone, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, TopCap, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, BottomCap, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, LeftCap_4, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, LeftCap_3, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, LeftCap_2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, RightCap_2, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, RightCap_4, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, BackCap_2, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, BackCap_3, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, BackCap_4, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, FrontCap_4, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, FrontCap_3, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, FrontCap_2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, PipeJunction, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, DefaultSceneRoot, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Sides_to_Open, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, TEMPSidestoOpen, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, GenerateDetail, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, UnknownData_AK5I, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Object_MinZ, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Object_Min_X, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Bounds_Min_Y, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Object_Min_Y, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, BoundsMinX, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, BoundsMaxX, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, BoundsMaxY, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, BoundsZ, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, UnknownData_HLX9, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, GridpointArray, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, GridPointSpacing, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, TEMPXRow, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, TEMPYRow, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, DetailDensity__, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, TEMPDetailMesh, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, DetailMesh, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, StoredMeshVectors, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, DetailMaxDrawDistance, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, DetailScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, NoZoneVector, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, NoZoneMaxExtents, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, BottomHOleOpen, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Constructing_, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, ShowLargePipe_, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, RemoveCenterMesh, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, UnknownData_MCIR, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, DetailMeshInstanceST, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, InstanceGroup, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, Number_of_MeshTospawn, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, TEMPInstanceComponent, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, SpawnedMeshArray, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, PipeSplineInstanceST, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, DetailMeshArray, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, TEMPNumberMeshToSpawn, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, UnknownData_6P3U, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, TEMPStaticMeshLocation, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, TempStaticMeshST, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, MeshGenerationSeed, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, HierarchicalInstanceArray, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, TEMPDetailZ, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, UnknownData_ZNUZ, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, TEMPMeshArray, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, GridXOffset, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, GridYOffset, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, UpdateBool, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, DisableAllLightGen, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, UnknownData_9WYR, 0x051A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, SpawnLightTransforms, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, SewerLightToSpawn, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, LightMaterial, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, SecondaryLighttoSpawn, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, SecondaryLightMaterial, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, SecondaryLightTransforms, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, JunctionNumber, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, UnknownData_7G87, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, SewerRingMesh, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, SewerRingMAT, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, CurrentRingMAT, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_Grotto_BP_C, ExitRingColor, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APipeJunction_Grotto_BP_C, 0x0590);
		}

		// class ABP_WhippableDecorationBase_C : public AME_WhippableActorBase
		TEST_METHOD(BlueprintGeneratedClass__BP_WhippableDecorationBase__BP_WhippableDecorationBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WhippableDecorationBase_C, UberGraphFrame, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WhippableDecorationBase_C, Widget, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_WhippableDecorationBase_C, WidgetIndex, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WhippableDecorationBase_C, 0x038C);
		}

		// class APrologue_Sub_HD_Env_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_HD_Env__Prologue_Sub_HD_Env_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_HD_Env_C, 0x0228);
		}

		// class AAmbienceHeatmap_BP_C : public ATwAmbienceMap
		TEST_METHOD(BlueprintGeneratedClass__AmbienceHeatmap_BP__AmbienceHeatmap_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbienceHeatmap_BP_C, UberGraphFrame, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbienceHeatmap_BP_C, DefaultSceneRoot, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbienceHeatmap_BP_C, 0x0400);
		}

		// class ABP_P_Ambient_Trash_Kickup_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_P_Ambient_Trash_Kickup__BP_P_Ambient_Trash_Kickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_P_Ambient_Trash_Kickup_C, 0x0280);
		}

		// class ABP_OilStreamTHICK01_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_OilStreamTHICK01_PS__BP_OilStreamTHICK01_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_OilStreamTHICK01_PS_C, 0x0280);
		}

		// class ABP_Anemone_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Anemone__BP_Anemone_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Anemone_C, 0x0280);
		}

		// class ALG_Light_Tower_Construction_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_Light_Tower_Construction__LG_Light_Tower_Construction_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Light_Tower_Construction_C, 0x0238);
		}

		// class ALG_DockGasStation_DoorLight_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_DockGasStation_DoorLight__LG_DockGasStation_DoorLight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_DockGasStation_DoorLight_C, 0x0238);
		}

		// class ALG_Amber_Construction_BarrierLight_C : public ALG_Pointlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_Amber_Construction_BarrierLight__LG_Amber_Construction_BarrierLight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Amber_Construction_BarrierLight_C, 0x0238);
		}

		// class ABP_SeaLab_Radar_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_SeaLab_Radar__BP_SeaLab_Radar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SeaLab_Radar_C, 0x0280);
		}

		// class ABP_Diver_AIController_Hunter_Explore_C : public ABP_Diver_AIController_Hunter_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Diver_AIController_Hunter_Explore__BP_Diver_AIController_Hunter_Explore_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Diver_AIController_Hunter_Explore_C, 0x07B8);
		}

		// class ASB_Sub_LD_Env_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__SB_Sub_LD_Env__SB_Sub_LD_Env_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASB_Sub_LD_Env_C, 0x0228);
		}

		// class ADO_Sub_Cine_Landmarks_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DO_Sub_Cine_Landmarks__DO_Sub_Cine_Landmarks_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_Cine_Landmarks_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_Cine_Landmarks_C, Cine_Landmark_DO_Museum_SEQ_2_ExecuteUbergraph_DO_Sub_Cine_Landmarks_RefProperty, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_Cine_Landmarks_C, Cine_Landmark_DO_SeaSponge_SEQ_5_ExecuteUbergraph_DO_Sub_Cine_Landmarks_RefProperty, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_Cine_Landmarks_C, Cine_Landmark_DO_SpaceFairing_SEQ2_2_ExecuteUbergraph_DO_Sub_Cine_Landmarks_RefProperty, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_Cine_Landmarks_C, Cine_Landmark_DO_ForgottenWar_SEQ_2_ExecuteUbergraph_DO_Sub_Cine_Landmarks_RefProperty, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_Cine_Landmarks_C, Cine_Landmark_DO_Kaiju_SEQ_5_ExecuteUbergraph_DO_Sub_Cine_Landmarks_RefProperty, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_Cine_Landmarks_C, Cine_Landmark_DO_Replica_SEQ_9_ExecuteUbergraph_DO_Sub_Cine_Landmarks_RefProperty, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_Cine_Landmarks_C, Cine_Landmark_DO_MyLawn_SEQ_12_ExecuteUbergraph_DO_Sub_Cine_Landmarks_RefProperty, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_Cine_Landmarks_C, Cine_Landmark_DO_GoneFishin_SEQ_15_ExecuteUbergraph_DO_Sub_Cine_Landmarks_RefProperty, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_Cine_Landmarks_C, Cine_Landmark_DO_Treasure_SEQ_2_ExecuteUbergraph_DO_Sub_Cine_Landmarks_RefProperty, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADO_Sub_Cine_Landmarks_C, 0x0278);
		}

		// class ADO_Sub_LD_Env_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DO_Sub_LD_Env__DO_Sub_LD_Env_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADO_Sub_LD_Env_C, 0x0228);
		}

		// class ADO_Sub_Landscape_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DO_Sub_Landscape__DO_Sub_Landscape_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADO_Sub_Landscape_C, 0x0228);
		}

		// class ALG_DMI_Observation_TEAL_C : public ALG_Pointlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_DMI_Observation_TEAL__LG_DMI_Observation_TEAL_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_DMI_Observation_TEAL_C, 0x0238);
		}

		// class ALG_Billboard_Lights_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_Billboard_Lights__LG_Billboard_Lights_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Billboard_Lights_C, 0x0238);
		}

		// class ATRT_ExploreSmall_Turtle_BP_C : public ATRT_Small_Turtle_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TRT_ExploreSmall_Turtle_BP__TRT_ExploreSmall_Turtle_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATRT_ExploreSmall_Turtle_BP_C, 0x1050);
		}

		// class ADO_Sub_Paths1_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DO_Sub_Paths1__DO_Sub_Paths1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADO_Sub_Paths1_C, 0x0228);
		}

		// class ABP_Seagulls_Circling_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Seagulls_Circling_PS__BP_Seagulls_Circling_PS_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Seagulls_Circling_PS_C, TwAkEmitterArray, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Seagulls_Circling_PS_C, 0x0288);
		}

		// class ABP_Seagull_Standing_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Seagull_Standing_PS__BP_Seagull_Standing_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Seagull_Standing_PS_C, 0x0280);
		}

		// class ABP_CaveCurrent_OpeningUpSuction_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_CaveCurrent_OpeningUpSuction__BP_CaveCurrent_OpeningUpSuction_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CaveCurrent_OpeningUpSuction_C, 0x0280);
		}

		// class ABP_Underwater_Trash_Dynamic_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Underwater_Trash_Dynamic__BP_Underwater_Trash_Dynamic_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Underwater_Trash_Dynamic_C, 0x0280);
		}

		// class ABP_Grotto_Spray_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Grotto_Spray_PS__BP_Grotto_Spray_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grotto_Spray_PS_C, 0x0280);
		}

		// class AFSH_ParrotFish_ExploreMed_BP_C : public AFSH_ParrotFish_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_ParrotFish_ExploreMed_BP__FSH_ParrotFish_ExploreMed_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_ParrotFish_ExploreMed_BP_C, 0x1050);
		}

		// class ADO_Sub_NightLighting_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DO_Sub_NightLighting__DO_Sub_NightLighting_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_NightLighting_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_NightLighting_C, GameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_NightLighting_C, DOSpotLights, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADO_Sub_NightLighting_C, DOPointLights, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADO_Sub_NightLighting_C, 0x0258);
		}

		// class ABP_Roadway_Amber_Flares_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Roadway_Amber_Flares__BP_Roadway_Amber_Flares_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Roadway_Amber_Flares_C, 0x0280);
		}

		// class UMovieSceneCaptureProtocolBase : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_Y2GE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, State, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_S4J7, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0058);
		}

		// class UMovieSceneImageCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0058);
		}

		// class UFrameGrabberProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_1B15, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0068);
		}

		// class UVideoCaptureProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_JQG0, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_XRET, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0080);
		}

		// class UMovieSceneAudioCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0058);
		}

		// class UNullAudioCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0058);
		}

		// class UMasterAudioSubmixCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, Filename, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_FK4X, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0090);
		}

		// class UCompositionGraphCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_VUNM, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_ZIH5, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_YEPS, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_7S63, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00C0);
		}

		// class UImageSequenceProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_U8RI, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00D8);
		}

		// class UCompressedImageSequenceProtocol : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_2RU9, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E0);
		}

		// class UImageSequenceProtocol_BMP : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00D8);
		}

		// class UImageSequenceProtocol_PNG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E0);
		}

		// class UImageSequenceProtocol_JPG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E0);
		}

		// class UImageSequenceProtocol_EXR : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_HKJ6, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00E8);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0028);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_D13U, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, Settings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_VMXU, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_MXG9, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x0220);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_8PMG, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_2V5E, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0240);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0028);
		}

		// class UUserDefinedCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, World, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_N3Z3, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00D8);
		}

		// class UUserDefinedImageCaptureProtocol : public UUserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_01WF, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E0);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_0TB5, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0040);
		}

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0040);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0028);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0038);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0080);
		}

		// class UMELoadingScreen_BP_C : public UTwLoadingScreen
		TEST_METHOD(WidgetBlueprintGeneratedClass__MELoadingScreen_BP__MELoadingScreen_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMELoadingScreen_BP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMELoadingScreen_BP_C, LoopThrobber, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMELoadingScreen_BP_C, SafeZone_1, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMELoadingScreen_BP_C, 0x0288);
		}

		// class UGE_ThrashVictimRelease_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_ThrashVictimRelease__GE_ThrashVictimRelease_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ThrashVictimRelease_C, 0x0870);
		}

		// class UGE_PlayerSharkSlamDamage_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PlayerSharkSlamDamage__GE_PlayerSharkSlamDamage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PlayerSharkSlamDamage_C, 0x0870);
		}

		// class UPUP_SHK_PlayerPup_ABP_C : public USHK_PlayerBase_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__PUP_SHK_PlayerPup_ABP__PUP_SHK_PlayerPup_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPUP_SHK_PlayerPup_ABP_C, 0x8CD8);
		}

		// class UGE_WildlifeStunned_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WildlifeStunned__GE_WildlifeStunned_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WildlifeStunned_C, 0x0870);
		}

		// class AALL_Alligator_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ALL_Alligator_BP__ALL_Alligator_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AALL_Alligator_BP_C, VoiceGroupComponent_BP1, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AALL_Alligator_BP_C, VoiceGroupComponent_BP, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AALL_Alligator_BP_C, 0x1050);
		}

		// class UGA_M_LandLunge_Base_BP_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_M_LandLunge_Base_BP__GA_M_LandLunge_Base_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_LandLunge_Base_BP_C, 0x05E0);
		}

		// class UGA_M_ThrashBase_V2_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_ThrashBase_V2_BP__GA_M_ThrashBase_V2_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_ThrashBase_V2_BP_C, 0x0510);
		}

		// class UGE_HammerHeadBiteDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HammerHeadBiteDamage_BP__GE_HammerHeadBiteDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HammerHeadBiteDamage_BP_C, 0x0870);
		}

		// class UGE_AI_LungeEvade_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AI_LungeEvade__GE_AI_LungeEvade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AI_LungeEvade_C, 0x07B8);
		}

		// class UGE_Evo_FatDigestion1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_FatDigestion1__GE_Evo_FatDigestion1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_FatDigestion1_C, 0x0870);
		}

		// class ASHK_Mako_Apex_BP_C : public ASHK_Mako_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_Mako_Apex_BP__SHK_Mako_Apex_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASHK_Mako_Apex_BP_C, UberGraphFrame, 0x1050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_Mako_Apex_BP_C, 0x1058);
		}

		// class UTwRichTextBlockPlatformIconDecorator_BP_C : public UTwRichTextBlockPlatformIconDecorator
		TEST_METHOD(BlueprintGeneratedClass__TwRichTextBlockPlatformIconDecorator_BP__TwRichTextBlockPlatformIconDecorator_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwRichTextBlockPlatformIconDecorator_BP_C, 0x0030);
		}

		// class UGE_SwordfishVulnerable_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SwordfishVulnerable_BP__GE_SwordfishVulnerable_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SwordfishVulnerable_BP_C, 0x0870);
		}

		// class UGE_GreatWhiteVulnerable_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GreatWhiteVulnerable_BP__GE_GreatWhiteVulnerable_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GreatWhiteVulnerable_BP_C, 0x0870);
		}

		// class UGE_EVO_Bio_Electric_TailElectricityFX_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Bio_Electric_TailElectricityFX_T3__GE_EVO_Bio_Electric_TailElectricityFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Bio_Electric_TailElectricityFX_T3_C, 0x0870);
		}

		// class AEVO_Bio_Electric_Tail_Projectile_T2_C : public AME_OverlapDamageProjectile
		TEST_METHOD(BlueprintGeneratedClass__EVO_Bio_Electric_Tail_Projectile_T2__EVO_Bio_Electric_Tail_Projectile_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEVO_Bio_Electric_Tail_Projectile_T2_C, 0x0268);
		}

		// class UGE_EVO_Bio_Electric_TailElectricityFX_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Bio_Electric_TailElectricityFX_T1__GE_EVO_Bio_Electric_TailElectricityFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Bio_Electric_TailElectricityFX_T1_C, 0x0870);
		}

		// class AEVO_Bio_Electric_Tail_Projectile_T1_C : public AME_OverlapDamageProjectile
		TEST_METHOD(BlueprintGeneratedClass__EVO_Bio_Electric_Tail_Projectile_T1__EVO_Bio_Electric_Tail_Projectile_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEVO_Bio_Electric_Tail_Projectile_T1_C, 0x0268);
		}

		// class UGCD_Evade_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GCD_Evade__GCD_Evade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCD_Evade_C, 0x07B8);
		}

		// class UGE_Knifing_Jump_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Knifing_Jump__GE_Knifing_Jump_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Knifing_Jump_C, 0x0870);
		}

		// class UGCD_General_0_1_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GCD_General_0_2__GCD_General_0_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCD_General_0_1_C, 0x07B8);
		}

		// class UGE_EvadeJump_Knifing_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EvadeJump_Knifing__GE_EvadeJump_Knifing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EvadeJump_Knifing_C, 0x0870);
		}

		// class UGE_EvadeLeft_Breaching_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EvadeLeft_Breaching__GE_EvadeLeft_Breaching_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EvadeLeft_Breaching_C, 0x0870);
		}

		// class UGE_DoubleJumpGravity_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_DoubleJumpGravity__GE_DoubleJumpGravity_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_DoubleJumpGravity_C, 0x0870);
		}

		// class UGE_DoubleJump_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_DoubleJump_T2__GE_DoubleJump_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_DoubleJump_T2_C, 0x0870);
		}

		// class UGE_DoubleJump_Cancel_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_DoubleJump_Cancel__GE_DoubleJump_Cancel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_DoubleJump_Cancel_C, 0x0870);
		}

		// class UGE_SprintReset_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SprintReset__GE_SprintReset_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SprintReset_C, 0x0870);
		}

		// class UGE_Thrash_Cooldown_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Thrash_Cooldown__GE_Thrash_Cooldown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Thrash_Cooldown_C, 0x0870);
		}

		// class UGE_StartThrash_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_StartThrash__GE_StartThrash_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_StartThrash_C, 0x0870);
		}

		// class UGE_BiteRelease_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_BiteRelease__GE_BiteRelease_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_BiteRelease_C, 0x0870);
		}

		// class UBP_Shotgun_Tier6_C : public UBP_Shotgun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shotgun_Tier6__BP_Shotgun_Tier6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shotgun_Tier6_C, 0x06E0);
		}

		// class ABP_Human_EliteHunterBoat_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Human_EliteHunterBoat__BP_Human_EliteHunterBoat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Human_EliteHunterBoat_C, 0x0F50);
		}

		// class ABP_DynamiteStick_Bounty_Thrown_C : public ABP_DynamiteStick_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DynamiteStick_Bounty_Thrown__BP_DynamiteStick_Bounty_Thrown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DynamiteStick_Bounty_Thrown_C, 0x0390);
		}

		// class ABP_DynamiteStick_Base_C : public AME_ExplodingBarrelBase
		TEST_METHOD(BlueprintGeneratedClass__BP_DynamiteStick_Base__BP_DynamiteStick_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DynamiteStick_Base_C, UberGraphFrame, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DynamiteStick_Base_C, FuseParticleSystem, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DynamiteStick_Base_C, 0x0390);
		}

		// class UBP_AssaultRifle_Tier4_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Tier4__BP_AssaultRifle_Tier4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Tier4_C, 0x06E0);
		}

		// class AAssaultRifle_Projectile_Tier3_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Tier3__AssaultRifle_Projectile_Tier3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Tier3_C, 0x0270);
		}

		// class UGE_AssaultRifle_Damage_Tier4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Damage_Tier4__GE_AssaultRifle_Damage_Tier4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Damage_Tier4_C, 0x0870);
		}

		// class UBP_Shotgun_Tier3_C : public UBP_Shotgun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shotgun_Tier3__BP_Shotgun_Tier3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shotgun_Tier3_C, 0x06E0);
		}

		// class UBP_AssaultRifle_Tier3_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Tier3__BP_AssaultRifle_Tier3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Tier3_C, 0x06E0);
		}

		// class UGE_Evo_ProteinDigestion5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_ProteinDigestion5__GE_Evo_ProteinDigestion5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_ProteinDigestion5_C, 0x0870);
		}

		// class UGE_Evo_ProteinDigestion1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_ProteinDigestion1__GE_Evo_ProteinDigestion1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_ProteinDigestion1_C, 0x0870);
		}

		// class UGE_Evo_AdvancedSonar5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_AdvancedSonar5__GE_Evo_AdvancedSonar5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_AdvancedSonar5_C, 0x0870);
		}

		// class UGE_Evo_AdvancedSonar4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_AdvancedSonar4__GE_Evo_AdvancedSonar4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_AdvancedSonar4_C, 0x0870);
		}

		// class UGE_Evo_AdvancedSonar3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_AdvancedSonar3__GE_Evo_AdvancedSonar3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_AdvancedSonar3_C, 0x0870);
		}

		// class UGE_AI_LandLunge_Cooldown_BP_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AI_LandLunge_Cooldown_BP__GE_AI_LandLunge_Cooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AI_LandLunge_Cooldown_BP_C, 0x07B8);
		}

		// class UTailWind_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__TailWind__TailWind_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTailWind_C, 0x0030);
		}

		// class UGE_GreatWhiteVulnerableTaunt_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GreatWhiteVulnerableTaunt_BP__GE_GreatWhiteVulnerableTaunt_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GreatWhiteVulnerableTaunt_BP_C, 0x0870);
		}

		// class UGA_M_SpermWhale_Bite_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_SpermWhale_Bite_BP__GA_M_SpermWhale_Bite_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_SpermWhale_Bite_BP_C, 0x0510);
		}

		// class UGE_HammerHeadTailwhipDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HammerHeadTailwhipDamage_BP__GE_HammerHeadTailwhipDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HammerHeadTailwhipDamage_BP_C, 0x0870);
		}

		// class UGE_TailWhipThrowVictim_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_TailWhipThrowVictim__GE_TailWhipThrowVictim_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_TailWhipThrowVictim_C, 0x0870);
		}

		// class UGE_PlayerTailWhipped_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PlayerTailWhipped__GE_PlayerTailWhipped_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PlayerTailWhipped_C, 0x0870);
		}

		// class UGE_HammerHeadEvadeCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HammerHeadEvadeCooldown_BP__GE_HammerHeadEvadeCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HammerHeadEvadeCooldown_BP_C, 0x0870);
		}

		// class UGE_HammerHeadBiteCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HammerHeadBiteCooldown_BP__GE_HammerHeadBiteCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HammerHeadBiteCooldown_BP_C, 0x0870);
		}

		// class UGA_EVO_Shadow_Body_AOE_T4_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_AOE_T4__GA_EVO_Shadow_Body_AOE_T4_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_AOE_T4_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_AOE_T4_C, 0x0408);
		}

		// class UGA_Evo_Shadow_Body_AddResource_T3_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_AddResource_T3__GA_Evo_Shadow_Body_AddResource_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_AddResource_T3_C, 0x0438);
		}

		// class UGA_Evo_Shadow_Body_AddResource_Damage_T3_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_AddResource_Damage_T3__GA_Evo_Shadow_Body_AddResource_Damage_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_AddResource_Damage_T3_C, 0x0438);
		}

		// class UAM_EVO_Shadow_Body_Activate_T3_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_EVO_Shadow_Body_Activate_T3__AM_EVO_Shadow_Body_Activate_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EVO_Shadow_Body_Activate_T3_C, 0x05E0);
		}

		// class UGA_EVO_Shadow_Body_AOE_T3_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_AOE_T3__GA_EVO_Shadow_Body_AOE_T3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_AOE_T3_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_AOE_T3_C, 0x0408);
		}

		// class UGA_EVO_Shadow_Body_Aura_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_Aura_T1__GA_EVO_Shadow_Body_Aura_T1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_Aura_T1_C, UberGraphFrame, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_Aura_T1_C, Shadow_Aura, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_Aura_T1_C, 0x0410);
		}

		// class UGE_Evo_Bone_Body_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_T4__GE_Evo_Bone_Body_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_LungeBonus_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_LungeBonus_T4__GE_Evo_Bone_Body_LungeBonus_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_LungeBonus_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_Bonus_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_Bonus_T4__GE_Evo_Bone_Body_Bonus_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_Bonus_T4_C, 0x0870);
		}

		// class ABP_USCG_MediumSkiff_Debris_Roof_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_Roof__BP_USCG_MediumSkiff_Debris_Roof_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_Roof_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_LeftRear_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_LeftRear__BP_USCG_MediumSkiff_Debris_LeftRear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_LeftRear_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_FrontRightChair_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_FrontRightChair__BP_USCG_MediumSkiff_Debris_FrontRightChair_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_FrontRightChair_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_FrontLeftChair_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_FrontLeftChair__BP_USCG_MediumSkiff_Debris_FrontLeftChair_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_FrontLeftChair_C, 0x0230);
		}

		// class ABP_Base_USCG_Medium_Bounty_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_USCG_Medium_Bounty__BP_Base_USCG_Medium_Bounty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_USCG_Medium_Bounty_C, SpotLight, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_USCG_Medium_Bounty_C, LastHitTime, 0x0CD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_USCG_Medium_Bounty_C, 0x0CDC);
		}

		// class ABP_USCG_MediumSkiff_Debris_Radar_Boss_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_Radar_Boss__BP_USCG_MediumSkiff_Debris_Radar_Boss_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_Radar_Boss_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_LeftSide_Boss_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_LeftSide_Boss__BP_USCG_MediumSkiff_Debris_LeftSide_Boss_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_LeftSide_Boss_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_LeftRear_Boss_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_LeftRear_Boss__BP_USCG_MediumSkiff_Debris_LeftRear_Boss_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_LeftRear_Boss_C, 0x0230);
		}

		// class ABP_Base_USCG_Command_Ship_Electro_C : public ABP_Base_USCG_Command_Ship_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_USCG_Command_Ship_Electro__BP_Base_USCG_Command_Ship_Electro_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_USCG_Command_Ship_Electro_C, UberGraphFrame, 0x0CE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_USCG_Command_Ship_Electro_C, 0x0CF0);
		}

		// class ABP_Base_USCG_Command_Ship_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_USCG_Command_Ship__BP_Base_USCG_Command_Ship_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_USCG_Command_Ship_C, SpotLight, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_USCG_Command_Ship_C, LastHitTime, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_USCG_Command_Ship_C, UnknownData_D280, 0x0CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_USCG_Command_Ship_C, UtilityEmitter_PLACEHOLDER, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_USCG_Command_Ship_C, 0x0CE8);
		}

		// class ABP_Base_Small_FishingBoat_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Small_FishingBoat__BP_Base_Small_FishingBoat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Small_FishingBoat_C, SpotLight, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Small_FishingBoat_C, LastHitTime, 0x0CD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Small_FishingBoat_C, 0x0CDC);
		}

		// class AAssaultRifle_Projectile_Tier2_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Tier2__AssaultRifle_Projectile_Tier2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Tier2_C, 0x0270);
		}

		// class UBP_AssaultRifle_Tier1_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Tier1__BP_AssaultRifle_Tier1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Tier1_C, 0x06E0);
		}

		// class UGA_Evo_Bone_Fins_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Fins_T1__GA_Evo_Bone_Fins_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Fins_T1_C, 0x0400);
		}

		// class UGE_Evo_Bone_Fins_Immunity_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Immunity_T2__GE_Evo_Bone_Fins_Immunity_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Immunity_T2_C, 0x0870);
		}

		// class UGA_Evo_Bone_Fins_Evade_ImpactFX_T4_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Fins_Evade_ImpactFX_T4__GA_Evo_Bone_Fins_Evade_ImpactFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Fins_Evade_ImpactFX_T4_C, 0x0400);
		}

		// class UGE_Evo_Bone_Fins_Immunity_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Immunity_T3__GE_Evo_Bone_Fins_Immunity_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Immunity_T3_C, 0x0870);
		}

		// class UGE_Evo_Bone_Fins_Defense_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Defense_T2__GE_Evo_Bone_Fins_Defense_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Defense_T2_C, 0x0870);
		}

		// class UGE_Evo_Bone_Fins_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_T1__GE_Evo_Bone_Fins_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_T1_C, 0x0870);
		}

		// class UGE_Evo_Bone_Fins_Defense_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Defense_T1__GE_Evo_Bone_Fins_Defense_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Defense_T1_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Fins_Bonus_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Fins_Bonus_T3__GE_Evo_Shadow_Fins_Bonus_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Fins_Bonus_T3_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Fins_T3_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Fins_T3__GA_Evo_Shadow_Fins_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Fins_T3_C, 0x0400);
		}

		// class UGA_Evo_Shadow_Fins_T4_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Fins_T4__GA_Evo_Shadow_Fins_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Fins_T4_C, 0x0400);
		}

		// class UGE_Evo_Shadow_Fins_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Fins_T5__GE_Evo_Shadow_Fins_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Fins_T5_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Fins_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Fins_T4__GE_Evo_Shadow_Fins_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Fins_T4_C, 0x0870);
		}

		// class UGE_MissingRightVentralFin_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MissingRightVentralFin__GE_MissingRightVentralFin_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MissingRightVentralFin_C, 0x0870);
		}

		// class USHK_PlayerBase_ABP_C : public UME_AnimInstance_PlayerShark
		TEST_METHOD(AnimBlueprintGeneratedClass__SHK_PlayerBase_ABP__SHK_PlayerBase_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, UberGraphFrame, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_57, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_56, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_55, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_54, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_53, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_52, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_51, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_50, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_49, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_UseCachedPose_12, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ComponentToLocalSpace_5, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LocalToComponentSpace_5, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_32, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_17, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SaveCachedPose_7, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_Slot, 0x13F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendListByBool_9, 0x1438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendSpacePlayer_4, 0x14D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_31, 0x15B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_16, 0x15E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LayeredBoneBlend_2, 0x1698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendListByBool_8, 0x1758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_33, 0x17F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SaveCachedPose_6, 0x1870);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_UseCachedPose_11, 0x1928);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_37, 0x1950);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_36, 0x1978);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_35, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_32, 0x19C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendListByEnum_3, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_31, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_30, 0x1B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_29, 0x1BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_28, 0x1C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_30, 0x1CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendSpacePlayer_3, 0x1D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_29, 0x1DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_15, 0x1E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_34, 0x1EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_33, 0x1EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_32, 0x1F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_27, 0x1F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendListByEnum_2, 0x1FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_26, 0x2060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_25, 0x20D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_24, 0x2150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_23, 0x21C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_28, 0x2240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendSpacePlayer_2, 0x2270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_27, 0x2350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_14, 0x2380);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SaveCachedPose_5, 0x2430);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_48, 0x24E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_47, 0x25F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_46, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_45, 0x2800);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_44, 0x2908);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_43, 0x2A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_42, 0x2B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_41, 0x2C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_40, 0x2D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_39, 0x2E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_38, 0x2F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_37, 0x3040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_36, 0x3148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_35, 0x3250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_34, 0x3358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_33, 0x3460);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_32, 0x3568);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LocalToComponentSpace_4, 0x3670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ComponentToLocalSpace_4, 0x3690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_UseCachedPose_10, 0x36B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_26, 0x36D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_13, 0x3708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ApplyAdditive_10, 0x37B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_22, 0x3880);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendListByBool_7, 0x38F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SaveCachedPose_4, 0x3998);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_UseCachedPose_9, 0x3A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ApplyAdditive_9, 0x3A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_31, 0x3B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_30, 0x3B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_29, 0x3B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_21, 0x3BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_25, 0x3C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LocalRefPose_7, 0x3C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_24, 0x3C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_12, 0x3CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendListByBool_6, 0x3D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SaveCachedPose_3, 0x3DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_UseCachedPose_8, 0x3EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ComponentToLocalSpace_3, 0x3ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LocalToComponentSpace_3, 0x3EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, UnknownData_UPEL, 0x3F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LookAt, 0x3F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x40D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_UseCachedPose_7, 0x4190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequenceEvaluator, 0x41B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_UseCachedPose_6, 0x4200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendListByBool_5, 0x4228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_Root, 0x42C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendListByBool_4, 0x42F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_20, 0x4398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_19, 0x4410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_18, 0x4488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_17, 0x4500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_16, 0x4578);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_15, 0x45F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendListByEnum, 0x4668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_23, 0x4718);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_11, 0x4748);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_Constraint, 0x47F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_31, 0x4900);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_30, 0x4A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_UseCachedPose_5, 0x4B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_28, 0x4B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_27, 0x4B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_14, 0x4B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_22, 0x4C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LocalRefPose_6, 0x4C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_21, 0x4C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_10, 0x4C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ApplyAdditive_8, 0x4D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_26, 0x4DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_25, 0x4E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_13, 0x4E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_20, 0x4EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LocalRefPose_5, 0x4EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_19, 0x4F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_9, 0x4F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ApplyAdditive_7, 0x4FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_24, 0x50A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_23, 0x50D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_12, 0x50F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_18, 0x5170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LocalRefPose_4, 0x51A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_17, 0x51B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_8, 0x51E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ApplyAdditive_6, 0x5298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_22, 0x5360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_21, 0x5388);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_11, 0x53B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_16, 0x5428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LocalRefPose_3, 0x5458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_15, 0x5470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_7, 0x54A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ApplyAdditive_5, 0x5550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_20, 0x5618);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_19, 0x5640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_10, 0x5668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_14, 0x56E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LocalRefPose_2, 0x5710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_13, 0x5728);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_6, 0x5758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ApplyAdditive_4, 0x5808);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_18, 0x58D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_17, 0x58F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_16, 0x5920);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_15, 0x5948);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_14, 0x5970);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_13, 0x5998);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_12, 0x59C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_11, 0x59E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_10, 0x5A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_9, 0x5A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_8, 0x5A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_7, 0x5A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_6, 0x5AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_5, 0x5AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_4, 0x5B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_3, 0x5B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_9, 0x5B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_12, 0x5BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_8, 0x5BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_11, 0x5C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_7, 0x5CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_10, 0x5D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_6, 0x5D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_9, 0x5DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_5, 0x5DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_8, 0x5E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LocalRefPose, 0x5E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_7, 0x5EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_5, 0x5EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ApplyAdditive_3, 0x5F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_6, 0x6058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_4, 0x6088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendListByBool_3, 0x6138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult_2, 0x61D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_TransitionResult, 0x6200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_4, 0x6228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_5, 0x62A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendSpacePlayer, 0x62D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_4, 0x63B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_3, 0x63E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_3, 0x6458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_3, 0x6488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_UseCachedPose_4, 0x6538);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_29, 0x6560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_28, 0x6668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_27, 0x6770);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_26, 0x6878);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_25, 0x6980);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_24, 0x6A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LocalToComponentSpace_2, 0x6B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x6BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_23, 0x6BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_22, 0x6CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_21, 0x6DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_20, 0x6EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_19, 0x6FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_18, 0x70F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_17, 0x7200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_16, 0x7308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult_2, 0x7410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine_2, 0x7440);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendListByBool_2, 0x74F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SaveCachedPose_2, 0x7590);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_UseCachedPose_3, 0x7648);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_15, 0x7670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ApplyAdditive_2, 0x7778);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer_2, 0x7840);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_BlendListByBool, 0x78B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SaveCachedPose, 0x7958);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_UseCachedPose_2, 0x7A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_14, 0x7A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_13, 0x7B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_12, 0x7C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_11, 0x7D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_10, 0x7E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_9, 0x7F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_8, 0x8068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_7, 0x8170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_6, 0x8278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_5, 0x8380);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_4, 0x8488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_3, 0x8590);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone_2, 0x8698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x87A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_UseCachedPose, 0x87C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x87E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ModifyBone, 0x8808);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateResult, 0x8910);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_StateMachine, 0x8940);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_RotationOffsetBlendSpace, 0x89F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_ApplyAdditive, 0x8B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, AnimGraphNode_SequencePlayer, 0x8C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, JawPlacement, 0x8CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, BodyMainOverride, 0x8CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, Bite, 0x8CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, UnknownData_5E28, 0x8CC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, iVulnerableBite, 0x8CC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, FinerptPitchValue, 0x8CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, UsedPitchFinterpValue, 0x8CCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, UsedInputValue, 0x8CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USHK_PlayerBase_ABP_C, absactorrot, 0x8CD4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USHK_PlayerBase_ABP_C, 0x8CD8);
		}

		// class UGE_Shotgun_Damage_Tier1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Shotgun_Damage_Tier1__GE_Shotgun_Damage_Tier1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Shotgun_Damage_Tier1_C, 0x0870);
		}

		// class UGE_PipeBombExplosion_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PipeBombExplosion__GE_PipeBombExplosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PipeBombExplosion_C, 0x0870);
		}

		// class ABP_PipeBombExplosion_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_PipeBombExplosion__BP_PipeBombExplosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PipeBombExplosion_C, 0x02D0);
		}

		// class AFSH_Grouper_Large_BP_C : public AFSH_Grouper_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Grouper_Large_BP__FSH_Grouper_Large_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Grouper_Large_BP_C, 0x1050);
		}

		// class UObjectiveProgressDecorator_BP_C : public UObjectiveProgressDecorator
		TEST_METHOD(WidgetBlueprintGeneratedClass__ObjectiveProgressDecorator_BP__ObjectiveProgressDecorator_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveProgressDecorator_BP_C, 0x0378);
		}

		// class UObjectiveCompletionDecorator_BP_C : public UObjectiveCompletionDecorator
		TEST_METHOD(WidgetBlueprintGeneratedClass__ObjectiveCompletionDecorator_BP__ObjectiveCompletionDecorator_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator_BP_C, BackgroundGlow, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator_BP_C, leftline, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator_BP_C, rightline, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveCompletionDecorator_BP_C, 0x03A0);
		}

		// class UHUDErrorMessage_BP_C : public UHUDErrorMessageWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__HUDErrorMessage_BP__HUDErrorMessage_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDErrorMessage_BP_C, BlinkIdle, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDErrorMessage_BP_C, 0x0280);
		}

		// class ABP_USCG_CommandBoat_Debris_Midship_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_CommandBoat_Debris_Midship__BP_USCG_CommandBoat_Debris_Midship_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_CommandBoat_Debris_Midship_C, 0x0230);
		}

		// class ABP_USCG_CommandBoat_Debris_LeftTower_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_CommandBoat_Debris_LeftTower__BP_USCG_CommandBoat_Debris_LeftTower_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_CommandBoat_Debris_LeftTower_C, 0x0230);
		}

		// class ABP_USCG_CommandBoat_Debris_LeftSeat_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_CommandBoat_Debris_LeftSeat__BP_USCG_CommandBoat_Debris_LeftSeat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_CommandBoat_Debris_LeftSeat_C, 0x0230);
		}

		// class ALMG_Bullet_Projectile_Bounty_C : public ALMG_Bullet_Projectile_C
		TEST_METHOD(BlueprintGeneratedClass__LMG_Bullet_Projectile_Bounty__LMG_Bullet_Projectile_Bounty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALMG_Bullet_Projectile_Bounty_C, 0x0270);
		}

		// class UGE_EVO_Bio_Electric_Tail_Damage_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Bio_Electric_Tail_Damage_T5__GE_EVO_Bio_Electric_Tail_Damage_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Bio_Electric_Tail_Damage_T5_C, 0x0870);
		}

		// class ABP_EVO_Shadow_Tail_AOE_T1_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Tail_AOE_T1__BP_EVO_Shadow_Tail_AOE_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Tail_AOE_T1_C, 0x02D0);
		}

		// class ABP_JetSki_Debris_Seat2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Debris_Seat2__BP_JetSki_Debris_Seat2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Debris_Seat2_C, 0x0230);
		}

		// class ABP_JetSki_Debris_Rail_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Debris_Rail__BP_JetSki_Debris_Rail_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Debris_Rail_C, 0x0230);
		}

		// class ABP_JetSki_Debris_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Debris_Fragment1__BP_JetSki_Debris_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Debris_Fragment1_C, 0x0230);
		}

		// class ABP_JetSki_Debris_Back_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Debris_Back__BP_JetSki_Debris_Back_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Debris_Back_C, 0x0230);
		}

		// class UGE_EVO_Bio_Electric_TailElectricityFX_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Bio_Electric_TailElectricityFX_T5__GE_EVO_Bio_Electric_TailElectricityFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Bio_Electric_TailElectricityFX_T5_C, 0x0870);
		}

		// class ABP_Whipshot_Explosion_XXL_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Whipshot_Explosion_XXL__BP_Whipshot_Explosion_XXL_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Whipshot_Explosion_XXL_C, 0x02D0);
		}

		// class UBP_DepthCharge_Pete2_C : public UME_WeaponComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthCharge_Pete2__BP_DepthCharge_Pete2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DepthCharge_Pete2_C, 0x06E0);
		}

		// class UBP_AssaultRifle_Pete2Phase1_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Pete2Phase1__BP_AssaultRifle_Pete2Phase1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Pete2Phase1_C, 0x06E0);
		}

		// class ABP_PetesBoat_V2_Left_Piece_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Left_Piece__BP_PetesBoat_V2_Left_Piece_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Left_Piece_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Jaws_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Jaws__BP_PetesBoat_V2_Jaws_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Jaws_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Crate_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Crate__BP_PetesBoat_V2_Crate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Crate_C, 0x0230);
		}

		// class AAIController_Catfish_BP_C : public AAIController_NonHostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Catfish_BP__AIController_Catfish_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Catfish_BP_C, 0x07C8);
		}

		// class UEvolution_Tooltip_ActiveAbility_BP_C : public UTwBaseWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Evolution_Tooltip_ActiveAbility_BP__Evolution_Tooltip_ActiveAbility_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_ActiveAbility_BP_C, AbilityDescriptionText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_ActiveAbility_BP_C, AbilityIcon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_ActiveAbility_BP_C, AbilityName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_ActiveAbility_BP_C, AttributesContainer, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_ActiveAbility_BP_C, EvoCategoryWidgetMap, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolution_Tooltip_ActiveAbility_BP_C, 0x02C8);
		}

		// class UBP_ScalyPeteAwarenessWidget_C : public UAwarenessWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_ScalyPeteAwarenessWidget__BP_ScalyPeteAwarenessWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, CompleteText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, ScalyPeteProgress, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, SectionIconImage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, Story1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, Story2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, Story3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, Story4, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, Story5, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, Story6, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, Story7, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, Story8, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, Story9, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, IncompleteColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ScalyPeteAwarenessWidget_C, CompleteColor, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ScalyPeteAwarenessWidget_C, 0x0318);
		}

		// class APaulPunchingBag_C : public AALL_Alligator_BP_C
		TEST_METHOD(BlueprintGeneratedClass__PaulPunchingBag__PaulPunchingBag_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APaulPunchingBag_C, UberGraphFrame, 0x1050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APaulPunchingBag_C, 0x1058);
		}

		// class UGE_Rifle_Damage_Tier4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Rifle_Damage_Tier4__GE_Rifle_Damage_Tier4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Rifle_Damage_Tier4_C, 0x0870);
		}

		// class UGE_Shotgun_Damage_Tier8_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Shotgun_Damage_Tier8__GE_Shotgun_Damage_Tier8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Shotgun_Damage_Tier8_C, 0x0870);
		}

		// class ARifle_Projectile_Tier1_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__Rifle_Projectile_Tier1__Rifle_Projectile_Tier1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARifle_Projectile_Tier1_C, 0x0270);
		}

		// class UGE_Bio_Electric_Body_AOE_StunInstant_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AOE_StunInstant_T1__GE_Bio_Electric_Body_AOE_StunInstant_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AOE_StunInstant_T1_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_AOE_StunInstant_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AOE_StunInstant_T4__GE_Bio_Electric_Body_AOE_StunInstant_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AOE_StunInstant_T4_C, 0x0870);
		}

		// class UBio_Electric_Stack_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__Bio_Electric_Stack__Bio_Electric_Stack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBio_Electric_Stack_C, 0x0870);
		}

		// class ABP_Base_USCG_Small_Bounty_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_USCG_Small_Bounty__BP_Base_USCG_Small_Bounty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_USCG_Small_Bounty_C, UberGraphFrame, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_USCG_Small_Bounty_C, SpotLight, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_USCG_Small_Bounty_C, LastHitTime, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_USCG_Small_Bounty_C, 0x0CE4);
		}

		// class UGA_M_EvadeRight_Base_BP_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_M_EvadeRight_Base_BP__GA_M_EvadeRight_Base_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_EvadeRight_Base_BP_C, 0x05E0);
		}

		// class UGA_M_Alligator_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Alligator_EvadeRight_BP__GA_M_Alligator_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Alligator_EvadeRight_BP_C, 0x05E0);
		}

		// class UGE_Evo_Bone_Head_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Head_T5__GE_Evo_Bone_Head_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Head_T5_C, 0x0870);
		}

		// class ABP_HunterCaptain_MamaMaybelle_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterCaptain_MamaMaybelle__BP_HunterCaptain_MamaMaybelle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HunterCaptain_MamaMaybelle_C, 0x0F50);
		}

		// class ABP_Scaly_PeteV2_C : public ABP_HumanBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Scaly_PeteV2__BP_Scaly_PeteV2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Scaly_PeteV2_C, 0x0F50);
		}

		// class ABP_HumanPetesCrew_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HumanPetesCrew__BP_HumanPetesCrew_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HumanPetesCrew_C, 0x0F50);
		}

		// class ABP_USCG_Small_Bounty8_Shotguns_Rifle_Divers_C : public ABP_Base_USCG_Small_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Small_Bounty8_Shotguns_Rifle_Divers__BP_USCG_Small_Bounty8_Shotguns_Rifle_Divers_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Small_Bounty8_Shotguns_Rifle_Divers_C, 0x0CE4);
		}

		// class ABP_USCG_Medium_Bounty10_Rifles_Dynamite_C : public ABP_Base_USCG_Medium_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Medium_Bounty10_Rifles_Dynamite__BP_USCG_Medium_Bounty10_Rifles_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Medium_Bounty10_Rifles_Dynamite_C, 0x0CDC);
		}

		// class USHK_MenuPupShark_ABP_C : public USHK_MenuSharkBase_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__SHK_MenuPupShark_ABP__SHK_MenuPupShark_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USHK_MenuPupShark_ABP_C, 0x07A0);
		}

		// class UBT_FindRandomPointOnNavMesh_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BT_FindRandomPointOnNavMesh__BT_FindRandomPointOnNavMesh_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_FindRandomPointOnNavMesh_C, UberGraphFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_FindRandomPointOnNavMesh_C, MoveTarget, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBT_FindRandomPointOnNavMesh_C, SearchRadius, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBT_FindRandomPointOnNavMesh_C, 0x00DC);
		}

		// class UGE_RecoverAllHealth_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_RecoverAllHealth__GE_RecoverAllHealth_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_RecoverAllHealth_C, 0x0870);
		}

		// class UAM_StationaryWaterReentryForwardsAndUp_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_StationaryWaterReentryForwardsAndUp__AM_StationaryWaterReentryForwardsAndUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_StationaryWaterReentryForwardsAndUp_C, 0x0620);
		}

		// class UAM_StationaryWaterReentryForwardsAndDown_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_StationaryWaterReentryForwardsAndDown__AM_StationaryWaterReentryForwardsAndDown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_StationaryWaterReentryForwardsAndDown_C, 0x0620);
		}

		// class UAM_StationaryWaterReentryForwards_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_StationaryWaterReentryForwards__AM_StationaryWaterReentryForwards_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_StationaryWaterReentryForwards_C, 0x0620);
		}

		// class UAM_MovingWaterReentryForwardsAndDown_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_MovingWaterReentryForwardsAndDown__AM_MovingWaterReentryForwardsAndDown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_MovingWaterReentryForwardsAndDown_C, 0x0620);
		}

		// class UAM_MovingWaterReentryBackwards_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_MovingWaterReentryBackwards__AM_MovingWaterReentryBackwards_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_MovingWaterReentryBackwards_C, 0x0620);
		}

		// class ABP_USCG_Small_Pete1Support_Divers_C : public ABP_Base_USCG_Small_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Small_Pete1Support_Divers__BP_USCG_Small_Pete1Support_Divers_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Small_Pete1Support_Divers_C, 0x0CE4);
		}

		// class ABP_JetSki_Bounty2_Shotgun_C : public ABP_Base_JetSki_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Bounty2_Shotgun__BP_JetSki_Bounty2_Shotgun_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_JetSki_Bounty2_Shotgun_C, UberGraphFrame, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Bounty2_Shotgun_C, 0x0CE8);
		}

		// class UGA_M_Alligator_Feint_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Alligator_Feint_BP__GA_M_Alligator_Feint_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Alligator_Feint_BP_C, 0x0510);
		}

		// class UGA_M_Apex_Alligator_TailWhip_BP_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Apex_Alligator_TailWhip_BP__GA_M_Apex_Alligator_TailWhip_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Apex_Alligator_TailWhip_BP_C, 0x05E0);
		}

		// class ABP_LandmarkBase_C : public AME_WorldLandmarkActor
		TEST_METHOD(BlueprintGeneratedClass__BP_LandmarkBase__BP_LandmarkBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LandmarkBase_C, UberGraphFrame, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LandmarkBase_C, Cube, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LandmarkBase_C, bDisplayDiscoveryPopup, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LandmarkBase_C, 0x0329);
		}

		// class UGE_Bio_Electric_Body_AOE_Dam_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AOE_Dam_T1__GE_Bio_Electric_Body_AOE_Dam_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AOE_Dam_T1_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_AddResource_Dam_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AddResource_Dam_T1__GE_Bio_Electric_Body_AddResource_Dam_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AddResource_Dam_T1_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_Bonus_NearEndFX_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_Bonus_NearEndFX_T2__GE_Bio_Electric_Body_Bonus_NearEndFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_Bonus_NearEndFX_T2_C, 0x0870);
		}

		// class UGA_Bio_Electric_Body_AOE_T2_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AOE_T2__GA_Bio_Electric_Body_AOE_T2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Bio_Electric_Body_AOE_T2_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AOE_T2_C, 0x0408);
		}

		// class UGE_Bio_Electric_Body_AddResource_Dam_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AddResource_Dam_T2__GE_Bio_Electric_Body_AddResource_Dam_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AddResource_Dam_T2_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_AOE_Dam_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AOE_Dam_T4__GE_Bio_Electric_Body_AOE_Dam_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AOE_Dam_T4_C, 0x0870);
		}

		// class ABP_Bio_Electric_Body_Aura_T3_C : public AME_AuraDamageActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Bio_Electric_Body_Aura_T3__BP_Bio_Electric_Body_Aura_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bio_Electric_Body_Aura_T3_C, 0x0400);
		}

		// class UGE_Bio_Electric_Body_AOE_Dam_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AOE_Dam_T5__GE_Bio_Electric_Body_AOE_Dam_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AOE_Dam_T5_C, 0x0870);
		}

		// class UGA_Bio_Electric_Body_T4_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_T4__GA_Bio_Electric_Body_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_T4_C, 0x05E0);
		}

		// class UGA_Bio_Electric_Body_AddResource_Eat_T4_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AddResource_Eat_T4__GA_Bio_Electric_Body_AddResource_Eat_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AddResource_Eat_T4_C, 0x0438);
		}

		// class UGA_Bio_Electric_Body_AddResource_Dam_T4_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AddResource_Dam_T4__GA_Bio_Electric_Body_AddResource_Dam_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AddResource_Dam_T4_C, 0x0438);
		}

		// class UGA_Bio_Electric_Body_T5_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_T5__GA_Bio_Electric_Body_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_T5_C, 0x05E0);
		}

		// class UGA_Bio_Electric_Body_AddResource_Eat_T5_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AddResource_Eat_T5__GA_Bio_Electric_Body_AddResource_Eat_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AddResource_Eat_T5_C, 0x0438);
		}

		// class UGA_Bio_Electric_Body_AOE_T4_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AOE_T4__GA_Bio_Electric_Body_AOE_T4_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Bio_Electric_Body_AOE_T4_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AOE_T4_C, 0x0408);
		}

		// class UGA_Evo_Bio_Electric_Head_T3_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Head_T3__GA_Evo_Bio_Electric_Head_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Head_T3_C, 0x0400);
		}

		// class UGA_Evo_Bio_Electric_Head_T4_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Head_T4__GA_Evo_Bio_Electric_Head_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Head_T4_C, 0x0400);
		}

		// class UGA_Evo_Bio_Electric_Head_T5_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Head_T5__GA_Evo_Bio_Electric_Head_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Head_T5_C, 0x0400);
		}

		// class UGE_Evo_Bone_Body_Lunge_ImpactVFX_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_Lunge_ImpactVFX_T1__GE_Evo_Bone_Body_Lunge_ImpactVFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_Lunge_ImpactVFX_T1_C, 0x0870);
		}

		// class UGA_Evo_Bone_Body_Lunge_ImpactVFX_T1_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_Lunge_ImpactVFX_T1__GA_Evo_Bone_Body_Lunge_ImpactVFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_Lunge_ImpactVFX_T1_C, 0x05E0);
		}

		// class UAM_EVO_Bone_Body_Activate_T1_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_EVO_Bone_Body_Activate_T1__AM_EVO_Bone_Body_Activate_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EVO_Bone_Body_Activate_T1_C, 0x05E0);
		}

		// class UGE_Evo_ReinforcedCartilage2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_ReinforcedCartilage2__GE_Evo_ReinforcedCartilage2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_ReinforcedCartilage2_C, 0x0870);
		}

		// class UGE_Evo_Subliminal_Evasion3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Subliminal_Evasion3__GE_Evo_Subliminal_Evasion3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Subliminal_Evasion3_C, 0x0870);
		}

		// class UGE_Evo_Subliminal_Evasion2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Subliminal_Evasion2__GE_Evo_Subliminal_Evasion2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Subliminal_Evasion2_C, 0x0870);
		}

		// class UGE_Evo_Tiger_Body_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Tiger_Body_T5__GE_Evo_Tiger_Body_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Tiger_Body_T5_C, 0x0870);
		}

		// class UGE_Evo_Tiger_Body_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Tiger_Body_T4__GE_Evo_Tiger_Body_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Tiger_Body_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Tail_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Tail_T2__GE_Evo_Bone_Tail_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Tail_T2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Tail_Damage_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Tail_Damage_T2__GE_Evo_Shadow_Tail_Damage_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Tail_Damage_T2_C, 0x0870);
		}

		// class ALG_Sewer_Column_Lights_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_Sewer_Column_Lights__LG_Sewer_Column_Lights_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Sewer_Column_Lights_C, 0x0238);
		}

		// class ABP_FamilyPontoonBoat_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FamilyPontoonBoat_Fragment3__BP_FamilyPontoonBoat_Fragment3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FamilyPontoonBoat_Fragment3_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FamilyPontoonBoat_Fragment3_C, 0x0238);
		}

		// class ABP_FamilyPontoonBoat_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FamilyPontoonBoat_Fragment2__BP_FamilyPontoonBoat_Fragment2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FamilyPontoonBoat_Fragment2_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FamilyPontoonBoat_Fragment2_C, 0x0238);
		}

		// class ABP_DepthBoat_Hull_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthBoat_Hull__BP_DepthBoat_Hull_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthBoat_Hull_C, 0x0230);
		}

		// class ABP_DepthBoat_Bow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthBoat_Bow__BP_DepthBoat_Bow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthBoat_Bow_C, 0x0230);
		}

		// class UGA_M_MahiMahi_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_MahiMahi_EvadeLeft_BP__GA_M_MahiMahi_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_MahiMahi_EvadeLeft_BP_C, 0x05E0);
		}

		// class ABP_FamilyPontoonBoat_Fragment9_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FamilyPontoonBoat_Fragment9__BP_FamilyPontoonBoat_Fragment9_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FamilyPontoonBoat_Fragment9_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FamilyPontoonBoat_Fragment9_C, 0x0238);
		}

		// class ABP_FamilyPontoonBoat_Fragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FamilyPontoonBoat_Fragment7__BP_FamilyPontoonBoat_Fragment7_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FamilyPontoonBoat_Fragment7_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FamilyPontoonBoat_Fragment7_C, 0x0238);
		}

		// class ABP_FamilyPontoonBoat_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FamilyPontoonBoat_Fragment6__BP_FamilyPontoonBoat_Fragment6_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FamilyPontoonBoat_Fragment6_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FamilyPontoonBoat_Fragment6_C, 0x0238);
		}

		// class ABP_JetSki_Debris_Seat_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Debris_Seat__BP_JetSki_Debris_Seat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Debris_Seat_C, 0x0230);
		}

		// class ABP_Base_FamilyPontoonBoat_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_FamilyPontoonBoat_Empty__BP_Base_FamilyPontoonBoat_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_FamilyPontoonBoat_Empty_C, ME_DistanceSignificance, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_FamilyPontoonBoat_Empty_C, 0x0C00);
		}

		// class ABP_Base_Airboat_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Airboat_Empty__BP_Base_Airboat_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Airboat_Empty_C, ME_DistanceSignificance, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Airboat_Empty_C, 0x0C00);
		}

		// class ADEP_BP_USCG_Command_Pete3_Phase1_C : public ABP_Base_USCG_Command_Ship_C
		TEST_METHOD(BlueprintGeneratedClass__DEP_BP_USCG_Command_Pete3_Phase1__DEP_BP_USCG_Command_Pete3_Phase1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADEP_BP_USCG_Command_Pete3_Phase1_C, 0x0CE8);
		}

		// class ABP_Base_Kayak_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Kayak__BP_Base_Kayak_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Kayak_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Kayak_C, 0x0CD4);
		}

		// class AAIController_GreatWhite_Hunted_BP_C : public AAIController_GreatWhite_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_GreatWhite_Hunted_BP__AIController_GreatWhite_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_GreatWhite_Hunted_BP_C, 0x07D0);
		}

		// class AFSH_Marlin_Hunted_BP_C : public AFSH_Marlin_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Marlin_Hunted_BP__FSH_Marlin_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Marlin_Hunted_BP_C, 0x10FA);
		}

		// class AWHL_SpermWhale_Hunted_BP_C : public AWHL_SpermWhale_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WHL_SpermWhale_Hunted_BP__WHL_SpermWhale_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWHL_SpermWhale_Hunted_BP_C, 0x1050);
		}

		// class ABP_Base_PaddleBoat_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_PaddleBoat__BP_Base_PaddleBoat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PaddleBoat_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_PaddleBoat_C, 0x0CD4);
		}

		// class ABP_Sailboat_Boom_Blue_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Boom_Blue__BP_Sailboat_Boom_Blue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Boom_Blue_C, 0x0230);
		}

		// class ABP_Sailboat_Boom_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Boom__BP_Sailboat_Boom_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Boom_C, 0x0230);
		}

		// class ABP_Base_Jetski_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Jetski_Empty__BP_Base_Jetski_Empty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Jetski_Empty_C, 0x0BF8);
		}

		// class AALL_Alligator_Albino_BP_C : public AALL_Alligator_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ALL_Alligator_Albino_BP__ALL_Alligator_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AALL_Alligator_Albino_BP_C, 0x1050);
		}

		// class AFSH_SwordFish_Hunted_BP_C : public AFSH_SwordFish_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_SwordFish_Hunted_BP__FSH_SwordFish_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_SwordFish_Hunted_BP_C, 0x10FA);
		}

		// class ABP_BreakableGate_Base_C : public ABP_BreakableBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BreakableGate_Base__BP_BreakableGate_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableGate_Base_C, UnknownData_06Y4, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableGate_Base_C, NavVector, 0x0404);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BreakableGate_Base_C, 0x0410);
		}

		// class APrologue_Sub_Gameplay_3_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_Gameplay_4__Prologue_Sub_Gameplay_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_Gameplay_3_C, 0x0228);
		}

		// class AOuterLandscape_E_Low_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__OuterLandscape_E_Low__OuterLandscape_E_Low_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOuterLandscape_E_Low_C, 0x0228);
		}

		// class APrologue_Sub_Gameplay_4_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_Gameplay_5__Prologue_Sub_Gameplay_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_Gameplay_4_C, 0x0228);
		}

		// class ABP_Underwater_Trash_01_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Underwater_Trash_01__BP_Underwater_Trash_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Underwater_Trash_01_C, 0x0280);
		}

		// class ABP_Tropical_Fishball_Sprite_Small_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Tropical_Fishball_Sprite_Small__BP_Tropical_Fishball_Sprite_Small_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tropical_Fishball_Sprite_Small_C, 0x0280);
		}

		// class ABP_Minnow_Fishball_Sprite_Small_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Minnow_Fishball_Sprite_Small__BP_Minnow_Fishball_Sprite_Small_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Minnow_Fishball_Sprite_Small_C, 0x0280);
		}

		// class ALG_NavigationBuoy_Red_Light_C : public ALG_Pointlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_NavigationBuoy_Red_Light__LG_NavigationBuoy_Red_Light_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_NavigationBuoy_Red_Light_C, 0x0238);
		}

		// class ABP_Strobing_Tower_Flares_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Strobing_Tower_Flares__BP_Strobing_Tower_Flares_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Strobing_Tower_Flares_C, 0x0280);
		}

		// class ABP_Amber_Nav_Beacons_01_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Amber_Nav_Beacons_01__BP_Amber_Nav_Beacons_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Amber_Nav_Beacons_01_C, 0x0280);
		}

		// class APipeJunction_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PipeJunction_BP__PipeJunction_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TwAkEmitterArray, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Trash_Particle_SM, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Trashburg_FX_SM, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Algae_Cump_LRG_SM8, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Algae_Cump_LRG_SM7, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Algae_Cump_LRG_SM6, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Algae_Cump_LRG_SM5, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Algae_Cump_LRG_SM4, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Algae_Cump_LRG_SM3, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Algae_Cump_LRG_SM2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Algae_Cump_LRG_SM1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Algae_Cump_LRG_SM, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Sewer_Junction_Filth_Walls_SM, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Sewer_Junction_Filth_Ribs_SM, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Sewer_Junction_Filth_Walls_SM1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Sewer_Junction_Filth_CapWall_SM3, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Sewer_Junction_Filth_CapWall_SM2, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Sewer_Junction_Filth_CapWall_SM1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Sewer_Junction_Filth_CapWall_SM, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Sewer_Junction_Filth_CapRoof_SM, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Sewer_Junction_Ribs_SM, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_T, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_B, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_13, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_12, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_11, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_10, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_9, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, RightCap_3, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_8, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_7, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_6, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_5, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_4, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_3, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Cap_Light_2, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Sewer_Junction_LRG_Deco_SM, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Box, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TwAkSplineProximityEffects, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, LargePipe, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, NoMeshZone, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TopCap, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, BottomCap, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, LeftCap_4, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, LeftCap_3, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, LeftCap_2, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, RightCap_2, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, RightCap_4, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, BackCap_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, BackCap_3, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, BackCap_4, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, FrontCap_4, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, FrontCap_3, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, FrontCap_2, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, PipeJunction, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, DefaultSceneRoot, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Sides_to_Open, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TEMPSidestoOpen, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, GenerateDetail, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, UnknownData_HO5B, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Object_MinZ, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Object_Min_X, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Bounds_Min_Y, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Object_Min_Y, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, BoundsMinX, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, BoundsMaxX, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, BoundsMaxY, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, BoundsZ, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, UnknownData_2GAI, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, GridpointArray, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, GridPointSpacing, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TEMPXRow, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TEMPYRow, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, DetailDensity__, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TEMPDetailMesh, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, DetailMesh, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, StoredMeshVectors, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, DetailMaxDrawDistance, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, DetailScale, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, NoZoneVector, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, NoZoneMaxExtents, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, BottomHOleOpen, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Constructing_, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, ShowLargePipe_, 0x049A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, RemoveCenterMesh, 0x049B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, UnknownData_EXVO, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, DetailMeshInstanceST, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, InstanceGroup, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, Number_of_MeshTospawn, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TEMPInstanceComponent, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, SpawnedMeshArray, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, PipeSplineInstanceST, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, DetailMeshArray, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TEMPNumberMeshToSpawn, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, UnknownData_MULY, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TEMPStaticMeshLocation, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TempStaticMeshST, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, MeshGenerationSeed, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, HierarchicalInstanceArray, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TEMPDetailZ, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, UnknownData_ZR1Z, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, TEMPMeshArray, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, GridXOffset, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, GridYOffset, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, UpdateBool, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, DisableAllLightGen, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, UnknownData_9FRA, 0x0562);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, SpawnLightTransforms, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, SewerLightToSpawn, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, LightMaterial, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, SecondaryLighttoSpawn, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, SecondaryLightMaterial, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, SecondaryLightTransforms, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, JunctionNumber, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, UnknownData_UTEV, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APipeJunction_BP_C, SewerRingMesh, 0x05B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APipeJunction_BP_C, 0x05B8);
		}

		// class AGenerateDetail_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__GenerateDetail_BP__GenerateDetail_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenerateDetail_BP_C, Arrow, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenerateDetail_BP_C, Billboard, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenerateDetail_BP_C, TextRender, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenerateDetail_BP_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenerateDetail_BP_C, DataTable, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenerateDetail_BP_C, TraceCount, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenerateDetail_BP_C, MaxTraceDistance, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenerateDetail_BP_C, ProjectionAngle, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenerateDetail_BP_C, ZAxisOut, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenerateDetail_BP_C, UnknownData_BPE7, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGenerateDetail_BP_C, SpawnDetailOnlyOn, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGenerateDetail_BP_C, 0x0260);
		}

		// class UGE_DestroyedNutrientCache_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_DestroyedNutrientCache__GE_DestroyedNutrientCache_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_DestroyedNutrientCache_C, 0x0870);
		}

		// class UTwFileOpenOrderService : public UObject
		TEST_METHOD(Class__TwFileOpenOrder__TwFileOpenOrderService)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFileOpenOrderService, UnknownData_4BZP, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFileOpenOrderService, ServiceAddress, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwFileOpenOrderService, 0x0090);
		}

		// class ULightPropagationVolumeBlendable : public UObject
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_WCWX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_XOYK, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0078);
		}

		// class UGraphicsSettingsContentLink_C : public UME_GraphicsSettingsContentLink
		TEST_METHOD(BlueprintGeneratedClass__GraphicsSettingsContentLink__GraphicsSettingsContentLink_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraphicsSettingsContentLink_C, 0x0038);
		}

		// class UAlertEvent_Death_C : public UME_AlertEvent_Witness
		TEST_METHOD(BlueprintGeneratedClass__AlertEvent_Death__AlertEvent_Death_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlertEvent_Death_C, 0x00A0);
		}

		// class UFloppyImpulse_C : public UAnimNotifyState
		TEST_METHOD(BlueprintGeneratedClass__FloppyImpulse__FloppyImpulse_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloppyImpulse_C, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloppyImpulse_C, UnknownData_1POW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloppyImpulse_C, ForceStrength, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloppyImpulse_C, ForceVector, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloppyImpulse_C, UseLocalDirection, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloppyImpulse_C, 0x0045);
		}

		// class UGE_Evo_MutagenDigestion5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_MutagenDigestion5__GE_Evo_MutagenDigestion5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_MutagenDigestion5_C, 0x0870);
		}

		// class UGE_Evo_MutagenDigestion4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_MutagenDigestion4__GE_Evo_MutagenDigestion4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_MutagenDigestion4_C, 0x0870);
		}

		// class UWHL_SpermWhale_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__WHL_SpermWhale_ABP__WHL_SpermWhale_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWHL_SpermWhale_ABP_C, 0x5C8C);
		}

		// class UGE_Evo_Shadow_Set_Bonus5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Set_Bonus5__GE_Evo_Shadow_Set_Bonus5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Set_Bonus5_C, 0x0870);
		}

		// class UInGameMenuNavButton_BP_C : public UTwInputAwareRichTextBlockWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InGameMenuNavButton_BP__InGameMenuNavButton_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameMenuNavButton_BP_C, 0x02C8);
		}

		// class UGE_Evo_Shadow_Set_Bonus3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Set_Bonus3__GE_Evo_Shadow_Set_Bonus3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Set_Bonus3_C, 0x0870);
		}

		// class UGE_Evo_BioElectric_Set_Bonus1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_BioElectric_Set_Bonus1__GE_Evo_BioElectric_Set_Bonus1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_BioElectric_Set_Bonus1_C, 0x0870);
		}

		// class ABP_JetSki_Bounty_Speargun_C : public ABP_Base_JetSki_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Bounty_Speargun__BP_JetSki_Bounty_Speargun_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_JetSki_Bounty_Speargun_C, UberGraphFrame, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Bounty_Speargun_C, 0x0CE8);
		}

		// class ABP_EVO_Shadow_Body_Aura_T2_C : public AME_AuraDamageActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Body_Aura_T2__BP_EVO_Shadow_Body_Aura_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Body_Aura_T2_C, 0x0400);
		}

		// class UGE_Evo_Bone_Body_Lunge_ImpactVFX_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_Lunge_ImpactVFX_T4__GE_Evo_Bone_Body_Lunge_ImpactVFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_Lunge_ImpactVFX_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_AddResource_Damage_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_AddResource_Damage_T3__GE_Evo_Bone_Body_AddResource_Damage_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_AddResource_Damage_T3_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_AddResource_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_AddResource_T4__GE_Evo_Bone_Body_AddResource_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_AddResource_T4_C, 0x0870);
		}

		// class UGA_Evo_Bone_Body_T4_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_T4__GA_Evo_Bone_Body_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_T4_C, 0x05E0);
		}

		// class UGA_Evo_Bone_Body_AddResource_T4_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_AddResource_T4__GA_Evo_Bone_Body_AddResource_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_AddResource_T4_C, 0x0438);
		}

		// class UGA_Evo_Bone_Body_AddResource_Damage_T4_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_AddResource_Damage_T4__GA_Evo_Bone_Body_AddResource_Damage_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_AddResource_Damage_T4_C, 0x0438);
		}

		// class UGA_Evo_Bone_Body_T5_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_T5__GA_Evo_Bone_Body_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_T5_C, 0x05E0);
		}

		// class UGA_Evo_Bone_Body_AddResource_T5_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_AddResource_T5__GA_Evo_Bone_Body_AddResource_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_AddResource_T5_C, 0x0438);
		}

		// class UGA_Evo_Bone_Body_AddResource_Damage_T5_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_AddResource_Damage_T5__GA_Evo_Bone_Body_AddResource_Damage_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_AddResource_Damage_T5_C, 0x0438);
		}

		// class UGE_Evo_Bio_Electric_Fins_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Fins_T5__GE_Evo_Bio_Electric_Fins_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Fins_T5_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Head_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_T2__GE_Evo_Bio_Electric_Head_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_T2_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Head_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_T1__GE_Evo_Bio_Electric_Head_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_T1_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Teeth_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_T5__GE_Evo_Bio_Electric_Teeth_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_T5_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Teeth_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_T4__GE_Evo_Bio_Electric_Teeth_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_T4_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Teeth_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_T2__GE_Evo_Bio_Electric_Teeth_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_T2_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Teeth_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_T1__GE_Evo_Bio_Electric_Teeth_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_T1_C, 0x0870);
		}

		// class UBP_GE_Whipshot_XL_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_Whipshot_XL__BP_GE_Whipshot_XL_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_Whipshot_XL_C, 0x0870);
		}

		// class UMapProgressWidget_Overview_BP_C : public UMapProgressWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapProgressWidget_Overview_BP__MapProgressWidget_Overview_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProgressWidget_Overview_BP_C, 0x02C8);
		}

		// class UEpisodeListItem_BP_C : public UEpisodeItemListWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EpisodeListItem_BP__EpisodeListItem_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEpisodeListItem_BP_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEpisodeListItem_BP_C, Glow_Animation, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEpisodeListItem_BP_C, 0x0280);
		}

		// class AAssaultRifle_Projectile_Tier8_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Tier8__AssaultRifle_Projectile_Tier8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Tier8_C, 0x0270);
		}

		// class ABP_Base_BumperBoat_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_BumperBoat__BP_Base_BumperBoat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_BumperBoat_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_BumperBoat_C, 0x0CD4);
		}

		// class ABP_Yacht_Bow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Yacht_Bow__BP_Yacht_Bow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Yacht_Bow_C, 0x0230);
		}

		// class ABP_USCG_SmallSkiff_Debris_Siren_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SmallSkiff_Debris_Siren__BP_USCG_SmallSkiff_Debris_Siren_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SmallSkiff_Debris_Siren_C, 0x0230);
		}

		// class UBP_Rifle_Tier1_C : public UBP_Rifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rifle_Tier1__BP_Rifle_Tier1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rifle_Tier1_C, 0x06E0);
		}

		// class ARifle_Projectile_Tier2_C : public ARifle_Projectile_Tier1_C
		TEST_METHOD(BlueprintGeneratedClass__Rifle_Projectile_Tier2__Rifle_Projectile_Tier2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARifle_Projectile_Tier2_C, 0x0270);
		}

		// class UBP_Shotgun_Tier7_C : public UBP_Shotgun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shotgun_Tier7__BP_Shotgun_Tier7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shotgun_Tier7_C, 0x06E0);
		}

		// class UBP_Speargun_Objective_C : public UBP_Speargun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Speargun_Objective__BP_Speargun_Objective_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Speargun_Objective_C, 0x06E0);
		}

		// class UGE_SpearGun_Damage_BossSupport_C : public UGE_SpearGun_Damage_Tier2_C
		TEST_METHOD(BlueprintGeneratedClass__GE_SpearGun_Damage_BossSupport__GE_SpearGun_Damage_BossSupport_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpearGun_Damage_BossSupport_C, 0x0870);
		}

		// class UGE_Alligator_TailwhipCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Alligator_TailwhipCD_BP__GE_Alligator_TailwhipCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Alligator_TailwhipCD_BP_C, 0x0870);
		}

		// class UGE_AlligatorBiteCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AlligatorBiteCooldown_BP__GE_AlligatorBiteCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AlligatorBiteCooldown_BP_C, 0x0870);
		}

		// class AEVO_Bio_Electric_Tail_Projectile_T5_C : public AME_OverlapDamageProjectile
		TEST_METHOD(BlueprintGeneratedClass__EVO_Bio_Electric_Tail_Projectile_T5__EVO_Bio_Electric_Tail_Projectile_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEVO_Bio_Electric_Tail_Projectile_T5_C, 0x0268);
		}

		// class UGCD_Sonar_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GCD_Sonar__GCD_Sonar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCD_Sonar_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Stack_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack__GE_Evo_Shadow_Stack_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Stack_Count_15_C : public UGE_Evo_Shadow_Stack_Count_1_C
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack_Count_16__GE_Evo_Shadow_Stack_Count_15_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_Count_15_C, 0x0870);
		}

		// class UGA_M_EvadeRight_Seal_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_EvadeRight_Seal_BP__GA_M_EvadeRight_Seal_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_EvadeRight_Seal_BP_C, 0x0510);
		}

		// class ABP_FishingTrawlerTire_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawlerTire__BP_FishingTrawlerTire_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawlerTire_C, 0x0230);
		}

		// class ABP_FishingTrawlerSpool_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawlerSpool__BP_FishingTrawlerSpool_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawlerSpool_C, 0x0230);
		}

		// class ABP_TourAirBoat_Fragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TourAirBoat_Fragment7__BP_TourAirBoat_Fragment7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TourAirBoat_Fragment7_C, 0x0230);
		}

		// class ABP_TourAirBoat_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TourAirBoat_Fragment4__BP_TourAirBoat_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TourAirBoat_Fragment4_C, 0x0230);
		}

		// class ADMI_Sub_Explorable_Paths_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DMI_Sub_Explorable_Paths__DMI_Sub_Explorable_Paths_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADMI_Sub_Explorable_Paths_C, 0x0228);
		}

		// class AWorldMap_Boss_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__WorldMap_Boss__WorldMap_Boss_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldMap_Boss_C, 0x0228);
		}

		// class UGE_PlayerSharkThrowDamage_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PlayerSharkThrowDamage__GE_PlayerSharkThrowDamage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PlayerSharkThrowDamage_C, 0x0870);
		}

		// class UTutorialButton_BP_C : public UTwBaseButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__TutorialButton_BP__TutorialButton_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialButton_BP_C, 0x0438);
		}

		// class UHMN_MaleFit_ABP_C : public UHumanBase_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__HMN_MaleFit_ABP__HMN_MaleFit_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHMN_MaleFit_ABP_C, 0x9201);
		}

		// class UProloguePlayerCapturedView_BP_C : public UTwBaseView
		TEST_METHOD(WidgetBlueprintGeneratedClass__ProloguePlayerCapturedView_BP__ProloguePlayerCapturedView_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProloguePlayerCapturedView_BP_C, PlayerCapturedByPete_Widget_BP, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProloguePlayerCapturedView_BP_C, 0x02A0);
		}

		// class ABP_USCG_SmallSkiff_Debris_RightRear_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SmallSkiff_Debris_RightRear__BP_USCG_SmallSkiff_Debris_RightRear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SmallSkiff_Debris_RightRear_C, 0x0230);
		}

		// class ABP_USCG_SmallSkiff_Debris_RightMotor_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SmallSkiff_Debris_RightMotor__BP_USCG_SmallSkiff_Debris_RightMotor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SmallSkiff_Debris_RightMotor_C, 0x0230);
		}

		// class UEvolutionUpgradeButton_BP_C : public UTwBaseButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__EvolutionUpgradeButton_BP__EvolutionUpgradeButton_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolutionUpgradeButton_BP_C, 0x0438);
		}

		// class APoisonTheWaterBarrel_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PoisonTheWaterBarrel_BP__PoisonTheWaterBarrel_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheWaterBarrel_BP_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheWaterBarrel_BP_C, LeakingParticle3, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheWaterBarrel_BP_C, LeakingParticle2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheWaterBarrel_BP_C, LeakingParticle, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheWaterBarrel_BP_C, AuraSpawnLocation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheWaterBarrel_BP_C, StaticMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheWaterBarrel_BP_C, DefaultSceneRoot, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheWaterBarrel_BP_C, SpawnedAuraActor, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheWaterBarrel_BP_C, IsPoisonComplete_, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APoisonTheWaterBarrel_BP_C, 0x0261);
		}

		// class ABP_Base_Hunter_AIController_Torpedo_C : public ABP_Base_Hunter_AIController_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Hunter_AIController_Torpedo__BP_Base_Hunter_AIController_Torpedo_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Hunter_AIController_Torpedo_C, 0x07E8);
		}

		// class ATRT_Explore_Large_Turtle_BP_C : public ATRT_Large_Turtle_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TRT_Explore_Large_Turtle_BP__TRT_Explore_Large_Turtle_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATRT_Explore_Large_Turtle_BP_C, 0x1050);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0028);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0030);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_6OWX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0070);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0070);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_IC6L, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0078);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0070);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0070);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0070);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0070);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_F7WT, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0078);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0078);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0070);
		}

		// class UPropertyWrapper : public UObject
		TEST_METHOD(Class__CoreUObject__PropertyWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyWrapper, UnknownData_UKDT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyWrapper, 0x0030);
		}

		// class UMulticastDelegatePropertyWrapper : public UPropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegatePropertyWrapper, 0x0030);
		}

		// class UMulticastInlineDelegatePropertyWrapper : public UMulticastDelegatePropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegatePropertyWrapper, 0x0030);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0028);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_CNZF, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0070);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_7MC9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0050);
		}

		// class UStruct : public UField, public FStructBaseChain
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ChildProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptAndPropertyObjectReferences, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnresolvedScriptProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnversionedSchema, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x00B0);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_3ZA7, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x00C0);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_6BHU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x00A0);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_3TXI4IR906, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_9JQHUS3T5J, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_YSAVB7KURK, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00E0);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00E0);
		}

		// class USparseDelegateFunction : public UDelegateFunction
		TEST_METHOD(Class__CoreUObject__SparseDelegateFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USparseDelegateFunction, UnknownData_5YQX, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USparseDelegateFunction, 0x00F0);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_GE1S, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0230);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_M0KI, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x02B0);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_W8EB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E0);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_HDKN, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0060);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_F2O9, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03E8);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_61R8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F0);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_11MC, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x0298);
		}

		// class UMetaData : public UObject
		TEST_METHOD(Class__CoreUObject__MetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetaData, UnknownData_I0UB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetaData, 0x00C8);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_40TU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0030);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_2MU1, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0080);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_H5MG, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0078);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_0UPV, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0078);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_V2C4, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0078);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0078);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_RZ3P, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0080);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_1IE6, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0078);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0070);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0070);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0070);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0070);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0070);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0070);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_E6BR, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0078);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0078);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_GUZ3, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x0098);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_HX2B, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0078);
		}

		// class UMulticastInlineDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegateProperty, 0x0078);
		}

		// class UMulticastSparseDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastSparseDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastSparseDelegateProperty, 0x0078);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0070);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_PLHH, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x0090);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0078);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_M0QQ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0080);
		}

		// class UTwBaseWidget : public UUserWidget
		TEST_METHOD(Class__TwUIFramework__TwBaseWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseWidget, UnknownData_JM28, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseWidget, bCanEverBeFocused, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseWidget, UnknownData_J7TR, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseWidget, SortPriority, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseWidget, UnknownData_NRUO, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseWidget, ParentView, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseWidget, UnknownData_LF7M, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwBaseWidget, 0x0258);
		}

		// class UBaseSlider : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__BaseSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, OnSliderValueChanged, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, SliderWidget, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, ThumbImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, ThumbButton, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, ThumbImageBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, ThumbHoverColor, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, ThumbNormalColor, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, ThumbLengthOffset, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, ThumbWidth, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, DefaultValue, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, UnknownData_MMPH, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, bVertical, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, UnknownData_58EE, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, CursorMultiplier, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, StickDeadZone, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, BarThickness, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, SliderBarColor, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, UnknownData_4CSR, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSlider, SliderBarImageBrush, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseSlider, 0x03F8);
		}

		// class UTwClickableWidget : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwClickableWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwClickableWidget, OnWidgetClicked, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwClickableWidget, OnWidgetFocused, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwClickableWidget, OnWidgetFocusLost, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwClickableWidget, FooterText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwClickableWidget, bIsToggleable, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwClickableWidget, UnknownData_3536, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwClickableWidget, 0x02A8);
		}

		// class UTwAnimatedButton : public UTwClickableWidget
		TEST_METHOD(Class__TwUIFramework__TwAnimatedButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, OnAnimInvIconClicked, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, ButtonState, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, UnknownData_JJAQ, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, BackImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, MidImage, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, FrontImage, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, TopCanvas, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, IconImage, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, bAnimationOverride, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, UnknownData_GVJG, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, TargetToTweenMap, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, TweenAnimTargetData, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, EasingFunc, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, UnknownData_3EV8, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, BackImageTexture, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, MidImageTexture, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, FrontImageTexture, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, IconTexture, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimatedButton, UnknownData_LJRY, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAnimatedButton, 0x03C0);
		}

		// class UTwBaseButton : public UTwClickableWidget
		TEST_METHOD(Class__TwUIFramework__TwBaseButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, UnknownData_WCXW, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, bSelectedState, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, bForceHighlighted, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, bIsDisabled, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, UnknownData_03SL, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, BorderTween, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, ButtonLabel, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, FrameColorDefault, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, FrameColorHighlight, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, BodyColorDefault, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, BodyColorHighlightAndClicked, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, BodyColorClicked, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, BodyColorHighlight, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, DisabledButtonColor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, DefaultButtonColor, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, bUseBodyColorHighlight, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, UnknownData_2MS7, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, TextColorDefault, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, TextColorClicked, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, TextColorHighlight, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, bUseTextColorHighlight, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, UnknownData_8EMW, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, ButtonFont, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, ButtonTextBlock, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, ButtonCanvasPanel, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, ButtonFrameImage, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, ButtonBodyImage, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, OnHoverAkEvent, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseButton, OnClickAkEvent, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwBaseButton, 0x0438);
		}

		// class UTwBaseMenu : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwBaseMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, UnknownData_WDIA, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, DefaultPanel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, UnknownData_6ATX, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, MenuData, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, MenuPanels, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, MenuBarItems, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, bParalaxEnabled, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, UnknownData_13M2, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, MenuBarContainer, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, PanelContainer, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, bOpenDefault, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, UnknownData_I46Z, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, OnSubBackAkEvent, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, UnknownData_CY27, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, OnPanelOpenAkEvent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, OpenPanel, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, OpenPanelBarItem, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, UnknownData_9GIG, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, PendingPanel, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenu, UnknownData_JDEE, 0x0304);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwBaseMenu, 0x0308);
		}

		// class UTwBaseMenuBarHorizontal : public UHorizontalBox
		TEST_METHOD(Class__TwUIFramework__TwBaseMenuBarHorizontal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuBarHorizontal, MenuItems, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwBaseMenuBarHorizontal, 0x0180);
		}

		// class UTwBaseMenuBarItem : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwBaseMenuBarItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuBarItem, OnMenuBarItemClicked, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuBarItem, ClickableWidget, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwBaseMenuBarItem, 0x0270);
		}

		// class UTwBaseMenuPanel : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwBaseMenuPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuPanel, WidgetContainers, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuPanel, ParentMenu, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuPanel, PanelFooterText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuPanel, InAnimation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuPanel, OutAnimation, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwBaseMenuPanel, 0x0298);
		}

		// class UTwBaseView : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwBaseView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseView, ViewController, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseView, FocusWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseView, FooterText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseView, bShowFooter, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseView, UnknownData_RBRY, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseView, OnViewPoppedAkEvent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseView, OnViewPushedAkEvent, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwBaseView, 0x0298);
		}

		// class UTwBaseMenuView : public UTwBaseView
		TEST_METHOD(Class__TwUIFramework__TwBaseMenuView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuView, MenuController, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuView, AudioEventMenuPanelChanged, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwBaseMenuView, 0x02A8);
		}

		// class UTwBaseMenuWidgetContainer : public UCanvasPanel
		TEST_METHOD(Class__TwUIFramework__TwBaseMenuWidgetContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuWidgetContainer, ParallaxMoveScale, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuWidgetContainer, WidgetStartPos, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuWidgetContainer, WidgetStartOffsets, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseMenuWidgetContainer, UnknownData_ARAP, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwBaseMenuWidgetContainer, 0x0150);
		}

		// class UTwBaseModal : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwBaseModal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseModal, ViewController, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwBaseModal, 0x0260);
		}

		// class UTwBaseSlider : public UBaseSlider
		TEST_METHOD(Class__TwUIFramework__TwBaseSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseSlider, Label, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseSlider, FillBar, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseSlider, TextMask, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseSlider, EmptyText, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseSlider, FillText, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseSlider, DefaultLabelText, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseSlider, MinSliderValue, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseSlider, MaxSliderValue, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseSlider, MaxFractionalDigits, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseSlider, UnknownData_B3K6, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwBaseSlider, ValueSuffix, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwBaseSlider, 0x0460);
		}

		// class UTwCheckboxButton : public UTwBaseButton
		TEST_METHOD(Class__TwUIFramework__TwCheckboxButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwCheckboxButton, OptionLabel, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwCheckboxButton, ButtonSelectedLabel, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwCheckboxButton, ButtonUnselectedLabel, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwCheckboxButton, OptionLabelTextBlock, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwCheckboxButton, 0x0488);
		}

		// class UTwTweener : public UObject
		TEST_METHOD(Class__TwUIFramework__TwTweener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTweener, UnknownData_ECLX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTweener, EasingFunc, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTweener, UnknownData_5QSN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTweener, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTweener, PingPong, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTweener, UnknownData_4UA5, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTweener, PlayState, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTweener, UnknownData_LZT0, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwTweener, 0x0068);
		}

		// class UTwColorTweener : public UTwTweener
		TEST_METHOD(Class__TwUIFramework__TwColorTweener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwColorTweener, From, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwColorTweener, To, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwColorTweener, UnknownData_HE3L, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwColorTweener, 0x0098);
		}

		// class UTwConfirmModal : public UTwBaseModal
		TEST_METHOD(Class__TwUIFramework__TwConfirmModal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwConfirmModal, UnknownData_3G2D, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwConfirmModal, OnModalSubmitted_BP, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwConfirmModal, TitleLabel, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwConfirmModal, Body, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwConfirmModal, DeclineButtonLabel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwConfirmModal, ConfirmButtonLabel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwConfirmModal, ConfirmButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwConfirmModal, DeclineButton, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwConfirmModal, 0x02B0);
		}

		// class UTwControllerDisconnectedModal : public UTwBaseModal
		TEST_METHOD(Class__TwUIFramework__TwControllerDisconnectedModal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwControllerDisconnectedModal, DefaultWidget, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwControllerDisconnectedModal, 0x0268);
		}

		// class UTwFlipbookImageWidget : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwFlipbookImageWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFlipbookImageWidget, ImageWidget, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFlipbookImageWidget, FlipbookPlayScalarName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFlipbookImageWidget, MaterialAsset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFlipbookImageWidget, MaterialInstance, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFlipbookImageWidget, PlayMode, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFlipbookImageWidget, UnknownData_6VAU, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFlipbookImageWidget, PlaySpeed, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFlipbookImageWidget, OnFlipbookEnded, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFlipbookImageWidget, OnFlipbookReset, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFlipbookImageWidget, UnknownData_ZKNG, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwFlipbookImageWidget, 0x02A8);
		}

		// class UTwFloatTweener : public UTwTweener
		TEST_METHOD(Class__TwUIFramework__TwFloatTweener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFloatTweener, From, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFloatTweener, To, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwFloatTweener, UnknownData_VRWK, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwFloatTweener, 0x0078);
		}

		// class ATwHUD : public AHUD
		TEST_METHOD(Class__TwUIFramework__TwHUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwHUD, OnUserInputDeviceChanged, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwHUD, UnknownData_V3RO, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwHUD, ViewController, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwHUD, ViewControllerClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwHUD, ControllerDisconnectModalClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwHUD, ControllerContinueModalClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwHUD, UnknownData_JY9P, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATwHUD, 0x0358);
		}

		// class UTwInputAwareRichTextBlock : public URichTextBlock
		TEST_METHOD(Class__TwUIFramework__TwInputAwareRichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwInputAwareRichTextBlock, UnknownData_QFDL, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwInputAwareRichTextBlock, ShadowedText, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwInputAwareRichTextBlock, UnknownData_KUZ9, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwInputAwareRichTextBlock, 0x0690);
		}

		// class UTwInputAwareRichTextBlockWidget : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwInputAwareRichTextBlockWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwInputAwareRichTextBlockWidget, AssignedText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwInputAwareRichTextBlockWidget, KeybindText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwInputAwareRichTextBlockWidget, GamepadKeybindText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwInputAwareRichTextBlockWidget, ActionStrings, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwInputAwareRichTextBlockWidget, Justification, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwInputAwareRichTextBlockWidget, UnknownData_DGGN, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwInputAwareRichTextBlockWidget, RTB, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwInputAwareRichTextBlockWidget, UnknownData_ROZG, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwInputAwareRichTextBlockWidget, 0x02C8);
		}

		// class UTwLambdaButton : public UTwBaseButton
		TEST_METHOD(Class__TwUIFramework__TwLambdaButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwLambdaButton, UnknownData_3Y32, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwLambdaButton, 0x0480);
		}

		// class UTwLoadingScreen : public UUserWidget
		TEST_METHOD(Class__TwUIFramework__TwLoadingScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwLoadingScreen, MapText, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwLoadingScreen, TooltipsText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwLoadingScreen, BG, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwLoadingScreen, Image_4, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwLoadingScreen, Image_1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwLoadingScreen, UnknownData_CVJZ, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwLoadingScreen, 0x0270);
		}

		// class UTwLoadingScreenSettings : public UDeveloperSettings
		TEST_METHOD(Class__TwUIFramework__TwLoadingScreenSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwLoadingScreenSettings, TooltipEntries, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwLoadingScreenSettings, TooltipCycleTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwLoadingScreenSettings, UnknownData_LZER, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwLoadingScreenSettings, 0x0050);
		}

		// class UTwMatFloatScalarTweener : public UTwTweener
		TEST_METHOD(Class__TwUIFramework__TwMatFloatScalarTweener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMatFloatScalarTweener, From, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMatFloatScalarTweener, To, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMatFloatScalarTweener, UnknownData_O2VC, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwMatFloatScalarTweener, 0x0088);
		}

		// class UTwMoviePlayerView : public UTwBaseView
		TEST_METHOD(Class__TwUIFramework__TwMoviePlayerView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMoviePlayerView, OnMovieFinished, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMoviePlayerView, MediaPlayer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMoviePlayerView, Playlist, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMoviePlayerView, FadePrompt, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMoviePlayerView, SkipProgressBar, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMoviePlayerView, UnknownData_O372, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMoviePlayerView, SkipPromptTime, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMoviePlayerView, UnknownData_3HZ2, 0x02FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwMoviePlayerView, 0x0360);
		}

		// class UTwMultiOptionModal : public UTwBaseModal
		TEST_METHOD(Class__TwUIFramework__TwMultiOptionModal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMultiOptionModal, UnknownData_U6H5, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMultiOptionModal, Header, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMultiOptionModal, Body, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMultiOptionModal, OptionsContainer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMultiOptionModal, ButtonClass, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMultiOptionModal, IntroAnim, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMultiOptionModal, DefaultFocusButton, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMultiOptionModal, UnknownData_03SO, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwMultiOptionModal, 0x0360);
		}

		// class UTwWidgetQueue : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwWidgetQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwWidgetQueue, WidgetQueue, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwWidgetQueue, WidgetContainer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwWidgetQueue, CurrentWidget, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwWidgetQueue, bSortByPriority, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwWidgetQueue, UnknownData_6EF8, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwWidgetQueue, PumpQueueDelay, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwWidgetQueue, UnknownData_WCA0, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwWidgetQueue, 0x0288);
		}

		// class UTwMultiWidgetQueue : public UTwWidgetQueue
		TEST_METHOD(Class__TwUIFramework__TwMultiWidgetQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMultiWidgetQueue, CurrentWidgetPool, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMultiWidgetQueue, MaxWidgetCount, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwMultiWidgetQueue, UnknownData_MPTL, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwMultiWidgetQueue, 0x0310);
		}

		// class UTwRadialProgressIcon : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwRadialProgressIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadialProgressIcon, OnValueChanged, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadialProgressIcon, RadialImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadialProgressIcon, RadMat, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadialProgressIcon, RadMatFilled, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadialProgressIcon, RadialMatDynamic, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadialProgressIcon, Progress, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadialProgressIcon, DefaultColor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadialProgressIcon, DefaultRadius, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadialProgressIcon, bFilled, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadialProgressIcon, UnknownData_2HM8, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwRadialProgressIcon, 0x02A8);
		}

		// class UTwRadioWidget : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwRadioWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadioWidget, OnRadioOptionChanged, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadioWidget, Entries, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadioWidget, Buttons, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadioWidget, Spacers, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadioWidget, RadioLabelTextBlock, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadioWidget, ButtonBox, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadioWidget, ButtonClass, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRadioWidget, RadioLabel, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwRadioWidget, 0x02C8);
		}

		// class UTwRichTextBlockPlatformIconDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__TwUIFramework__TwRichTextBlockPlatformIconDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwRichTextBlockPlatformIconDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwRichTextBlockPlatformIconDecorator, 0x0030);
		}

		// class UTwScreenSpaceConstrainedWidget : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwScreenSpaceConstrainedWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwScreenSpaceConstrainedWidget, TargetActor, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwScreenSpaceConstrainedWidget, BaseHResolution, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwScreenSpaceConstrainedWidget, MinHResolution, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwScreenSpaceConstrainedWidget, ActorOffset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwScreenSpaceConstrainedWidget, UnknownData_8VHG, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwScreenSpaceConstrainedWidget, ConstrainRadiusVerticalPerc, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwScreenSpaceConstrainedWidget, UnknownData_EQ06, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwScreenSpaceConstrainedWidget, 0x0288);
		}

		// class UTwToastManagerWidget : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwToastManagerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToastManagerWidget, ToastPanel, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwToastManagerWidget, 0x0260);
		}

		// class UTwToastWidget : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwToastWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToastWidget, Duration, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToastWidget, FadeDuration, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToastWidget, OpacityTweener, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToastWidget, ToastImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToastWidget, ToastImageBackground, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToastWidget, BackgroundImage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToastWidget, UnknownData_USGM, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToastWidget, ToastText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToastWidget, ToastSubtext, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToastWidget, bFadingAway, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToastWidget, UnknownData_RL1E, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwToastWidget, 0x02A8);
		}

		// class UTwToggleButton : public UTwBaseButton
		TEST_METHOD(Class__TwUIFramework__TwToggleButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToggleButton, ToggleOffLabel, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwToggleButton, ToggleOnLabel, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwToggleButton, 0x0468);
		}

		// class UTwTooltipContainer : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwTooltipContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTooltipContainer, BasicTooltipQueue, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTooltipContainer, TooltipWidgetClass, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwTooltipContainer, 0x0268);
		}

		// class UTwTooltipWidget : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwTooltipWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTooltipWidget, LifeTime, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTooltipWidget, UnknownData_NNNH, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTooltipWidget, InAnimation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTooltipWidget, OutAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTooltipWidget, UnknownData_AG3Z, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTooltipWidget, HeaderText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTooltipWidget, BodyText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwTooltipWidget, InputText, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwTooltipWidget, 0x0290);
		}

		// class UTwUIFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TwUIFramework__TwUIFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwUIFunctionLibrary, 0x0028);
		}

		// class UTwUISettings : public UDeveloperSettings
		TEST_METHOD(Class__TwUIFramework__TwUISettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwUISettings, MultiOptionModalAssetRef, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwUISettings, 0x0060);
		}

		// class UTwUMGAngleTweener : public UTwTweener
		TEST_METHOD(Class__TwUIFramework__TwUMGAngleTweener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwUMGAngleTweener, From, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwUMGAngleTweener, To, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwUMGAngleTweener, UnknownData_SZH4, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwUMGAngleTweener, 0x0080);
		}

		// class UTwUMGOpacityTweener : public UTwTweener
		TEST_METHOD(Class__TwUIFramework__TwUMGOpacityTweener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwUMGOpacityTweener, From, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwUMGOpacityTweener, To, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwUMGOpacityTweener, UnknownData_H71H, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwUMGOpacityTweener, 0x0080);
		}

		// class UTwUMGScaleTweener : public UTwTweener
		TEST_METHOD(Class__TwUIFramework__TwUMGScaleTweener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwUMGScaleTweener, From, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwUMGScaleTweener, To, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwUMGScaleTweener, UnknownData_8TEZ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwUMGScaleTweener, 0x0088);
		}

		// class UTwVector2DTweener : public UTwTweener
		TEST_METHOD(Class__TwUIFramework__TwVector2DTweener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwVector2DTweener, From, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwVector2DTweener, To, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwVector2DTweener, UnknownData_4UDH, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwVector2DTweener, 0x00C0);
		}

		// class UTwVector3DTweener : public UTwTweener
		TEST_METHOD(Class__TwUIFramework__TwVector3DTweener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwVector3DTweener, From, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwVector3DTweener, To, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwVector3DTweener, UnknownData_0XQS, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwVector3DTweener, 0x0090);
		}

		// class UTwViewController : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwViewController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwViewController, ViewOverlay, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwViewController, ModalOverlay, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwViewController, FooterOverlay, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwViewController, ViewStack, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwViewController, ModalStack, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwViewController, ViewFooterClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwViewController, UnknownData_UPVW, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwViewController, 0x02B0);
		}

		// class UTwViewFooter : public UTwBaseWidget
		TEST_METHOD(Class__TwUIFramework__TwViewFooter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwViewFooter, WidgetControlsText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwViewFooter, ViewControlsText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwViewFooter, UnknownData_YRFJ, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwViewFooter, ViewText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwViewFooter, WidgetText, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwViewFooter, 0x02A0);
		}

		// class UAbilitySystemBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilitySystemBlueprintLibrary, 0x0028);
		}

		// class UAbilitySystemComponent : public UGameplayTasksComponent
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_UEB3, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, DefaultStartingData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, SpawnedAttributes, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, AffectedAnimInstanceTag, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_8950, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, OutgoingDuration, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, IncomingDuration, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_YEJJ, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ClientDebugStrings, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ServerDebugStrings, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_QQNH, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UserAbilityActivationInhibited, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ReplicationProxyEnabled, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, bSuppressGrantAbility, 0x03A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, bSuppressGameplayCues, 0x03A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_RMQ4, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, SpawnedTargetActors, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_OA0N, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, OwnerActor, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, AvatarActor, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_OQZU, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ActivatableAbilities, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_91YO, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, AllReplicatedInstancedAbilities, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_0I0S, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, RepAnimMontageInfo, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, bCachedIsNetSimulated, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, bPendingMontageRep, 0x0769);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_F4J3, 0x076A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, LocalAnimMontageInfo, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_6WAH, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ActiveGameplayEffects, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ActiveGameplayCues, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, MinimalReplicationGameplayCues, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_W31L, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, BlockedAbilityBindings, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_7P5I, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, MinimalReplicationTags, 0x1170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, UnknownData_6MVT, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemComponent, ReplicatedPredictionKeyMap, 0x11E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilitySystemComponent, 0x12F8);
		}

		// class AAbilitySystemDebugHUD : public AHUD
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemDebugHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbilitySystemDebugHUD, 0x0310);
		}

		// class UAbilitySystemGlobals : public UObject
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemGlobals)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, AbilitySystemGlobalsClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, UnknownData_94ZT, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailIsDeadTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailIsDeadName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailCooldownTag, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailCooldownName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailCostTag, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailCostName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailTagsBlockedTag, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailTagsBlockedName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailTagsMissingTag, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailTagsMissingName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailNetworkingTag, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, ActivateFailNetworkingName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, MinimalReplicationTagCountBits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, UnknownData_HS4S, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, TargetDataStructCache, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, bAllowGameplayModEvaluationChannels, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, DefaultGameplayModEvaluationChannel, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, UnknownData_32VQ, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GameplayModEvaluationChannelAliases, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, UnknownData_6CPF, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalCurveTableName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalCurveTable, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalAttributeMetaDataTableName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalAttributeMetaDataTable, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalAttributeSetDefaultsTableName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalAttributeSetDefaultsTableNames, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalAttributeDefaultsTables, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalGameplayCueManagerClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalGameplayCueManagerName, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GameplayCueNotifyPaths, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GameplayTagResponseTableName, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GameplayTagResponseTable, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, PredictTargetGameplayEffects, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, UnknownData_73P4, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, GlobalGameplayCueManager, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemGlobals, UnknownData_MZC3, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilitySystemGlobals, 0x0260);
		}

		// class UAbilitySystemInterface : public UInterface
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilitySystemInterface, 0x0028);
		}

		// class UAbilitySystemReplicationProxyInterface : public UInterface
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemReplicationProxyInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilitySystemReplicationProxyInterface, 0x0028);
		}

		// class UAttributeSet : public UObject
		TEST_METHOD(Class__GameplayAbilities__AttributeSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributeSet, UnknownData_SF0O, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttributeSet, 0x0030);
		}

		// class UAbilitySystemTestAttributeSet : public UAttributeSet
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemTestAttributeSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, MaxHealth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, Health, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, Mana, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, MaxMana, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, Damage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, SpellDamage, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, PhysicalDamage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, CritChance, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, CritMultiplier, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, ArmorDamageReduction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, DodgeChance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, LifeSteal, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, Strength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, StackingAttribute1, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, StackingAttribute2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilitySystemTestAttributeSet, NoStackAttribute, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilitySystemTestAttributeSet, 0x0070);
		}

		// class AAbilitySystemTestPawn : public ADefaultPawn
		TEST_METHOD(Class__GameplayAbilities__AbilitySystemTestPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbilitySystemTestPawn, UnknownData_A4AX, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAbilitySystemTestPawn, AbilitySystemComponent, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbilitySystemTestPawn, 0x02C8);
		}

		// class UAbilityTask : public UGameplayTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask, Ability, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask, AbilitySystemComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask, UnknownData_CH7G, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask, 0x0080);
		}

		// class UAbilityTask_ApplyRootMotion_Base : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_ApplyRootMotion_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, ForceName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, FinishVelocityMode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, UnknownData_ZUK8, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, FinishSetVelocity, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, FinishClampVelocity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, UnknownData_HGYF, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, MovementComponent, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotion_Base, UnknownData_W8IQ, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_ApplyRootMotion_Base, 0x00B8);
		}

		// class UAbilityTask_ApplyRootMotionConstantForce : public UAbilityTask_ApplyRootMotion_Base
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_ApplyRootMotionConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, OnFinish, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, WorldDirection, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, Strength, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, Duration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, bIsAdditive, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, UnknownData_E93B, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionConstantForce, StrengthOverTime, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_ApplyRootMotionConstantForce, 0x00E8);
		}

		// class UAbilityTask_ApplyRootMotionJumpForce : public UAbilityTask_ApplyRootMotion_Base
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_ApplyRootMotionJumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, OnFinish, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, OnLanded, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, Rotation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, Distance, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, Height, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, Duration, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, MinimumLandedTriggerTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, bFinishOnLanded, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, UnknownData_H4BL, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, PathOffsetCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, TimeMappingCurve, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionJumpForce, UnknownData_KFBF, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_ApplyRootMotionJumpForce, 0x0110);
		}

		// class UAbilityTask_ApplyRootMotionMoveToActorForce : public UAbilityTask_ApplyRootMotion_Base
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_ApplyRootMotionMoveToActorForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, OnFinished, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, UnknownData_ENS0, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, StartLocation, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, TargetLocation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, TargetActor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, TargetLocationOffset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, OffsetAlignment, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, UnknownData_YFA8, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, Duration, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, bDisableDestinationReachedInterrupt, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, bSetNewMovementMode, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, NewMovementMode, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, bRestrictSpeedToExpected, 0x0107);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, PathOffsetCurve, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, TimeMappingCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, TargetLerpSpeedHorizontalCurve, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, TargetLerpSpeedVerticalCurve, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, UnknownData_0RX8, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_ApplyRootMotionMoveToActorForce, 0x0130);
		}

		// class UAbilityTask_ApplyRootMotionMoveToForce : public UAbilityTask_ApplyRootMotion_Base
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_ApplyRootMotionMoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, OnTimedOut, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, OnTimedOutAndDestinationReached, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, StartLocation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, TargetLocation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, Duration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, bSetNewMovementMode, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, NewMovementMode, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, bRestrictSpeedToExpected, 0x00F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, UnknownData_NKRN, 0x00F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, PathOffsetCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionMoveToForce, UnknownData_CLLF, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_ApplyRootMotionMoveToForce, 0x0108);
		}

		// class UAbilityTask_ApplyRootMotionRadialForce : public UAbilityTask_ApplyRootMotion_Base
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_ApplyRootMotionRadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, OnFinish, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, Location, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, UnknownData_AAK6, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, LocationActor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, Strength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, Duration, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, Radius, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, bIsPush, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, bIsAdditive, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, bNoZForce, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, UnknownData_80A5, 0x00EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, StrengthDistanceFalloff, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, StrengthOverTime, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, bUseFixedWorldDirection, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, UnknownData_AI8J, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_ApplyRootMotionRadialForce, FixedWorldDirection, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_ApplyRootMotionRadialForce, 0x0110);
		}

		// class UAbilityTask_MoveToLocation : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_MoveToLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, OnTargetLocationReached, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, UnknownData_0A1E, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, StartLocation, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, TargetLocation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, DurationOfMovement, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, UnknownData_MPIW, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, LerpCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_MoveToLocation, LerpCurveVector, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_MoveToLocation, 0x00C8);
		}

		// class UAbilityTask_NetworkSyncPoint : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_NetworkSyncPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_NetworkSyncPoint, OnSync, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_NetworkSyncPoint, UnknownData_8V1X, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_NetworkSyncPoint, 0x0098);
		}

		// class UAbilityTask_PlayMontageAndWait : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_PlayMontageAndWait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, OnCompleted, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, OnBlendOut, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, OnInterrupted, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, OnCancelled, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, UnknownData_RR0T, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, MontageToPlay, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, Rate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, StartSection, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, AnimRootMotionTranslationScale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, bStopWhenAbilityEnds, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_PlayMontageAndWait, UnknownData_RCEF, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_PlayMontageAndWait, 0x0108);
		}

		// class UAbilityTask_Repeat : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_Repeat, OnPerformAction, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_Repeat, OnFinished, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_Repeat, UnknownData_ZHLB, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_Repeat, 0x00B8);
		}

		// class UAbilityTask_SpawnActor : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_SpawnActor, Success, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_SpawnActor, DidNotSpawn, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_SpawnActor, UnknownData_CQZC, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_SpawnActor, 0x00C8);
		}

		// class UAbilityTask_StartAbilityState : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_StartAbilityState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_StartAbilityState, OnStateEnded, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_StartAbilityState, OnStateInterrupted, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_StartAbilityState, UnknownData_BWNA, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_StartAbilityState, 0x00B8);
		}

		// class UAbilityTask_VisualizeTargeting : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_VisualizeTargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_VisualizeTargeting, TimeElapsed, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_VisualizeTargeting, UnknownData_8WL9, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_VisualizeTargeting, 0x00A8);
		}

		// class UAbilityTask_WaitAbilityActivate : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitAbilityActivate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAbilityActivate, OnActivate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAbilityActivate, UnknownData_C8AI, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitAbilityActivate, 0x0138);
		}

		// class UAbilityTask_WaitAbilityCommit : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitAbilityCommit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAbilityCommit, OnCommit, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAbilityCommit, UnknownData_KCRY, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitAbilityCommit, 0x00F8);
		}

		// class UAbilityTask_WaitAttributeChange : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitAttributeChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChange, OnChange, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChange, UnknownData_FNVE, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChange, ExternalOwner, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitAttributeChange, 0x00F8);
		}

		// class UAbilityTask_WaitAttributeChangeRatioThreshold : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitAttributeChangeRatioThreshold)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChangeRatioThreshold, OnChange, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChangeRatioThreshold, UnknownData_UZML, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChangeRatioThreshold, ExternalOwner, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitAttributeChangeRatioThreshold, 0x0140);
		}

		// class UAbilityTask_WaitAttributeChangeThreshold : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitAttributeChangeThreshold)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChangeThreshold, OnChange, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChangeThreshold, UnknownData_FSXW, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitAttributeChangeThreshold, ExternalOwner, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitAttributeChangeThreshold, 0x00F0);
		}

		// class UAbilityTask_WaitCancel : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitCancel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitCancel, OnCancel, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitCancel, UnknownData_B2CY, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitCancel, 0x0098);
		}

		// class UAbilityTask_WaitConfirm : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitConfirm)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitConfirm, OnConfirm, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitConfirm, UnknownData_ZAAT, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitConfirm, 0x00A0);
		}

		// class UAbilityTask_WaitConfirmCancel : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitConfirmCancel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitConfirmCancel, OnConfirm, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitConfirmCancel, OnCancel, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitConfirmCancel, UnknownData_IJ6F, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitConfirmCancel, 0x00A8);
		}

		// class UAbilityTask_WaitDelay : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitDelay, OnFinish, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitDelay, UnknownData_2MHA, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitDelay, 0x0098);
		}

		// class UAbilityTask_WaitGameplayEffectApplied : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEffectApplied)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied, UnknownData_K2B4, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied, ExternalOwner, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied, UnknownData_N1DT, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEffectApplied, 0x01B8);
		}

		// class UAbilityTask_WaitGameplayEffectApplied_Self : public UAbilityTask_WaitGameplayEffectApplied
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEffectApplied_Self)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied_Self, OnApplied, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied_Self, UnknownData_0BW0, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEffectApplied_Self, 0x01D8);
		}

		// class UAbilityTask_WaitGameplayEffectApplied_Target : public UAbilityTask_WaitGameplayEffectApplied
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEffectApplied_Target)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied_Target, OnApplied, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectApplied_Target, UnknownData_MWX2, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEffectApplied_Target, 0x01D8);
		}

		// class UAbilityTask_WaitGameplayEffectBlockedImmunity : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEffectBlockedImmunity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectBlockedImmunity, bLocked, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectBlockedImmunity, UnknownData_ND1O, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectBlockedImmunity, ExternalOwner, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectBlockedImmunity, UnknownData_Y7XI, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEffectBlockedImmunity, 0x0128);
		}

		// class UAbilityTask_WaitGameplayEffectRemoved : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEffectRemoved)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectRemoved, OnRemoved, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectRemoved, InvalidHandle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectRemoved, UnknownData_RLBN, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEffectRemoved, 0x00C0);
		}

		// class UAbilityTask_WaitGameplayEffectStackChange : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEffectStackChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectStackChange, OnChange, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectStackChange, InvalidHandle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEffectStackChange, UnknownData_6E2U, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEffectStackChange, 0x00B8);
		}

		// class UAbilityTask_WaitGameplayEvent : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEvent, EventReceived, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEvent, UnknownData_G0SY, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEvent, OptionalExternalTarget, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayEvent, UnknownData_UXAF, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayEvent, 0x00B0);
		}

		// class UAbilityTask_WaitGameplayTag : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayTag, UnknownData_M8KA, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayTag, OptionalExternalTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayTag, UnknownData_YEKA, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayTag, 0x00A8);
		}

		// class UAbilityTask_WaitGameplayTagAdded : public UAbilityTask_WaitGameplayTag
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayTagAdded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayTagAdded, Added, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayTagAdded, 0x00B8);
		}

		// class UAbilityTask_WaitGameplayTagRemoved : public UAbilityTask_WaitGameplayTag
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitGameplayTagRemoved)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitGameplayTagRemoved, Removed, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitGameplayTagRemoved, 0x00B8);
		}

		// class UAbilityTask_WaitInputPress : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitInputPress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitInputPress, OnPress, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitInputPress, UnknownData_BGBM, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitInputPress, 0x00A0);
		}

		// class UAbilityTask_WaitInputRelease : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitInputRelease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitInputRelease, OnRelease, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitInputRelease, UnknownData_1GKN, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitInputRelease, 0x00A0);
		}

		// class UAbilityTask_WaitMovementModeChange : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitMovementModeChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitMovementModeChange, OnChange, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitMovementModeChange, UnknownData_F9OW, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitMovementModeChange, 0x00A0);
		}

		// class UAbilityTask_WaitOverlap : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitOverlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitOverlap, OnOverlap, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitOverlap, 0x0090);
		}

		// class UAbilityTask_WaitTargetData : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitTargetData, ValidData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitTargetData, Cancelled, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitTargetData, TargetClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitTargetData, TargetActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitTargetData, UnknownData_QFSV, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitTargetData, 0x00C0);
		}

		// class UAbilityTask_WaitVelocityChange : public UAbilityTask
		TEST_METHOD(Class__GameplayAbilities__AbilityTask_WaitVelocityChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitVelocityChange, OnVelocityChage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitVelocityChange, CachedMovementComponent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTask_WaitVelocityChange, UnknownData_RWFQ, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTask_WaitVelocityChange, 0x00A8);
		}

		// class UGameplayAbility : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayAbility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_R9IQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, AbilityTags, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bReplicateInputDirectly, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, RemoteInstanceEnded, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_61TS, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, ReplicationPolicy, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, InstancingPolicy, 0x00CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bServerRespectsRemoteAbilityCancellation, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bRetriggerInstancedAbility, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_I5WL, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CurrentActivationInfo, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CurrentEventData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, NetExecutionPolicy, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, NetSecurityPolicy, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_GY51, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CostGameplayEffectClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, AbilityTriggers, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CooldownGameplayEffectClass, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CancelAbilitiesMatchingTagQuery, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CancelAbilitiesWithTag, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, BlockAbilitiesWithTag, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, ActivationOwnedTags, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, ActivationRequiredTags, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, ActivationBlockedTags, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, SourceRequiredTags, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, SourceBlockedTags, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, TargetRequiredTags, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, TargetBlockedTags, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_HPH1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, ActiveTasks, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_PDZX, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, CurrentMontage, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_B2UC, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bIsActive, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bIsCancelable, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bIsBlockingOtherAbilities, 0x03E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_6V9G, 0x03E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, bMarkPendingKillOnAbilityEnd, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility, UnknownData_Q1WZ, 0x03F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayAbility, 0x0400);
		}

		// class UGameplayAbility_CharacterJump : public UGameplayAbility
		TEST_METHOD(Class__GameplayAbilities__GameplayAbility_CharacterJump)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayAbility_CharacterJump, 0x0400);
		}

		// class UGameplayAbility_Montage : public UGameplayAbility
		TEST_METHOD(Class__GameplayAbilities__GameplayAbility_Montage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility_Montage, MontageToPlay, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility_Montage, PlayRate, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility_Montage, SectionName, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility_Montage, UnknownData_3PCC, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility_Montage, GameplayEffectClassesWhileAnimating, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbility_Montage, GameplayEffectsWhileAnimating, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayAbility_Montage, 0x0438);
		}

		// class UGameplayAbilityBlueprint : public UBlueprint
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayAbilityBlueprint, 0x00A0);
		}

		// class UGameplayAbilitySet : public UDataAsset
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilitySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayAbilitySet, Abilities, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayAbilitySet, 0x0040);
		}

		// class AGameplayAbilityTargetActor : public AActor
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityTargetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, ShouldProduceTargetDataOnServer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, UnknownData_FPSN, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, StartLocation, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, UnknownData_573D, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, MasterPC, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, OwningAbility, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, bDestroyOnConfirmation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, UnknownData_QBSY, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, SourceActor, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, ReticleParams, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, UnknownData_89WU, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, ReticleClass, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, Filter, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, bDebug, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, UnknownData_4ZBW, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, GenericDelegateBoundASC, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor, UnknownData_LW2D, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityTargetActor, 0x033C);
		}

		// class AGameplayAbilityTargetActor_Trace : public AGameplayAbilityTargetActor
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityTargetActor_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_Trace, TraceProfile, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_Trace, bTraceAffectsAimPitch, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_Trace, UnknownData_VOOV, 0x0345);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityTargetActor_Trace, 0x0350);
		}

		// class AGameplayAbilityTargetActor_GroundTrace : public AGameplayAbilityTargetActor_Trace
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityTargetActor_GroundTrace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_GroundTrace, CollisionRadius, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_GroundTrace, CollisionHeight, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_GroundTrace, UnknownData_0096, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityTargetActor_GroundTrace, 0x0370);
		}

		// class AGameplayAbilityTargetActor_ActorPlacement : public AGameplayAbilityTargetActor_GroundTrace
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityTargetActor_ActorPlacement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_ActorPlacement, PlacedActorClass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_ActorPlacement, PlacedActorMaterial, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_ActorPlacement, UnknownData_PFLF, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityTargetActor_ActorPlacement, 0x0390);
		}

		// class AGameplayAbilityTargetActor_Radius : public AGameplayAbilityTargetActor
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityTargetActor_Radius)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityTargetActor_Radius, UnknownData_S8Q4, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityTargetActor_Radius, 0x0340);
		}

		// class AGameplayAbilityTargetActor_SingleLineTrace : public AGameplayAbilityTargetActor_Trace
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityTargetActor_SingleLineTrace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityTargetActor_SingleLineTrace, 0x0350);
		}

		// class AGameplayAbilityWorldReticle : public AActor
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityWorldReticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, Parameters, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, bFaceOwnerFlat, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, bSnapToTargetedActor, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, bIsTargetValid, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, bIsTargetAnActor, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, MasterPC, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle, TargetingActor, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityWorldReticle, 0x0240);
		}

		// class AGameplayAbilityWorldReticle_ActorVisualization : public AGameplayAbilityWorldReticle
		TEST_METHOD(Class__GameplayAbilities__GameplayAbilityWorldReticle_ActorVisualization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle_ActorVisualization, CollisionComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayAbilityWorldReticle_ActorVisualization, VisualizationComponents, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayAbilityWorldReticle_ActorVisualization, 0x0258);
		}

		// class UGameplayCueInterface : public UInterface
		TEST_METHOD(Class__GameplayAbilities__GameplayCueInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueInterface, 0x0028);
		}

		// class UGameplayCueManager : public UDataAsset
		TEST_METHOD(Class__GameplayAbilities__GameplayCueManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, UnknownData_DD2N, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, RuntimeGameplayCueObjectLibrary, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, EditorGameplayCueObjectLibrary, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, UnknownData_F1VZ, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, LoadedGameplayCueNotifyClasses, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, GameplayCueClassesForPreallocation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, PendingExecuteCues, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, GameplayCueSendContextCount, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, UnknownData_UYZ0, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, PreallocationInfoList_Internal, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueManager, UnknownData_JSYB, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueManager, 0x0310);
		}

		// class AGameplayCueNotify_Actor : public AActor
		TEST_METHOD(Class__GameplayAbilities__GameplayCueNotify_Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, bAutoDestroyOnRemove, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, UnknownData_6KJN, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, AutoDestroyDelay, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, WarnIfTimelineIsStillRunning, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, WarnIfLatentActionIsStillRunning, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, UnknownData_ZYD8, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, GameplayCueTag, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, UnknownData_YDD5, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, ReferenceHelper, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, GameplayCueName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, bAutoAttachToOwner, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, IsOverride, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, bUniqueInstancePerInstigator, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, bUniqueInstancePerSourceObject, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, bAllowMultipleOnActiveEvents, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, bAllowMultipleWhileActiveEvents, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, UnknownData_901Z, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, NumPreallocatedInstances, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameplayCueNotify_Actor, UnknownData_M0IE, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameplayCueNotify_Actor, 0x0290);
		}

		// class UGameplayCueNotify_Static : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayCueNotify_Static)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_Static, GameplayCueTag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_Static, ReferenceHelper, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_Static, GameplayCueName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_Static, IsOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_Static, UnknownData_TBHK, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueNotify_Static, 0x0050);
		}

		// class UGameplayCueNotify_HitImpact : public UGameplayCueNotify_Static
		TEST_METHOD(Class__GameplayAbilities__GameplayCueNotify_HitImpact)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_HitImpact, Sound, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueNotify_HitImpact, ParticleSystem, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueNotify_HitImpact, 0x0060);
		}

		// class UGameplayCueSet : public UDataAsset
		TEST_METHOD(Class__GameplayAbilities__GameplayCueSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueSet, GameplayCueData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayCueSet, UnknownData_KF6F, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueSet, 0x0090);
		}

		// class UGameplayCueTranslator : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayCueTranslator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueTranslator, 0x0028);
		}

		// class UGameplayCueTranslator_Test : public UGameplayCueTranslator
		TEST_METHOD(Class__GameplayAbilities__GameplayCueTranslator_Test)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayCueTranslator_Test, 0x0028);
		}

		// class UGameplayEffect : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_2H6J, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, DurationPolicy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_OF3R, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, DurationMagnitude, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, Period, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, bExecutePeriodicEffectOnApplication, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, PeriodicInhibitionPolicy, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_C0OJ, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, Modifiers, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, Executions, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, ChanceToApplyToTarget, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, ApplicationRequirements, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, TargetEffectClasses, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, ConditionalGameplayEffects, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, OverflowEffects, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, bDenyOverflowApplication, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, bClearStackOnOverflow, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_N5VZ, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, PrematureExpirationEffectClasses, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, RoutineExpirationEffectClasses, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, bRequireModifierSuccessToTriggerCues, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, bSuppressStackingCues, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_WXQP, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, GameplayCues, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UIData, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, InheritableGameplayEffectTags, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, InheritableOwnedTagsContainer, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, OngoingTagRequirements, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, ApplicationTagRequirements, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, RemovalTagRequirements, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, RemoveGameplayEffectsWithTags, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, GrantedApplicationImmunityTags, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, GrantedApplicationImmunityQuery, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_1BIO, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, RemoveGameplayEffectQuery, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_9YS1, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, StackingType, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_JM1A, 0x079A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, StackLimitCount, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, StackDurationRefreshPolicy, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, StackPeriodResetPolicy, 0x07A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, StackExpirationPolicy, 0x07A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, UnknownData_FDOW, 0x07A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffect, GrantedAbilities, 0x07A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayEffect, 0x07B8);
		}

		// class UGameplayEffectCalculation : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayEffectCalculation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffectCalculation, RelevantAttributesToCapture, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayEffectCalculation, 0x0038);
		}

		// class UGameplayEffectCustomApplicationRequirement : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayEffectCustomApplicationRequirement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayEffectCustomApplicationRequirement, 0x0028);
		}

		// class UGameplayEffectExecutionCalculation : public UGameplayEffectCalculation
		TEST_METHOD(Class__GameplayAbilities__GameplayEffectExecutionCalculation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffectExecutionCalculation, bRequiresPassedInTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffectExecutionCalculation, UnknownData_1TI9, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayEffectExecutionCalculation, 0x0040);
		}

		// class UGameplayEffectUIData : public UObject
		TEST_METHOD(Class__GameplayAbilities__GameplayEffectUIData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayEffectUIData, 0x0028);
		}

		// class UGameplayEffectUIData_TextOnly : public UGameplayEffectUIData
		TEST_METHOD(Class__GameplayAbilities__GameplayEffectUIData_TextOnly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayEffectUIData_TextOnly, Description, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayEffectUIData_TextOnly, 0x0040);
		}

		// class UGameplayModMagnitudeCalculation : public UGameplayEffectCalculation
		TEST_METHOD(Class__GameplayAbilities__GameplayModMagnitudeCalculation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayModMagnitudeCalculation, bAllowNonNetAuthorityDependencyRegistration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayModMagnitudeCalculation, UnknownData_Z4ZI, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayModMagnitudeCalculation, 0x0040);
		}

		// class UGameplayTagReponseTable : public UDataAsset
		TEST_METHOD(Class__GameplayAbilities__GameplayTagReponseTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagReponseTable, Entries, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagReponseTable, UnknownData_6QKA, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagReponseTable, 0x01E8);
		}

		// class UTickableAttributeSetInterface : public UInterface
		TEST_METHOD(Class__GameplayAbilities__TickableAttributeSetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTickableAttributeSetInterface, 0x0028);
		}

		// class UGameplayTask : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_5EGH, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_9PSS, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_XJ2Z, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0068);
		}

		// class UGameplayTasksComponent : public UActorComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_FL40, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_MIYS, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_1973, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0120);
		}

		// class UGameplayTask_ClaimResource : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0068);
		}

		// class UGameplayTask_SpawnActor : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, Success, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_V1J9, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00A8);
		}

		// class UGameplayTask_TimeLimitedExecution : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_HFC5, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x0098);
		}

		// class UGameplayTask_WaitDelay : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_LWK4, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0080);
		}

		// class UGameplayTaskOwnerInterface : public UInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0028);
		}

		// class UGameplayTaskResource : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_N8FW, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_PYP9, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0038);
		}

		// class UMovieSceneMediaTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, MediaSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaTrack, 0x0068);
		}

		// class UMovieSceneMediaPlayerPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, MediaSource, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, bLoop, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, UnknownData_LQZF, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertySection, 0x00F0);
		}

		// class UMovieSceneMediaPlayerPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertyTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertyTrack, 0x0088);
		}

		// class UMovieSceneMediaSection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSource, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bLooping, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_LTQN, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, StartFrameOffset, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaTexture, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSoundComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bUseExternalMediaPlayer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_082V, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, ExternalMediaPlayer, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaSection, 0x0110);
		}

		// class UWmfMediaSettings : public UObject
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, HardwareAcceleratedVideoDecoding, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_OR1P, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0030);
		}

		// class UTcpMessagingSettings : public UObject
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_T78K, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, bStopServiceWhenAppDeactivates, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_XTOB, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0058);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0028);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Slot, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_8RC5, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AccessibleWidgetData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Visibility, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, FlowDirectionPreference, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_QBGS, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0108);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_WPJV, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0120);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0120);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_ANQG, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Priority, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_FVA3, 0x01B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_WI0R, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationCallbacks, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_ZZHR, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0230);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_547G, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0130);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_TTTD, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0130);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_1F15, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0128);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, bOverrideDefaultStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_CQBM, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyleOverride, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, MinDesiredWidth, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_V8R4, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_LUPZ, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x0668);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0028);
		}

		// class UButton : public UContentWidget
		TEST_METHOD(Class__UMG__Button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, Style, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ColorAndOpacity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, BackgroundColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, ClickMethod, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, TouchMethod, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, PressMethod, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, IsFocusable, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_LTG9, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnClicked, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnPressed, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnReleased, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnHovered, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, OnUnhovered, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButton, UnknownData_TSFB, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButton, 0x0428);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_HQ46, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_II3S, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_NJZH, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_VYA3, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x0475);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WindowVisibility, 0x0476);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x0477);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x04A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_MSZG, 0x04A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_KPMX, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_V2WH, 0x051A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_3E33, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_B46H, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x0558);
		}

		// class UImage : public UWidget
		TEST_METHOD(Class__UMG__Image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, Brush, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, BrushDelegate, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacity, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, ColorAndOpacityDelegate, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, bFlipForRightToLeftFlowDirection, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_8FYR, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, OnMouseButtonDownEvent, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImage, UnknownData_VHRA, 0x01D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImage, 0x0210);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0050);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_D6UP, 0x0133);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_7MXF, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_A5LS, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x01D8);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Content, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0038);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_AZPS, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0060);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0060);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0060);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_F6RI, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_54KJ, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, bFlipForRightToLeftFlowDirection, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_YVLP, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_1FYN, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x0270);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_KPZ8, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0060);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_8Z7P, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0068);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_ODZH, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0060);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_BORO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_U615, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0070);
		}

		// class UCheckBox : public UContentWidget
		TEST_METHOD(Class__UMG__CheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedState, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_N5KZ, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedStateDelegate, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_K38Q, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, WidgetStyle, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Style, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedImage, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedHoveredImage, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UncheckedPressedImage, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedImage, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedHoveredImage, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, CheckedPressedImage, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedImage, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedHoveredImage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UndeterminedPressedImage, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, HorizontalAlignment, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_9HDO, 0x0709);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, Padding, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_Y477, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, BorderBackgroundColor, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, IsFocusable, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_IVBS, 0x0749);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, OnCheckStateChanged, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBox, UnknownData_3A6U, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBox, 0x0770);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_ND8Z, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0068);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Radius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_ETZY, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Image, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_5DPU, 0x01A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01C0);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_B01U, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0068);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_AJ0D, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0140);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0CF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_NIFS, 0x0CF6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_1WH9, 0x0D71);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_GU3D, 0x0D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_1JJX, 0x0DA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0DF8);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Tag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_FLNH, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_U9KN, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0088);
		}

		// class UDynamicEntryBoxBase : public UWidget
		TEST_METHOD(Class__UMG__DynamicEntryBoxBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryBoxType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_68FL, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySpacing, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_V9VY, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, SpacingPattern, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySizeRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryHorizontalAlignment, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryVerticalAlignment, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_2B8Y, 0x0132);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, MaxElementSize, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_WDDD, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryWidgetPool, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBoxBase, 0x01C8);
		}

		// class UDynamicEntryBox : public UDynamicEntryBoxBase
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01D0);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsPassword, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_N1YA, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x0416);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x0417);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardTrigger, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x041A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x041B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_U06Y, 0x041E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_AXVE, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x0450);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Text, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsPassword, 0x09D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_KV3I, 0x09D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x09D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x09E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x09EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x09EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x09ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x09EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x09EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardTrigger, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x09F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x09F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x09F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_NJHE, 0x09F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_EO67, 0x0A18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0A28);
		}

		// class UExpandableArea : public UWidget
		TEST_METHOD(Class__UMG__ExpandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_75NT, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, Style, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderBrush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BorderColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, bIsExpanded, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_QKW1, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, MaxHeight, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderPadding, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, AreaPadding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, OnExpansionChanged, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, HeaderContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, BodyContent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExpandableArea, UnknownData_D03K, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExpandableArea, 0x0338);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0060);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_IC6J, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0150);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_W9GU, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_WDEY, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0070);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_H4GI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_BMRZ, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0060);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x06A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_J7VM, 0x06AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_89DN, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x06F0);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0060);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_5XIJ, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0138);
		}

		// class UUserListEntry : public UInterface
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0028);
		}

		// class UUserListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntryLibrary, 0x0028);
		}

		// class UUserObjectListEntry : public UUserListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0028);
		}

		// class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserObjectListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntryLibrary, 0x0028);
		}

		// class UListViewBase : public UWidget
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, WheelScrollMultiplier, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableScrollAnimation, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableFixedLineOffset, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_RRPZ, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, FixedLineScrollOffset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_SC20, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetPool, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_CWA8, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0218);
		}

		// class UListView : public UListViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_6I8W, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, Orientation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bIsFocusable, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_6XCY, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bReturnFocusToSelection, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_QOKT, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_F55A, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnEntryInitialized, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0368);
		}

		// class UListViewDesignerPreviewItem : public UObject
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0028);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, bFitInWindow, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x013A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x013B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_2QG9, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_255R, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0160);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0060);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_5AX4, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Rotation, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Scale, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_ECYX, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0550);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x0088);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0360);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x0088);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x0080);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_YFA3, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x042A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x042E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_XOWA, 0x042F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_LX2U, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x0460);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0BC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0BC2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0BC3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_PXLU, 0x0BC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_PJRJ, 0x0C70);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0C80);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_1OZK, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0130);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0028);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_39LU, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0118);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_VDS5, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0130);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_CS1J, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_WK94, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0058);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x02CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_Y9QO, 0x02CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_YZ88, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0318);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_UOOP, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_FDU7, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_28JN, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0150);
		}

		// class URichTextBlockImageDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0030);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_ISJG, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0138);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_0KAM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_INKQ, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0060);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_M05J, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_J64H, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0140);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_WPAG, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0060);
		}

		// class UScrollBar : public UWidget
		TEST_METHOD(Class__UMG__ScrollBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, WidgetStyle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Style, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbar, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, bAlwaysShowScrollbarTrack, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Orientation, 0x05E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_MXKX, 0x05E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Thickness, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, Padding, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBar, UnknownData_JJLO, 0x05FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBar, 0x0610);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x0829);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x082A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_7EZ9, 0x082B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarPadding, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbarTrack, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x0846);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAnimateWheelScrolling, 0x0847);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_6FXD, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollWhenFocusChanges, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_DTP9, 0x0852);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WheelScrollMultiplier, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_F3YT, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0880);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_2XBK, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0058);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_271I, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinAspectRatio, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_HC2G, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0158);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_FSM2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_A6UF, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0060);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0028);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, Material, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0060);
		}

		// class USlateAccessibleWidgetData : public UObject
		TEST_METHOD(Class__UMG__SlateAccessibleWidgetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, bCanChildrenBeAccessible, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleBehavior, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryBehavior, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_VZ1R, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleTextDelegate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryTextDelegate, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateAccessibleWidgetData, 0x0080);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MinValue, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MaxValue, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_SORH, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_50QQ, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x048F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_G5OG, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_2JGV, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x04F8);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_UJV1, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0120);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_P3FV, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinFractionalDigits, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxFractionalDigits, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, bAlwaysUsesDeltaSnap, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_WM7U, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Delta, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_9D4Z, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_QQ0O, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_DCVS, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_56U8, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_JQJJ, 0x0504);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0518);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_6TLK, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0068);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, StrikeBrush, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bSimpleTextMode, 0x028E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_8WDZ, 0x028F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x02A0);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_86J3, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, Image, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_Z04X, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01B0);
		}

		// class UTileView : public UListView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_OND2, 0x0372);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x0388);
		}

		// class UTreeView : public UListView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_3SGR, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_KSU9, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x03C0);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_KXOL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, Animation, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_B0J0, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x07A8);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_NNXN, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0148);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_2B2D, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_6JLY, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0050);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_AHD8, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0130);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_VWKU, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_92WK, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0060);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_A0F0, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0148);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0060);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_810L, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0378);
		}

		// class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__UMG__WidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationDelegateBinding, 0x0038);
		}

		// class UWidgetAnimationPlayCallbackProxy : public UObject
		TEST_METHOD(Class__UMG__WidgetAnimationPlayCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, Finished, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, UnknownData_ZKZ1, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationPlayCallbackProxy, 0x0048);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0060);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_ZCUA, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, TemplateAsset, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Template, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x0398);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0028);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_EHPS, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_W8GM, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_62PK, 0x0223);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_KUWA, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x03DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_8H72, 0x03DB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x03E0);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0028);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Left, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Previous, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0100);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_QX8B, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0138);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_RXP4, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_ORPC, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0058);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0030);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_RN45, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0140);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_1JMC, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0060);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_2UJW, 0x012D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0140);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_3Y8T, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_AU5I, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0060);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, SectionToKey, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x0088);
		}

		// class UMovieSceneTransformOrigin : public UInterface
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0028);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0108);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_FWF6, 0x011E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0120);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0068);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0068);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_XE5D, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_88IR, 0x01AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B0);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0068);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_480X, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Rotation, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Scale, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_0YUF, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_JX1M, 0x072D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0730);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x0088);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0220);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x0088);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartFrameOffset, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_0VXN, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttachActorData, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_VYRK, 0x02F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0330);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0068);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_DZ3Z, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0178);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x0088);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0178);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x0090);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayRate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendOutTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_7JI5, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0120);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0068);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0108);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, bCanBlend, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, UnknownData_NVIX, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0070);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_ZX7C, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_S8JH, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0120);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0068);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0180);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0068);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0360);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_W7V6, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x0090);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0178);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x0090);
		}

		// class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x0088);
		}

		// class UMovieSceneEventSectionBase : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E0);
		}

		// class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, Event, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x0108);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01E0);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_MQIP, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_N6VL, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventReceivers, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0080);
		}

		// class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0168);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0180);
		}

		// class UMovieSceneFadeSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_N2NO, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x0198);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x0088);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x0088);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0170);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x0088);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, Visibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_V9AX, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x00F8);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0068);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0068);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0070);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_2H18, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0070);
		}

		// class UMovieSceneObjectPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertySection, ObjectChannel, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertySection, 0x01A0);
		}

		// class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, PropertyClass, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertyTrack, 0x0090);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, BoolParameterNamesAndCurves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, Vector2DParameterNamesAndCurves, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, TransformParameterNamesAndCurves, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0140);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0068);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0178);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0068);
		}

		// class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialSection, MaterialChannel, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialSection, 0x01A0);
		}

		// class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, MaterialIndex, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_LO32, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialTrack, 0x0090);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Animation, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, PlayRate, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_U4RL, 0x01D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x01E0);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_P0FR, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x0070);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0180);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x0088);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0178);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0078);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0180);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x0088);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x0088);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_SOZR, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0368);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_Y36F, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x0090);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x0088);
		}

		// class UClothConfigCommon : public UClothConfigBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigCommon, 0x0028);
		}

		// class UClothSharedConfigCommon : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothSharedConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedConfigCommon, 0x0028);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0028);
		}

		// class UClothingAssetCommon : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, PhysicsAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfigs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSharedSimConfig, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSimConfig, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ChaosClothSimConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothLODData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LODData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LodMap, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneIndices, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ReferenceBoneIndex, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_OZTJ, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, CustomData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfig, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_STZ4, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCommon, 0x01F0);
		}

		// class UClothLODDataCommon_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothLODDataCommon_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, PhysicalMeshData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, ClothPhysicalMeshData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, CollisionData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, UnknownData_H4DM, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothLODDataCommon_Legacy, 0x0188);
		}

		// class UCustomMeshComponent : public UMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_Y40U, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_GZL2, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x0450);
		}

		// class UClothConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigBase, 0x0028);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0028);
		}

		// class UClothingSimulationInteractor : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_26W8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0030);
		}

		// class UClothSharedSimConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothSharedSimConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedSimConfigBase, 0x0028);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0048);
		}

		// class UClothPhysicalMeshDataBase_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothPhysicalMeshDataBase_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Vertices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Normals, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Indices, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, InverseMasses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, BoneData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, NumFixedVerts, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, MaxBoneWeights, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, SelfCollisionIndices, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, UnknownData_9RMF, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataBase_Legacy, 0x00E0);
		}

		// class ULocationServices : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServices)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServices, 0x0028);
		}

		// class ULocationServicesImpl : public UObject
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServicesImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocationServicesImpl, OnLocationChanged, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServicesImpl, 0x0038);
		}

		// class UMobileInstalledContent : public UObject
		TEST_METHOD(Class__MobilePatchingUtils__MobileInstalledContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileInstalledContent, UnknownData_WR6R, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileInstalledContent, 0x0048);
		}

		// class UMobilePendingContent : public UMobileInstalledContent
		TEST_METHOD(Class__MobilePatchingUtils__MobilePendingContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobilePendingContent, UnknownData_Z97Y, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePendingContent, 0x0088);
		}

		// class UMobilePatchingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MobilePatchingUtils__MobilePatchingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobilePatchingLibrary, 0x0028);
		}

		// class UChaosClothingSimulationFactory : public UClothingSimulationFactory
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationFactory, 0x0028);
		}

		// class UChaosClothingSimulationInteractor : public UClothingSimulationInteractor
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothingSimulationInteractor, UnknownData_YVMC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationInteractor, 0x0040);
		}

		// class UChaosClothConfig : public UClothConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MassMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_1DC4, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UniformMass, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TotalMass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Density, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MinPerParticleMass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, EdgeStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, BendingStiffness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AreaStiffness, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, VolumeStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, StrainLimitingStiffness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LimitScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGeodesicDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_3D5U, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, ShapeTargetStiffness, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, CollisionThickness, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, FrictionCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DampingCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DragCoefficient, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AnimDriveSpringStiffness, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseBendingElements, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseTetrahedralConstraints, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseThinShellVolumeConstraints, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseSelfCollisions, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseContinuousCollisionDetection, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_HJMH, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LinearVelocityScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AngularVelocityScale, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothConfig, 0x0088);
		}

		// class UChaosClothSharedSimConfig : public UClothSharedConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothSharedSimConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, IterationCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SubdivisionCount, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SelfCollisionThickness, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, CollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseDampingOverride, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_OX4A, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Damping, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseGravityOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_UCP9, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, GravityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Gravity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseLocalSpaceSimulation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseXPBDConstraints, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_6OAZ, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothSharedSimConfig, 0x0058);
		}

		// class UDefaultLevelSequenceInstanceData : public UObject
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_9E5C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_WJ9C, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// class ULevelSequenceMetaData : public UInterface
		TEST_METHOD(Class__LevelSequence__LevelSequenceMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceMetaData, 0x0028);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x0498);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0028);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_1O4M, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, Settings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0050);
		}

		// class ALevelSequenceActor : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_EL1L, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, PlaybackSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_VT8H, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, SequencePlayer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, LevelSequence, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, AdditionalEventReceivers, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, CameraSettings, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_VL1F, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInOptions, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BindingOverrides, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_1M52, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, DefaultInstanceData, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, OnSequenceDoneLoading, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, AspectRatioAxisConstraint, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_94LO, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, BurnInInstance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, bShowBurnin, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceActor, UnknownData_06ZC, 0x02C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceActor, 0x02C8);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x02F0);
		}

		// class ULevelSequenceDirector : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, Player, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0030);
		}

		// class ULegacyLevelSequenceDirectorBlueprint : public UBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00A0);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_5D8T, 0x0898);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x09A0);
		}

		// class ALevelSequenceMediaController : public AActor
		TEST_METHOD(Class__LevelSequence__LevelSequenceMediaController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_MX10, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, Sequence, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, MediaComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, ServerStartTimeSeconds, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelSequenceMediaController, UnknownData_1H4K, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelSequenceMediaController, 0x0248);
		}

		// class UBP_ManeaterGameInstance_C : public UME_GameInstance
		TEST_METHOD(BlueprintGeneratedClass__BP_ManeaterGameInstance__BP_ManeaterGameInstance_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ManeaterGameInstance_C, PersistentLevel, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_ManeaterGameInstance_C, PersistentLevelObject, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ManeaterGameInstance_C, 0x0430);
		}

		// class UManeaterCinematicView_BP_C : public UManeaterCinematicView
		TEST_METHOD(WidgetBlueprintGeneratedClass__ManeaterCinematicView_BP__ManeaterCinematicView_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterCinematicView_BP_C, UberGraphFrame, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterCinematicView_BP_C, ButtonCanvas, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterCinematicView_BP_C, CreditScrollWidget_BP, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterCinematicView_BP_C, SubtitleWidget, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterCinematicView_BP_C, TVChannelLogo_BP, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterCinematicView_BP_C, TVShowBug_BP, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterCinematicView_BP_C, TVShowHashtag_BP, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterCinematicView_BP_C, TVShowLocTime_BP, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterCinematicView_BP_C, TVShowLower3rd_BP, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterCinematicView_BP_C, 0x02E8);
		}

		// class UDeathView_BP_C : public UDeathView
		TEST_METHOD(WidgetBlueprintGeneratedClass__DeathView_BP__DeathView_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView_BP_C, UberGraphFrame, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView_BP_C, splatterbg, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView_BP_C, SubtitleWidget, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathView_BP_C, 0x03B0);
		}

		// class UMainMenuPanelButton_BP_C : public UTwBaseButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__MainMenuPanelButton_BP__MainMenuPanelButton_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuPanelButton_BP_C, 0x0438);
		}

		// class UGE_Evo_Bio_Electric_Head_StunCharacter_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_StunCharacter_T5__GE_Evo_Bio_Electric_Head_StunCharacter_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_StunCharacter_T5_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Head_StunCharacter_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_StunCharacter_T4__GE_Evo_Bio_Electric_Head_StunCharacter_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_StunCharacter_T4_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Head_StunCharacter_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_StunCharacter_T3__GE_Evo_Bio_Electric_Head_StunCharacter_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_StunCharacter_T3_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Head_StunCharacter_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_StunCharacter_T2__GE_Evo_Bio_Electric_Head_StunCharacter_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_StunCharacter_T2_C, 0x0870);
		}

		// class UGE_HeldTailWhip_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HeldTailWhip__GE_HeldTailWhip_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HeldTailWhip_C, 0x0870);
		}

		// class UGE_ApexAlligator_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_ApexAlligator_Native__GE_ApexAlligator_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ApexAlligator_Native_C, 0x0870);
		}

		// class AAIController_Apex_Alligator_BP_C : public AAIController_Alligator_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Apex_Alligator_BP__AIController_Apex_Alligator_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Apex_Alligator_BP_C, UberGraphFrame, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Apex_Alligator_BP_C, 0x07D8);
		}

		// class UGE_Apex_HammerHead_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Apex_HammerHead_Native__GE_Apex_HammerHead_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Apex_HammerHead_Native_C, 0x0870);
		}

		// class AAIController_HammerHead_Apex_BP_C : public AAIController_HammerHead_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_HammerHead_Apex_BP__AIController_HammerHead_Apex_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_HammerHead_Apex_BP_C, UberGraphFrame, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_HammerHead_Apex_BP_C, 0x07D8);
		}

		// class ABP_Whipshot_Stun_M_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Whipshot_Stun_M__BP_Whipshot_Stun_M_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Whipshot_Stun_M_C, 0x02D0);
		}

		// class UGA_M_HammerheadLandLunge_BP_C : public UGA_M_LandLunge_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_HammerheadLandLunge_BP__GA_M_HammerheadLandLunge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_HammerheadLandLunge_BP_C, 0x05E0);
		}

		// class UGA_M_HammerHead_TailWhip_BP_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_M_HammerHead_TailWhip_BP__GA_M_HammerHead_TailWhip_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_HammerHead_TailWhip_BP_C, 0x05E0);
		}

		// class UGA_M_HammerHead_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_HammerHead_EvadeRight_BP__GA_M_HammerHead_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_HammerHead_EvadeRight_BP_C, 0x05E0);
		}

		// class UGE_HammerHeadChompCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HammerHeadChompCooldown_BP__GE_HammerHeadChompCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HammerHeadChompCooldown_BP_C, 0x0870);
		}

		// class UGE_HHVulnerableTaunt_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HHVulnerableTaunt_BP__GE_HHVulnerableTaunt_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HHVulnerableTaunt_BP_C, 0x0870);
		}

		// class UGE_Evo_FatDigestion3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_FatDigestion3__GE_Evo_FatDigestion3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_FatDigestion3_C, 0x0870);
		}

		// class UGE_Evo_FatDigestion2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_FatDigestion2__GE_Evo_FatDigestion2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_FatDigestion2_C, 0x0870);
		}

		// class ABP_Whipshot_Explosion_L_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Whipshot_Explosion_L__BP_Whipshot_Explosion_L_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Whipshot_Explosion_L_C, 0x02D0);
		}

		// class UGE_Mako_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Mako_Native__GE_Mako_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Mako_Native_C, 0x0870);
		}

		// class USHK_Mako_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__SHK_Mako_ABP__SHK_Mako_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USHK_Mako_ABP_C, 0x5C8C);
		}

		// class UGE_Evo_Shadow_Body_Bonus_End_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Bonus_End_T5__GE_Evo_Shadow_Body_Bonus_End_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Bonus_End_T5_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_AddResource_Damage_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_AddResource_Damage_T5__GE_Evo_Shadow_Body_AddResource_Damage_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_AddResource_Damage_T5_C, 0x0870);
		}

		// class ABP_BarrelRaft_Fragment_A_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BarrelRaft_Fragment_A__BP_BarrelRaft_Fragment_A_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BarrelRaft_Fragment_A_C, 0x0230);
		}

		// class UCompassStrip_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CompassStrip__CompassStrip_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_3, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_4, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_7, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_8, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_9, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_10, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_11, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_12, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_13, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_14, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_15, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_16, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_17, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_18, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_19, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_20, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_21, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_22, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_23, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_24, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_25, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_26, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_27, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_28, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_29, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_30, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_31, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_32, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_33, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_34, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_35, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_36, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_37, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_38, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, CompassTick_BP_39, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassStrip_C, InvalidationBox_1, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompassStrip_C, 0x0360);
		}

		// class UEnemyOverheadWidgetContainer_BP_C : public UEnemyOverheadWidgetContainer
		TEST_METHOD(WidgetBlueprintGeneratedClass__EnemyOverheadWidgetContainer_BP__EnemyOverheadWidgetContainer_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer_BP_C, UberGraphFrame, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer_BP_C, IdleAnimationLockOn, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnemyOverheadWidgetContainer_BP_C, 0x03D0);
		}

		// class UDamageTextWidget_BP_C : public UDamageTextWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__DamageTextWidget_BP__DamageTextWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget_BP_C, EvadeAnimation, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget_BP_C, CriticalAnimation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget_BP_C, DamageAnimation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget_BP_C, HealthAnimation, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageTextWidget_BP_C, 0x0308);
		}

		// class UContextualControlWidgetEntry_BP_C : public UContextualControlWidgetEntry
		TEST_METHOD(WidgetBlueprintGeneratedClass__ContextualControlWidgetEntry_BP__ContextualControlWidgetEntry_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextualControlWidgetEntry_BP_C, 0x0268);
		}

		// class USettingsMenuController_BP_C : public USettingsMenuController
		TEST_METHOD(WidgetBlueprintGeneratedClass__SettingsMenuController_BP__SettingsMenuController_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsMenuController_BP_C, Out, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsMenuController_BP_C, In, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USettingsMenuController_BP_C, 0x0320);
		}

		// class UCreditsSettingsMenuPanel_BP_C : public UTwBaseMenuPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__CreditsSettingsMenuPanel_BP__CreditsSettingsMenuPanel_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsSettingsMenuPanel_BP_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsSettingsMenuPanel_BP_C, CreditScrollWidget_BP, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditsSettingsMenuPanel_BP_C, 0x02A8);
		}

		// class USettingsStepperButton_Prev_BP_C : public UTwBaseButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__SettingsStepperButton_Prev_BP__SettingsStepperButton_Prev_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USettingsStepperButton_Prev_BP_C, 0x0438);
		}

		// class UGE_MarlinVulnerable_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MarlinVulnerable_BP__GE_MarlinVulnerable_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MarlinVulnerable_BP_C, 0x0870);
		}

		// class UGE_BarracudaVulnerable_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_BarracudaVulnerable_BP__GE_BarracudaVulnerable_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_BarracudaVulnerable_BP_C, 0x0870);
		}

		// class UGE_AlligatorVulnerable_Long_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AlligatorVulnerable_Long_BP__GE_AlligatorVulnerable_Long_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AlligatorVulnerable_Long_BP_C, 0x0870);
		}

		// class UGE_Vulnerable_WhipshotCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Vulnerable_WhipshotCD_BP__GE_Vulnerable_WhipshotCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Vulnerable_WhipshotCD_BP_C, 0x0870);
		}

		// class UTVShowLower3rd_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TVShowLower3rd_BP__TVShowLower3rd_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVShowLower3rd_BP_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVShowLower3rd_BP_C, Lower3rdAnimation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVShowLower3rd_BP_C, CharacterNameText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVShowLower3rd_BP_C, JobText, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVShowLower3rd_BP_C, ShipNameText, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTVShowLower3rd_BP_C, 0x0258);
		}

		// class UTVShowLocTime_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TVShowLocTime_BP__TVShowLocTime_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVShowLocTime_BP_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVShowLocTime_BP_C, RegionAndTimeAnimation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVShowLocTime_BP_C, TVRegionNameText, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVShowLocTime_BP_C, TVTimeofDayText, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTVShowLocTime_BP_C, 0x0250);
		}

		// class UTVChannelLogo_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TVChannelLogo_BP__TVChannelLogo_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVChannelLogo_BP_C, PortClovisChannel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVChannelLogo_BP_C, IntroAnimation, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTVChannelLogo_BP_C, 0x0240);
		}

		// class UGE_EVO_Bio_Electric_TailElectricityFX_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Bio_Electric_TailElectricityFX_T2__GE_EVO_Bio_Electric_TailElectricityFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Bio_Electric_TailElectricityFX_T2_C, 0x0870);
		}

		// class UGE_EvadeDown_C : public UGE_Evade_C
		TEST_METHOD(BlueprintGeneratedClass__GE_EvadeDown__GE_EvadeDown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EvadeDown_C, 0x0870);
		}

		// class UGE_Lunge_Knifing_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Lunge_Knifing_T1__GE_Lunge_Knifing_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Lunge_Knifing_T1_C, 0x0870);
		}

		// class UGE_KillSequence_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillSequence__GE_KillSequence_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillSequence_C, 0x0870);
		}

		// class UGCD_General_1_5_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GCD_General_1_6__GCD_General_1_5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCD_General_1_5_C, 0x07B8);
		}

		// class UGE_EvadeLeft_Land_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EvadeLeft_Land__GE_EvadeLeft_Land_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EvadeLeft_Land_C, 0x0870);
		}

		// class UGE_EvadeLeft_Knifing_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EvadeLeft_Knifing__GE_EvadeLeft_Knifing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EvadeLeft_Knifing_C, 0x0870);
		}

		// class UGE_EvadeLeft_C : public UGE_Evade_C
		TEST_METHOD(BlueprintGeneratedClass__GE_EvadeLeft__GE_EvadeLeft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EvadeLeft_C, 0x0870);
		}

		// class UGE_ThrashStruggle_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_ThrashStruggle__GE_ThrashStruggle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ThrashStruggle_C, 0x0870);
		}

		// class UGE_ThrashState_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_ThrashState__GE_ThrashState_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ThrashState_C, 0x0870);
		}

		// class UBP_Shotgun_Base_C : public UME_WeaponComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_Shotgun_Base__BP_Shotgun_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shotgun_Base_C, 0x06E0);
		}

		// class UBP_Speargun_Tier5_C : public UBP_Speargun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Speargun_Tier5__BP_Speargun_Tier5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Speargun_Tier5_C, 0x06E0);
		}

		// class UBP_Speargun_Tier4_C : public UBP_Speargun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Speargun_Tier4__BP_Speargun_Tier4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Speargun_Tier4_C, 0x06E0);
		}

		// class ABP_Base_Skiff_Bounty_C : public ABP_Base_Skiff_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Skiff_Bounty__BP_Base_Skiff_Bounty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Skiff_Bounty_C, 0x0CDC);
		}

		// class ABP_Base_Skiff_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Skiff__BP_Base_Skiff_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Skiff_C, SpotLight, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Skiff_C, LastHitTime, 0x0CD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Skiff_C, 0x0CDC);
		}

		// class AAssaultRifle_Projectile_Tier4_C : public AAssaultRifle_Projectile_Tier3_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Tier4__AssaultRifle_Projectile_Tier4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Tier4_C, 0x0270);
		}

		// class UGE_Shotgun_Damage_Tier3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Shotgun_Damage_Tier3__GE_Shotgun_Damage_Tier3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Shotgun_Damage_Tier3_C, 0x0870);
		}

		// class ABP_HunterCaptain_TwoTonTrish_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterCaptain_TwoTonTrish__BP_HunterCaptain_TwoTonTrish_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HunterCaptain_TwoTonTrish_C, 0x0F50);
		}

		// class UGE_Evo_ProteinDigestion3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_ProteinDigestion3__GE_Evo_ProteinDigestion3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_ProteinDigestion3_C, 0x0870);
		}

		// class UGE_Evo_ProteinDigestion2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_ProteinDigestion2__GE_Evo_ProteinDigestion2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_ProteinDigestion2_C, 0x0870);
		}

		// class UGE_Evo_Amphibious_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Amphibious_T3__GE_Evo_Amphibious_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Amphibious_T3_C, 0x0870);
		}

		// class UGE_Evo_Amphibious_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Amphibious_T1__GE_Evo_Amphibious_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Amphibious_T1_C, 0x0870);
		}

		// class UGE_GreatWhiteBiteDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GreatWhiteBiteDamage_BP__GE_GreatWhiteBiteDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GreatWhiteBiteDamage_BP_C, 0x0870);
		}

		// class UGA_M_SpermWhale_Feint_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_SpermWhale_Feint_BP__GA_M_SpermWhale_Feint_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_SpermWhale_Feint_BP_C, 0x0510);
		}

		// class UGA_M_SpermWhale_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_SpermWhale_EvadeRight_BP__GA_M_SpermWhale_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_SpermWhale_EvadeRight_BP_C, 0x05E0);
		}

		// class UGE_SwordfishVulnerable_Long_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SwordfishVulnerable_Long_BP__GE_SwordfishVulnerable_Long_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SwordfishVulnerable_Long_BP_C, 0x0870);
		}

		// class UGE_MarlinVulnerable_Long_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MarlinVulnerable_Long_BP__GE_MarlinVulnerable_Long_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MarlinVulnerable_Long_BP_C, 0x0870);
		}

		// class UGE_HammerheadVulnerable_Long_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HammerheadVulnerable_Long_BP__GE_HammerheadVulnerable_Long_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HammerheadVulnerable_Long_BP_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Body_T3_C : public UGA_Evo_Shadow_Body_T1_C
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_T3__GA_Evo_Shadow_Body_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_T3_C, 0x0448);
		}

		// class UGA_EVO_Shadow_Body_Aura_T3_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_Aura_T3__GA_EVO_Shadow_Body_Aura_T3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_Aura_T3_C, UberGraphFrame, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_Aura_T3_C, Shadow_Aura, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_Aura_T3_C, 0x0410);
		}

		// class UGA_EVO_Shadow_Body_AOE_End_T3_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_AOE_End_T3__GA_EVO_Shadow_Body_AOE_End_T3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_AOE_End_T3_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_AOE_End_T3_C, 0x0408);
		}

		// class UGA_Evo_Shadow_Body_AddResource_Damage_T2_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_AddResource_Damage_T2__GA_Evo_Shadow_Body_AddResource_Damage_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_AddResource_Damage_T2_C, 0x0438);
		}

		// class UAM_EVO_Shadow_Body_Activate_T2_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_EVO_Shadow_Body_Activate_T2__AM_EVO_Shadow_Body_Activate_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EVO_Shadow_Body_Activate_T2_C, 0x05E0);
		}

		// class UGA_EVO_Shadow_Body_AOE_T2_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_AOE_T2__GA_EVO_Shadow_Body_AOE_T2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_AOE_T2_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_AOE_T2_C, 0x0408);
		}

		// class UGA_Evo_Shadow_Body_Lunge_ImpactVFX_T1_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_Lunge_ImpactVFX_T1__GA_Evo_Shadow_Body_Lunge_ImpactVFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_Lunge_ImpactVFX_T1_C, 0x05E0);
		}

		// class UGE_Evo_Bone_Body_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_T5__GE_Evo_Bone_Body_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_T5_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_LungeBonus_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_LungeBonus_T5__GE_Evo_Bone_Body_LungeBonus_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_LungeBonus_T5_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_Bonus_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_Bonus_T5__GE_Evo_Bone_Body_Bonus_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_Bonus_T5_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_T1__GE_Evo_Bone_Body_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_T1_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_LungeBonus_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_LungeBonus_T1__GE_Evo_Bone_Body_LungeBonus_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_LungeBonus_T1_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_Bonus_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_Bonus_T1__GE_Evo_Bone_Body_Bonus_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_Bonus_T1_C, 0x0870);
		}

		// class ABP_USCG_MediumSkiff_Debris_RearDoor_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_RearDoor__BP_USCG_MediumSkiff_Debris_RearDoor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_RearDoor_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_Radar_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_Radar__BP_USCG_MediumSkiff_Debris_Radar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_Radar_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_LeftSide_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_LeftSide__BP_USCG_MediumSkiff_Debris_LeftSide_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_LeftSide_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_RightSide_Boss_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_RightSide_Boss__BP_USCG_MediumSkiff_Debris_RightSide_Boss_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_RightSide_Boss_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_RearDoor_Boss_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_RearDoor_Boss__BP_USCG_MediumSkiff_Debris_RearDoor_Boss_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_RearDoor_Boss_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_FrontRightChair_Boss_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_FrontRightChair_Boss__BP_USCG_MediumSkiff_Debris_FrontRightChair_Boss_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_FrontRightChair_Boss_C, 0x0230);
		}

		// class UBP_Shotgun_Tier10_C : public UBP_Shotgun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shotgun_Tier10__BP_Shotgun_Tier10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shotgun_Tier10_C, 0x06E0);
		}

		// class ABP_Base_Small_FishingBoat_Bounty_C : public ABP_Base_Small_FishingBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Small_FishingBoat_Bounty__BP_Base_Small_FishingBoat_Bounty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Small_FishingBoat_Bounty_C, 0x0CDC);
		}

		// class ABP_Small_FishingBoat_Bounty_Mixed_Dynamite_C : public ABP_Base_Small_FishingBoat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Small_FishingBoat_Bounty_Mixed_Dynamite__BP_Small_FishingBoat_Bounty_Mixed_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Small_FishingBoat_Bounty_Mixed_Dynamite_C, 0x0CDC);
		}

		// class ABP_HunterCaptain_BayouWilly_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterCaptain_BayouWilly__BP_HunterCaptain_BayouWilly_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HunterCaptain_BayouWilly_C, 0x0F50);
		}

		// class ABP_HunterCaptain_PookiePaul_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterCaptain_PookiePaul__BP_HunterCaptain_PookiePaul_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HunterCaptain_PookiePaul_C, 0x0F50);
		}

		// class UGE_Mako_FeintCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Mako_FeintCD_BP__GE_Mako_FeintCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Mako_FeintCD_BP_C, 0x0870);
		}

		// class UGA_Evo_Bone_Fins_T2_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Fins_T2__GA_Evo_Bone_Fins_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Fins_T2_C, 0x0400);
		}

		// class UGE_Evo_Bone_Fins_Evade_ImpactFX_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Evade_ImpactFX_T3__GE_Evo_Bone_Fins_Evade_ImpactFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Evade_ImpactFX_T3_C, 0x0870);
		}

		// class UGA_Evo_Bone_Fins_T3_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Fins_T3__GA_Evo_Bone_Fins_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Fins_T3_C, 0x0400);
		}

		// class UGE_Evo_Bone_Fins_Immunity_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Immunity_T4__GE_Evo_Bone_Fins_Immunity_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Immunity_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Fins_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_T5__GE_Evo_Bone_Fins_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_T5_C, 0x0870);
		}

		// class UGE_Evo_Bone_Fins_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_T2__GE_Evo_Bone_Fins_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_T2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Fins_Bonus_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Fins_Bonus_T4__GE_Evo_Shadow_Fins_Bonus_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Fins_Bonus_T4_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Fins_Bonus_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Fins_Bonus_T5__GE_Evo_Shadow_Fins_Bonus_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Fins_Bonus_T5_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Fins_T5_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Fins_T5__GA_Evo_Shadow_Fins_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Fins_T5_C, 0x0400);
		}

		// class UGA_M_GreatWhite_ThrashRelease_BP_C : public UGA_M_ThrashRelease_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_GreatWhite_ThrashRelease_BP__GA_M_GreatWhite_ThrashRelease_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_GreatWhite_ThrashRelease_BP_C, 0x05E0);
		}

		// class UGA_M_GreatWhite_Recovery_BP_C : public UGA_M_Base_Recovery_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_GreatWhite_Recovery_BP__GA_M_GreatWhite_Recovery_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_GreatWhite_Recovery_BP_C, 0x05E0);
		}

		// class UGE_AI_Slow_25_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AI_Slow_26__GE_AI_Slow_25_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AI_Slow_25_C, 0x07B8);
		}

		// class UGE_MarlinVulnerableTaunt_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MarlinVulnerableTaunt_BP__GE_MarlinVulnerableTaunt_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MarlinVulnerableTaunt_BP_C, 0x0870);
		}

		// class UGE_SwordfishLungeCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SwordfishLungeCooldown_BP__GE_SwordfishLungeCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SwordfishLungeCooldown_BP_C, 0x0870);
		}

		// class UGA_M_Swordfish_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Swordfish_EvadeRight_BP__GA_M_Swordfish_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Swordfish_EvadeRight_BP_C, 0x05E0);
		}

		// class UGA_M_Swordfish_Feint_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Swordfish_Feint_BP__GA_M_Swordfish_Feint_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Swordfish_Feint_BP_C, 0x0510);
		}

		// class UGA_M_SwordfishLunge_BP_C : public UGA_M_LungeClamp_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_SwordfishLunge_BP__GA_M_SwordfishLunge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_SwordfishLunge_BP_C, 0x0510);
		}

		// class UGE_TranqEffect_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_TranqEffect__GE_TranqEffect_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_TranqEffect_C, 0x0870);
		}

		// class AFSH_Barracuda_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Barracuda_BP__FSH_Barracuda_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Barracuda_BP_C, VoiceGroupComponent_BP1, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Barracuda_BP_C, VoiceGroupComponent_BP, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Barracuda_BP_C, 0x1050);
		}

		// class USpeedometer_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Speedometer__Speedometer_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpeedometer_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpeedometer_C, Image_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpeedometer_C, Max, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpeedometer_C, MaxSpeed, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpeedometer_C, Speed, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpeedometer_C, MaxVal, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpeedometer_C, 0x025C);
		}

		// class ABP_Bumperboat_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bumperboat_Fragment2__BP_Bumperboat_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bumperboat_Fragment2_C, 0x0230);
		}

		// class ABP_Bumperboat_FragmentControls_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bumperboat_FragmentControls__BP_Bumperboat_FragmentControls_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bumperboat_FragmentControls_C, 0x0230);
		}

		// class ABP_PipeBomb_C : public AME_ExplodingBarrelBase
		TEST_METHOD(BlueprintGeneratedClass__BP_PipeBomb__BP_PipeBomb_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PipeBomb_C, Bubbles, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PipeBomb_C, 0x0388);
		}

		// class UQuestTrackDecoratorBP_C : public UObjectiveTrackDecorator
		TEST_METHOD(WidgetBlueprintGeneratedClass__QuestTrackDecoratorBP__QuestTrackDecoratorBP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestTrackDecoratorBP_C, 0x02C0);
		}

		// class ULevelUPToast_BP_C : public UMELevelUpToast
		TEST_METHOD(WidgetBlueprintGeneratedClass__LevelUPToast_BP__LevelUPToast_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUPToast_BP_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUPToast_BP_C, OutAnimation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelUPToast_BP_C, InAnimation, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelUPToast_BP_C, 0x0298);
		}

		// class UInfamyRankUp_BP_C : public UInfamyRankUpWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InfamyRankUp_BP__InfamyRankUp_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUp_BP_C, UberGraphFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUp_BP_C, InfamyRankUpFX, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfamyRankUp_BP_C, 0x02C8);
		}

		// class UApexSpawnToast_BP_C : public UMEApexSpawnToast
		TEST_METHOD(WidgetBlueprintGeneratedClass__ApexSpawnToast_BP__ApexSpawnToast_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApexSpawnToast_BP_C, OutAnimation, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApexSpawnToast_BP_C, InAnimation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApexSpawnToast_BP_C, Image_1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApexSpawnToast_BP_C, TwInputAwareRichTextBlock_1, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApexSpawnToast_BP_C, 0x0298);
		}

		// class UInfamyRankUpFX_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InfamyRankUpFX_Bp__InfamyRankUpFX_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpFX_BP_C, Intro, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfamyRankUpFX_BP_C, 0x0238);
		}

		// class ABP_USCG_CommandBoat_Debris_RightSeat_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_CommandBoat_Debris_RightSeat__BP_USCG_CommandBoat_Debris_RightSeat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_CommandBoat_Debris_RightSeat_C, 0x0230);
		}

		// class ABP_USCG_CommandBoat_Debris_RightRearRoof_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_CommandBoat_Debris_RightRearRoof__BP_USCG_CommandBoat_Debris_RightRearRoof_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_CommandBoat_Debris_RightRearRoof_C, 0x0230);
		}

		// class ABP_USCG_CommandBoat_Debris_RightRear_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_CommandBoat_Debris_RightRear__BP_USCG_CommandBoat_Debris_RightRear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_CommandBoat_Debris_RightRear_C, 0x0230);
		}

		// class ABP_USCG_CommandBoat_Debris_RightMotor_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_CommandBoat_Debris_RightMotor__BP_USCG_CommandBoat_Debris_RightMotor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_CommandBoat_Debris_RightMotor_C, 0x0230);
		}

		// class ABP_USCG_CommandBoat_Debris_Radar_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_CommandBoat_Debris_Radar__BP_USCG_CommandBoat_Debris_Radar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_CommandBoat_Debris_Radar_C, 0x0230);
		}

		// class ABP_USCG_CommandBoat_Debris_CenterMotor_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_CommandBoat_Debris_CenterMotor__BP_USCG_CommandBoat_Debris_CenterMotor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_CommandBoat_Debris_CenterMotor_C, 0x0230);
		}

		// class ARifle_Projectile_Tier5_C : public ARifle_Projectile_Tier1_C
		TEST_METHOD(BlueprintGeneratedClass__Rifle_Projectile_Tier5__Rifle_Projectile_Tier5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARifle_Projectile_Tier5_C, 0x0270);
		}

		// class AAssaultRifle_Projectile_Tier10_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Tier10__AssaultRifle_Projectile_Tier10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Tier10_C, 0x0270);
		}

		// class UGE_Rifle_Damage_Tier5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Rifle_Damage_Tier5__GE_Rifle_Damage_Tier5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Rifle_Damage_Tier5_C, 0x0870);
		}

		// class UGE_LMG_Damage_Bounty_C : public UGE_LMG_Damage_C
		TEST_METHOD(BlueprintGeneratedClass__GE_LMG_Damage_Bounty__GE_LMG_Damage_Bounty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_LMG_Damage_Bounty_C, 0x0870);
		}

		// class ABP_Diver_Hunter_Elite_C : public ABP_Diver_Hunter_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Diver_Hunter_Elite__BP_Diver_Hunter_Elite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Diver_Hunter_Elite_C, 0x0F70);
		}

		// class ABP_TorpedoExplosion_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_TorpedoExplosion__BP_TorpedoExplosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TorpedoExplosion_C, 0x02D0);
		}

		// class UBP_AssaultRifle_Pete3Support_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Pete3Support__BP_AssaultRifle_Pete3Support_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Pete3Support_C, 0x06E0);
		}

		// class ABP_Pete3_USCGSmall_V1_AI_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Pete3_USCGSmall_V1_AI_Controller__BP_Pete3_USCGSmall_V1_AI_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Pete3_USCGSmall_V1_AI_Controller_C, 0x07E8);
		}

		// class UGE_KillerWhale_EvadeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhale_EvadeCD_BP__GE_KillerWhale_EvadeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhale_EvadeCD_BP_C, 0x0870);
		}

		// class UGE_Apex_KillerWhale_LungeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Apex_KillerWhale_LungeCD_BP__GE_Apex_KillerWhale_LungeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Apex_KillerWhale_LungeCD_BP_C, 0x0870);
		}

		// class UGE_Apex_KillerWhale_TailwhipCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Apex_KillerWhale_TailwhipCD_BP__GE_Apex_KillerWhale_TailwhipCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Apex_KillerWhale_TailwhipCD_BP_C, 0x0870);
		}

		// class UBP_PlayerShark_Slam_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerShark_Slam_IR__BP_PlayerShark_Slam_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerShark_Slam_IR_C, 0x0040);
		}

		// class UGE_EVO_Bio_Electric_Tail_Damage_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Bio_Electric_Tail_Damage_T2__GE_EVO_Bio_Electric_Tail_Damage_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Bio_Electric_Tail_Damage_T2_C, 0x0870);
		}

		// class UGE_EVO_Bio_Electric_Tail_Damage_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Bio_Electric_Tail_Damage_T3__GE_EVO_Bio_Electric_Tail_Damage_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Bio_Electric_Tail_Damage_T3_C, 0x0870);
		}

		// class UGE_EVO_Bio_Electric_Tail_Damage_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Bio_Electric_Tail_Damage_T4__GE_EVO_Bio_Electric_Tail_Damage_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Bio_Electric_Tail_Damage_T4_C, 0x0870);
		}

		// class UStoryCompleteStat_BP_C : public UTwBaseWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StoryCompleteStat_BP__StoryCompleteStat_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteStat_BP_C, SCStat, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteStat_BP_C, SCValue, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteStat_BP_C, StatText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteStat_BP_C, StatValue, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoryCompleteStat_BP_C, 0x0298);
		}

		// class UEvolutionIconButton_BP_C : public UEvolutionIconButtonWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EvolutionIconButton_BP__EvolutionIconButton_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButton_BP_C, UberGraphFrame, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButton_BP_C, Selected, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButton_BP_C, Tooltip, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolutionIconButton_BP_C, 0x0550);
		}

		// class UFastTravelConfirmationWidget_BP_C : public UFastTravelConfirmationWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__FastTravelConfirmationWidget_BP__FastTravelConfirmationWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFastTravelConfirmationWidget_BP_C, 0x0260);
		}

		// class UBP_CrosshairNavigationWidget_C : public UCrosshairNavigationWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_CrosshairNavigationWidget__BP_CrosshairNavigationWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CrosshairNavigationWidget_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_CrosshairNavigationWidget_C, Crosshair, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CrosshairNavigationWidget_C, 0x0270);
		}

		// class UGA_M_Mako_EvadeUp_BP_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Mako_EvadeUp_BP__GA_M_Mako_EvadeUp_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Mako_EvadeUp_BP_C, 0x05E0);
		}

		// class ABP_USCG_MediumSkiff_Debris_FrontRightChair_Minion_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_FrontRightChair_Minion__BP_USCG_MediumSkiff_Debris_FrontRightChair_Minion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_FrontRightChair_Minion_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_FrontLeftChair_Minion_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_FrontLeftChair_Minion__BP_USCG_MediumSkiff_Debris_FrontLeftChair_Minion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_FrontLeftChair_Minion_C, 0x0230);
		}

		// class ABP_JetSki_Debris_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Debris_Fragment2__BP_JetSki_Debris_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Debris_Fragment2_C, 0x0230);
		}

		// class ABP_Base_Hunter_AIController_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Hunter_AIController__BP_Base_Hunter_AIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Hunter_AIController_C, 0x07E8);
		}

		// class ABP_Base_Hunter_AIController_Dynamite_C : public ABP_Base_Hunter_AIController_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Hunter_AIController_Dynamite__BP_Base_Hunter_AIController_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Hunter_AIController_Dynamite_C, 0x07E8);
		}

		// class ABP_Hunter_AIController_WithDivers_Dynamite_C : public ABP_Base_Hunter_AIController_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Hunter_AIController_WithDivers_Dynamite__BP_Hunter_AIController_WithDivers_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Hunter_AIController_WithDivers_Dynamite_C, 0x07E8);
		}

		// class ABP_Hunter_AIController_WithEliteMixedDivers_Dynamite_C : public ABP_Base_Hunter_AIController_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Hunter_AIController_WithEliteMixedDivers_Dynamite__BP_Hunter_AIController_WithEliteMixedDivers_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Hunter_AIController_WithEliteMixedDivers_Dynamite_C, 0x07E8);
		}

		// class AShotgun_Projectile_Tier2_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__Shotgun_Projectile_Tier2__Shotgun_Projectile_Tier2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShotgun_Projectile_Tier2_C, 0x0270);
		}

		// class UGE_EVO_Shadow_TailFX_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Shadow_TailFX_T1__GE_EVO_Shadow_TailFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Shadow_TailFX_T1_C, 0x0870);
		}

		// class UGE_Evo_Shadow_PoisonDebuff_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_PoisonDebuff__GE_Evo_Shadow_PoisonDebuff_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_PoisonDebuff_C, 0x0870);
		}

		// class UBP_DepthCharge_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthCharge_IR__BP_DepthCharge_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DepthCharge_IR_C, 0x0040);
		}

		// class UInvertedControlsWidget_BP_C : public UInvertedControlsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InvertedControlsWidget_BP__InvertedControlsWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertedControlsWidget_BP_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertedControlsWidget_BP_C, IntroAnimation, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertedControlsWidget_BP_C, Body, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertedControlsWidget_BP_C, Layer1, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertedControlsWidget_BP_C, Layer2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertedControlsWidget_BP_C, TextBlock_1, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvertedControlsWidget_BP_C, 0x02C0);
		}

		// class UManeaterMapPanel_BP_C : public UManeaterMapPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__ManeaterMapPanel_BP__ManeaterMapPanel_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel_BP_C, UberGraphFrame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel_BP_C, BlackBackground, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel_BP_C, Legend, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel_BP_C, MapLegend_BP, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterMapPanel_BP_C, 0x03E8);
		}

		// class UEvolutionsPanel_BP_C : public UEvolutionsPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__EvolutionsPanel_BP__EvolutionsPanel_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel_BP_C, UberGraphFrame, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel_BP_C, GrowthFX, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel_BP_C, FadeTooltip, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel_BP_C, EvolutionsBackground, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel_BP_C, EvolutionTooltip, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel_BP_C, GrowthAnimation, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel_BP_C, SharkScale_BP, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolutionsPanel_BP_C, 0x0440);
		}

		// class ABP_PetesBoat_V2_Rail2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Rail2__BP_PetesBoat_V2_Rail2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Rail2_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Rail1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Rail1__BP_PetesBoat_V2_Rail1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Rail1_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Radar_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Radar__BP_PetesBoat_V2_Radar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Radar_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Left_Side_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Left_Side__BP_PetesBoat_V2_Left_Side_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Left_Side_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_ArmoredWindow1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_ArmoredWindow1__BP_PetesBoat_V2_ArmoredWindow1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_ArmoredWindow1_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Armor1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Armor1__BP_PetesBoat_V2_Armor1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Armor1_C, 0x0230);
		}

		// class AAIController_Explorable_BP_C : public AAIController_Grouper_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Explorable_BP__AIController_Explorable_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Explorable_BP_C, 0x07C8);
		}

		// class ABP_Base_PetesBoat_V2_C : public ABP_BossBoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_PetesBoat_V2__BP_Base_PetesBoat_V2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, UberGraphFrame, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, CageMesh, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, Cine_Kyle, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, DummyElectro, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, SpotLight_1, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, SharkShield, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, SharkShieldCamera, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, SharkShieldLevelSeqActor, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, SharkShieldLevelSeqPlayer, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, ShieldLoc, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, BossShieldHealth, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, BossShieldMaxHealth, 0x0E5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, ElectroShield, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PetesBoat_V2_C, PeteKyleVictoryOffset, 0x0E68);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_PetesBoat_V2_C, 0x0E74);
		}

		// class UTutorialInfoWidget_BP_C : public UTutorialInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TutorialInfoWidget_BP__TutorialInfoWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget_BP_C, UberGraphFrame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget_BP_C, ReminderAnimation, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialInfoWidget_BP_C, 0x0300);
		}

		// class ABP_BoatBase_C : public AME_BoatPawn
		TEST_METHOD(BlueprintGeneratedClass__BP_BoatBase__BP_BoatBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, UberGraphFrame, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, SequenceActor, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, CinematicCamera, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, SequencePlayer, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, Cine_HunterSocket, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, Cine_HunterIndex, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, UnknownData_YBI3, 0x0C04);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, CameraAnim, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, HunterBaseSocket, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, Cine_HunterMontage, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, ValidPassengerCheckTimer, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, ElapsedCheckTimer, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, ValidateCheckInterval, 0x0C2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, Cine_Sequence, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, OverrideBountyName, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, UnknownData_4KUN, 0x0C39);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, OverrideFirstName, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, OverrideLastName, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, PushNameView, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, UnknownData_HP7T, 0x0C71);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, PassengerIndicesToHide, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, CameraSocketName, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, f_TTK, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, UnknownData_U3BT, 0x0C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, CineCamLight, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, CamLightEndTime, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, CamLightStartTime, 0x0CA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, CameraZoomTime, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, BoatDisabled, 0x0CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, UnknownData_34TZ, 0x0CAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, Narrator_Boss_Intro, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, HunterBossCam, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BoatBase_C, CameraIgnoreActors, 0x0CC0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BoatBase_C, 0x0CD0);
		}

		// class UEvolution_Tooltip_SetBonus_BP_C : public UTwBaseWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Evolution_Tooltip_SetBonus_BP__Evolution_Tooltip_SetBonus_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetImage1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetImage2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetImage3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetImage4, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetImage5, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetItemName1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetItemName2, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetItemName3, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetItemName4, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetItemName5, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetNameText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetTitle, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, StatDescription, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, SetNameArray, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_SetBonus_BP_C, DisableSetBonusDisplay, 0x02C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolution_Tooltip_SetBonus_BP_C, 0x02C2);
		}

		// class UEvolution_Tooltip_BP_C : public UTwBaseWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Evolution_Tooltip_BP__Evolution_Tooltip_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, ACTIVEABILITY, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, EvolutionDescText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, RarityText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, SetBonus, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, SlotTypeText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, StatDisplayList, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, TitleBorder, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, TitleText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, UpgradeCost, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, DisplayStats, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, EvolutionSetType, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, UnknownData_FJXL, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, EvolutionDefinition, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, MinimumAgeTier, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, UnknownData_QTD2, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, AssociatedSlotText, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, RarityNameText, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, EvoAbilityDisplayStats, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, CompareDisplayStats, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_BP_C, EvoAbilityStatColors, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolution_Tooltip_BP_C, 0x0328);
		}

		// class UEvolutionListWidget_BP_C : public UEvolutionListWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EvolutionListWidget_BP__EvolutionListWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolutionListWidget_BP_C, 0x02F0);
		}

		// class UKeyMappingWidget_BP_C : public UKeyMappingWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__KeyMappingWidget_BP__KeyMappingWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyMappingWidget_BP_C, 0x0540);
		}

		// class UGA_M_Catfish_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Catfish_EvadeLeft_BP__GA_M_Catfish_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Catfish_EvadeLeft_BP_C, 0x05E0);
		}

		// class UGA_M_Catfish_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Catfish_EvadeRight_BP__GA_M_Catfish_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Catfish_EvadeRight_BP_C, 0x05E0);
		}

		// class UGE_Rifle_Damage_Tier1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Rifle_Damage_Tier1__GE_Rifle_Damage_Tier1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Rifle_Damage_Tier1_C, 0x0870);
		}

		// class UGE_Rifle_Damage_Tier3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Rifle_Damage_Tier3__GE_Rifle_Damage_Tier3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Rifle_Damage_Tier3_C, 0x0870);
		}

		// class UStoryComplete_BP_C : public UStoryCompleteWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__StoryComplete_BP__StoryComplete_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryComplete_BP_C, UberGraphFrame, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryComplete_BP_C, Image_1, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryComplete_BP_C, Image_3, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoryComplete_BP_C, 0x0320);
		}

		// class UGE_Bio_Electric_Body_AOE_StunInstant_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AOE_StunInstant_T5__GE_Bio_Electric_Body_AOE_StunInstant_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AOE_StunInstant_T5_C, 0x0870);
		}

		// class ABP_Airboat_Debris_Propeller_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Debris_Propeller__BP_Airboat_Debris_Propeller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Debris_Propeller_C, 0x0230);
		}

		// class ABP_Airboat_Debris_AmmoBox_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Debris_AmmoBox__BP_Airboat_Debris_AmmoBox_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Debris_AmmoBox_C, 0x0230);
		}

		// class ABP_Base_Airboat_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Airboat_Controller__BP_Base_Airboat_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Airboat_Controller_C, 0x07E8);
		}

		// class UGE_Human_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Human_Native__GE_Human_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Human_Native_C, 0x0870);
		}

		// class UGA_Human_Electrocute_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Human_Electrocute__GA_Human_Electrocute_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Human_Electrocute_C, UberGraphFrame, 0x05E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Human_Electrocute_C, 0x05E8);
		}

		// class UGE_PlayerShakenOff_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PlayerShakenOff__GE_PlayerShakenOff_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PlayerShakenOff_C, 0x0870);
		}

		// class UGE_KillerWhale_ShakeOffDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhale_ShakeOffDamage_BP__GE_KillerWhale_ShakeOffDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhale_ShakeOffDamage_BP_C, 0x0870);
		}

		// class UGE_KillerWhale_TailwhipDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhale_TailwhipDamage_BP__GE_KillerWhale_TailwhipDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhale_TailwhipDamage_BP_C, 0x0870);
		}

		// class UGA_Evo_Bone_Head_T4_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Head_T4__GA_Evo_Bone_Head_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Head_T4_C, 0x0400);
		}

		// class UGE_Apex_AlligatorBiteCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Apex_AlligatorBiteCooldown_BP__GE_Apex_AlligatorBiteCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Apex_AlligatorBiteCooldown_BP_C, 0x0870);
		}

		// class UGE_Alligator_FeintCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Alligator_FeintCD_BP__GE_Alligator_FeintCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Alligator_FeintCD_BP_C, 0x0870);
		}

		// class AAIController_KillerWhale_BP_C : public AAIController_Hostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_KillerWhale_BP__AIController_KillerWhale_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_KillerWhale_BP_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_KillerWhale_BP_C, 0x07D0);
		}

		// class UGA_M_Alligator_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Alligator_EvadeLeft_BP__GA_M_Alligator_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Alligator_EvadeLeft_BP_C, 0x05E0);
		}

		// class UGA_Evo_Bone_Tail_FX_Emerge_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Tail_FX_Emerge_T1__GA_Evo_Bone_Tail_FX_Emerge_T1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bone_Tail_FX_Emerge_T1_C, UberGraphFrame, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bone_Tail_FX_Emerge_T1_C, Adult_Explosion_Class, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bone_Tail_FX_Emerge_T1_C, Mega_Explosion_Class, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bone_Tail_FX_Emerge_T1_C, Elder_Explosion_Class, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Tail_FX_Emerge_T1_C, 0x0420);
		}

		// class UWildlife_Base_ABP_C : public UME_AnimInstance_WildlifeNPC
		TEST_METHOD(AnimBlueprintGeneratedClass__Wildlife_Base_ABP__Wildlife_Base_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_Root, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_Slot, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendListByBool_8, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_22, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_27, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_23, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_21, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_26, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_22, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_20, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_25, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_21, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_19, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_24, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_20, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_18, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_23, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_19, 0x0D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_17, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_22, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_18, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_16, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_21, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_17, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_15, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_20, 0x1170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_16, 0x11A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_14, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_19, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_15, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_13, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendListByEnum_2, 0x1420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_12, 0x14D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_18, 0x1548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_14, 0x1578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_11, 0x1628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_17, 0x16A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_13, 0x16D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_10, 0x1780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_16, 0x17F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_12, 0x1828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_9, 0x18D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_15, 0x1950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_11, 0x1980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LocalToComponentSpace_7, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ComponentToLocalSpace_7, 0x1A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ModifyBone_12, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_8, 0x1B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_14, 0x1BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_10, 0x1C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendListByEnum, 0x1CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_13, 0x1D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_9, 0x1DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SaveCachedPose_4, 0x1E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_UseCachedPose_10, 0x1F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LayeredBoneBlend_5, 0x1F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendListByBool_7, 0x2000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequenceEvaluator, 0x20A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LocalToComponentSpace_6, 0x20E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, UnknownData_YLDY, 0x2108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LookAt_5, 0x2110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ComponentToLocalSpace_6, 0x22C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LayeredBoneBlend_4, 0x22E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_TransitionResult_7, 0x23A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_7, 0x23C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_12, 0x2440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_UseCachedPose_9, 0x2470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_11, 0x2498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_8, 0x24C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendListByBool_6, 0x2578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_UseCachedPose_8, 0x2618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_UseCachedPose_7, 0x2640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_Constraint, 0x2668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendListByBool_5, 0x2770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_6, 0x2810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_TwoWayBlend_2, 0x2888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ComponentToLocalSpace_5, 0x2950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LocalToComponentSpace_5, 0x2970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ModifyBone_11, 0x2990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendSpacePlayer_4, 0x2A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_10, 0x2B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_7, 0x2BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendListByBool_4, 0x2C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_PoseSnapshot, 0x2CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LayeredBoneBlend_3, 0x2D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_5, 0x2E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_UseCachedPose_6, 0x2EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LayeredBoneBlend_2, 0x2EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_UseCachedPose_5, 0x2FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_CopyBone, 0x2FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LocalToComponentSpace_4, 0x30C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ComponentToLocalSpace_4, 0x30E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x3100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ApplyAdditive_4, 0x31C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendSpacePlayer_3, 0x3288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, UnknownData_IGEJ, 0x3368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LookAt_4, 0x3370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LookAt_3, 0x3520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LocalToComponentSpace_3, 0x36D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ComponentToLocalSpace_3, 0x36F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ModifyBone_10, 0x3710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_UseCachedPose_4, 0x3818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ModifyBone_9, 0x3840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ModifyBone_8, 0x3948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ModifyBone_7, 0x3A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ModifyBone_6, 0x3B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x3C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ModifyBone_5, 0x3C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ModifyBone_4, 0x3D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ModifyBone_3, 0x3E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ModifyBone_2, 0x3F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LocalToComponentSpace_2, 0x40A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ModifyBone, 0x40C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_9, 0x41C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_6, 0x41F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SaveCachedPose_3, 0x42A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_UseCachedPose_3, 0x4360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_TransitionResult_6, 0x4388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_TransitionResult_5, 0x43B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LocalRefPose_4, 0x43D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_8, 0x43F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_4, 0x4420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_7, 0x4498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_5, 0x44C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_TransitionResult_4, 0x4578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_TransitionResult_3, 0x45A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LocalRefPose_3, 0x45C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_6, 0x45E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_3, 0x4610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_5, 0x4688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_4, 0x46B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ApplyAdditive_3, 0x4768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_TransitionResult_2, 0x4830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_TransitionResult, 0x4858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LocalRefPose_2, 0x4880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_4, 0x4898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer_2, 0x48C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_3, 0x4940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_3, 0x4970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ApplyAdditive_2, 0x4A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ApplyAdditive, 0x4AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult_2, 0x4BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine_2, 0x4BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SaveCachedPose_2, 0x4C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendListByBool_3, 0x4D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SaveCachedPose, 0x4DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_UseCachedPose_2, 0x4EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_UseCachedPose, 0x4EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_TwoWayBlend, 0x4EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendSpacePlayer_2, 0x4FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_SequencePlayer, 0x5098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x5110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LookAt_2, 0x5130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LookAt, 0x52E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_Trail_2, 0x5490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendSpacePlayer, 0x56F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendListByBool_2, 0x57D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_Trail, 0x5870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x5AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateResult, 0x5AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_StateMachine, 0x5B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_BlendListByBool, 0x5BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, AnimGraphNode_LocalRefPose, 0x5C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlife_Base_ABP_C, WalkPlaybackRate, 0x5C88);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWildlife_Base_ABP_C, 0x5C8C);
		}

		// class UALL_Aligator_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__ALL_Aligator_ABP__ALL_Aligator_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UALL_Aligator_ABP_C, 0x5C8C);
		}

		// class UFSH_Barracuda_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__FSH_Barracuda_ABP__FSH_Barracuda_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFSH_Barracuda_ABP_C, 0x5C8C);
		}

		// class UGA_M_KillerWhale_ShakeOff_BP_C : public UGA_M_SpermWhale_ShakeOff_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_KillerWhale_ShakeOff_BP__GA_M_KillerWhale_ShakeOff_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_KillerWhale_ShakeOff_BP_C, 0x0510);
		}

		// class ABP_JetSki_Debris_Tank_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Debris_Tank__BP_JetSki_Debris_Tank_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Debris_Tank_C, 0x0230);
		}

		// class ABP_JetSki_Debris_Steering_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Debris_Steering__BP_JetSki_Debris_Steering_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Debris_Steering_C, 0x0230);
		}

		// class ABP_Swimmer_C : public ABP_HumanBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Swimmer__BP_Swimmer_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Swimmer_C, 0x0F50);
		}

		// class ABP_HunterCaptain_TylerDixon_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterCaptain_TylerDixon__BP_HunterCaptain_TylerDixon_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HunterCaptain_TylerDixon_C, 0x0F50);
		}

		// class ABP_ElectroShield_PetePTBoat_C : public ABP_ElectroShield_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ElectroShield_PetePTBoat__BP_ElectroShield_PetePTBoat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ElectroShield_PetePTBoat_C, 0x0400);
		}

		// class ABP_ElectroShield_Pete2_C : public ABP_ElectroShield_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ElectroShield_Pete2__BP_ElectroShield_Pete2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElectroShield_Pete2_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ElectroShield_Pete2_C, 0x0408);
		}

		// class ABP_PetesBoat_V2_AI_Controller_C : public ABP_PetesBoat_V1_AI_Controller_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_AI_Controller__BP_PetesBoat_V2_AI_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_AI_Controller_C, 0x07E8);
		}

		// class ABP_USCG_Small_Bounty7_Mixed_Divers_C : public ABP_Base_USCG_Small_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Small_Bounty7_Mixed_Divers__BP_USCG_Small_Bounty7_Mixed_Divers_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty7_Mixed_Divers_C, LastHitTime_1, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty7_Mixed_Divers_C, SequencePlayer_0_1, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty7_Mixed_Divers_C, SequenceActor_0_1, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty7_Mixed_Divers_C, CinematicCamera_0_1, 0x0CF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Small_Bounty7_Mixed_Divers_C, 0x0D00);
		}

		// class ABP_USCG_Medium_Bounty7_Boss_Mixed_Divers_C : public ABP_Base_USCG_Medium_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Medium_Bounty7_Boss_Mixed_DIvers__BP_USCG_Medium_Bounty7_Boss_Mixed_Divers_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Medium_Bounty7_Boss_Mixed_Divers_C, UnknownData_DY13, 0x0CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Medium_Bounty7_Boss_Mixed_Divers_C, UberGraphFrame, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Medium_Bounty7_Boss_Mixed_Divers_C, 0x0CE8);
		}

		// class ABP_USCG_Medium_Bounty11_Shotguns_LMG_Elite_Divers_C : public ABP_Base_USCG_Medium_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Medium_Bounty11_Shotguns_LMG_Elite_Divers__BP_USCG_Medium_Bounty11_Shotguns_LMG_Elite_Divers_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Medium_Bounty11_Shotguns_LMG_Elite_Divers_C, 0x0CDC);
		}

		// class ABP_USCG_Medium_Bounty11_Assault_LMG_Elite_Divers_C : public ABP_Base_USCG_Medium_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Medium_Bounty11_Assault_LMG_Elite_Divers__BP_USCG_Medium_Bounty11_Assault_LMG_Elite_Divers_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Medium_Bounty11_Assault_LMG_Elite_Divers_C, 0x0CDC);
		}

		// class ABP_PTBoat_AI_Controller_C : public ABP_PetesBoat_V1_AI_Controller_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PTBoat_AI_Controller__BP_PTBoat_AI_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PTBoat_AI_Controller_C, 0x07E8);
		}

		// class ABP_PT_Boat_Fragment07_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PT_Boat_Fragment07__BP_PT_Boat_Fragment07_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PT_Boat_Fragment07_C, 0x0230);
		}

		// class USHK_MenuTeenShark_ABP_C : public USHK_MenuSharkBase_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__SHK_MenuTeenShark_ABP__SHK_MenuTeenShark_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USHK_MenuTeenShark_ABP_C, 0x07A0);
		}

		// class USHK_MenuAdultShark_ABP_C : public USHK_MenuSharkBase_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__SHK_MenuAdultShark_ABP__SHK_MenuAdultShark_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USHK_MenuAdultShark_ABP_C, 0x07A0);
		}

		// class USERegionObjectiveCollection_C : public UME_RegionObjectiveCollection
		TEST_METHOD(BlueprintGeneratedClass__SERegionObjectiveCollection__SERegionObjectiveCollection_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USERegionObjectiveCollection_C, 0x0040);
		}

		// class USBRegionObjectiveCollection_C : public UME_RegionObjectiveCollection
		TEST_METHOD(BlueprintGeneratedClass__SBRegionObjectiveCollection__SBRegionObjectiveCollection_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USBRegionObjectiveCollection_C, 0x0040);
		}

		// class UICRegionObjectiveCollection_C : public UME_RegionObjectiveCollection
		TEST_METHOD(BlueprintGeneratedClass__ICRegionObjectiveCollection__ICRegionObjectiveCollection_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UICRegionObjectiveCollection_C, 0x0040);
		}

		// class UBP_TakeDamage_CS_C : public UCameraShake
		TEST_METHOD(BlueprintGeneratedClass__BP_TakeDamage_CS__BP_TakeDamage_CS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TakeDamage_CS_C, 0x0160);
		}

		// class UBP_GE_Whipshot_L_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_Whipshot_L__BP_GE_Whipshot_L_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_Whipshot_L_C, 0x0870);
		}

		// class UAM_Tailwhip_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_Tailwhip__AM_Tailwhip_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Tailwhip_C, 0x0620);
		}

		// class UAM_StationaryWaterReentryUpwards_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_StationaryWaterReentryUpwards__AM_StationaryWaterReentryUpwards_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_StationaryWaterReentryUpwards_C, 0x0620);
		}

		// class UAM_Submerge_C : public UME_GameplayAbility_SharkEvade
		TEST_METHOD(BlueprintGeneratedClass__AM_Submerge__AM_Submerge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAM_Submerge_C, UberGraphFrame, 0x0620);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Submerge_C, 0x0628);
		}

		// class UAM_PerfectBellyWaterEntry_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_PerfectBellyWaterEntry__AM_PerfectBellyWaterEntry_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_PerfectBellyWaterEntry_C, 0x0620);
		}

		// class UAM_PerfectAngledWaterEntry_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_PerfectAngledWaterEntry__AM_PerfectAngledWaterEntry_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_PerfectAngledWaterEntry_C, 0x0620);
		}

		// class UAM_MovingWaterReentryUpwards_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_MovingWaterReentryUpwards__AM_MovingWaterReentryUpwards_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_MovingWaterReentryUpwards_C, 0x0620);
		}

		// class UAM_MovingWaterReentryForwardsAndUp_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_MovingWaterReentryForwardsAndUp__AM_MovingWaterReentryForwardsAndUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_MovingWaterReentryForwardsAndUp_C, 0x0620);
		}

		// class UAM_MovingWaterReentryDownwards_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_MovingWaterReentryDownwards__AM_MovingWaterReentryDownwards_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_MovingWaterReentryDownwards_C, 0x0620);
		}

		// class UAM_MovingWaterReentryBackwardsAndUp_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_MovingWaterReentryBackwardsAndUp__AM_MovingWaterReentryBackwardsAndUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_MovingWaterReentryBackwardsAndUp_C, 0x0620);
		}

		// class UAM_MovingWaterReentryBackwardsAndDown_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_MovingWaterReentryBackwardsAndDown__AM_MovingWaterReentryBackwardsAndDown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_MovingWaterReentryBackwardsAndDown_C, 0x0620);
		}

		// class UAM_EvadeUp_C : public UME_GameplayAbility_SharkEvade
		TEST_METHOD(BlueprintGeneratedClass__AM_EvadeUp__AM_EvadeUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EvadeUp_C, 0x0620);
		}

		// class UAM_EvadeRight_Land_C : public UME_GameplayAbility_SharkEvade
		TEST_METHOD(BlueprintGeneratedClass__AM_EvadeRight_Land__AM_EvadeRight_Land_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EvadeRight_Land_C, 0x0620);
		}

		// class UAM_EvadeRight_Knifing_C : public UME_GameplayAbility_SharkEvade
		TEST_METHOD(BlueprintGeneratedClass__AM_EvadeRight_Knifing__AM_EvadeRight_Knifing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EvadeRight_Knifing_C, 0x0620);
		}

		// class UAM_DoubleJump_Cancel_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_DoubleJump_Cancel__AM_DoubleJump_Cancel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_DoubleJump_Cancel_C, 0x05E0);
		}

		// class UAM_DoubleJump_C : public UME_GameplayAbility_SharkAirLunge
		TEST_METHOD(BlueprintGeneratedClass__AM_DoubleJump__AM_DoubleJump_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_DoubleJump_C, 0x0638);
		}

		// class UAM_CruisingWaterEntry_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_CruisingWaterEntry__AM_CruisingWaterEntry_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_CruisingWaterEntry_C, 0x0620);
		}

		// class UAM_EvadeRight_Reversed_C : public UAM_EvadeRight_C
		TEST_METHOD(BlueprintGeneratedClass__AM_EvadeRight_Reversed__AM_EvadeRight_Reversed_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EvadeRight_Reversed_C, 0x0620);
		}

		// class ABP_Base_Jetski_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Jetski__BP_Base_Jetski_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Jetski_C, UberGraphFrame, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Jetski_C, SpotLight, 0x0CD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Jetski_C, 0x0CE0);
		}

		// class UGA_M_Alligator_ThrashRelease_BP_C : public UGA_M_ThrashRelease_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Alligator_ThrashRelease_BP__GA_M_Alligator_ThrashRelease_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Alligator_ThrashRelease_BP_C, 0x05E0);
		}

		// class UGA_M_Barracuda_Bite_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Barracuda_Bite_BP__GA_M_Barracuda_Bite_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Barracuda_Bite_BP_C, 0x0510);
		}

		// class AAIController_GreatWhite_BP_C : public AAIController_Hostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_GreatWhite_BP__AIController_GreatWhite_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_GreatWhite_BP_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_GreatWhite_BP_C, 0x07D0);
		}

		// class AME_DayCycle_SkyDome_BP_C : public AME_TimeOfDayWorldActor
		TEST_METHOD(BlueprintGeneratedClass__ME_DayCycle_SkyDome_BP__ME_DayCycle_SkyDome_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UberGraphFrame, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Moon_Mesh, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, ME_OceanColorComponent, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Sky_Sphere_mesh, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, MoonOrigin, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Compass, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Day_Night_MoonFade_DayNightTransition_96C8732E4919B4D0A88039B8597570A6, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Day_Night_MoonFade__Direction_96C8732E4919B4D0A88039B8597570A6, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_GYN7, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Day_Night_MoonFade, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, TransitionWaterColorAnim_WaterColorTransition_6067C59047DB4B160DD2C4AE8C685E0C, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, TransitionWaterColorAnim__Direction_6067C59047DB4B160DD2C4AE8C685E0C, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_D8P9, 0x040D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, TransitionWaterColorAnim, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, RegionFogTransition_Fog_Transition_Alpha_676281B44A9065C366BE588958E31D01, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, RegionFogTransition__Direction_676281B44A9065C366BE588958E31D01, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_Q5ND, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, RegionFogTransition, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Day_NightExposure_DayNightTransition_1E9E273F4AD4D52FD2E65690FEBB0FA0, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Day_NightExposure__Direction_1E9E273F4AD4D52FD2E65690FEBB0FA0, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_K8L2, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Day_NightExposure, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, FogTransition_Transition_Float_538CA85046986273CF7BA3A583F97805, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, FogTransition__Direction_538CA85046986273CF7BA3A583F97805, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_HA8A, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, FogTransition, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Sky_material, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Refresh_material, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_U12A, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, DefaultHour, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, TimeSpeed, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Use24HrDay, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, IsAM, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_SKY3, 0x045E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, WorldTime, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Sun_Intensity, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Sun_brightness, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Sun_Size, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, North_Direction_Offset, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Sun_height, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Night, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Display_World_Time, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Show_Compass_In_Game, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_F1XL, 0x0487);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Compass_Location, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, HideMoonDuringDay, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_URG1, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Moon_Size, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Use_Textured_Moon, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Enable_Skylight, 0x049D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_JI5Y, 0x049E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, SkyRecapDelay, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, SkyRecapUseGameTime, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_7WYB, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Cloud_speed, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Cloud_opacity, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Stars_brightness, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, SkyRecapSeconds, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Textured_Moon_Size, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, Textured_Moon_Distance, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnderwaterFogInscatteringColor, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, AbovewaterFogInscatteringColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, AboveWaterAlbedo, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, DayNightTransitionRate, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, OceanPostMaximumOceanDepth, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, HeightFogWorldZOffset, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, CurrentHour, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, CurrentFogAlbedo, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, TargetFogAlbedo, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, RegionFogTransitionRate, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, TargetRegionFogExtinctionScale, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, DMIFogExtinctionScale, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, ICFogExtinctionScale, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, WBFogExtinctionScale, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, WCFogExtinctionScale, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, SEFogExtinctionScale, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, SBFogExtinctionScale, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, DOFogExtinctionScale, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, IsPlayerUnderWater_, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_TTB0, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, FogLeaveWaterTranstionRate, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, ShowRegionName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, RegionSelectPreview, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, IsBelowWater_, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, IsEditorPreview_, 0x052B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, SunDisk6AM, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, RegionPostProcessCurrentSceneColorTint, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, RegionPostProcessTargetSceneColorTint, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, DMIPostProcessSceneColorTint, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, ICPostProcessSceneColorTint, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, WBPostProcessSceneColorTint, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, WCPostProcessSceneColorTint, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, SEPostProcessSceneColorTint, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, SBPostProcessSceneColorTint, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, DOPostProcessSceneColorTint, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, PROPostProcessSceneColorTint, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, PROFogExtinctionScale, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, MorningTimeValue, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, IsWaterPoisoned_, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_IYAP, 0x05D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, WCPoisonPostProcessSceneColorTint, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, IsSunPositionPaused_, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, isBenchmarking, 0x05ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, UnknownData_5MP2, 0x05EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, CavePostProcessSceneColorTint, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, SewerPostProcessSceneColorTint, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, CaveFogExtinctionScale, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, SewerFogExtinctionScale, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, TargetCaveExposure, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DayCycle_SkyDome_BP_C, TargetSewerExposure, 0x061C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_DayCycle_SkyDome_BP_C, 0x0620);
		}

		// class UGE_Bio_Electric_Body_Bonus_NearEndFX_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_Bonus_NearEndFX_T1__GE_Bio_Electric_Body_Bonus_NearEndFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_Bonus_NearEndFX_T1_C, 0x0870);
		}

		// class ABP_Bio_Electric_Body_Aura_T1_C : public AME_AuraDamageActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Bio_Electric_Body_Aura_T1__BP_Bio_Electric_Body_Aura_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bio_Electric_Body_Aura_T1_C, 0x0400);
		}

		// class UGA_Bio_Electric_Body_AOE_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AOE_T1__GA_Bio_Electric_Body_AOE_T1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Bio_Electric_Body_AOE_T1_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AOE_T1_C, 0x0408);
		}

		// class ABP_Bio_Electric_Body_Aura_T2_C : public AME_AuraDamageActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Bio_Electric_Body_Aura_T2__BP_Bio_Electric_Body_Aura_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bio_Electric_Body_Aura_T2_C, 0x0400);
		}

		// class UGE_Bio_Electric_Body_AddResource_Eat_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AddResource_Eat_T1__GE_Bio_Electric_Body_AddResource_Eat_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AddResource_Eat_T1_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_PayResource_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_PayResource_T1__GE_Bio_Electric_Body_PayResource_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_PayResource_T1_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_AddResource_Eat_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AddResource_Eat_T2__GE_Bio_Electric_Body_AddResource_Eat_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AddResource_Eat_T2_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_PayResource_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_PayResource_T2__GE_Bio_Electric_Body_PayResource_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_PayResource_T2_C, 0x0870);
		}

		// class UAM_Bio_Electric_Body_Activate_T2_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_Bio_Electric_Body_Activate_T2__AM_Bio_Electric_Body_Activate_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Bio_Electric_Body_Activate_T2_C, 0x05E0);
		}

		// class UGA_Bio_Electric_Body_AOE_T3_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AOE_T3__GA_Bio_Electric_Body_AOE_T3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Bio_Electric_Body_AOE_T3_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AOE_T3_C, 0x0408);
		}

		// class UGE_Bio_Electric_Body_AddResource_Dam_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AddResource_Dam_T4__GE_Bio_Electric_Body_AddResource_Dam_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AddResource_Dam_T4_C, 0x0870);
		}

		// class ABP_Bio_Electric_Body_Aura_T5_C : public AME_AuraDamageActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Bio_Electric_Body_Aura_T5__BP_Bio_Electric_Body_Aura_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bio_Electric_Body_Aura_T5_C, 0x0400);
		}

		// class UGA_Bio_Electric_Body_AOE_T5_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AOE_T5__GA_Bio_Electric_Body_AOE_T5_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Bio_Electric_Body_AOE_T5_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AOE_T5_C, 0x0408);
		}

		// class UGE_Evo_Bio_Electric_Head_ImpactFX_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_ImpactFX_T5__GE_Evo_Bio_Electric_Head_ImpactFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_ImpactFX_T5_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_PayResource_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_PayResource_T1__GE_Evo_Bone_Body_PayResource_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_PayResource_T1_C, 0x0870);
		}

		// class UGA_Evo_Bone_Body_T1_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_T1__GA_Evo_Bone_Body_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_T1_C, 0x05E0);
		}

		// class UGA_Evo_Bone_Body_AddResource_T1_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_AddResource_T1__GA_Evo_Bone_Body_AddResource_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_AddResource_T1_C, 0x0438);
		}

		// class UGA_Evo_Bone_Body_AddResource_Damage_T1_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_AddResource_Damage_T1__GA_Evo_Bone_Body_AddResource_Damage_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_AddResource_Damage_T1_C, 0x0438);
		}

		// class UGA_Evo_Bone_Body_Lunge_ImpactVFX_T2_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_Lunge_ImpactVFX_T2__GA_Evo_Bone_Body_Lunge_ImpactVFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_Lunge_ImpactVFX_T2_C, 0x05E0);
		}

		// class UGE_Evo_Bone_Body_AddResource_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_AddResource_T1__GE_Evo_Bone_Body_AddResource_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_AddResource_T1_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Teeth_AOE_Damage_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_AOE_Damage_T1__GE_Evo_Bio_Electric_Teeth_AOE_Damage_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_AOE_Damage_T1_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Teeth_AOE_Damage_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_AOE_Damage_T5__GE_Evo_Bio_Electric_Teeth_AOE_Damage_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_AOE_Damage_T5_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_Lunge_ImpactVFX_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_Lunge_ImpactVFX_T2__GE_Evo_Bone_Body_Lunge_ImpactVFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_Lunge_ImpactVFX_T2_C, 0x0870);
		}

		// class UGA_Evo_Bio_Electric_Teeth_AOE_T3_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Teeth_AOE_T3__GA_Evo_Bio_Electric_Teeth_AOE_T3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bio_Electric_Teeth_AOE_T3_C, UberGraphFrame, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Teeth_AOE_T3_C, 0x0440);
		}

		// class UGA_Evo_Bio_Electric_Teeth_AOE_T4_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Teeth_AOE_T4__GA_Evo_Bio_Electric_Teeth_AOE_T4_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bio_Electric_Teeth_AOE_T4_C, UberGraphFrame, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Teeth_AOE_T4_C, 0x0440);
		}

		// class UGA_Evo_Bio_Electric_Teeth_AOE_T5_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Teeth_AOE_T5__GA_Evo_Bio_Electric_Teeth_AOE_T5_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bio_Electric_Teeth_AOE_T5_C, UberGraphFrame, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Teeth_AOE_T5_C, 0x0440);
		}

		// class UGE_Evo_ReinforcedCartilage4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_ReinforcedCartilage4__GE_Evo_ReinforcedCartilage4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_ReinforcedCartilage4_C, 0x0870);
		}

		// class UGE_Evo_ReinforcedCartilage3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_ReinforcedCartilage3__GE_Evo_ReinforcedCartilage3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_ReinforcedCartilage3_C, 0x0870);
		}

		// class UGE_Evo_Subliminal_Evasion5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Subliminal_Evasion5__GE_Evo_Subliminal_Evasion5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Subliminal_Evasion5_C, 0x0870);
		}

		// class UGE_Evo_Subliminal_Evasion4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Subliminal_Evasion4__GE_Evo_Subliminal_Evasion4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Subliminal_Evasion4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Tail_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Tail_T4__GE_Evo_Bone_Tail_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Tail_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Tail_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Tail_T3__GE_Evo_Bone_Tail_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Tail_T3_C, 0x0870);
		}

		// class UGA_Evo_Shadow_TailFX_T1_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_TailFX_T1__GA_Evo_Shadow_TailFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_TailFX_T1_C, 0x0438);
		}

		// class UGA_Evo_Shadow_TailFX_T2_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_TailFX_T2__GA_Evo_Shadow_TailFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_TailFX_T2_C, 0x0438);
		}

		// class UGE_Evo_Shadow_Tail_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Tail_T5__GE_Evo_Shadow_Tail_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Tail_T5_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Tail_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Tail_T3__GE_Evo_Shadow_Tail_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Tail_T3_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Tail_Damage_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Tail_Damage_T3__GE_Evo_Shadow_Tail_Damage_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Tail_Damage_T3_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Head_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Head_T2__GE_Evo_Shadow_Head_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Head_T2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Head_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Head_T1__GE_Evo_Shadow_Head_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Head_T1_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Teeth_T3_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Teeth_T3__GA_Evo_Shadow_Teeth_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Teeth_T3_C, 0x0400);
		}

		// class UGA_Evo_Shadow_Teeth_T4_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Teeth_T4__GA_Evo_Shadow_Teeth_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Teeth_T4_C, 0x0400);
		}

		// class ATutorial_FishSpawn_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Tutorial_FishSpawn_BP__Tutorial_FishSpawn_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATutorial_FishSpawn_BP_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATutorial_FishSpawn_BP_C, DefaultSceneRoot, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATutorial_FishSpawn_BP_C, AttachedSpawnPoint, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATutorial_FishSpawn_BP_C, Enabled, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATutorial_FishSpawn_BP_C, UnknownData_F67I, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATutorial_FishSpawn_BP_C, FishToSpawn, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATutorial_FishSpawn_BP_C, SpawnTimer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATutorial_FishSpawn_BP_C, DelayBetweenSpawn, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATutorial_FishSpawn_BP_C, MaxAllowedFish, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATutorial_FishSpawn_BP_C, How_ManyFishSpawned, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATutorial_FishSpawn_BP_C, 0x0264);
		}

		// class AWorldMap_Basics_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__WorldMap_Basics__WorldMap_Basics_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldMap_Basics_C, 0x0228);
		}

		// class ALG_Pointlight_Base_C : public APointLight
		TEST_METHOD(BlueprintGeneratedClass__LG_Pointlight_Base__LG_Pointlight_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Pointlight_Base_C, 0x0238);
		}

		// class ALG_Sewer_Entrances_C : public ALG_Pointlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_Sewer_Entrances__LG_Sewer_Entrances_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Sewer_Entrances_C, 0x0238);
		}

		// class ATRT_Turtle_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TRT_Turtle_BP__TRT_Turtle_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATRT_Turtle_BP_C, VoiceGroupComponent_BP, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATRT_Turtle_BP_C, TwAkEmitterArray, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATRT_Turtle_BP_C, 0x1050);
		}

		// class AFSH_Catfish_Medium_BP_C : public AFSH_Catfish_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Catfish_Medium_BP__FSH_Catfish_Medium_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Catfish_Medium_BP_C, 0x1050);
		}

		// class ABP_DepthBoat_Stern_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthBoat_Stern__BP_DepthBoat_Stern_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthBoat_Stern_C, 0x0230);
		}

		// class ABP_Catamaran_Fragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Catamaran_Fragment7__BP_Catamaran_Fragment7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Catamaran_Fragment7_C, 0x0230);
		}

		// class ABP_Catamaran_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Catamaran_Fragment1__BP_Catamaran_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Catamaran_Fragment1_C, 0x0230);
		}

		// class ABP_Kayak_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Kayak_Fragment5__BP_Kayak_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Kayak_Fragment5_C, 0x0230);
		}

		// class ABP_Kayak_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Kayak_Fragment3__BP_Kayak_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Kayak_Fragment3_C, 0x0230);
		}

		// class UKayakPaddle_C : public UME_PassengerAttachment
		TEST_METHOD(BlueprintGeneratedClass__KayakPaddle__KayakPaddle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKayakPaddle_C, 0x06E0);
		}

		// class ABP_FamilyPontoonBoat_AI_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_FamilyPontoonBoat_AI_Controller__BP_FamilyPontoonBoat_AI_Controller_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FamilyPontoonBoat_AI_Controller_C, LastPathTarget, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FamilyPontoonBoat_AI_Controller_C, 0x07F0);
		}

		// class UGA_M_MahiMahi_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_MahiMahi_EvadeRight_BP__GA_M_MahiMahi_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_MahiMahi_EvadeRight_BP_C, 0x05E0);
		}

		// class ABP_FishingTrawlerBow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawlerBow__BP_FishingTrawlerBow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawlerBow_C, 0x0230);
		}

		// class ADEP_BP_USCG_Small_Hunter_Pete2_Support_Divers_C : public ABP_Base_USCG_Small_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__DEP_BP_USCG_Small_Hunter_Pete2_Support_Divers__DEP_BP_USCG_Small_Hunter_Pete2_Support_Divers_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADEP_BP_USCG_Small_Hunter_Pete2_Support_Divers_C, UnknownData_5HQ8, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADEP_BP_USCG_Small_Hunter_Pete2_Support_Divers_C, UberGraphFrame, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADEP_BP_USCG_Small_Hunter_Pete2_Support_Divers_C, StartingLoc, 0x0CF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADEP_BP_USCG_Small_Hunter_Pete2_Support_Divers_C, 0x0CFC);
		}

		// class ABP_USCG_Command_Ship_Dynamite_C : public ABP_Base_USCG_Command_Ship_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Command_Ship_Dynamite__BP_USCG_Command_Ship_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Command_Ship_Dynamite_C, 0x0CE8);
		}

		// class ABP_USCG_Cmmnd_Pete3Phse3_C : public ADEP_BP_USCG_Command_Pete3_Phase2_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Cmmnd_Pete3Phse3__BP_USCG_Cmmnd_Pete3Phse3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Cmmnd_Pete3Phse3_C, UberGraphFrame, 0x0D18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Cmmnd_Pete3Phse3_C, 0x0D20);
		}

		// class ABP_Base_BarrelRaft_Party_C : public ABP_Base_BarrelRaft_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_BarrelRaft_Party__BP_Base_BarrelRaft_Party_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_BarrelRaft_Party_C, 0x0CD4);
		}

		// class AAIController_Marlin_Hunted_BP_C : public AAIController_Marlin_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Marlin_Hunted_BP__AIController_Marlin_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Marlin_Hunted_BP_C, 0x07D0);
		}

		// class AFSH_Marlin_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Marlin_BP__FSH_Marlin_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, UberGraphFrame, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, VoiceGroupComponent_BP1, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, VoiceGroupComponent_BP, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_0_0_BandGlow_466230C446DC8D4447E41B85B3383D03, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_0_0_BandScale_466230C446DC8D4447E41B85B3383D03, 0x105C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_0_0_BandScroll_466230C446DC8D4447E41B85B3383D03, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_0_0_IntakeRefraction_466230C446DC8D4447E41B85B3383D03, 0x1064);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_0_0_GlowAmount_466230C446DC8D4447E41B85B3383D03, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_0_0_RibbonOpacity_466230C446DC8D4447E41B85B3383D03, 0x106C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_0_0_SparkleScale_466230C446DC8D4447E41B85B3383D03, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_0_0_GlowON_466230C446DC8D4447E41B85B3383D03, 0x1074);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_0_0__Direction_466230C446DC8D4447E41B85B3383D03, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, UnknownData_E9HI, 0x1079);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_0_1, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_1_FadeRipple_9CF99D654027F34B0E448586495B67B1, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_1_Glowoff_9CF99D654027F34B0E448586495B67B1, 0x108C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_1__Direction_9CF99D654027F34B0E448586495B67B1, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, UnknownData_QWHQ, 0x1091);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, Timeline_2, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, SwordfishCharge, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, TurnCount, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, RibbonOpacity, 0x10AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, SparkleScale, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, GlowBloom, 0x10B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, IntakeRefraction, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, UnknownData_8O9J, 0x10BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, SwordfishChargeTail, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, LungingDone, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, ChargeSET, 0x10C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, UnknownData_7LBX, 0x10CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, RushStreak01, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, RushStreak02, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, RushStreak03, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, RushStreak04, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, RushNoseCone, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, ChargingDone, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Marlin_BP_C, RushDone, 0x10F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Marlin_BP_C, 0x10FA);
		}

		// class ASHK_Mako_Hunted_BP_C : public ASHK_Mako_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_Mako_Hunted_BP__SHK_Mako_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_Mako_Hunted_BP_C, 0x1050);
		}

		// class ASHK_Mako_Albino_BP_C : public ASHK_Mako_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_Mako_Albino_BP__SHK_Mako_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_Mako_Albino_BP_C, 0x1050);
		}

		// class ABP_Paddleboat_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Paddleboat_Fragment1__BP_Paddleboat_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Paddleboat_Fragment1_C, 0x0230);
		}

		// class AFSH_ParrotFish_Albino_Med_BP_C : public AFSH_ParrotFish_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_ParrotFish_Albino_Med_BP__FSH_ParrotFish_Albino_Med_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_ParrotFish_Albino_Med_BP_C, 0x1050);
		}

		// class AFSH_Grouper_Med_Albino_BP_C : public AFSH_Grouper_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Grouper_Med_Albino_BP__FSH_Grouper_Med_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Grouper_Med_Albino_BP_C, 0x1050);
		}

		// class UGuitar_BP_C : public UME_PassengerAttachment
		TEST_METHOD(BlueprintGeneratedClass__Guitar_BP__Guitar_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGuitar_BP_C, 0x06E0);
		}

		// class ABP_SkiffSeatPiece3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiffSeatPiece3__BP_SkiffSeatPiece3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiffSeatPiece3_C, 0x0230);
		}

		// class ABP_Skiff_SideRail_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_SideRail__BP_Skiff_SideRail_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Skiff_SideRail_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_SideRail_C, 0x0238);
		}

		// class ABP_Skiff_HullFragment_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_HullFragment__BP_Skiff_HullFragment_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Skiff_HullFragment_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_HullFragment_C, 0x0238);
		}

		// class ABP_Skiff_EngineBracket_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_EngineBracket__BP_Skiff_EngineBracket_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Skiff_EngineBracket_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_EngineBracket_C, 0x0238);
		}

		// class ABP_Skiff_Damaged02_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Damaged02__BP_Skiff_Damaged02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Damaged02_C, 0x0230);
		}

		// class ABP_Skiff_Damaged01_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Damaged01__BP_Skiff_Damaged01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Skiff_Damaged01_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Damaged01_C, 0x0238);
		}

		// class ABP_SportFishingBoat_Fragment9_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Fragment9__BP_SportFishingBoat_Fragment9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Fragment9_C, 0x0230);
		}

		// class ABP_PontoonBoat_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment1__BP_PontoonBoat_Fragment1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment1_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment1_C, 0x0238);
		}

		// class ABP_Sailboat_Fragment4_Blue_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment4_Blue__BP_Sailboat_Fragment4_Blue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment4_Blue_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment3_Blue_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment3_Blue__BP_Sailboat_Fragment3_Blue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment3_Blue_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment2_Blue_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment2_Blue__BP_Sailboat_Fragment2_Blue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment2_Blue_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment7__BP_Sailboat_Fragment7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment7_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment4__BP_Sailboat_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment4_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment3__BP_Sailboat_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment3_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment2__BP_Sailboat_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment2_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment3_Green_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment3_Green__BP_Sailboat_Fragment3_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment3_Green_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment2_Green_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment2_Green__BP_Sailboat_Fragment2_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment2_Green_C, 0x0230);
		}

		// class ABP_Sailboat_Boom_Green_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Boom_Green__BP_Sailboat_Boom_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Boom_Green_C, 0x0230);
		}

		// class ABP_Sailboat_Hatch_Yellow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Hatch_Yellow__BP_Sailboat_Hatch_Yellow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Hatch_Yellow_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment7_Yellow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment7_Yellow__BP_Sailboat_Fragment7_Yellow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment7_Yellow_C, 0x0230);
		}

		// class ABP_Base_Catamaran_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Catamaran__BP_Base_Catamaran_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Catamaran_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Catamaran_C, 0x0CD4);
		}

		// class ABP_SportFishingBoat_Fragment11_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Fragment11__BP_SportFishingBoat_Fragment11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Fragment11_C, 0x0230);
		}

		// class ABP_SportFishingBoat_Fragment10_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Fragment10__BP_SportFishingBoat_Fragment10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Fragment10_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment7__BP_Tikibar_Fragment7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment7_C, 0x0230);
		}

		// class ABP_Base_DepthFishingBoat_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_DepthFishingBoat__BP_Base_DepthFishingBoat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_DepthFishingBoat_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_DepthFishingBoat_C, 0x0CD4);
		}

		// class ABP_Rowboat_Fragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rowboat_Fragment7__BP_Rowboat_Fragment7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Rowboat_Fragment7_C, 0x0230);
		}

		// class ABP_Rowboat_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rowboat_Fragment4__BP_Rowboat_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Rowboat_Fragment4_C, 0x0230);
		}

		// class ABP_Base_UnicornRaft_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_UnicornRaft__BP_Base_UnicornRaft_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_UnicornRaft_C, UberGraphFrame, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_UnicornRaft_C, LastHitTime, 0x0CD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_UnicornRaft_C, 0x0CDC);
		}

		// class ABP_SportFishingBoat_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Fragment1__BP_SportFishingBoat_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Fragment1_C, 0x0230);
		}

		// class ABP_Base_FishingTrawler_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_FishingTrawler_Empty__BP_Base_FishingTrawler_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_FishingTrawler_Empty_C, ME_DistanceSignificance, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_FishingTrawler_Empty_C, LastHitTime, 0x0C00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_FishingTrawler_Empty_C, 0x0C04);
		}

		// class AALL_Alligator_Hunted_BP_C : public AALL_Alligator_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ALL_Alligator_Hunted_BP__ALL_Alligator_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AALL_Alligator_Hunted_BP_C, 0x1050);
		}

		// class AFSH_Catfish_Small_Albino_BP_C : public AFSH_Catfish_Small_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Catfish_Small_Albino_BP__FSH_Catfish_Small_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Catfish_Small_Albino_BP_C, 0x1050);
		}

		// class AFSH_SwordFish_Albino_BP_C : public AFSH_SwordFish_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_SwordFish_Albino_BP__FSH_SwordFish_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_SwordFish_Albino_BP_C, 0x10FA);
		}

		// class UTestMap_SpawnAIMenu_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TestMap_SpawnAIMenu__TestMap_SpawnAIMenu_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, BackButton, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, Border_4, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, Btn_SwapMenu, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, CheckboxAutoRespawn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, ScrollBox_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, Slider_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, TextBlock_2, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, txt_ShowingWhat, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, txt_SwapMenuText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, VerticalBox_1, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, ListItems, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, Amount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, SliderIncrement, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, DataTableToUse, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, TryingToSpawnAi, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, Cancel, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, MenuNumber, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, UnknownData_1IVN, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, MenuButtons, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIMenu_C, MenuDataTable, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMap_SpawnAIMenu_C, 0x02E8);
		}

		// class AWorldMap_Boundry_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__WorldMap_Boundry__WorldMap_Boundry_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldMap_Boundry_C, 0x0228);
		}

		// class AME_GenericObjectiveActorBase_BP_C : public AME_ObjectiveSpawnActor
		TEST_METHOD(BlueprintGeneratedClass__ME_GenericObjectiveActorBase_BP__ME_GenericObjectiveActorBase_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GenericObjectiveActorBase_BP_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GenericObjectiveActorBase_BP_C, Widget, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GenericObjectiveActorBase_BP_C, Billboard, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_GenericObjectiveActorBase_BP_C, 0x0240);
		}

		// class AME_HuntObjectiveActor_BP_C : public AME_GenericObjectiveActorBase_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ME_HuntObjectiveActor_BP__ME_HuntObjectiveActor_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HuntObjectiveActor_BP_C, UberGraphFrame, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HuntObjectiveActor_BP_C, AssociatedSpawnPoint, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HuntObjectiveActor_BP_C, DebugOn_, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HuntObjectiveActor_BP_C, UnknownData_I693, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HuntObjectiveActor_BP_C, Despawn_Radius, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HuntObjectiveActor_BP_C, Spawn_Radius, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_HuntObjectiveActor_BP_C, 0x025C);
		}

		// class AOneWayGate_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__OneWayGate_BP__OneWayGate_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, Box, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, Arrow, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, MetalFence_GateR_SM, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, MetalFence_GateL_SM, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, GateAnimation_NewTrack_0_FC1C3F6D4513FC258B5B4C9C68AF0FA7, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, GateAnimation__Direction_FC1C3F6D4513FC258B5B4C9C68AF0FA7, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, UnknownData_KZR1, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, GateAnimation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, AssociatedLever, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, AssociatedInWorldWidget, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, WidgetIndex, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, LInitialRot, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGate_BP_C, RInitialRot, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOneWayGate_BP_C, 0x028C);
		}

		// class ADO_Sub_Facade_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DO_Sub_Facade__DO_Sub_Facade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADO_Sub_Facade_C, 0x0228);
		}

		// class AIC_Landscape_A_Low_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__IC_Landscape_A_Low__IC_Landscape_A_Low_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIC_Landscape_A_Low_C, 0x0228);
		}

		// class AIC_Landscape_B_Low_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__IC_Landscape_B_Low__IC_Landscape_B_Low_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIC_Landscape_B_Low_C, 0x0228);
		}

		// class ASB_Sub_Objectives_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__SB_Sub_Objectives__SB_Sub_Objectives_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASB_Sub_Objectives_C, 0x0228);
		}

		// class APRO_Sub_Objectives_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__PRO_Sub_Objectives__PRO_Sub_Objectives_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APRO_Sub_Objectives_C, 0x0228);
		}

		// class APro_Sub_FX_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Pro_Sub_FX__Pro_Sub_FX_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APro_Sub_FX_C, 0x0228);
		}

		// class ADO_Sub_Objectives_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DO_Sub_Objectives__DO_Sub_Objectives_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADO_Sub_Objectives_C, 0x0228);
		}

		// class ADO_Sub_FX_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DO_Sub_FX__DO_Sub_FX_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADO_Sub_FX_C, 0x0228);
		}

		// class ADO_Sub_Landscape2_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DO_Sub_Landscape2__DO_Sub_Landscape2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADO_Sub_Landscape2_C, 0x0228);
		}

		// class APrologue_Sub_Landscape_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_Landscape__Prologue_Sub_Landscape_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_Landscape_C, 0x0228);
		}

		// class ABP_DispersalBubbles_Escaping_Random_glow_ENV_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_DispersalBubbles_Escaping_Random_glow_ENV_PS__BP_DispersalBubbles_Escaping_Random_glow_ENV_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DispersalBubbles_Escaping_Random_glow_ENV_PS_C, 0x0280);
		}

		// class ABP_DispersalBubbles_Escaping_Random_Bayou_ENV_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_DispersalBubbles_Escaping_Random_Bayou_ENV_PS__BP_DispersalBubbles_Escaping_Random_Bayou_ENV_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DispersalBubbles_Escaping_Random_Bayou_ENV_PS_C, 0x0280);
		}

		// class ABP_DispersalBubbles_Escaping_Random_Barrels_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_DispersalBubbles_Escaping_Random_Barrels_PS__BP_DispersalBubbles_Escaping_Random_Barrels_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DispersalBubbles_Escaping_Random_Barrels_PS_C, 0x0280);
		}

		// class ABP_TunnelCurrent_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_TunnelCurrent__BP_TunnelCurrent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TunnelCurrent_C, 0x0280);
		}

		// class ABP_SquidSwimming_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_SquidSwimming_PS__BP_SquidSwimming_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SquidSwimming_PS_C, 0x0280);
		}

		// class ABP_Diver_Hunter_Explore_C : public ABP_Diver_Hunter_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Diver_Hunter_Explore__BP_Diver_Hunter_Explore_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Diver_Hunter_Explore_C, 0x0F70);
		}

		// class ALG_Red_Worklight_Bulb_C : public ALG_Pointlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_Red_Worklight_Bulb__LG_Red_Worklight_Bulb_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Red_Worklight_Bulb_C, 0x0238);
		}

		// class ALG_AmberPost_WaterwayLight_C : public ALG_Pointlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_AmberPost_WaterwayLight__LG_AmberPost_WaterwayLight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_AmberPost_WaterwayLight_C, 0x0238);
		}

		// class ABP_Dock_Lamps_01_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Dock_Lamps_01__BP_Dock_Lamps_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Dock_Lamps_01_C, 0x0280);
		}

		// class ADMI_Sub_HD_Env_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DMI_Sub_HD_Env__DMI_Sub_HD_Env_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADMI_Sub_HD_Env_C, 0x0228);
		}

		// class ABP_Bat_Hanging_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Bat_Hanging_PS__BP_Bat_Hanging_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bat_Hanging_PS_C, 0x0280);
		}

		// class ABP_Bat_HangingGROUP_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Bat_HangingGROUP_PS__BP_Bat_HangingGROUP_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bat_HangingGROUP_PS_C, 0x0280);
		}

		// class ATRT_ExploreMedium_Turtle_BP_C : public ATRT_Medium_Turtle_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TRT_ExploreMedium_Turtle_BP__TRT_ExploreMedium_Turtle_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATRT_ExploreMedium_Turtle_BP_C, 0x1050);
		}

		// class APrologue_Sub_Paths_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_Paths__Prologue_Sub_Paths_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_Paths_C, 0x0228);
		}

		// class ADMI_Sub_Paths_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DMI_Sub_Paths__DMI_Sub_Paths_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADMI_Sub_Paths_C, 0x0228);
		}

		// class ADMI_Sub_NightLighting_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DMI_Sub_NightLighting__DMI_Sub_NightLighting_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_NightLighting_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_NightLighting_C, GameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_NightLighting_C, DMIRadioTowerFXArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_NightLighting_C, DMIPointLights, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_NightLighting_C, DMiSpotLights, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_NightLighting_C, DMIFXInsectBall, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_NightLighting_C, DMIFXFireflies, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_NightLighting_C, DMIFXMoths, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_NightLighting_C, DMIFXDragonfly, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_NightLighting_C, DMIFXSeagulls, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_NightLighting_C, DMIFXBats, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADMI_Sub_NightLighting_C, 0x02C8);
		}

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0028);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0028);
		}

		// class UPacketHandlerProfileConfig : public UObject
		TEST_METHOD(Class__PacketHandler__PacketHandlerProfileConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPacketHandlerProfileConfig, Components, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPacketHandlerProfileConfig, 0x0038);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_B27U, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x0078);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0028);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0028);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0028);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0030);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_ERTS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0030);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0028);
		}

		// class UMeshDescription : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0028);
		}

		// class UMeshDescriptionBase : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescriptionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshDescriptionBase, UnknownData_KUNH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescriptionBase, 0x0390);
		}

		// class UStaticMeshDescription : public UMeshDescriptionBase
		TEST_METHOD(Class__StaticMeshDescription__StaticMeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescription, 0x0390);
		}

		// class UEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0028);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0028);
		}

		// class AWildlife_Base_BP_C : public AME_WildlifeCharacter
		TEST_METHOD(BlueprintGeneratedClass__Wildlife_Base_BP__Wildlife_Base_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, UberGraphFrame, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, Timeline_0_NewTrack_0_5F1AC08A498CAFD627942185A67B3E76, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, Timeline_0__Direction_5F1AC08A498CAFD627942185A67B3E76, 0x0F6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, UnknownData_OP00, 0x0F6D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, Timeline_1, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, BlendBackTimeline_BlendAlpha_3ADF3A094F666CB80C66C58ECDF407DB, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, BlendBackTimeline__Direction_3ADF3A094F666CB80C66C58ECDF407DB, 0x0F7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, UnknownData_FK3H, 0x0F7D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, BlendBackTimeline, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, CastWildlifeBP, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, BlendTransform, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, IsBeingElectrocuted, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, UnknownData_QIXQ, 0x0FC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, ImpulseMin, 0x0FC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, ImpulseMax, 0x0FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, TimeBetweenImpulses, 0x0FCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, GameTimeOnElectrocute, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, bThrown, 0x0FD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, UnknownData_0ICQ, 0x0FD5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, ElectrocuteHandle, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, f_TTK, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, bHasBeenDamagedByPlayer, 0x0FE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, UnknownData_PNWH, 0x0FE5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, CurrentRotation, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, FlatRotation, 0x0FF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, ChestUp, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, bInterrupBlend, 0x1001);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, UnknownData_IWGP, 0x1002);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, RelativeLocAtBlend, 0x1004);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWildlife_Base_BP_C, MeshWorldTransform, 0x1010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWildlife_Base_BP_C, 0x1040);
		}

		// class UDORegionObjectiveCollection_C : public UME_RegionObjectiveCollection
		TEST_METHOD(BlueprintGeneratedClass__DORegionObjectiveCollection__DORegionObjectiveCollection_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDORegionObjectiveCollection_C, 0x0040);
		}

		// class UDMIRegionObjectiveCollection_C : public UME_RegionObjectiveCollection
		TEST_METHOD(BlueprintGeneratedClass__DMIRegionObjectiveCollection__DMIRegionObjectiveCollection_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDMIRegionObjectiveCollection_C, 0x0040);
		}

		// class AFSH_Catfish_Small_BP_C : public AFSH_Catfish_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Catfish_Small_BP__FSH_Catfish_Small_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Catfish_Small_BP_C, 0x1050);
		}

		// class UGE_Evo_Shadow_Body_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_T1__GE_Evo_Shadow_Body_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_T1_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_LungeBonus_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_LungeBonus_T1__GE_Evo_Shadow_Body_LungeBonus_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_LungeBonus_T1_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Bonus_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Bonus_T1__GE_Evo_Shadow_Body_Bonus_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Bonus_T1_C, 0x0870);
		}

		// class UGA_EVO_Shadow_Body_AOE_T5_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_AOE_T5__GA_EVO_Shadow_Body_AOE_T5_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_AOE_T5_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_AOE_T5_C, 0x0408);
		}

		// class UGE_Evo_Shadow_Body_PayResource_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_PayResource_T4__GE_Evo_Shadow_Body_PayResource_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_PayResource_T4_C, 0x0870);
		}

		// class ABP_EVO_Shadow_Body_Aura_T4_C : public AME_AuraDamageActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Body_Aura_T4__BP_EVO_Shadow_Body_Aura_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Body_Aura_T4_C, 0x0400);
		}

		// class UTutorialInputWidget_BP_C : public UTwInputAwareRichTextBlockWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TutorialInputWidget_BP__TutorialInputWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialInputWidget_BP_C, 0x02C8);
		}

		// class UPlayerNutrientsWidget_BP_C : public UPlayerNutrientWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlayerNutrientsWidget_BP__PlayerNutrientsWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerNutrientsWidget_BP_C, 0x02B8);
		}

		// class UNutrientStatusWidget_C : public UPlayerNutrientInstanceIcon
		TEST_METHOD(WidgetBlueprintGeneratedClass__NutrientStatusWidget__NutrientStatusWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNutrientStatusWidget_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNutrientStatusWidget_C, BG, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNutrientStatusWidget_C, 0x02D0);
		}

		// class UDamageTextController_BP_C : public UDamageTextController
		TEST_METHOD(WidgetBlueprintGeneratedClass__DamageTextController_BP__DamageTextController_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageTextController_BP_C, 0x0290);
		}

		// class UME_BaseButton_BP_C : public UTwBaseButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__ME_BaseButton_BP__ME_BaseButton_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_BaseButton_BP_C, 0x0438);
		}

		// class UPlayerNutrientImage_BP_C : public UPlayerNutrientImage
		TEST_METHOD(BlueprintGeneratedClass__PlayerNutrientImage_BP__PlayerNutrientImage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerNutrientImage_BP_C, 0x0268);
		}

		// class UBPFunctions_LIB_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BPFunctions_LIB__BPFunctions_LIB_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPFunctions_LIB_C, 0x0028);
		}

		// class UGE_Swordfish_EvadeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Swordfish_EvadeCD_BP__GE_Swordfish_EvadeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Swordfish_EvadeCD_BP_C, 0x0870);
		}

		// class ABP_EmptyFlamingoBoat_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_EmptyFlamingoBoat__BP_EmptyFlamingoBoat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EmptyFlamingoBoat_C, ME_DistanceSignificance, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_EmptyFlamingoBoat_C, LastHitTime_0_1, 0x0C00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EmptyFlamingoBoat_C, 0x0C04);
		}

		// class UBP_GE_PTBoat_ElectroShieldExplosion_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_PTBoat_ElectroShieldExplosion__BP_GE_PTBoat_ElectroShieldExplosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_PTBoat_ElectroShieldExplosion_C, 0x0870);
		}

		// class ABP_HumanBase_C : public AME_HumanCharacter
		TEST_METHOD(BlueprintGeneratedClass__BP_HumanBase__BP_HumanBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, UnknownData_2HVK, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, UberGraphFrame, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, BlendFromWaterRagdoll_FlattenActor_2A4ECF784135BD6998B38ABB0B196EF0, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, BlendFromWaterRagdoll_SetAcceleration_2A4ECF784135BD6998B38ABB0B196EF0, 0x0E6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, BlendFromWaterRagdoll_BallAlpha_2A4ECF784135BD6998B38ABB0B196EF0, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, BlendFromWaterRagdoll_Relative_Transform_2A4ECF784135BD6998B38ABB0B196EF0, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, BlendFromWaterRagdoll__Direction_2A4ECF784135BD6998B38ABB0B196EF0, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, UnknownData_VYCP, 0x0E79);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, BlendFromWaterRagdoll, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, Timeline_1_Timeline_F1A8100D40001E398CC5C2881C0D5EE9, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, Timeline_1__Direction_F1A8100D40001E398CC5C2881C0D5EE9, 0x0E8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, UnknownData_BK0N, 0x0E8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, Timeline_2, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, HumanController, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, PossibleMeshes, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, BeingThrown, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, UnknownData_2Q2H, 0x0EB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, StartingTransform, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, DebugAILastSawThreatLoc, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, DebugAIVisibleThreatLoc, 0x0EF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, UnknownData_9B9V, 0x0EF2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, DebugInterval, 0x0EF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, ChestUp, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, RagdollActivated, 0x0EF9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, UnknownData_7MCT, 0x0EFA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, CastABP, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, CurrentAccelerationValue, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, StartingActorRot, 0x0F0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, UnknownData_87HU, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanBase_C, WorldTransform, 0x0F20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HumanBase_C, 0x0F50);
		}

		// class UBP_AssaultRifle_Pete1_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Pete1__BP_AssaultRifle_Pete1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Pete1_C, 0x06E0);
		}

		// class UGE_Evo_Bone_TailWhipFX_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_TailWhipFX_T1__GE_Evo_Bone_TailWhipFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_TailWhipFX_T1_C, 0x0870);
		}

		// class UGA_Evo_Bone_Tail_FX_Tailwhip_T4_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Tail_FX_Tailwhip_T4__GA_Evo_Bone_Tail_FX_Tailwhip_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Tail_FX_Tailwhip_T4_C, 0x0400);
		}

		// class UGE_Evo_Bone_TailWhipFX_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_TailWhipFX_T5__GE_Evo_Bone_TailWhipFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_TailWhipFX_T5_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Teeth_Bonus_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Teeth_Bonus_T4__GE_Evo_Shadow_Teeth_Bonus_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Teeth_Bonus_T4_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Teeth_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Teeth_T3__GE_Evo_Shadow_Teeth_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Teeth_T3_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Teeth_Bonus_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Teeth_Bonus_T3__GE_Evo_Shadow_Teeth_Bonus_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Teeth_Bonus_T3_C, 0x0870);
		}

		// class UGA_M_ThrashRelease_Base_BP_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_M_ThrashRelease_Base_BP__GA_M_ThrashRelease_Base_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_ThrashRelease_Base_BP_C, 0x05E0);
		}

		// class UGE_MissingRightLeg_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MissingRightLeg__GE_MissingRightLeg_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MissingRightLeg_C, 0x0870);
		}

		// class UGE_MissingRightArm_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MissingRightArm__GE_MissingRightArm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MissingRightArm_C, 0x0870);
		}

		// class UGE_MissingLeftLeg_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MissingLeftLeg__GE_MissingLeftLeg_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MissingLeftLeg_C, 0x0870);
		}

		// class UGE_MissingLeftArm_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MissingLeftArm__GE_MissingLeftArm_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MissingLeftArm_C, 0x0870);
		}

		// class UGE_AssaultRifle_Damage_Tier5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Damage_Tier5__GE_AssaultRifle_Damage_Tier5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Damage_Tier5_C, 0x0870);
		}

		// class AFSH_CoralGrouper_Large_BP_C : public AFSH_CoralGrouper_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_CoralGrouper_Large_BP__FSH_CoralGrouper_Large_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_CoralGrouper_Large_BP_C, 0x1050);
		}

		// class AFSH_CoralGrouper_Small_BP_C : public AFSH_CoralGrouper_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_CoralGrouper_Small_BP__FSH_CoralGrouper_Small_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_CoralGrouper_Small_BP_C, 0x1050);
		}

		// class ASHK_Large_Seal_Albino_BP_C : public ASHK_Large_Seal_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_Large_Seal_Albino_BP__SHK_Large_Seal_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_Large_Seal_Albino_BP_C, 0x1050);
		}

		// class UGE_SwordFishVulnerableTaunt_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SwordFishVulnerableTaunt_BP__GE_SwordFishVulnerableTaunt_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SwordFishVulnerableTaunt_BP_C, 0x0870);
		}

		// class UMainMenuButtonCenter_BP_C : public UTwBaseButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__MainMenuButtonCenter_BP__MainMenuButtonCenter_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuButtonCenter_BP_C, UberGraphFrame, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMainMenuButtonCenter_BP_C, HighlightLoop, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMainMenuButtonCenter_BP_C, 0x0448);
		}

		// class UInGameMenuButton_BP_C : public UInGameMenuButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__InGameMenuButton_BP__InGameMenuButton_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuButton_BP_C, UberGraphFrame, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuButton_BP_C, NewQuest, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameMenuButton_BP_C, 0x0448);
		}

		// class ABP_Diver_Base_C : public ABP_HumanBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Diver_Base__BP_Diver_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Diver_Base_C, UberGraphFrame, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Diver_Base_C, VoiceGroupComponent_BP, 0x0F58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Diver_Base_C, 0x0F60);
		}

		// class ABP_Diver_AIController_Base_C : public AME_HumanAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Diver_AIController_Base__BP_Diver_AIController_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Diver_AIController_Base_C, 0x07B8);
		}

		// class ASpearProjectile_Diver_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__SpearProjectile_Diver__SpearProjectile_Diver_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpearProjectile_Diver_C, UberGraphFrame, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpearProjectile_Diver_C, 0x0278);
		}

		// class ABP_USCG_MediumSkiff_Debris_RightDoor_Minion_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_RightDoor_Minion__BP_USCG_MediumSkiff_Debris_RightDoor_Minion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_RightDoor_Minion_C, 0x0230);
		}

		// class AAssaultRifle_Projectile_Pete1_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Pete1__AssaultRifle_Projectile_Pete1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Pete1_C, 0x0270);
		}

		// class UBP_GE_ElectroShieldExplosion_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_ElectroShieldExplosion__BP_GE_ElectroShieldExplosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_ElectroShieldExplosion_C, 0x0870);
		}

		// class ABP_Base_SkiBoat_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_SkiBoat__BP_Base_SkiBoat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_SkiBoat_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_SkiBoat_C, 0x0CD4);
		}

		// class ABP_Skiff_Debris_RightRear_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Debris_RightRear__BP_Skiff_Debris_RightRear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Debris_RightRear_C, 0x0230);
		}

		// class ABP_Skiff_Debris_Bow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Debris_Bow__BP_Skiff_Debris_Bow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Debris_Bow_C, 0x0230);
		}

		// class UGE_SpearGun_Damage_Tier4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpearGun_Damage_Tier4__GE_SpearGun_Damage_Tier4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpearGun_Damage_Tier4_C, 0x0870);
		}

		// class UMapObjectiveButtonWidget_BP_C : public UObjectiveButtonWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapObjectiveButtonWidget_BP__MapObjectiveButtonWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapObjectiveButtonWidget_BP_C, 0x04C8);
		}

		// class UPeteMapMarkerWidget_BP_C : public UMapMarkerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PeteMapMarkerWidget_BP__PeteMapMarkerWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPeteMapMarkerWidget_BP_C, UberGraphFrame, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPeteMapMarkerWidget_BP_C, 0x02F8);
		}

		// class UMapMarkerWidget_BP_C : public UMapMarkerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapMarkerWidget_BP__MapMarkerWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget_BP_C, UberGraphFrame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget_BP_C, MarkerContainer, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarkerWidget_BP_C, 0x0300);
		}

		// class UGA_Evo_Bio_Electric_Teeth_AOE_T2_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Teeth_AOE_T2__GA_Evo_Bio_Electric_Teeth_AOE_T2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bio_Electric_Teeth_AOE_T2_C, UberGraphFrame, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Teeth_AOE_T2_C, 0x0440);
		}

		// class UEvolutionIconUpgradeFX_BP_C : public UTwBaseWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EvolutionIconUpgradeFX_BP__EvolutionIconUpgradeFX_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconUpgradeFX_BP_C, UberGraphFrame, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconUpgradeFX_BP_C, EvolutionRankUp, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolutionIconUpgradeFX_BP_C, 0x0268);
		}

		// class AShotgun_Projectile_Tier5_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__Shotgun_Projectile_Tier5__Shotgun_Projectile_Tier5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShotgun_Projectile_Tier5_C, 0x0270);
		}

		// class AShotgun_Projectile_Tier7_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__Shotgun_Projectile_Tier7__Shotgun_Projectile_Tier7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShotgun_Projectile_Tier7_C, 0x0270);
		}

		// class ABP_Base_JetSki_Bounty_C : public ABP_Base_Jetski_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_JetSki_Bounty__BP_Base_JetSki_Bounty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_JetSki_Bounty_C, 0x0CE0);
		}

		// class UGA_Evo_Shadow_Tail_T3_C : public UME_GameplayAbility_Projectiles
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Tail_T3__GA_Evo_Shadow_Tail_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Tail_T3_C, 0x0458);
		}

		// class UGA_Evo_Shadow_Tail_T2_C : public UME_GameplayAbility_Projectiles
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Tail_T2__GA_Evo_Shadow_Tail_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Tail_T2_C, 0x0458);
		}

		// class UGA_Evo_Shadow_Tail_T1_C : public UME_GameplayAbility_Projectiles
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Tail_T1__GA_Evo_Shadow_Tail_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Tail_T1_C, 0x0458);
		}

		// class ABP_VehicleDebris_C : public AME_VehicleDebrisActor
		TEST_METHOD(BlueprintGeneratedClass__BP_VehicleDebris__BP_VehicleDebris_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_VehicleDebris_C, 0x0230);
		}

		// class ABP_DepthChargeBarrel_Bounty_C : public AME_ProximityBomb
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthChargeBarrel_Bounty__BP_DepthChargeBarrel_Bounty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Bounty_C, UberGraphFrame, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Bounty_C, VulnerableVFX, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Bounty_C, Sphere, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Bounty_C, Bubbles, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Bounty_C, MaterialTimeline_Active_DD581010490CC2A764BB179B58D3B2BA, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Bounty_C, MaterialTimeline_FlashSpeed_DD581010490CC2A764BB179B58D3B2BA, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Bounty_C, MaterialTimeline__Direction_DD581010490CC2A764BB179B58D3B2BA, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Bounty_C, UnknownData_26YH, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Bounty_C, MaterialTimeline, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Bounty_C, DMIC, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthChargeBarrel_Bounty_C, 0x03E8);
		}

		// class UGE_Evo_Shadow_Stack_Count_3_C : public UGE_Evo_Shadow_Stack_Count_1_C
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack_Count_4__GE_Evo_Shadow_Stack_Count_3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_Count_3_C, 0x0870);
		}

		// class ABP_HumanPeteBoat_C : public ABP_HumanBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HumanPeteBoat__BP_HumanPeteBoat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HumanPeteBoat_C, 0x0F50);
		}

		// class UBP_Speargun_Diver_BossSupport_C : public UBP_Speargun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Speargun_Diver_BossSupport__BP_Speargun_Diver_BossSupport_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Speargun_Diver_BossSupport_C, 0x06E0);
		}

		// class ABP_EliteDiver_Pete2_AIController_C : public ABP_Diver_AIController_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_EliteDiver_Pete2_AIController__BP_EliteDiver_Pete2_AIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EliteDiver_Pete2_AIController_C, 0x07B8);
		}

		// class ABP_Diver_Pete1_C : public ABP_Diver_Hunter_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Diver_Pete1__BP_Diver_Pete1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Diver_Pete1_C, 0x0F70);
		}

		// class UBP_APEX_MED_Tail_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_APEX_MED_Tail_IR__BP_APEX_MED_Tail_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_APEX_MED_Tail_IR_C, 0x0040);
		}

		// class UBP_APEX_LG_Thrash_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_APEX_LG_Thrash_IR__BP_APEX_LG_Thrash_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_APEX_LG_Thrash_IR_C, 0x0040);
		}

		// class UGE_Apex_KillerWhale_BiteCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Apex_KillerWhale_BiteCD_BP__GE_Apex_KillerWhale_BiteCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Apex_KillerWhale_BiteCD_BP_C, 0x0870);
		}

		// class ABP_Small_FishingBoat_Bounty6_Boss_C : public ABP_Small_FishingBoat_Bounty_Mixed_Dynamite_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Small_FishingBoat_Bounty6_Boss__BP_Small_FishingBoat_Bounty6_Boss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Small_FishingBoat_Bounty6_Boss_C, UnknownData_YCMX, 0x0CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Small_FishingBoat_Bounty6_Boss_C, UberGraphFrame, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Small_FishingBoat_Bounty6_Boss_C, 0x0CE8);
		}

		// class ABP_SkiBoat_Bounty7_Mixed_Dynamite_C : public ABP_Base_SkiBoat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Bounty7_Mixed_Dynamite__BP_SkiBoat_Bounty7_Mixed_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Bounty7_Mixed_Dynamite_C, 0x0CD4);
		}

		// class ABP_SkiBoat_Bounty5_Shotguns_C : public ABP_Base_SkiBoat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Bounty5_Shotguns__BP_SkiBoat_Bounty5_Shotguns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Bounty5_Shotguns_C, 0x0CD4);
		}

		// class ABP_Skiff_Bounty3_Spearguns_C : public ABP_Base_Skiff_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Bounty3_Spearguns__BP_Skiff_Bounty3_Spearguns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Bounty3_Spearguns_C, 0x0CDC);
		}

		// class ABP_Skiff_Bounty3_Shotguns_C : public ABP_Base_Skiff_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Bounty3_Shotguns__BP_Skiff_Bounty3_Shotguns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Bounty3_Shotguns_C, 0x0CDC);
		}

		// class ABP_SkiBoat_Debris_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Debris_Fragment3__BP_SkiBoat_Debris_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Debris_Fragment3_C, 0x0230);
		}

		// class ABP_SkiBoat_Debris_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Debris_Fragment2__BP_SkiBoat_Debris_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Debris_Fragment2_C, 0x0230);
		}

		// class ABP_SkiBoat_Debris_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Debris_Fragment1__BP_SkiBoat_Debris_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Debris_Fragment1_C, 0x0230);
		}

		// class ABP_SmallFishingBoat_Debris_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmallFishingBoat_Debris_Fragment3__BP_SmallFishingBoat_Debris_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmallFishingBoat_Debris_Fragment3_C, 0x0230);
		}

		// class UGE_Rifle_Pete1Battle_Damage_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Rifle_Pete1Battle_Damage__GE_Rifle_Pete1Battle_Damage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Rifle_Pete1Battle_Damage_C, 0x0870);
		}

		// class ABasic_Spline_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__Basic_Spline__Basic_Spline_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, Spline, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, SplineMeshArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, SplineMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, DetailXStart, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, DetailYStart, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, SplineMeshTempArray, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, NormalizeTangents, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, UnknownData_QR0F, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, NewVar_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, Length, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, MeshTileLength, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, Segments, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, CurrentIndex, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, CurrentMesh, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, MeshIndex, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, CurrentPointDistance, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, NextPointDistance, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, Roll, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, StartScale, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, EndScale, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, SplineMaxDrawDistance, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, SplineScale, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, UpdateSplineMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, UnknownData_X7CV, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, SplineMesh_MAT, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, EnableCollision_, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, UnknownData_SC7S, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, LightInfo, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, LightSocketTransform, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, BuiltSplineMesh, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, SpawnedTag, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, TODLightTag, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, SpawnedLights, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABasic_Spline_C, IgnoreCameraCollision, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABasic_Spline_C, 0x0311);
		}

		// class UHunterSupport_HUNTER1_BP_C : public UHunterSupportEntry
		TEST_METHOD(BlueprintGeneratedClass__HunterSupport_HUNTER1_BP__HunterSupport_HUNTER1_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHunterSupport_HUNTER1_BP_C, 0x0068);
		}

		// class ABP_USCG_Small_Pete3_Support_C : public ABP_Boss_Support_Boat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Small_Pete3_Support__BP_USCG_Small_Pete3_Support_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Pete3_Support_C, UberGraphFrame, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Pete3_Support_C, StartingLoc, 0x0D20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Small_Pete3_Support_C, 0x0D2C);
		}

		// class UGE_KillerWhaleBiteCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhaleBiteCooldown_BP__GE_KillerWhaleBiteCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhaleBiteCooldown_BP_C, 0x0870);
		}

		// class UGE_KillerWhale_FeintCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhale_FeintCD_BP__GE_KillerWhale_FeintCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhale_FeintCD_BP_C, 0x0870);
		}

		// class UGE_MakoVulnerableTaunt_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MakoVulnerableTaunt_BP__GE_MakoVulnerableTaunt_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MakoVulnerableTaunt_BP_C, 0x0870);
		}

		// class UGA_M_Mako_Feint_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Mako_Feint_BP__GA_M_Mako_Feint_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Mako_Feint_BP_C, 0x0510);
		}

		// class UGE_SpermWhale_BiteCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhale_BiteCD_BP__GE_SpermWhale_BiteCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhale_BiteCD_BP_C, 0x0870);
		}

		// class ABP_Bio_Electric_Body_Aura_T4_C : public AME_AuraDamageActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Bio_Electric_Body_Aura_T4__BP_Bio_Electric_Body_Aura_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bio_Electric_Body_Aura_T4_C, 0x0400);
		}

		// class UGE_Bio_Electric_Body_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_T5__GE_Bio_Electric_Body_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_T5_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_LungeBonus_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_LungeBonus_T5__GE_Bio_Electric_Body_LungeBonus_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_LungeBonus_T5_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_Bonus_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_Bonus_T2__GE_Bio_Electric_Body_Bonus_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_Bonus_T2_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_T1__GE_Bio_Electric_Body_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_T1_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_LungeBonus_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_LungeBonus_T1__GE_Bio_Electric_Body_LungeBonus_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_LungeBonus_T1_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_Bonus_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_Bonus_T1__GE_Bio_Electric_Body_Bonus_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_Bonus_T1_C, 0x0870);
		}

		// class UGE_Evo_Adrenal_Gland1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Adrenal_Gland1__GE_Evo_Adrenal_Gland1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Adrenal_Gland1_C, 0x0870);
		}

		// class UGE_Evo_Adrenal_Gland5_Rating_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Adrenal_Gland5_Rating__GE_Evo_Adrenal_Gland5_Rating_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Adrenal_Gland5_Rating_C, 0x0870);
		}

		// class UGA_Evo_Bone_Head_T5_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Head_T5__GA_Evo_Bone_Head_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Head_T5_C, 0x0400);
		}

		// class UGE_Evo_Brutal_Muscles3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Brutal_Muscles3__GE_Evo_Brutal_Muscles3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Brutal_Muscles3_C, 0x0870);
		}

		// class UGE_Evo_Brutal_Muscles2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Brutal_Muscles2__GE_Evo_Brutal_Muscles2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Brutal_Muscles2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_PayResource_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_PayResource_T3__GE_Evo_Shadow_Body_PayResource_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_PayResource_T3_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_PayResource_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_PayResource_T2__GE_Evo_Shadow_Body_PayResource_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_PayResource_T2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_AddResource_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_AddResource_T3__GE_Evo_Shadow_Body_AddResource_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_AddResource_T3_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_AddResource_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_AddResource_T2__GE_Evo_Shadow_Body_AddResource_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_AddResource_T2_C, 0x0870);
		}

		// class UGE_Evo_MineralDigestion3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_MineralDigestion3__GE_Evo_MineralDigestion3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_MineralDigestion3_C, 0x0870);
		}

		// class UGE_Evo_MineralDigestion2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_MineralDigestion2__GE_Evo_MineralDigestion2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_MineralDigestion2_C, 0x0870);
		}

		// class UGE_Evo_MineralDigestion1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_MineralDigestion1__GE_Evo_MineralDigestion1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_MineralDigestion1_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Stack_Count_4_C : public UGE_Evo_Shadow_Stack_Count_1_C
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack_Count_5__GE_Evo_Shadow_Stack_Count_4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_Count_4_C, 0x0870);
		}

		// class ABP_Paddleboat_Fragment8_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Paddleboat_Fragment8__BP_Paddleboat_Fragment8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Paddleboat_Fragment8_C, 0x0230);
		}

		// class ABQ_TranqSpeargunProjectile_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__BQ_TranqSpeargunProjectile__BQ_TranqSpeargunProjectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABQ_TranqSpeargunProjectile_C, 0x0270);
		}

		// class ABP_Airboat_Debris_Frame_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Debris_Frame__BP_Airboat_Debris_Frame_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Debris_Frame_C, 0x0230);
		}

		// class ABP_Canoe_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Canoe_Fragment4__BP_Canoe_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Canoe_Fragment4_C, 0x0230);
		}

		// class ABP_Canoe_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Canoe_Fragment3__BP_Canoe_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Canoe_Fragment3_C, 0x0230);
		}

		// class ABP_Canoe_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Canoe_Fragment1__BP_Canoe_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Canoe_Fragment1_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment10_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment10__BP_Tikibar_Fragment10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment10_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment1__BP_Tikibar_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment1_C, 0x0230);
		}

		// class ABP_Base_TikiBoat_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_TikiBoat_Controller__BP_Base_TikiBoat_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_TikiBoat_Controller_C, 0x07E8);
		}

		// class ABP_Base_SailBoat_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_SailBoat_Controller__BP_Base_SailBoat_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_SailBoat_Controller_C, 0x07E8);
		}

		// class UGA_M_Marlin_Feint_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Marlin_Feint_BP__GA_M_Marlin_Feint_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Marlin_Feint_BP_C, 0x0510);
		}

		// class UGA_M_Marlin_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Marlin_EvadeRight_BP__GA_M_Marlin_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Marlin_EvadeRight_BP_C, 0x05E0);
		}

		// class UGE_Marlin_FeintCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Marlin_FeintCD_BP__GE_Marlin_FeintCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Marlin_FeintCD_BP_C, 0x0870);
		}

		// class UGE_Marlin_BiteCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Marlin_BiteCD_BP__GE_Marlin_BiteCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Marlin_BiteCD_BP_C, 0x0870);
		}

		// class ABP_USCG_SpawnDynamiteGem_AIcontroller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SpawnDynamiteGem_AIcontroller__BP_USCG_SpawnDynamiteGem_AIcontroller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SpawnDynamiteGem_AIcontroller_C, 0x07E8);
		}

		// class UBP_DepthCharge_Base_C : public UME_WeaponComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthCharge_Base__BP_DepthCharge_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DepthCharge_Base_C, 0x06E0);
		}

		// class ABP_WaterTrike_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WaterTrike_Fragment3__BP_WaterTrike_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WaterTrike_Fragment3_C, 0x0230);
		}

		// class ABP_WaterTrike_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WaterTrike_Fragment2__BP_WaterTrike_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WaterTrike_Fragment2_C, 0x0230);
		}

		// class ABP_WaterTrike_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WaterTrike_Fragment1__BP_WaterTrike_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WaterTrike_Fragment1_C, 0x0230);
		}

		// class AAIController_HammerHead_Hunted_BP_C : public AAIController_HammerHead_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_HammerHead_Hunted_BP__AIController_HammerHead_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_HammerHead_Hunted_BP_C, 0x07D0);
		}

		// class ASHK_HammerHead_Hunted_BP_C : public ASHK_HammerHead_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_HammerHead_Hunted_BP__SHK_HammerHead_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_HammerHead_Hunted_BP_C, 0x1050);
		}

		// class ASHK_HammerHead_Albino_BP_C : public ASHK_HammerHead_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_HammerHead_Albino_BP__SHK_HammerHead_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_HammerHead_Albino_BP_C, 0x1050);
		}

		// class ABP_DepthChargeBarrel_Pete3_C : public ABP_DepthChargeBarrel_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthChargeBarrel_Pete3__BP_DepthChargeBarrel_Pete3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthChargeBarrel_Pete3_C, 0x03E8);
		}

		// class ABP_PontoonBoat_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment3__BP_PontoonBoat_Fragment3_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment3_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment3_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment2__BP_PontoonBoat_Fragment2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment2_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment2_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment17_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment17__BP_PontoonBoat_Fragment17_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment17_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment17_C, 0x0238);
		}

		// class ABP_Base_SportFishingBoat_Roof_C : public ABP_Base_SportFishingBoat__C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_SportFishingBoat_Roof__BP_Base_SportFishingBoat_Roof_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_SportFishingBoat_Roof_C, 0x0CD4);
		}

		// class ABP_Base_Sailboat_Yellow_C : public ABP_Base_Sailboat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Sailboat_Yellow__BP_Base_Sailboat_Yellow_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Sailboat_Yellow_C, LastHitTime_1, 0x0CD4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Sailboat_Yellow_C, 0x0CD8);
		}

		// class ABP_Base_Sailboat_Blue_C : public ABP_Base_Sailboat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Sailboat_Blue__BP_Base_Sailboat_Blue_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Sailboat_Blue_C, LastHitTime_1, 0x0CD4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Sailboat_Blue_C, 0x0CD8);
		}

		// class ABP_Base_PontoonBoat2_C : public ABP_Base_PontoonBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_PontoonBoat2__BP_Base_PontoonBoat2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_PontoonBoat2_C, 0x0CD4);
		}

		// class ABP_Base_Yacht_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Yacht_Empty__BP_Base_Yacht_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Yacht_Empty_C, ME_DistanceSignificance, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Yacht_Empty_C, 0x0C00);
		}

		// class ABP_Base_Sailboat_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Sailboat_Empty__BP_Base_Sailboat_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Sailboat_Empty_C, ME_DistanceSignificance, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Sailboat_Empty_C, LastHitTime_1, 0x0C00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Sailboat_Empty_C, 0x0C04);
		}

		// class ABP_Base_PontoonPartyBoat_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_PontoonPartyBoat_Empty__BP_Base_PontoonPartyBoat_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PontoonPartyBoat_Empty_C, ME_DistanceSignificance, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_PontoonPartyBoat_Empty_C, 0x0C00);
		}

		// class UGA_M_Swordfish_ThrashRelease_BP_C : public UGA_M_ThrashRelease_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Swordfish_ThrashRelease_BP__GA_M_Swordfish_ThrashRelease_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Swordfish_ThrashRelease_BP_C, 0x05E0);
		}

		// class ANetSpline_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__NetSpline_BP__NetSpline_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, TwAkEmitterArray, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, Spline, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, SplineMeshArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, SplineMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, GenerateDetail, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, PlaceDetailOnlyAtPoints_, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, UnknownData_EH3U, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, DetailMesh, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, DetailSpacing, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, DetailXStart, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, DetailXRandomOffset, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, DetailYStart, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, DetailYRandomOffset, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, DetailDrawScaleMAX, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, SplineMeshTempArray, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, NormalizeTangents, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, UnknownData_Z77J, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, Length, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, MeshTileLength, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, Segments, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, CurrentIndex, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, UnknownData_BB3M, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, CurrentMesh, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, MeshIndex, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, CurrentPointDistance, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, HowManyPoints, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, Roll, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, StartScale, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, EndScale, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, DetailDrawScaleMIN, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, DetailMaxDrawDistance, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, SplineMaxDrawDistance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, SplineScale, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, UpdateSplineMesh, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, UnknownData_BYND, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, TEMPStaticMeshLocation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, TEMPStaticMesh, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, TEMPInstanceComponent, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, InstanceGroup, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, TEMPNumberMeshToSpawn, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, TEMPAddMeshToNewGroup_, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, UnknownData_LJRC, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, PipeSplineInstanceST, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, TEMPSplineInstance, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, TempStaticMeshST, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, MeshGenerationSeed, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, Detail_Percentage, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, UnknownData_2JQN, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, Hierarchical_Instance_Array, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, TEMPMeshArray, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, TEMPRotation, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, NewVar_1, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, DetailForwardOffset, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, UnknownData_FC3C, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, SplineMat1Override, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, SplineMat2Override, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, SplineMat3Override, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, Sorting_Priority, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANetSpline_BP_C, DisableSplineCollision, 0x0404);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANetSpline_BP_C, 0x0405);
		}

		// class ACave_Grotto_BP_C : public AStaticMeshActor
		TEST_METHOD(BlueprintGeneratedClass__Cave_Grotto_BP__Cave_Grotto_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACave_Grotto_BP_C, TwAkSplineProximityEffects1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACave_Grotto_BP_C, AudioSpline, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACave_Grotto_BP_C, TwAkSplineProximityEffects, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACave_Grotto_BP_C, 0x0248);
		}

		// class AOneWayGateLever_BP_C : public AME_GateLever
		TEST_METHOD(BlueprintGeneratedClass__OneWayGateLever_BP__OneWayGateLever_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGateLever_BP_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGateLever_BP_C, Box, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGateLever_BP_C, TextRender, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGateLever_BP_C, StaticMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGateLever_BP_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGateLever_BP_C, Complete, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGateLever_BP_C, IsLeverComplete_, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGateLever_BP_C, UnknownData_75QJ, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::AOneWayGateLever_BP_C, DynamicMat, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOneWayGateLever_BP_C, 0x0270);
		}

		// class ACutSceneLocation_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CutSceneLocation_BP__CutSceneLocation_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneLocation_BP_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneLocation_BP_C, Visual, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneLocation_BP_C, Sphere, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneLocation_BP_C, DefaultSceneRoot, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneLocation_BP_C, CutSceneName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneLocation_BP_C, ObjectiveManager, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACutSceneLocation_BP_C, ObjectiveState, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACutSceneLocation_BP_C, 0x0261);
		}

		// class AAudioSpline_BP_C : public ATwSplineEmitterBase
		TEST_METHOD(BlueprintGeneratedClass__AudioSpline_BP__AudioSpline_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioSpline_BP_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioSpline_BP_C, Spline, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioSpline_BP_C, DefaultSceneRoot, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioSpline_BP_C, 0x0278);
		}

		// class AAudioSpline_Hwy_BP_C : public AAudioSpline_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AudioSpline_Hwy_BP__AudioSpline_Hwy_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioSpline_Hwy_BP_C, UberGraphFrame, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioSpline_Hwy_BP_C, 0x0280);
		}

		// class AAudioSpline_Downtown_BP_C : public AAudioSpline_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AudioSpline_Downtown_BP__AudioSpline_Downtown_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioSpline_Downtown_BP_C, UberGraphFrame, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioSpline_Downtown_BP_C, 0x0280);
		}

		// class ABP_LabelText_DEV_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_LabelText_DEV__BP_LabelText_DEV_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LabelText_DEV_C, TextRender, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_LabelText_DEV_C, DefaultSceneRoot, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_LabelText_DEV_C, 0x0230);
		}

		// class ABP_BreakableGate_Teen_C : public ABP_BreakableGate_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BreakableGate_Teen__BP_BreakableGate_Teen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableGate_Teen_C, GateDestroied, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BreakableGate_Teen_C, 0x0420);
		}

		// class ABP_DispersalBubbles_Sewer_Random_ENV_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_DispersalBubbles_Sewer_Random_ENV_PS__BP_DispersalBubbles_Sewer_Random_ENV_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DispersalBubbles_Sewer_Random_ENV_PS_C, 0x0280);
		}

		// class ABP_Tropical_Fishball_Sprite_Large_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Tropical_Fishball_Sprite_Large_PS__BP_Tropical_Fishball_Sprite_Large_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tropical_Fishball_Sprite_Large_PS_C, 0x0280);
		}

		// class ABP_BarrelStream01_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_BarrelStream01_PS__BP_BarrelStream01_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BarrelStream01_PS_C, 0x0280);
		}

		// class ALG_DockGasStation_Ceiling_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_DockGasStation_Ceiling__LG_DockGasStation_Ceiling_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_DockGasStation_Ceiling_C, 0x0238);
		}

		// class ABP_Spire_Smoke_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Spire_Smoke__BP_Spire_Smoke_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Spire_Smoke_C, TwAkEmitterArray, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Spire_Smoke_C, 0x0288);
		}

		// class ABP_KaijuGate_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_KaijuGate__BP_KaijuGate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_KaijuGate_C, 0x0280);
		}

		// class ABP_BodyBagNC_C : public AME_NutrientCache_Skeletal
		TEST_METHOD(BlueprintGeneratedClass__BP_BodyBagNC__BP_BodyBagNC_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BodyBagNC_C, UberGraphFrame, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BodyBagNC_C, Weight, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BodyBagNC_C, BodyConstraint, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BodyBagNC_C, 0x0388);
		}

		// class ABP_BreakableGate_Cave_Adult_C : public ABP_BreakableGate_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BreakableGate_Cave_Adult__BP_BreakableGate_Cave_Adult_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BreakableGate_Cave_Adult_C, 0x0410);
		}

		// class UBP_HumanFlesh_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HumanFlesh_IR__BP_HumanFlesh_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HumanFlesh_IR_C, 0x0040);
		}

		// class ABP_Airboat_Bounty3_Boss_C : public ABP_Airboat_Bounty_Shotguns_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Bounty3_Boss__BP_Airboat_Bounty3_Boss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Airboat_Bounty3_Boss_C, UnknownData_OTKT, 0x0CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Airboat_Bounty3_Boss_C, UberGraphFrame, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Bounty3_Boss_C, 0x0CE8);
		}

		// class UGE_Evo_Shadow_Tail_Damage_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Tail_Damage_T5__GE_Evo_Shadow_Tail_Damage_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Tail_Damage_T5_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Tail_Damage_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Tail_Damage_T4__GE_Evo_Shadow_Tail_Damage_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Tail_Damage_T4_C, 0x0870);
		}

		// class AAIController_SpermWhale_BP_C : public AAIController_Hostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_SpermWhale_BP__AIController_SpermWhale_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_SpermWhale_BP_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_SpermWhale_BP_C, 0x07D0);
		}

		// class AWHL_KillerWhale_Apex_BP_C : public AWHL_KillerWhale_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WHL_KillerWhale_Apex_BP__WHL_KillerWhale_Apex_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWHL_KillerWhale_Apex_BP_C, UberGraphFrame, 0x1050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWHL_KillerWhale_Apex_BP_C, 0x1058);
		}

		// class AWHL_KillerWhale_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WHL_KillerWhale_BP__WHL_KillerWhale_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWHL_KillerWhale_BP_C, VoiceGroupComponent_BP1, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWHL_KillerWhale_BP_C, VoiceGroupComponent_BP, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWHL_KillerWhale_BP_C, 0x1050);
		}

		// class UGE_MissingHead_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MissingHead__GE_MissingHead_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MissingHead_C, 0x0870);
		}

		// class ASpearProjectile_Tier1_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__SpearProjectile_Tier1__SpearProjectile_Tier1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpearProjectile_Tier1_C, UberGraphFrame, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpearProjectile_Tier1_C, 0x0278);
		}

		// class UGE_Evo_Bone_Set_Bonus1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Set_Bonus1__GE_Evo_Bone_Set_Bonus1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Set_Bonus1_C, 0x0870);
		}

		// class UGE_Evo_BioElectric_Set_Bonus5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_BioElectric_Set_Bonus5__GE_Evo_BioElectric_Set_Bonus5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_BioElectric_Set_Bonus5_C, 0x0870);
		}

		// class UGE_Evo_BioElectric_Set_Bonus3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_BioElectric_Set_Bonus3__GE_Evo_BioElectric_Set_Bonus3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_BioElectric_Set_Bonus3_C, 0x0870);
		}

		// class UGE_Evo_BioElectric_Set_Bonus2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_BioElectric_Set_Bonus2__GE_Evo_BioElectric_Set_Bonus2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_BioElectric_Set_Bonus2_C, 0x0870);
		}

		// class ABP_Skiff_Bounty_Shotguns_C : public ABP_Base_Skiff_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Bounty_Shotguns__BP_Skiff_Bounty_Shotguns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Bounty_Shotguns_C, 0x0CDC);
		}

		// class AShotgun_Projectile_Tier4_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__Shotgun_Projectile_Tier4__Shotgun_Projectile_Tier4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShotgun_Projectile_Tier4_C, 0x0270);
		}

		// class ABP_Evo_Bone_Tail_Smash_Explosion_Emerge_Elder_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Evo_Bone_Tail_Smash_Explosion_Emerge_Elder__BP_Evo_Bone_Tail_Smash_Explosion_Emerge_Elder_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Evo_Bone_Tail_Smash_Explosion_Emerge_Elder_C, 0x02D0);
		}

		// class ABP_Evo_Bone_Tail_Smash_Explosion_Emerge_Adult_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Evo_Bone_Tail_Smash_Explosion_Emerge_Adult__BP_Evo_Bone_Tail_Smash_Explosion_Emerge_Adult_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Evo_Bone_Tail_Smash_Explosion_Emerge_Adult_C, 0x02D0);
		}

		// class ABP_EVO_Shadow_Body_AOE_T2_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Body_AOE_T2__BP_EVO_Shadow_Body_AOE_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Body_AOE_T2_C, 0x02D0);
		}

		// class UGE_Evo_Bone_Body_PayResource_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_PayResource_T3__GE_Evo_Bone_Body_PayResource_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_PayResource_T3_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_Lunge_ImpactVFX_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_Lunge_ImpactVFX_T5__GE_Evo_Bone_Body_Lunge_ImpactVFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_Lunge_ImpactVFX_T5_C, 0x0870);
		}

		// class UGA_Evo_Bone_Body_Lunge_ImpactVFX_T5_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_Lunge_ImpactVFX_T5__GA_Evo_Bone_Body_Lunge_ImpactVFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_Lunge_ImpactVFX_T5_C, 0x05E0);
		}

		// class UGE_Evo_Bio_Electric_Head_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_T5__GE_Evo_Bio_Electric_Head_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_T5_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Head_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_T4__GE_Evo_Bio_Electric_Head_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_T4_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Head_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_T3__GE_Evo_Bio_Electric_Head_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_T3_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Teeth_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_T3__GE_Evo_Bio_Electric_Teeth_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_T3_C, 0x0870);
		}

		// class UME_RegionButton_BP_C : public UTwBaseButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__ME_RegionButton_BP__ME_RegionButton_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_RegionButton_BP_C, 0x0438);
		}

		// class UMapObjectiveCollectionWidget_BP_C : public UObjectiveCollectionWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapObjectiveCollectionWidget_BP__MapObjectiveCollectionWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapObjectiveCollectionWidget_BP_C, 0x02C8);
		}

		// class AAssaultRifle_Projectile_Tier7_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Tier7__AssaultRifle_Projectile_Tier7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Tier7_C, 0x0270);
		}

		// class ARifle_Projectile_Tier4_C : public ARifle_Projectile_Tier1_C
		TEST_METHOD(BlueprintGeneratedClass__Rifle_Projectile_Tier4__Rifle_Projectile_Tier4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARifle_Projectile_Tier4_C, 0x0270);
		}

		// class AME_AI_SpawnPoint_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__ME_AI_SpawnPoint_BP__ME_AI_SpawnPoint_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AI_SpawnPoint_BP_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AI_SpawnPoint_BP_C, Arrow, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AI_SpawnPoint_BP_C, Billboard, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AI_SpawnPoint_BP_C, Capsule, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AI_SpawnPoint_BP_C, PersistentAI_, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AI_SpawnPoint_BP_C, UnknownData_WDM1, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AI_SpawnPoint_BP_C, SpawnInterval, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AI_SpawnPoint_BP_C, AIArray, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AI_SpawnPoint_BP_C, AIArrayBack, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AI_SpawnPoint_BP_C, SpawnIndex, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AI_SpawnPoint_BP_C, UnknownData_0RCD, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AI_SpawnPoint_BP_C, SpawnedAIController, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_AI_SpawnPoint_BP_C, 0x0280);
		}

		// class ASHK_GreatWhite_Hunted_BP_C : public ASHK_GreatWhite_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_GreatWhite_Hunted_BP__SHK_GreatWhite_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_GreatWhite_Hunted_BP_C, 0x1050);
		}

		// class AWHL_KillerWhale_Hunted_BP_C : public AWHL_KillerWhale_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WHL_KillerWhale_Hunted_BP__WHL_KillerWhale_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWHL_KillerWhale_Hunted_BP_C, 0x1050);
		}

		// class ABP_USCG_Small_Bounty_Shotguns_C : public ABP_Base_USCG_Small_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Small_Bounty_Shotguns__BP_USCG_Small_Bounty_Shotguns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Small_Bounty_Shotguns_C, 0x0CE4);
		}

		// class ABP_Yacht_Hull_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Yacht_Hull__BP_Yacht_Hull_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Yacht_Hull_C, 0x0230);
		}

		// class ABP_USCG_SmallSkiff_Debris_RightSide_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SmallSkiff_Debris_RightSide__BP_USCG_SmallSkiff_Debris_RightSide_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SmallSkiff_Debris_RightSide_C, 0x0230);
		}

		// class UBP_Rifle_Tier3_C : public UBP_Rifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rifle_Tier3__BP_Rifle_Tier3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rifle_Tier3_C, 0x06E0);
		}

		// class UBP_Rifle_Tier4_C : public UBP_Rifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rifle_Tier4__BP_Rifle_Tier4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rifle_Tier4_C, 0x06E0);
		}

		// class UBP_Shotgun_Tier5_C : public UBP_Shotgun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shotgun_Tier5__BP_Shotgun_Tier5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shotgun_Tier5_C, 0x06E0);
		}

		// class UGE_Alligator_TailwhipDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Alligator_TailwhipDamage_BP__GE_Alligator_TailwhipDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Alligator_TailwhipDamage_BP_C, 0x0870);
		}

		// class UGE_AI_Evade_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AI_Evade__GE_AI_Evade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AI_Evade_C, 0x07B8);
		}

		// class AEVO_ShadowTail_Projectile_T1_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__EVO_ShadowTail_Projectile_T1__EVO_ShadowTail_Projectile_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEVO_ShadowTail_Projectile_T1_C, 0x0270);
		}

		// class AEVO_ShadowTail_Projectile_T2_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__EVO_ShadowTail_Projectile_T2__EVO_ShadowTail_Projectile_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEVO_ShadowTail_Projectile_T2_C, 0x0270);
		}

		// class UGE_Evo_Shadow_Stack_Check_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack_Check__GE_Evo_Shadow_Stack_Check_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_Check_C, 0x0870);
		}

		// class UGA_Evo_Bone_Fins_Evade_ImpactFX_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Fins_Evade_ImpactFX_T1__GA_Evo_Bone_Fins_Evade_ImpactFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Fins_Evade_ImpactFX_T1_C, 0x0400);
		}

		// class ALG_JunctionLight_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_JunctionLight__LG_JunctionLight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_JunctionLight_C, 0x0238);
		}

		// class ALG_Spotlight_Base_C : public ASpotLight
		TEST_METHOD(BlueprintGeneratedClass__LG_Spotlight_Base__LG_Spotlight_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Spotlight_Base_C, 0x0238);
		}

		// class UGA_M_Seal_LandLunge_BP_C : public UGA_M_LandLunge_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Seal_LandLunge_BP__GA_M_Seal_LandLunge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Seal_LandLunge_BP_C, 0x05E0);
		}

		// class AAIController_Mako_Hunted_BP_C : public AAIController_Mako_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Mako_Hunted_BP__AIController_Mako_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Mako_Hunted_BP_C, 0x07D0);
		}

		// class ABP_TourAirBoat_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TourAirBoat_Fragment6__BP_TourAirBoat_Fragment6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TourAirBoat_Fragment6_C, 0x0230);
		}

		// class UGE_ThrashLeft_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_ThrashLeft__GE_ThrashLeft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ThrashLeft_C, 0x0870);
		}

		// class ACineCamera_WithLight_C : public ACineCameraActor
		TEST_METHOD(BlueprintGeneratedClass__CineCamera_WithLight__CineCamera_WithLight_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCamera_WithLight_C, UberGraphFrame, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCamera_WithLight_C, CamLight, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCamera_WithLight_C, CamLightBegin_PM, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCamera_WithLight_C, CamLightEnd_AM, 0x0804);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCamera_WithLight_C, DisableOutlineLength, 0x0808);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCamera_WithLight_C, 0x080C);
		}

		// class UHMN_FemalePlus_ABP_C : public UHumanBase_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__HMN_FemalePlus_ABP__HMN_FemalePlus_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHMN_FemalePlus_ABP_C, 0x9201);
		}

		// class UHMN_MalePlus_ABP_C : public UHumanBase_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__HMN_MalePlus_ABP__HMN_MalePlus_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHMN_MalePlus_ABP_C, 0x9201);
		}

		// class ABP_Scaly_PeteV3_C : public ABP_HumanBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Scaly_PeteV3__BP_Scaly_PeteV3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Scaly_PeteV3_C, 0x0F50);
		}

		// class ABP_Lake_Fishball_Sprite_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Lake_Fishball_Sprite_PS__BP_Lake_Fishball_Sprite_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Lake_Fishball_Sprite_PS_C, 0x0280);
		}

		// class ABP_Glow_Anemone_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Glow_Anemone__BP_Glow_Anemone_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Glow_Anemone_C, 0x0280);
		}

		// class AFSH_ParrotFish_ExploreLarge_BP_C : public AFSH_ParrotFish_Large_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_ParrotFish_ExploreLarge_BP__FSH_ParrotFish_ExploreLarge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_ParrotFish_ExploreLarge_BP_C, 0x1050);
		}

		// class UBTDecorator_Mercuna_Reachable : public UBTDecorator
		TEST_METHOD(Class__Mercuna__BTDecorator_Mercuna_Reachable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Mercuna_Reachable, Source, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Mercuna_Reachable, Destination, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Mercuna_Reachable, MaxPathLength, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Mercuna_Reachable, UnknownData_SWPQ, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Mercuna_Reachable, 0x00C0);
		}

		// class UBTTask_Mercuna_MoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Mercuna__BTTask_Mercuna_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Mercuna_MoveTo, Speed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Mercuna_MoveTo, EndDistance, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Mercuna_MoveTo, UnknownData_S5GW, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Mercuna_MoveTo, 0x00A8);
		}

		// class UEnvQueryGenerator_Mercuna_Sphere : public UEnvQueryGenerator
		TEST_METHOD(Class__Mercuna__EnvQueryGenerator_Mercuna_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_Sphere, InnerRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_Sphere, OuterRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_Sphere, NumberOfShells, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_Sphere, PointsPerShell, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_Sphere, Distribution, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_Sphere, UnknownData_HSPS, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_Sphere, Center, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Mercuna_Sphere, 0x0140);
		}

		// class UEnvQueryGenerator_Mercuna_3DRing : public UEnvQueryGenerator
		TEST_METHOD(Class__Mercuna__EnvQueryGenerator_Mercuna_3DRing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_3DRing, InnerRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_3DRing, OuterRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_3DRing, NumberOfRings, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_3DRing, PointsPerRing, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_3DRing, MinHeight, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_3DRing, MaxHeight, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_3DRing, NumberOfLayers, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Mercuna_3DRing, Center, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Mercuna_3DRing, 0x01E0);
		}

		// class UMercunaQueryTest : public UEnvQueryTest
		TEST_METHOD(Class__Mercuna__MercunaQueryTest)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercunaQueryTest, 0x01F8);
		}

		// class UEnvQueryTest_Mercuna_NavigableVolume : public UMercunaQueryTest
		TEST_METHOD(Class__Mercuna__EnvQueryTest_Mercuna_NavigableVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Mercuna_NavigableVolume, 0x01F8);
		}

		// class UEnvQueryTest_Mercuna_Reachable : public UMercunaQueryTest
		TEST_METHOD(Class__Mercuna__EnvQueryTest_Mercuna_Reachable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Mercuna_Reachable, MaxPathLength, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Mercuna_Reachable, Context, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Mercuna_Reachable, 0x0238);
		}

		// class UEnvQueryTest_Mercuna_NavRaycast : public UMercunaQueryTest
		TEST_METHOD(Class__Mercuna__EnvQueryTest_Mercuna_NavRaycast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Mercuna_NavRaycast, Context, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Mercuna_NavRaycast, 0x0200);
		}

		// class UEnvQueryTest_Mercuna_Project : public UMercunaQueryTest
		TEST_METHOD(Class__Mercuna__EnvQueryTest_Mercuna_Project)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Mercuna_Project, MaxSearchRadius, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Mercuna_Project, 0x0230);
		}

		// class UMercunaNavigationComponent : public UActorComponent
		TEST_METHOD(Class__Mercuna__MercunaNavigationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaNavigationComponent, OnMoveCompleted, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaNavigationComponent, Configuration, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaNavigationComponent, UnknownData_791X, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaNavigationComponent, NavOctree, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaNavigationComponent, Pathfinding, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaNavigationComponent, DynamicAvoidance, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaNavigationComponent, UnknownData_GFT9, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaNavigationComponent, UsageFlags, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaNavigationComponent, UnknownData_4ZTY, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercunaNavigationComponent, 0x0130);
		}

		// class UMercunaMoveToProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mercuna__MercunaMoveToProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaMoveToProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaMoveToProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaMoveToProxy, UnknownData_YTZP, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercunaMoveToProxy, 0x0080);
		}

		// class UMercunaTrackActorProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mercuna__MercunaTrackActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaTrackActorProxy, OnFailure, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaTrackActorProxy, UnknownData_HRVD, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercunaTrackActorProxy, 0x0060);
		}

		// class AMercunaNavModifierVolume : public AVolume
		TEST_METHOD(Class__Mercuna__MercunaNavModifierVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavModifierVolume, bEnabled, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavModifierVolume, UnknownData_3P3P, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavModifierVolume, CostMultiplier, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavModifierVolume, CostMultipler, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavModifierVolume, UsageTypes, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavModifierVolume, NavOctree, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMercunaNavModifierVolume, 0x0270);
		}

		// class AMercunaNavOctree : public AActor
		TEST_METHOD(Class__Mercuna__MercunaNavOctree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, CellSize, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, MinPawnRadius, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, MaxPawnRadius, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, bNeverSave, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, bAllowOctreeMerging, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, GeometryCollisionChannel, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, bRecordOctreeDeltas, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, OnBuildComplete, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, OnBuildLowResReady, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, OnRebuildComplete, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, OnRebuildLowResReady, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, OnLoadComplete, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, OnShortRangeLoadComplete, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, UnknownData_DLCG, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, DebugDrawMode, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, UnknownData_4IAN, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, MerNavOctreeRenderingComponent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, bBuildAsSublevel, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, bNeedsRebuild, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavOctree, UnknownData_ZNF4, 0x02AA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMercunaNavOctree, 0x02B8);
		}

		// class AMercunaNavSeed : public AActor
		TEST_METHOD(Class__Mercuna__MercunaNavSeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMercunaNavSeed, 0x0220);
		}

		// class UMercunaNavSeedComponent : public USceneComponent
		TEST_METHOD(Class__Mercuna__MercunaNavSeedComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercunaNavSeedComponent, 0x01F0);
		}

		// class AMercunaNavTestingActor : public AActor
		TEST_METHOD(Class__Mercuna__MercunaNavTestingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, Radius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, UnknownData_AEQ8, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, OtherActor, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, UsageFlags, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, HeightChangePenalty, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, UnknownData_5QC1, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, MaxSpeed, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, MaxAcceleration, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, UnknownData_3WK7, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, PathLength, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, PathSections, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, PathFindTime, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, PathNodesUsed, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, UnknownData_A9FC, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, SphereComponent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, Spline, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, Octree, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavTestingActor, UnknownData_1R7Q, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMercunaNavTestingActor, 0x0280);
		}

		// class AMercunaNavVolume : public AVolume
		TEST_METHOD(Class__Mercuna__MercunaNavVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavVolume, NavOctree, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavVolume, PreciseBoundaries, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavVolume, LOD, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavVolume, FullDetailBuild, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMercunaNavVolume, UnknownData_TMZ4, 0x0263);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMercunaNavVolume, 0x0268);
		}

		// class UMercunaObstacleComponent : public USceneComponent
		TEST_METHOD(Class__Mercuna__MercunaObstacleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaObstacleComponent, bAutomatic, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaObstacleComponent, UnknownData_L04K, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaObstacleComponent, Radius, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaObstacleComponent, UnknownData_FR86, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercunaObstacleComponent, 0x0200);
		}

		// class UMercunaClampToNavigableProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mercuna__MercunaClampToNavigableProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaClampToNavigableProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaClampToNavigableProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaClampToNavigableProxy, UnknownData_S008, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercunaClampToNavigableProxy, 0x0070);
		}

		// class UMercunaRaycastProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Mercuna__MercunaRaycastProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaRaycastProxy, OnHit, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaRaycastProxy, OnNoHit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaRaycastProxy, UnknownData_4EKN, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercunaRaycastProxy, 0x0078);
		}

		// class UMercunaPath : public UObject
		TEST_METHOD(Class__Mercuna__MercunaPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaPath, PathUpdated, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaPath, UnknownData_FITD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercunaPath, 0x0040);
		}

		// class UMercunaSpline : public UObject
		TEST_METHOD(Class__Mercuna__MercunaSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaSpline, SplineUpdated, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaSpline, UnknownData_CI3I, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercunaSpline, 0x0040);
		}

		// class UMercunaTask_MoveTo : public UAITask
		TEST_METHOD(Class__Mercuna__MercunaTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaTask_MoveTo, OnRequestFailed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaTask_MoveTo, OnMoveFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercunaTask_MoveTo, UnknownData_JGHW, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercunaTask_MoveTo, 0x00C8);
		}

		// class UMerNavOctreeRenderingComponent : public UMeshComponent
		TEST_METHOD(Class__Mercuna__MerNavOctreeRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerNavOctreeRenderingComponent, UnknownData_MKJ3, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMerNavOctreeRenderingComponent, 0x0440);
		}

		// class UMerSettings : public UObject
		TEST_METHOD(Class__Mercuna__MerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerSettings, DebugLengthScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerSettings, bAlwaysShowErrors, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerSettings, UnknownData_GTLK, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerSettings, CellSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerSettings, MinPawnRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerSettings, MaxPawnRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerSettings, bAutoLinkNavVolumesWithOctrees, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerSettings, bAllowOctreeMerging, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerSettings, UnknownData_2W1D, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerSettings, ModifierUsageTypes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMerSettings, 0x0050);
		}

		// class UMerEditorSettings : public UObject
		TEST_METHOD(Class__Mercuna__MerEditorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerEditorSettings, bEnableExtraLogging, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerEditorSettings, UnknownData_6W67, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerEditorSettings, NavigableColor, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerEditorSettings, HighCostColor, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerEditorSettings, UnnavigableColor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMerEditorSettings, UnknownData_5ABY, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMerEditorSettings, 0x0078);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_A91L, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0080);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, PlayerName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0088);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_TQ61, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x00B0);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0028);
		}

		// class UMediaComponent : public UActorComponent
		TEST_METHOD(Class__MediaAssets__MediaComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaTexture, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaPlayer, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaComponent, 0x00C0);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_1PB4, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_S7PB, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_DJW6, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, ViewRotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_MDTG, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_SWDB, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0138);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0038);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_HBPW, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_RV6W, 0x06D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_0LHQ, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_MIQO, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x08D0);
		}

		// class UMediaTexture : public UTexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_WQMA, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, EnableGenMips, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NumMips, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_ZJLX, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_SNU1, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x0188);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0088);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x0098);
		}

		// class UTimeSynchronizableMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_PHEG, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, FrameDelay, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, TimeDelay, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x0098);
		}

		// class UImgMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__ImgMedia__ImgMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, FrameRateOverride, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, ProxyOverride, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, SequencePath, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSource, 0x00B0);
		}

		// class UImgMediaSettings : public UObject
		TEST_METHOD(Class__ImgMediaFactory__ImgMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultFrameRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheBehindPercentage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheSizeGB, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreads, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreadStackSizeKB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, GlobalCacheSizeGB, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseGlobalCache, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_C10T, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, ExrDecoderThreads, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_QW4J, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseDefaultProxy, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_NTGI, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSettings, 0x0068);
		}

		// class UManeaterAIFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Maneater__ManeaterAIFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterAIFunctionLibrary, 0x0028);
		}

		// class UME_AbilitySystemComponent : public UAbilitySystemComponent
		TEST_METHOD(Class__Maneater__ME_AbilitySystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AbilitySystemComponent, PersistentParticleSystemMap, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AbilitySystemComponent, AbilityCache, 0x1348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AbilitySystemComponent, AbilityHandleToInfoCache, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AbilitySystemComponent, UnknownData_D9LX, 0x13E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AbilitySystemComponent, 0x13F0);
		}

		// class UME_AbilitySystemInterface : public UAbilitySystemInterface
		TEST_METHOD(Class__Maneater__ME_AbilitySystemInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AbilitySystemInterface, 0x0028);
		}

		// class UME_ActorDamageInterface : public UInterface
		TEST_METHOD(Class__Maneater__ME_ActorDamageInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ActorDamageInterface, 0x0028);
		}

		// class UME_AggroComponent : public UActorComponent
		TEST_METHOD(Class__Maneater__ME_AggroComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AggroComponent, UnknownData_85R6, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AggroComponent, OnAlertStateChanged, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AggroComponent, OnSuspicionUpdated, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AggroComponent, SuspicionDecayRate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AggroComponent, SuspicionCooldownTime, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AggroComponent, AlertEventCooldownTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AggroComponent, UnknownData_NBCJ, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AggroComponent, 0x0108);
		}

		// class UME_AICombatInterface : public UInterface
		TEST_METHOD(Class__Maneater__ME_AICombatInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AICombatInterface, 0x0028);
		}

		// class AME_AIController : public AAIController
		TEST_METHOD(Class__Maneater__ME_AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_I935, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, MinimumSpawnTime, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, LastPossessTime, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, LastDeathTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bUnscared, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_IBDK, 0x0345);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, OnAIDied, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_Q8XT, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BehaviorTreeComponent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BehaviorTreeAsset, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_H4K4, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bDrawPerceptionDebug, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bDrawTargetingDebug, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bDrawFocus, 0x03D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_CJEN, 0x03D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BlendedPawnRotationInterpSpeed, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_WOBF, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, SpawnedConditions, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bStationarySpawn, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_HMX1, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, DeathAlertRadius, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, DeathAlertTime, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_RYJF, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bIgnoreSignificanceCalculation, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_VN7W, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, SignificanceDisabledWeightMod, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, SignificanceBucketWeight, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, CachedCurrentSignificance, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, MaxSignificance, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, DespawnConsiderationChange, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, DespawnConsiderationSignificance, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, MinSpawnSignificance, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, MaxSpawnSignificance, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BaseTickInterval, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, TickIntervalMod, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BaseTypeSignificanceMod, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, HuntActorSignificanceMod, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BossFightSignificanceMod, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, PendingCombatSignificanceMod, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, ActiveCombatSignificanceMod, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, OutOfSightSignificanceMod, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, SpawnConditionFailedSignificanceMod, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bPersistentAI, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_X1BU, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, MaxMercunaBucket, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bPreDormantPawnTickEnabled, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_0H8L, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, PreDormantValues, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, CurrentDefinedPatrolIndex, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_APIV, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bCapableOfAttacking, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_4JJB, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, AttackTargetDistance, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BB_AttackTargetDistance, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, AttackTargetAngle, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BB_AttackTargetAngle, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_QLN4, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, CombatStatus, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_7YY5, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BaseCombatPriority, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BaseCombatLockTime, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BaseCombatPriorityCooldownTime, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_OM32, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bRegisterWithCombatManager, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_YS83, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, ThreatStateHasChanged, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, RelatedObjectiveHasChanged, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, AggroComponent, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BB_CurrentAlertLevelKey, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, LastAlertInstigator, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, AlertTickInterval, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, AlertSpawnCooldownTime, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, EnemyEscapeDistance, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, ForceUnscareDistance, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, PlayerSharkSuspicionRate, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, AlertCooldownTime, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bCanBeSharkWitness, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_6YGL, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, AlertChangeAudioEvent, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, AlertedWitnessEvent, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_HTXP, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, LeashDistance, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bShouldBeLeashed, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bCanChangeLeashLocation, 0x0621);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bUpdateLeashLocationOnDamage, 0x0622);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bUpdateLeashLocationOnPlayerDamage, 0x0623);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bWipeAggroOnLeash, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_P0E1, 0x0625);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, AggroCooldownOnWipe, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bBreakLeashOnThreat, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_DB6H, 0x062D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bCanLookForThreats, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_PIYJ, 0x063D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, ClosestVisibleThreat, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, ClosestVisibleThreatComponent, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, ClosestVisibleThreatLocation, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_ADY9, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, LastVisibleThreat, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, LastVisibleThreatDistance, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_OGXS, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bCanListenForThreats, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bCanEmitSounds, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_C846, 0x0672);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, MaxHearingRange, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_Y7OH, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, bCanRespondToStimuli, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_U61M, 0x069D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, SightRangeByTimeOfDay, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, SightRangeByPlayerGrowthScale, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BaseAirSightLength, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BaseSurfaceSightLength, 0x06B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, BaseUnderwaterSightLength, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, SightWaterPenetrationDepth, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, SightConeAngle, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, PeripheralSightLength, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, PeripheralSightConeAngle, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_PVMP, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, ThreateningPawnTypes, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, ThreateningSpecies, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_9HHB, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, AIVision, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIController, UnknownData_NJBJ, 0x0711);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_AIController, 0x0748);
		}

		// class AME_AIDirector : public AActor
		TEST_METHOD(Class__Maneater__ME_AIDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIDirector, EvasionNotifyDistance, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIDirector, MaxAllowedToAggro, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIDirector, UnknownData_2BXU, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIDirector, BeachgoerEscapeRoutes, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIDirector, UnknownData_MIP4, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIDirector, CombatManager, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIDirector, UnknownData_6REP, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIDirector, ActiveAlerts, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIDirector, WitnessAlerts, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AIDirector, UnknownData_SJ0V, 0x0720);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_AIDirector, 0x0750);
		}

		// class UME_VehicleMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Maneater__ME_VehicleMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleMovementComponent, UnknownData_GYZ3, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleMovementComponent, MovementProperties, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleMovementComponent, SteeringResponsiveness, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleMovementComponent, AccelerationInterpSpeed, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleMovementComponent, Acceleration, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleMovementComponent, WorldAcceleration, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleMovementComponent, AngularVelocity, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleMovementComponent, UnknownData_2YCZ, 0x01CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_VehicleMovementComponent, 0x0230);
		}

		// class UME_AirVehicleMoveComponent : public UME_VehicleMovementComponent
		TEST_METHOD(Class__Maneater__ME_AirVehicleMoveComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AirVehicleMoveComponent, 0x0230);
		}

		// class UME_AITask_DirectMoveTo : public UAITask
		TEST_METHOD(Class__Maneater__ME_AITask_DirectMoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AITask_DirectMoveTo, MoveRequest, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AITask_DirectMoveTo, CharacterMove, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AITask_DirectMoveTo, UnknownData_G8CX, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AITask_DirectMoveTo, 0x00A0);
		}

		// class UME_AITask_VehicleDirectMoveTo : public UAITask
		TEST_METHOD(Class__Maneater__ME_AITask_VehicleDirectMoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AITask_VehicleDirectMoveTo, MoveRequest, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AITask_VehicleDirectMoveTo, VehicleMove, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AITask_VehicleDirectMoveTo, UnknownData_ZKCF, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AITask_VehicleDirectMoveTo, 0x00A0);
		}

		// class UME_AlertEvent : public UObject
		TEST_METHOD(Class__Maneater__ME_AlertEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AlertEvent, UnknownData_5RYH, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AlertEvent, AlertDuration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AlertEvent, UnknownData_1KW4, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AlertEvent, DurationMagnitude, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AlertEvent, PeriodicInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AlertEvent, AlertDistance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AlertEvent, IncreaseSuspicionAmount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AlertEvent, UnknownData_GBPL, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AlertEvent, 0x0090);
		}

		// class UME_AlertEvent_Witness : public UME_AlertEvent
		TEST_METHOD(Class__Maneater__ME_AlertEvent_Witness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AlertEvent_Witness, UnknownData_ES5B, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AlertEvent_Witness, 0x00A0);
		}

		// class UME_AmbientActivityComponent : public UActorComponent
		TEST_METHOD(Class__Maneater__ME_AmbientActivityComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityComponent, PossibleActivities, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityComponent, UnknownData_73IJ, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AmbientActivityComponent, 0x00E8);
		}

		// class UME_ActivityProp : public UObject
		TEST_METHOD(Class__Maneater__ME_ActivityProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, DetailMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, UnknownData_BGWN, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, MaxDrawDistance, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, LocalTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, AttachSocket, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, DetachedLifespan, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, bSimulateOnDetach, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, DetachTiming, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, UnknownData_0D5X, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, VectorParams, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, ScalarParams, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, TextureParams, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp, UnknownData_7T22, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ActivityProp, 0x0168);
		}

		// class UME_ActivityProp_Static : public UME_ActivityProp
		TEST_METHOD(Class__Maneater__ME_ActivityProp_Static)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp_Static, StaticMesh, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ActivityProp_Static, 0x0170);
		}

		// class UME_ActivityProp_Skeletal : public UME_ActivityProp
		TEST_METHOD(Class__Maneater__ME_ActivityProp_Skeletal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp_Skeletal, SkeletalMesh, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ActivityProp_Skeletal, 0x0170);
		}

		// class UME_ActivityProp_Decal : public UME_ActivityProp
		TEST_METHOD(Class__Maneater__ME_ActivityProp_Decal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp_Decal, DecalMaterial, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp_Decal, DecalSize, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ActivityProp_Decal, UnknownData_BTIR, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ActivityProp_Decal, 0x0180);
		}

		// class UME_AmbientActivityData : public UDataAsset
		TEST_METHOD(Class__Maneater__ME_AmbientActivityData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityData, FriendlyName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityData, LoopingIdleAnim, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityData, OutroAnim, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityData, ChanceToRoam, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityData, RoamRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityData, CustomScaredPercent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityData, UnknownData_MUL9, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityData, AlertStructs, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityData, BlendOutTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityData, UnknownData_KRT7, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityData, Props, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AmbientActivityData, ActivityDuration, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AmbientActivityData, 0x0090);
		}

		// class AME_AmbientActivityPoint : public AActor
		TEST_METHOD(Class__Maneater__ME_AmbientActivityPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AmbientActivityPoint, PlacementCollisionComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AmbientActivityPoint, ActivityComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_AmbientActivityPoint, 0x0230);
		}

		// class AME_CharacterAIController : public AME_AIController
		TEST_METHOD(Class__Maneater__ME_CharacterAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CharacterAIController, BB_ThrashAttackerKey, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CharacterAIController, BB_ThrashAttackStateKey, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CharacterAIController, BB_InjuryStateKey, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CharacterAIController, LastBBThrashState, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CharacterAIController, UnknownData_YQNY, 0x0761);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CharacterAIController, CharacterPawn, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CharacterAIController, UnknownData_D37T, 0x0770);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_CharacterAIController, 0x0780);
		}

		// class AME_AnimalAIController : public AME_CharacterAIController
		TEST_METHOD(Class__Maneater__ME_AnimalAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, AnimalPawn, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, AnimalMovementComponent, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, UnknownData_RGFR, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, SwapToCombatMovementThreshold, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, SwapToGeneralMovementThreshold, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, CombatDistance, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, CombatHeight, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, ChanceToEvadeRange, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, FlankingThreshold, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, FlankingModifier, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, MaxReactTime, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, MaxEvadeRange, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, BiteEvadeDelay, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalAIController, EvadeFailedCooldownEffect, 0x07C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_AnimalAIController, 0x07C8);
		}

		// class AME_Character : public ACharacter
		TEST_METHOD(Class__Maneater__ME_Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_O5C1, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_9S0U, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DefaultCharacter, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, Gender, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, BodyType, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, Age, 0x0522);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, InjuryState, 0x0523);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_ZOWU, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, FriendlyName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, CharacterLevel, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SpeciesType, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bIgnoreDamageFromSameSpecies, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bIgnoreDamageFromHumans, 0x0546);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_6QRO, 0x0547);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, PartialRagdollBlendWeight, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, RagdollOverlapLinearDampening, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, RagdollOverlapLinearDampeningTime, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_XGER, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, RagdollWaterLinearDamping, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, RagdollWaterAngularDamping, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, RagdollAboveWaterLinearDamping, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, RagdollAboveWaterAngularDamping, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, HitImpulseScale, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_P1TV, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, BumpMassDifferential, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, ImpulseRagdollThreshold, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, StationaryRotationSpeed, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, PassiveRotationSpeed, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, WalkingRotationSpeed, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, CombatRotationSpeed, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_5D10, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, TurnSpeed, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, BodyWaterDepth, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, HeadWaterDepth, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_KTUD, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, ThrashAttacker, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_NHEJ, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, CharacterAttributeChanged, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, CharacterAttributesChanged, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, EvolutionAbilityActivated, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SonarAbilityActivated, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_O3U5, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bIsReturningFromRagdoll, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bSkipBlending, 0x0612);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_7416, 0x0613);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SingleBodyPhysicsAsset, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, OriginalPhysicsAsset, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, TimeAboveWaterToEnableSplash, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_YGA9, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, CharacterAIController, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, MinVelocityZForFallingDamage, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, MinMeshVelocityForRagdollImpactFX, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, NotifyHitImpactFXCooldown, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_NEUU, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, RagdollImpactFXCooldown, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_ZUIL, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, AccumulatedFallVelocity, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_DM66, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, WhipShotTrailParticle, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, WhipshotImpactSound, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, PreWhipShotPhysicsMultiplier, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, WhipshotRotationSpeed, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, WhipshotSpinningRotation, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, WhipshotRollingRotation, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, WhipshotImpactActorClass, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_19KF, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DynamicMaterials, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, LimbGoreParams, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, ThrashEscapeBoneBase, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, ThrashEscapeBoneDirection, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, NutritionChunkSpawnParticle, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, LargeChunkSpawnBone, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, LargeChunkSpawnParticle, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, ThrashEscapeInfo, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, NutritionTableRow, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bIsNonCombatCharacter, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_3SGY, 0x0779);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, HeadBoneName, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, LastInstigatedAlertTime, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, VoiceData, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, AudioEventOnAITarget, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, AudioEventOnAIDeath, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_LI93, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, LastReceivedDamageTime, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DamageResistPct, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, VulnerabilityThresholdImpulseResistPct, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_WITU, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, ThrashGrabPoints, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, LimbLossHealthBuffer, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bCanBreathUnderwater, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bCanBreathOutOfWater, 0x07D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_AX6Z, 0x07D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DrownDeathTime, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, BreathRegainTime, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, RemainingBreath, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_C2NF, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DrowningVFX, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DrowningLastBreathVFX, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, ActiveDrowningVFX, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DiverParticlesVFX, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_9AN3, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DiverVFXBubbleRange, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, BodyFluidSimRadius, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, BodyFluidSimIntensity, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, MinFluidSimVelocityDisturbance, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_92FC, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bOrientToWalkableSurface, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_TVCG, 0x0849);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, FeetPhysicalMaterial, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_ALXF, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, MinTimeBetweenFootsteps, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bHasHitMask, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_E07R, 0x0861);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, HitMaskResolution, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_BXLQ, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, OnCharacterDied, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, CorpsePhysicsBlendInTime, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, MaxCorpseLifeSpan, 0x0914);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bCanDie, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_QG38, 0x0919);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DeathTime, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_WFG2, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SpawnAlertsOnDeath, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, AlertEventOnConsumed, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_FMYT, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, MercunaObstacle, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, MercunaNavigation, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, PhysicalAnimBlendStrength, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, PhysicalAnimBlendOutTime, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SwimmingPhysicalAnimBlendBones, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, WalkingPhysicalAnimBlendBones, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_DVBO, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, CharacterAbilities, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, AbilitySystemComponent, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, AbilityHelperClass, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, AbilityHelperObject, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, CharacterAbilitiesDataTable, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, NativeGameplayEffects, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_U0Z0, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, OnGameplayTagAdded, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, OnGameplayTagRemoved, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SmallCharacterEntrySplash, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SmallCharacterEntrySplashAudio, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SmallCharacterEntrySplashMinSpeed, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_EHAI, 0x0A34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, MediumCharacterEntrySplash, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, MediumCharacterEntrySplashAudio, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, MediumCharacterEntrySplashMinSpeed, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_C52M, 0x0A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, LargeCharacterEntrySplash, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, LargeCharacterEntrySplashAudio, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, LargeCharacterEntrySplashMinSpeed, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_QZW1, 0x0A64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, AttributeSetClass, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, CharacterAttributeSet, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, AttributeDefaults, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_4FLO, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DesiredAnimDir, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_PKAX, 0x0A8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, RootMotionNonUniformTranslationScale, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_XECH, 0x0A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SeaLevelOffset, 0x0AB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_49NQ, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, RecentlyBumpedWindow, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_V75Z, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bIsInvisibleToAI, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_RC4O, 0x0AD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SpawnParticleVFX, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_E7ZJ, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SpawnParticleRelativeOffset, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SpawnAkEvent, 0x0B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DespawnParticleVFX, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DespawnParticleRelativeOffset, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, DespawnAkEvent, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, OnGeometryHit, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, AIPatrolPlotter, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_UMCM, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, TerrorizeAmount, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bUseOverlapCheck, 0x0BB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_KEE7, 0x0BB5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, AudioStatePulseTimerHandle, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bIsApex, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_JW9K, 0x0BC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, GrabbedIKSetup, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bIsInWaterVolume, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_ZCD9, 0x0BD9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, SoftLockNarratorEventName, 0x0BDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, KilledByPlayerNarratorEventName, 0x0BE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, KilledPlayerNarratorEventName, 0x0BEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, CurrentAlertState, 0x0BF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_F2OD, 0x0BF5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, CurrentInstigatingActor, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, CharacterStateDialogTable, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bTriggerWhipshotRecovery, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, QueueRagdollStandup, 0x0C09);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_SL0T, 0x0C0A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, RagdollGetupDelay, 0x0C0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, RagdollGetupTime, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bRagdollGetupWaiting, 0x0C14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, bGetupRagdollActive, 0x0C15);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, UnknownData_46K2, 0x0C16);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Character, AttachedWeapon, 0x0C18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_Character, 0x0C20);
		}

		// class AME_AnimalCharacter : public AME_Character
		TEST_METHOD(Class__Maneater__ME_AnimalCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, ThrashReleaseGameplayAbility, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, ThrashReleaseGameplayEffect, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, RagdollRecoveryGameplayAbility, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, AnimalAIController, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, OnCharacterAbilityTriggered, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, StaminaConsumptionModifier, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, LastConsumedStaminaTime, 0x0C74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, PassiveHealthRegenRate, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_4MA6, 0x0C7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, HealthRegenSound, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_JAYT, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, PassiveHealthRegenPctMax, 0x0C8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_TFWX, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, CurrentSpeedPct, 0x0C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, LastWasSwimmingTime, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, bBecomePhysicalOutOfWater, 0x0C9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_DHK3, 0x0C9D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, OutOfWaterSimulatedBodies, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, OutOfWaterPhysicsWeight, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, bPlayPhysicalHitReactions, 0x0CB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_F80E, 0x0CB5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, PhysicalHitReactionMaxBlendWeight, 0x0CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, PhysicalHitReactionBlendOutTime, 0x0CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_C5WS, 0x0CC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, PhysicalHitReactionFixedBones, 0x0CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, MaxTailStiffRotDelta, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_JKL6, 0x0CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, TailControlStrength, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, TailBoneName, 0x0CEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_8NR7, 0x0CF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, BaseDecayRate, 0x0CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_K9WS, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, BaseThrashStaminaRecovery, 0x0D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, BaseDecayRateAcceleration, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, MaxThrashStruggleBuffer, 0x0D0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_26AZ, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, ThrashDecayAccelerationDelay, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_LMOJ, 0x0D1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, DestructibleObjectStrikeDamageBonus, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, FeedHealthRegenRate, 0x0D2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, FeedHealthRegenBonus, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_D7X2, 0x0D34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, ReleasePreySound, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, ReleasePreyVFX, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, CurrentPreyActor, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, CurrentPreyThrashType, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_Y2VF, 0x0D51);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, CurrentPreyMesh, 0x0D54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, CurrentPreyMeshABP, 0x0D5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, JawSocketName, 0x0D64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_XYND, 0x0D6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, OnPreyGrabbed, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, OnPreyConsumedDelegate, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, OnEnableThrashUI, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, OnPreyReleased, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, LimbThickness, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_V1BJ, 0x0DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, PreGrabRoot, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_7B2Z, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, AudioEventOnHit, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, AudioEventOnHardHit, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, AudioEventOnDeath, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, OnDamagePlayerStingerName, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, OnDamagedByPlayerStingerName, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, TailWhipMassDifferential, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, ThrashMassDifferential, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, LargeWildlifeBody, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, bLargeWildlifeUseCapsule, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, bBlockSmallerWildlife, 0x0E81);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_RMPL, 0x0E82);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, bGetNutrientsOnConsume, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_XT2V, 0x0E89);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, AttackPointSocketNames, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_51JE, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, CurrentPreyGrabPointIndex, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_8X2K, 0x0EAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, MaximumJawWidth, 0x0EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, PartialRagdollBlendSpeed, 0x0EBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, MinimumRagdollMultiplier, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, StunInAirRagdollWeight, 0x0EC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, InAirRagdoll, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, InWaterStunRagdoll, 0x0ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, InWaterHitReactRagdoll, 0x0EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, HitReactBlendoutTime, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_1IWO, 0x0EFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, OnLandPartialRagdoll, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_UTGM, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, SetMeshRotation, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, BlendSpeed, 0x0F3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, TrailAlphaMultiplier, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, WhipshotPhysics, 0x0F44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, bShowNormalLungePopup, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, bShowApexLungePopup, 0x0F49);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, UnknownData_MI3X, 0x0F4A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AnimalCharacter, LungePopupCount, 0x0F4C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_AnimalCharacter, 0x0F50);
		}

		// class UME_CharacterMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__Maneater__ME_CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, UnknownData_05T1, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, ActiveForces, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, MercunaAcceleration, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, OverrideMercunaAcceleration, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, MercunaRotation, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, AngularVelocity, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, MaxYawRate, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, MaxPitchRate, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, MaxRollRate, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, MaxAngularAcceleration, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, UnknownData_7Z8L, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, FallingHeightScalar, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, FallVelocityMax, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, FallVelocityScale, 0x069C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterMovementComponent, UnknownData_OJOV, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CharacterMovementComponent, 0x0750);
		}

		// class UME_AnimalMovementComponent : public UME_CharacterMovementComponent
		TEST_METHOD(Class__Maneater__ME_AnimalMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, bCombatVelocityBased, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, UnknownData_W2TG, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, CombatMovementConfiguration, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, AtEaseMovementConfiguration, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, SpeedModifier, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, AccelerationModifiers, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, MaxCombatPitchRate, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, MaxCombatYawRate, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, MaxCombatRollRate, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, MaxCombatAngAccel, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, UnknownData_SGHQ, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, AnimalCharacter, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, InitialNavigationConfiguration, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimalMovementComponent, UnknownData_RD7O, 0x07E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimalMovementComponent, 0x07EC);
		}

		// class UME_AnimInst_MenuShark : public UAnimInstance
		TEST_METHOD(Class__Maneater__ME_AnimInst_MenuShark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInst_MenuShark, UnknownData_EHYJ, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInst_MenuShark, JawAnimations, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInst_MenuShark, FinsAnimations, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInst_MenuShark, HeadAnimations, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInst_MenuShark, TailAnimations, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInst_MenuShark, BodyAnimations, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimInst_MenuShark, 0x02C0);
		}

		// class UME_AnimInstance_Base : public UAnimInstance
		TEST_METHOD(Class__Maneater__ME_AnimInstance_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnknownData_GXDK, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, HardLandingMontage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, OnWaterSurfaceDeathAnimation, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, DrowningDeathAnimation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, DrowningSwimmingDeathAnimation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, OnLandDeathAnimation, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bDeathBlendingOut, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, TailDirection, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, OutroTailDirection, 0x02C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnknownData_Q3IK, 0x02C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, HitFromLeft, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, HitFromRight, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, HitFromAbove, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, HitFromBelow, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, BitFromLeft, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, BitFromRight, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, BitFromAbove, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, BitFromBelow, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, VulnerableHitFromLeft, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, VulnerableHitFromRight, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, HitReactA, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, HitReactB, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, HitReactC, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, ActorVelocity, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnRotatedVelocity, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, NormUnRotatedVelocity, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, ActorSpeed, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsMoving, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsOnLand, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bWasSwimmingLastFrame, 0x03C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsSwimming, 0x03C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsInWater, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsFalling, 0x03C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bNeedsToSurface, 0x03C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsUnderWater, 0x03C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bCannotBreath, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsDrowning, 0x03C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnknownData_YT8Y, 0x03CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, PercentBreathRemaining, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, Healthpct, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, HealthPercentPlayback, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsDead, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsPawnDead, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnknownData_OKHW, 0x03DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, IsDead, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, IsAlive, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsBleedingOut, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bHasGrabbedActor, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bHadActorLastFrame, 0x03E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsGrabbedActor, 0x03E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, GrabbedJoint, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, GrabbedDirection, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnknownData_WD16, 0x03EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, TargetDistance, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bWhipshotPreThrow, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsWhipshotThrown, 0x03F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnknownData_Z30N, 0x03F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, WhipshotRagdollMultiplier, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, PreThrowAlpha, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsBeingThrashed, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, InjuryState, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnknownData_NLQK, 0x03FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, LastLostJoint, 0x03FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, AllLostJoints, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bIsInRagdoll, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bLockJawWidth, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, bLockBitePlacement, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnknownData_AY53, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, BitePlacementLocation, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, LockJawAnimValue, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnknownData_OOIA, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, DeltaRotation, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnknownData_VJLU, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, MeshDeltaRotation, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, AbsActorPitch, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnknownData_WMY0, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, ThrashersDeltaRotation, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, ActualMeshOffset, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, WhipshotRecoveryAnimations, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_Base, UnknownData_0T6V, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimInstance_Base, 0x048C);
		}

		// class UME_AnimInstance_NPC : public UME_AnimInstance_Base
		TEST_METHOD(Class__Maneater__ME_AnimInstance_NPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, UnknownData_Y0N0, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bTargetIsKnifing, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, UnknownData_9MN5, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, FlatSquareTargetDistance, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, PlayerLocation, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, PlayerBodyMainLocation, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, ThreatLevel, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, UnknownData_6KWX, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, ThreatInstigator, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, ThreatInstigatorAlpha, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, ThreatInstigatorLocation, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bCanAimLookat, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bUseAimLookat, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, UnknownData_5UQ7, 0x04D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, UseAimLookatAlpha, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, MontageAddMultiplier, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, ThreatLookatYaw, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, ThreatLookatPitch, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bThreatInLookatDOT, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bIsThreatened, 0x04E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bIsThreatInFront, 0x04E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bHasMercunaAccelerationThisFrame, 0x04E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bHadMercunaAccelerationLastFrame, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, UnknownData_JGHX, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, ActorLookatFwdDOT, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, ActorLookatRightDOT, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, ActorLookatUpDOT, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, MeshCompLookatFwdDOT, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, MeshCompLookatRightDOT, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, MeshCompLookatUpDOT, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bRightSideOfMesh, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bFrontSideOfMesh, 0x0505);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, UnknownData_CYC3, 0x0506);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bMissingHead, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bMissingLeftArm, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bMissingRightArm, 0x0512);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bMissingLeftLeg, 0x0513);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bMissingRightLeg, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, bIsMissingAnyLimbs, 0x0515);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, UnknownData_QLC0, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, IntroSpikeRate, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, IntroSpikeDuration, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, IntroSpikeBlendInRate, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, IntroSpikeBlendOutRate, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_NPC, UnknownData_DP29, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimInstance_NPC, 0x0540);
		}

		// class UME_AnimInstance_HumanNPC : public UME_AnimInstance_NPC
		TEST_METHOD(Class__Maneater__ME_AnimInstance_HumanNPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, SoftScaredAnimationPtr, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_RXH0, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, SelectedScaredAnimation, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, ScaredAnimationStartTime, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bIsHoldingAttachment, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_B4X6, 0x0565);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, IsHoldingAttachmentAlpha, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, AttachmentType, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bIsWithinWeaponRange, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bStartFiringMontage, 0x056E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bPlayingFiringMontage, 0x056F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bUseLeftHandIK, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bCarriedWeaponUsesIK, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bBoatIsMoving, 0x0572);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, VehicleType, 0x0573);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bUsePassengerBranch, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_BHCX, 0x0575);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerIdleAnimation, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerIdleStartTime, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_TXL4, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerAimBlendspaceAnimation, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_GVA9, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerTurnRightAnimation, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_NHB3, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerTurnLeftAnimation, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerSuspiciousAnimation, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_4BYX, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerAlertAnimation, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_HQZ7, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerMovingAnimation, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_WY64, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerFiringAnimations, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_OOP5, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerHitFromForwradsAnimations, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_QGU0, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerHitFromBehindAnimations, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_UX7J, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerHitFromLeftAnimations, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_JLSZ, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerHitFromRightAnimations, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_X2DJ, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnderStarboardBlendspace, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, StarboardRotationOffset, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, StarboardLocationOffset, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnderPortBlendspace, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PortRotationOffset, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PortLocationOffset, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, AimOverEdgePitchValue, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, AimOverWaterDepthValue, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_VO59, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bForceLookatFalse, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bOverwriteTurningAnimations, 0x07C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bJetskiHasHunterPassenger, 0x07C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bIsPilot, 0x07C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bCanTrackTarget, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bLaserActivated, 0x07C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bAimOverEdge, 0x07C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bUseStarboardBlendspace, 0x07C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_GAYU, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, DiverIdleAnimation, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, DiverSuspiciousAnimation, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, DiverAlertAnimation, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, DiverMovingAnimation, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, DiverMovingAlertAnimation, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, DiverFiringAnimations, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, MissingHeadAnimation, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, MissingLeftArmAnimation, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, MissingRightArmAnimation, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, MissingLeftLegAnimation, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, MissingRightLegAnimation, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, MissingTorsoAnimation, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, MissingLegsAnimation, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bMissingBothLegs, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_SEA5, 0x0881);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, BumpGoingForwards, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, BumpGoingBackwards, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, BumpGoingRight, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, BumpGoingLeft, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, CapsuleWaterHeight, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bUseRagdollPose, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bUseWaterRagdollPose, 0x08DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_1QP1, 0x08DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, RagdollPoseName, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UninjuredGetupChestUp, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, MissingLegGetupChestUp, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UninjuredGetupChestDown, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, MissingLegGetupChestDown, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, RandomElectrocuteStartTime, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerElectrocute, 0x092C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_GETH, 0x092D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, SwimSpeed, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, SwimPlaybackRate, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, BumpedValue, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, MercunaBasedActorSpeed, 0x093C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bFlailingInTheAir, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bIsSmash, 0x0941);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_XKIH, 0x0942);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, DiverWeaponPlacementAlpha, 0x0944);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bLookatTarget, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_EOO5, 0x0949);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, TargetLocation, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bPassengerRootLookat, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bPassengerPlayerLookat, 0x0959);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bPassengerAbandonLookat, 0x095A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_89K4, 0x095B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PlayerToSpineUpDot, 0x095C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PlayerToSpineRightDot, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bShouldJetskiPilotPoint, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bPointAtTarget, 0x0965);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bJetskiPilotDuck, 0x0966);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bUseStandingJetski, 0x0967);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_VXJA, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bPassengerLeaveIdleState, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bPassengerGoToAlerted, 0x0971);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bPassengerLeaveAlerted, 0x0972);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bPassengerGoToSuspicious, 0x0973);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bPassengerLeaveMovingVehicle, 0x0974);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_A734, 0x0975);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PassengerSpineLookatAlpha, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, ForcedHipsLoc, 0x097C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, ForcedHipsRot, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, ForcedHipsAlpha, 0x0994);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, HumanSpineFwdDot, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, HumanSpineRightDot, 0x099C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, HumanSpineUpDot, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, NewSpineLookat, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, RootFwdDot, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, RootFwdASinD, 0x09AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bTrackingRootLeft, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_U84Y, 0x09B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, RootRightDot, 0x09B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, RootUpDot, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, NPCIKElbowOffset, 0x09BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, NPCSpineLookat, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, AimingElbowRotator, 0x09D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PointingDistance, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UsedSwimmingBallAlphaValue, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bBeachGoerFakeStumble, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bHasValidTargetingAimOffset, 0x09E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bHasValidStandingTurnAnimations, 0x09EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_NZVQ, 0x09EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, ActiveRootTargetingLocation, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, bUpdateRootLookatVector, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_1OVR, 0x09F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PossibleAlertBlendspaces, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, SelectedAlertBlendspace, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PossibleEaseBlendspaces, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, SelectedEaseBlendspace, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PossibleInjuredBlendspaces, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, SelectedInjuredBlendspace, 0x0A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PossibleMaimedBlendspaces, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, SelectedMaimedBlendspace, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, PossibleSuspiciousBlendspaces, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, SelectedSuspiciuosBlendspace, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_HumanNPC, UnknownData_T2DF, 0x0A78);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimInstance_HumanNPC, 0x0A80);
		}

		// class UME_AnimInstance_PlayerShark : public UME_AnimInstance_Base
		TEST_METHOD(Class__Maneater__ME_AnimInstance_PlayerShark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, BaseAnimationPlaybackRate, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxKnifingAlphaSpeed, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bTriggerIntroAnimation, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_Z0UF, 0x0495);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnderwaterStationaryYaw, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnderwaterStationaryPitch, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, CapsuleHalfHeight, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bUseVulnerableGrab, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_IR7N, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxMeshAngle, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, RotationSpeed, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MeshYawOffsetForFullRoll, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MeshYawRollRotationSpeed, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, StationaryYawCounterRotation, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, StationaryPitchCounterRotation, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxCounterTailYawAngle, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxHeadYawRot, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxHeadRollRot, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxHeadPitchRot, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxDorsalFinBend, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxVentralFinPitch, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxVentralFinYaw, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ProceduralThumbInterpSpeed, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxVentralFinInAirPitchAngle, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxVentralFinInAirRollAngle, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnderwaterCamYawValue, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnderwaterCamPitchValue, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, LeftThumbYValue, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, LeftThumbXValue, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bHardlockForwards, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_IU2L, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, StrafeValue, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InterpStrafeValue, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedInterpStrafeValue, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bMovementInputPressed, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bMouthAutoClosedWithBite, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bMouthOpenPressed, 0x050A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_EKYM, 0x050B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ProceduralTrailControllerAlpha, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bIsHardLocked, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bIsCruisingWaterLine, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bWasCruisingWaterLineLastFrame, 0x0512);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bEnableKnifingIK, 0x0513);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ProceduralKnifingRootAlpha, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bIsFreemoveEnabled, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, CurrentEvolutionStage, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_KMSX, 0x051A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxIntroSpeedChange, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxIntroSpeedInterp, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, IntroSpeedBurstTime, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, TurningSpikePlaybackIncrease, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, TurningSpikeDuration, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, TurningSpikeFalloffRate, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, TurningSpikeCameraDegree, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, TurningSpikeRollDegree, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, TurningSpikeMinSpeed, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, KnifingTurningSideOffset, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, KnifingHeadRollMax, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, KnifingHeadYawMax, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, KnifingInputRotationRange, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, KnifingInputRotationValue, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedKnifingAlphaValue, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedKnifingTailTrailAlpha, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, KnifingCameraRollMaximum, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_EWUX, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, BumpToTheRight, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, BumpToTheLeft, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, BumpAdditiveA, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, BumpAdditiveB, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, OnLandHeightOffset, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedOnLandHeightOffset, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bPreyThrowSetup, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_B6A5, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InAirPitchAngle, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InAirPitchSpeed, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InAirPitchInterpValue, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InAirRollAngle, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InAirRollSpeed, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InAirRollInterpValue, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InAirYawAngle, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InAirYawSpeed, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InAirYawInterpValue, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InAirBodySpin, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InAirLeftVentralFin, 0x05F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, InAirRightVentralFin, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_4382, 0x060C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnderwaterCamYawInterp, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnderwaterCamPitchInterp, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MeshYawInterp, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MeshPitchInterp, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bWasPlayerInputtingMovementLastFrame, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bIsPlayerInputtingMovement, 0x0625);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_LQY3, 0x0626);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, IsPlayerInputtingMovementInterp, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ProceduralHeadAlpha, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ProceduralIKTailAlpha, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ProceduralRootRotation, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ProceduralTailCounterRootRotation, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, DorsalFinRot, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, DorsalFinAlpha, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, LeftVentralFinRot, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, RightVentralFinRot, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, VentralFinAlpha, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedVentralFinInAirPitchAngle, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedVentralFinInAirRollAngle, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, HeadRot, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedBaseAnimationPlaybackRate, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_COKI, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ProceduralKnifingRootRotation, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ProceduralKnifingTailRotation, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ProceduralKnifingRootTranslation, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ProceduralKnifingHeadRotation, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bTriggerOutro, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bLockSpeeds, 0x06DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_K2RN, 0x06DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedForwardValue, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedStrafingValue, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_SOGV, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bUseForcedBitePlacement, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bForcedBitePlacement, 0x06F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_NH7E, 0x06FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ForcedBiteTransform, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bPreWhipShot, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_AA2L, 0x0731);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, WhipshotImpactLocation, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, PreWhipshotHoldLoc, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, PreWhipshotHoldRot, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, PreWhipshotHoldRotSpin, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, GrabbedPlaybackValue, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedGrabbedPlaybackRate, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_RZCU, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ABSTotalDegDif, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedSpinningSharkOffset, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaximumTurningHorizontalOffset, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bUseCameraRotation, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_IGBF, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedVentralFinPlayrateValue, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedInterpForwardValue, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedCameraChangeAlpha, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bAllowTransitionIntoBiteIntro, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bAllowTransitionIntoEmptyBite, 0x0799);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bAllowTransitionIntoBiteVictim, 0x079A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bHoldBiteEmptyState, 0x079B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bHoldBiteIntroState, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_5HGG, 0x079D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, FullCameraYawChange, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaximumRootRollViaCameraYaw, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaximumRootYawViaCameraYaw, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaximumTailCounterYawViaCameraYaw, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, TailYawInterpSpeed, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MappedCameraAlphaValues, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bUseMutagenScales, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_R6LM, 0x07BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MutagenHead02, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MutagenHead01, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MutagenBodyMain, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MutagenBody01, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MutagenBody02, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MutagenBody03, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MutagenBody04, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MutagenBody05, 0x0814);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MutagenBody06, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MutagenBody07, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MutagenBody08, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, KnifingMeshYawOffsetForFullRoll, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, KifingMeshYawRollRotationSpeed, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaxKnifingMeshAngle, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaximumRootKnifingRollViaCameraYaw, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaximumRootKnifingYawViaCameraYaw, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, MaximumKnifingTailCounterYawViaCameraYaw, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, ProceduralRootOffset, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, KnifingRootOffsetInterpSpeed, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, RootOffsetInterpSpeed, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, VulnerableMontages, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_MZ9D, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, bIsJumping, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_1LRL, 0x0891);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UsedPitchInterpValue, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_PlayerShark, UnknownData_I92X, 0x0898);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimInstance_PlayerShark, 0x08A0);
		}

		// class UME_AnimInstance_WildlifeNPC : public UME_AnimInstance_NPC
		TEST_METHOD(Class__Maneater__ME_AnimInstance_WildlifeNPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, SpeciesType, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, bIsAlligator, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, UnknownData_E9AA, 0x0542);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, CustomHeightOffset, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, OnLandVectorOffset, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, MovingPlaybackRate, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, MaximumSwimSpeed, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, UsedSwimmingPlaybackRate, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, IntroYawAngle, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, IntroPitchAngle, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, BodyMainOffset, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, BodyMainRotation, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, TailCoutnerRotation, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, UnknownData_MAVU, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, IntroTailMidGoingLeft, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, IntroTailExtremeLeft, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, IntroTailMidGoingRight, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, IntroTailExtremeRight, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, OutroTailMidGoingLeft, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, OutroTailExtremeLeft, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, OutroTailMidGoingRight, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, OutroTailExtremeRight, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, ThrashAttackerWorldRotation, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, ThrashAttackerWorldRotationLastFrame, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, bUseGrabbedBranch, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, UnknownData_39CU, 0x0629);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, lockedMovementSpeed, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, UnknownData_H19O, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, IdleHeadLookat, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, TrailAlpha, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, bPlayCloseMouth, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, UnknownData_TYFD, 0x0645);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, GrabbedDirectionRootOffset, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, bMissingBody04, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, bMissingTail, 0x0655);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, bMissingDorsalFin, 0x0656);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, bMissingRVentralFin, 0x0657);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, bMissingLVentralFin, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, UnknownData_3VK6, 0x0659);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, ThreatLevelTrailAlpha, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, CombatMovementTrailAlpha, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, TailWhipForcedLocation, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimInstance_WildlifeNPC, UnknownData_VPYN, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimInstance_WildlifeNPC, 0x0670);
		}

		// class UME_AnimNotify_ApplyEffect : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_ApplyEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ApplyEffect, EffectTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ApplyEffect, UnknownData_6JK0, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ApplyEffect, GameplayEffects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ApplyEffect, bRemoveEffects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ApplyEffect, UnknownData_BPNZ, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_ApplyEffect, 0x0058);
		}

		// class UME_AnimNotify_BroadcastAttack : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_BroadcastAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_BroadcastAttack, BroadcastNotificationDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_BroadcastAttack, bIsBite, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_BroadcastAttack, UnknownData_5M1T, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_BroadcastAttack, 0x0040);
		}

		// class UME_AnimNotify_ChunkVictim : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_ChunkVictim)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_ChunkVictim, 0x0038);
		}

		// class UME_AnimNotify_DataTableAkEvent : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_DataTableAkEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_DataTableAkEvent, EventName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_DataTableAkEvent, UnknownData_ZDP7, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_DataTableAkEvent, AttachName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_DataTableAkEvent, UnknownData_LIUN, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_DataTableAkEvent, 0x0050);
		}

		// class UME_AnimNotify_DialogueAkEvent : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_DialogueAkEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_DialogueAkEvent, DialogueRowHandle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_DialogueAkEvent, Event, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_DialogueAkEvent, 0x0050);
		}

		// class UME_AnimNotify_DialogueFile : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_DialogueFile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_DialogueFile, DialogueRowHandle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_DialogueFile, 0x0048);
		}

		// class UME_AnimNotify_DynamicDialogueEvent : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_DynamicDialogueEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_DynamicDialogueEvent, 0x0038);
		}

		// class UME_AnimNotify_FireWeapon : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_FireWeapon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_FireWeapon, 0x0038);
		}

		// class UME_AnimNotify_GibVictim : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_GibVictim)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_GibVictim, 0x0038);
		}

		// class UME_AnimNotify_PlayCameraAnimation : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_PlayCameraAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_PlayCameraAnimation, CamAnim, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_PlayCameraAnimation, CamRate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_PlayCameraAnimation, CamBlendInTime, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_PlayCameraAnimation, CamBlendOutTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_PlayCameraAnimation, CamScale, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_PlayCameraAnimation, 0x0050);
		}

		// class UME_AnimNotify_ReleaseDamage : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_ReleaseDamage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_ReleaseDamage, 0x0038);
		}

		// class UME_AnimNotify_SetAIMoveRotation : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_SetAIMoveRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_SetAIMoveRotation, MovementState, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_SetAIMoveRotation, RotationState, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_SetAIMoveRotation, UnknownData_BGRA, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_SetAIMoveRotation, 0x0040);
		}

		// class UME_AnimNotify_SpawnChunkParticles : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_SpawnChunkParticles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_SpawnChunkParticles, 0x0038);
		}

		// class UME_AnimNotify_SpawnLargeChunkParticle : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_SpawnLargeChunkParticle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_SpawnLargeChunkParticle, 0x0038);
		}

		// class UME_AnimNotify_ThrashDamage : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_ThrashDamage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ThrashDamage, HitEffects, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_ThrashDamage, 0x0048);
		}

		// class UME_AnimNotify_ThrowPrey : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_ThrowPrey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ThrowPrey, MinimumKnifingPitch, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ThrowPrey, UnknownData_XCHG, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ThrowPrey, EffectToApply, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ThrowPrey, ImpactEffectToApply, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_ThrowPrey, 0x0050);
		}

		// class UME_AnimNotify_TwAkEvent : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_TwAkEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_TwAkEvent, SearchTable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_TwAkEvent, AkEvent, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_TwAkEvent, 0x0048);
		}

		// class UME_AnimNotify_TwNarratorEvent : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_TwNarratorEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_TwNarratorEvent, EventName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_TwNarratorEvent, 0x0040);
		}

		// class UME_AnimNotify_UpdateAIFocus : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotify_UpdateAIFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_UpdateAIFocus, bClearFocus, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_UpdateAIFocus, UnknownData_A1OT, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_UpdateAIFocus, BlackboardKeyName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_UpdateAIFocus, Focus, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_UpdateAIFocus, UnknownData_CCR3, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_UpdateAIFocus, 0x0048);
		}

		// class UME_AnimNotifyFootstep : public UAnimNotify
		TEST_METHOD(Class__Maneater__ME_AnimNotifyFootstep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyFootstep, PreviewEvent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotifyFootstep, 0x0040);
		}

		// class UME_AnimNotifyState_DangerSense : public UAnimNotifyState
		TEST_METHOD(Class__Maneater__ME_AnimNotifyState_DangerSense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_DangerSense, DangerSenseBonus, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_DangerSense, UnknownData_ZUID, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotifyState_DangerSense, 0x0038);
		}

		// class UME_AnimNotifyState_DeadPhysBlend : public UAnimNotifyState
		TEST_METHOD(Class__Maneater__ME_AnimNotifyState_DeadPhysBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotifyState_DeadPhysBlend, 0x0030);
		}

		// class UME_AnimNotifyState_ForceStopIK : public UAnimNotifyState
		TEST_METHOD(Class__Maneater__ME_AnimNotifyState_ForceStopIK)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotifyState_ForceStopIK, 0x0030);
		}

		// class UME_AnimNotifyState_HideWeapon : public UAnimNotifyState
		TEST_METHOD(Class__Maneater__ME_AnimNotifyState_HideWeapon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_HideWeapon, WeaponComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_HideWeapon, UnknownData_2RO6, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotifyState_HideWeapon, 0x0040);
		}

		// class UME_AnimNotify_ManageGameplayTag : public UAnimNotifyState
		TEST_METHOD(Class__Maneater__ME_AnimNotify_ManageGameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ManageGameplayTag, ActivateAbilitiesWithTags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ManageGameplayTag, ManagedTags, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ManageGameplayTag, ManagedGameplayEffect, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotify_ManageGameplayTag, UnknownData_JNOO, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotify_ManageGameplayTag, 0x0080);
		}

		// class UME_AnimNotifyState_MeleeAttack : public UAnimNotifyState
		TEST_METHOD(Class__Maneater__ME_AnimNotifyState_MeleeAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, AttackCollisionShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, UnknownData_O46G, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, AttackZOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, AttackLocalOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, AttackLocalRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, AttackLength, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, AttackRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, BoxCollisionShape, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bUseDataTableOverride, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, UnknownData_WLEA, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, AttackShapeTableRow, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, AttackMomentum, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bUseHitNormalMomentumDirection, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, UnknownData_MU99, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, MomentumLocalRotation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, UnknownData_EBYS, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, AttackMomentumModifiers, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, DefenseMomentumModifiers, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bAttackShouldRagdoll, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bOnlyRagdollIfVulnerable, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bMultiHitAttack, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bExcludeHeldTarget, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, AttackIndex, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bForceDropGrabVictim, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bUseSoftLockMagnetism, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bDebugAttacks, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, UnknownData_2JZI, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, DebugDrawTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, GameplayEffects, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, VulnerableNoGrabGameplayEffects, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, SizeLevelDependentGameplayEffects, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bCanApplyDamage, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bAlwaysApplyMomentum, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bAlwaysApplyGameplayEffects, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bGrabbingAttack, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bIsPlayerBite, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bReleasePreyAtEnd, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bRegisterGeometryHits, 0x00F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, UnknownData_Y2YG, 0x00F7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, MinimumAttackDelayTime, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bCommandeerCamera, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bLoseAIFocusOnHit, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bStopRootMotionOnHit, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, bScaleCapsuleOnGrab, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, ScaleCapsuleRadius, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, ScaleCapsuleHalfHeight, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, AttackUpscale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttack, UnknownData_1IUH, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotifyState_MeleeAttack, 0x0168);
		}

		// class UME_AnimNotifyState_MeleeAttackSimple : public UAnimNotifyState
		TEST_METHOD(Class__Maneater__ME_AnimNotifyState_MeleeAttackSimple)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttackSimple, AttackMomentum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttackSimple, UnknownData_BZLK, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttackSimple, GameplayEffects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttackSimple, MeleeAttackRadius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttackSimple, KickImpulseMagnitudeXY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttackSimple, KickImpulseMagnitudeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_MeleeAttackSimple, UnknownData_M8WW, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotifyState_MeleeAttackSimple, 0x0058);
		}

		// class UME_AnimNotifyState_ScalePrey : public UAnimNotifyState
		TEST_METHOD(Class__Maneater__ME_AnimNotifyState_ScalePrey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_ScalePrey, UnifromScaleSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_ScalePrey, UnknownData_GZOO, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotifyState_ScalePrey, 0x0050);
		}

		// class UME_AnimNotifyState_TemporaryProp : public UAnimNotifyState
		TEST_METHOD(Class__Maneater__ME_AnimNotifyState_TemporaryProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_TemporaryProp, PropAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_TemporaryProp, AttachJoint, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_TemporaryProp, UnknownData_C405, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_TemporaryProp, PostNotifyLifespan, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_TemporaryProp, bPhysicsAfterNotify, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_TemporaryProp, bImpulseAfterNotify, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_TemporaryProp, UnknownData_7MKU, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_TemporaryProp, ImpulseMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_TemporaryProp, PropActor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AnimNotifyState_TemporaryProp, UnknownData_IJP8, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AnimNotifyState_TemporaryProp, 0x0060);
		}

		// class AME_AssetLoader : public AActor
		TEST_METHOD(Class__Maneater__ME_AssetLoader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AssetLoader, DefaultDataTables, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AssetLoader, EvolutionDataTables, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AssetLoader, AssetLoadingFinishedDelegate, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AssetLoader, SavedAssets, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AssetLoader, UnknownData_XKG4, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_AssetLoader, 0x02F0);
		}

		// class UME_AttachmentAnimSet : public UDataAsset
		TEST_METHOD(Class__Maneater__ME_AttachmentAnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, SoftIdleAnimations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, SoftSuspiciousAnimations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, SoftAlertAimingBlendspace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, SoftAlertAnimations, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, SoftMovingAnimations, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, SoftHitFromForwradsAnimations, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, SoftHitFromBehindAnimations, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, SoftHitFromLeftAnimations, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, SoftHitFromRightAnimations, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, SoftFiringAnimations, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, SoftTurnRightAnimations, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, SoftTurnLeftAnimations, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, IKElbowOffset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttachmentAnimSet, AimingElbowRotation, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AttachmentAnimSet, 0x0120);
		}

		// class UME_GameplayEffect : public UGameplayEffect
		TEST_METHOD(Class__Maneater__ME_GameplayEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffect, PhysicalMaterialOverride, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffect, bIsPrimaryEffect, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffect, UnknownData_YCCY, 0x07C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffect, ActivationAudioEvents, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffect, DeactivationAudioEvents, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffect, ActivationParticleSystems, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffect, PersistentParticleSystems, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffect, DeactivationParticleSystems, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffect, PersistentMaterialEffects, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffect, SourceTagRequirements, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffect, Montage, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayEffect, 0x0870);
		}

		// class UME_GameplayEffectUIData : public UGameplayEffectUIData
		TEST_METHOD(Class__Maneater__ME_GameplayEffectUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffectUIData, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffectUIData, ProcType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayEffectUIData, UnknownData_RY6L, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayEffectUIData, 0x0048);
		}

		// class UME_AttributeSet : public UAttributeSet
		TEST_METHOD(Class__Maneater__ME_AttributeSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, UnknownData_U91R, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, Damage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, Health, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, AdditionalMaxHealth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, Stamina, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, StaminaRegenRate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, SwimMovementSpeed, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, AdditionalMaxSwimSpeed, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, WalkMovementSpeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, MaxAcceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, SlamDamageDefense, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, SizeLevel, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, SizeDelta, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, WhipshotExplosionDamageReduction, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AttributeSet, UnknownData_CWAV, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AttributeSet, 0x0230);
		}

		// class UME_AudioEventManager : public UObject
		TEST_METHOD(Class__Maneater__ME_AudioEventManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, EventProperties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, GlobalCooldownSeconds, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, UnknownData_EP5W, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, WWiseJukeboxName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, SwimAttenuationRollOnSeconds, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, SwimAttenuationRollOffSeconds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, BountyMaxSuspicionLevel, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, MaxWhizzbyRange, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, AttenuationValue, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, NextGlobalFireTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, JukeboxStarted, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, BankLoaded, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AudioEventManager, UnknownData_I3XE, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AudioEventManager, 0x0090);
		}

		// class AME_ThrashableActor : public AActor
		TEST_METHOD(Class__Maneater__ME_ThrashableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, UnknownData_UZE0, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, FriendlyName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, IconTexture, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, ThrashAttacker, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, ThrashableMesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, AbilitySystemComponent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, UnknownData_QZZG, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, ThrashGrabPoints, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, NutritionTableRow, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, AttachedSound, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, GrabbedSound, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, DeathSound, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, WhipShotTrailParticle, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ThrashableActor, UnknownData_LBEY, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_ThrashableActor, 0x02E0);
		}

		// class AME_AuraDamageActor : public AME_ThrashableActor
		TEST_METHOD(Class__Maneater__ME_AuraDamageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, AuraRadius, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, UnknownData_B1MT, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, GameplayEffectClasses, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, bCannotDamageBreachingShark, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, bOnlyDamageWalkingSharkIfStandingOnOwner, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, UnknownData_BVQ3, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, AuraFX, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, bDebugAura, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, UnknownData_UI08, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, StaticMeshVisualizer, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, VisualizerComponent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, AuraParticle, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, AuraAboveWaterParticle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, AuraParticleDrawDistance, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, AuraParticleSecondsBeforeInactive, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, bSyncDamageToWaterline, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, bAffectsHumans, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, bAffectsAnimals, 0x035A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, bAffectsBoats, 0x035B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, bAffectsPlayerShark, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, UnknownData_ESQG, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, AuraParticleSocket, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, AuraAboveWaterParticleSocket, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, DamagedParticleSystem, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, DamagedSound, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, DestroyedParticleSystem, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, DestroyedSound, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, ParticleVisualizerComponents, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, UnknownData_YDOB, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_AuraDamageActor, AuraPawnMap, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_AuraDamageActor, 0x0400);
		}

		// class AME_BeachgoerEscapePlotter : public ATwAIPatrolPlotter
		TEST_METHOD(Class__Maneater__ME_BeachgoerEscapePlotter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BeachgoerEscapePlotter, EscapeVolume, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_BeachgoerEscapePlotter, 0x0258);
		}

		// class AME_SpawnPointActor : public AActor
		TEST_METHOD(Class__Maneater__ME_SpawnPointActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, PristineSpawnPoints, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, OnAISpawned, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, OnSpawnerRemoved, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, bAlwaysPriority, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, bRegisterWithManager, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, UnknownData_Q97D, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, AIDensity, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, SpawnLists, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, bRandomlySelectSpawnGroup, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, SpawnRotation, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, UnknownData_ORJX, 0x026A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, FilterDelay, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, UnknownData_510L, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, GenerationType, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, ProjectionType, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, UnknownData_29HE, 0x0276);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, HalfExtentX, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, HalfExtentY, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, SpaceBetween, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, NumLayers, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, LayerSpace, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, NumRings, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, bDiscardFailedProjections, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, UnknownData_RM0G, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, ProjectionOffsetZ, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, TraceExtent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, UnknownData_V3VB, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, NavigationFilter, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, FilteredSpawnPoints, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, UnknownData_2CN2, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, CapsuleComponent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, UnknownData_EE7D, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, ActiveAlerts, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnPointActor, UnknownData_VWCT, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_SpawnPointActor, 0x0318);
		}

		// class AME_BeachSpawner : public AME_SpawnPointActor
		TEST_METHOD(Class__Maneater__ME_BeachSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BeachSpawner, ValidActivities, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BeachSpawner, ShuffledActivities, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BeachSpawner, UnknownData_T1KY, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BeachSpawner, PercentChanceOfFleeing, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BeachSpawner, UnknownData_7OFL, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BeachSpawner, ForcedEscapeVolumes, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BeachSpawner, ExcludedEscapeVolumes, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_BeachSpawner, 0x0368);
		}

		// class UME_BlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Maneater__ME_BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_BlueprintFunctionLibrary, 0x0028);
		}

		// class AME_VehicleAIController : public AME_AIController
		TEST_METHOD(Class__Maneater__ME_VehicleAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehicleAIController, VehiclePawn, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehicleAIController, UnknownData_RYYH, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehicleAIController, PassengerTargetingDelay, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehicleAIController, UnknownData_L8PN, 0x0768);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_VehicleAIController, 0x0780);
		}

		// class AME_BoatAIController : public AME_VehicleAIController
		TEST_METHOD(Class__Maneater__ME_BoatAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatAIController, BoatPawn, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatAIController, UnknownData_YIYR, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatAIController, AISpawnComplete, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatAIController, UnknownData_7444, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatAIController, MaxAI, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatAIController, UnknownData_O7TA, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatAIController, SpawnDiversBark, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatAIController, UnknownData_56ZM, 0x07D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_BoatAIController, 0x07E8);
		}

		// class UME_VehicleCollisionComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Maneater__ME_VehicleCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleCollisionComponent, LinearVelocitySoftCap, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleCollisionComponent, MaxImpulseSize, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleCollisionComponent, VehicleOwner, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleCollisionComponent, TheWaterVolume, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_VehicleCollisionComponent, UnknownData_4IHC, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_VehicleCollisionComponent, 0x04C0);
		}

		// class UME_BoatCollisionComponent : public UME_VehicleCollisionComponent
		TEST_METHOD(Class__Maneater__ME_BoatCollisionComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_BoatCollisionComponent, 0x04C0);
		}

		// class UME_BoatNameComponent : public UDecalComponent
		TEST_METHOD(Class__Maneater__ME_BoatNameComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BoatNameComponent, BoatName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BoatNameComponent, CanvasRT, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BoatNameComponent, DecalMID, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BoatNameComponent, UnknownData_RWIX, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_BoatNameComponent, 0x02A0);
		}

		// class AME_VehiclePawn : public APawn
		TEST_METHOD(Class__Maneater__ME_VehiclePawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_GOA7, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, VehicleType, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_AE0B, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnderBoatBoxExtent, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnderBoatBoxOffset, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_ZT4M, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MeshComponent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, BuoyancyComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, bHasDamageParticleEffect, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_7RRU, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, DamageParticleComponent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, HitMaskResolution, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_YJYW, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MajorDamageParticleSystem, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MajorDamageSoundStart, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MajorDamageSoundStop, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MinorDamageParticleSystem, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MinorDamageSoundStart, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MinorDamageSoundStop, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, RequiredMassToInterruptCombat, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, RequiredMassToBreakApart, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, RequiredImpulseToInterruptCombat, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, CombatInterruptCooldownTime, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, BeachedCheckCooldownTime, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, BeachedCheckZScale, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, CombatInterruptDuration, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_2IHN, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, HitImpulseLinearScale, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, HitImpulseMinAngle, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, HitImpulseAngularDrag, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, HitImpulseCooldownTime, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, EngineSoundComponent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, EngineSoundRTPC, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingSoundRTPC, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingTimerRTPC, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, TurningSoundRTPC, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, bSideProtection, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, bSinkWhenBeached, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_4ZBO, 0x03DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, RideHeightZTolerance, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingMassScale, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_965X, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingSound, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingLandSound, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingCompleteSound, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, CapsizeSound, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_MBLT, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingVFX, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingLandVFX, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingWaterSurfaceVFX, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingParticleZThreshold, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_MTBK, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, VehicleAIController, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, FriendlyName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, VehicleLevel, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_OX5Y, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, DefaultPassengers, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, Seats, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MaxPassengers, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, PassengerEjectImpulse, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_OW6Q, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, ThrashGrabPoints, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, NutritionTableRow, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, VehicleDebris, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, VehicleDestructionVFX, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, OnLandVehicleDestructionVFX, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, VehicleDestructionSFX, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, OnLandVehicleDestructionSFX, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_GXCK, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, ShapeRootComponent, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SharkRamLocations, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UpwardSharkRamLocations, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, LandOnBoatLocations, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, WaterLineThresholds, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnderwaterThresholds, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, BoatLandingThresholds, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UpwardForceDotProductThreshold, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_DLB3, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, OnRammed, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, OnMeshSwapped, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SeatChangeRate, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_XHA6, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, Passengers, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, CinematicCameraAnimation, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_G8HE, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, HullWaterDepth, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, bHasSunk, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, bHasBrokenApart, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_HNIF, 0x068A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SlamBreakApartVFX, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, BreakApartSound, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, BoatIsDeadSound, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, DefaultVehicle, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, OnPilotEjected, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_MT8H, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, BaseMasterMaterial, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MaterialDamagePoints, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, DamageToHitMaxImpactSize, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MaxMaterialDamageSize, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MinSizePerDamage, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MaxSizePerDamage, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, CombinationDistance, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_3UNH, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MaterialBloodPoints, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MaxMaterialBloodSize, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SizePerKill, 0x071C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, BloodCombinationDistance, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_B5CZ, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkCurve, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkSpeed, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkRotationModifier, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkMovementModifier, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MaxSinkResistance, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_DMNZ, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MaxSinkTime, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_Q1HC, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkThreshold, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkWaterlineFudgeFactor, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingBoatCracks, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingBoatJets, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SunkBoatWaterRear, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SunkBoatWaterFull, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkingParticleSystemComponents, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SunkBoatWaterPSCRear, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SunkBoatWaterPSCFull, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkFXSocketName, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkEjectInterval, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SinkEjectStartTime, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, PartiallySunkDepth, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, FullySunkDepth, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, DamageFireParamName, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_O2VX, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, EngineEffectMinorDamageSocketName, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, EngineEffectMajorDamageSocketName, 0x07E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_Y5RT, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, VehicleMovement, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, DynamicDamageMaterials, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_8311, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, DestructionMeshSwap, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, DestructionMeshSwapSecondary, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, AllPointsDestroyedSwapoutMesh, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_EK33, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MercunaObstacle, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, MercunaNavigation, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_VRXQ, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, AbilitySystemComponent, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, AttributeSetClass, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, CharacterAttributeSet, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, AttributeDefaults, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, CharacterAbilities, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_GGTK, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, TerrorizeAmount, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_R0V3, 0x0A24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, AIPatrolPlotter, 0x0A24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, HunterRank, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_KLWL, 0x0A71);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, DamageSoundStop, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, DamageAudio, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, FiringRandomTime, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, bIsBossVehicle, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_D5LL, 0x0A8D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, BossPhaseInfo, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_1ZBV, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, CurrentBossPhase, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, ElapsedBossPhaseTime, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_KYD2, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, ActiveBossHunters, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, ActiveBossHunterVehicles, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, SoftLockNarratorEventName, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_LJCM, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, LivingDespawnEvent, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehiclePawn, UnknownData_GQQD, 0x0B00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_VehiclePawn, 0x0B18);
		}

		// class AME_BoatPawn : public AME_VehiclePawn
		TEST_METHOD(Class__Maneater__ME_BoatPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, Propellers, 0x0B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, BoatAIController, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, bBeached, 0x0B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, UnknownData_5DCP, 0x0B31);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, PSCDeactivationSpeed, 0x0B34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, MaxThrottlePitchDegrees, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, ThrottlePitchInterpSpeed, 0x0B3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, MaxThrottleRollDegrees, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, ThrottleRollInterpSpeed, 0x0B44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, SurfaceSkimHeightScale, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, MeshZInterpSpeed, 0x0B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, StationaryRockingMagnitude, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, StationaryRockingSpeed, 0x0B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, bSinkWhenFlipped, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, UnknownData_UDLW, 0x0B59);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, PropellerPSTemplate, 0x0B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, UnknownData_PRU5, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, SurfacePSCFront, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, SurfacePSCRear, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, SurfacePSCRight, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, SurfacePSCLeft, 0x0BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, FrontPSCTemplate, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, RearPSCTemplate, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, RightPSCTemplate, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, LeftPSCTemplate, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, MinBroadsideFXVelocity, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawn, UnknownData_W3NY, 0x0BD4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_BoatPawn, 0x0BD8);
		}

		// class AME_BoatPawnNoNav : public AME_BoatPawn
		TEST_METHOD(Class__Maneater__ME_BoatPawnNoNav)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawnNoNav, IdleVFX, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawnNoNav, IdleVFXVelocityThreshold, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BoatPawnNoNav, UnknownData_NVXB, 0x0BE4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_BoatPawnNoNav, 0x0BF8);
		}

		// class UME_BodyTypeInformation : public UDataAsset
		TEST_METHOD(Class__Maneater__ME_BodyTypeInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BodyTypeInformation, ThrashJointThickness, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_BodyTypeInformation, 0x0040);
		}

		// class AME_WorldLandmarkActor : public AActor
		TEST_METHOD(Class__Maneater__ME_WorldLandmarkActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldLandmarkActor, UnknownData_8T2A, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldLandmarkActor, LandmarkType, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldLandmarkActor, DiscoveryState, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldLandmarkActor, UnknownData_KB64, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldLandmarkActor, FriendlyName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldLandmarkActor, LandmarkDescription, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldLandmarkActor, LandmarkIcon, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldLandmarkActor, UndiscoveredIcon, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldLandmarkActor, UnknownData_SYSO, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldLandmarkActor, DiscoveredSound, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldLandmarkActor, DiscoveryBounds, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldLandmarkActor, UnknownData_9C6K, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_WorldLandmarkActor, 0x0318);
		}

		// class AME_BossBattleInfo : public AME_WorldLandmarkActor
		TEST_METHOD(Class__Maneater__ME_BossBattleInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, BossArenaVolume, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, BossMusicStartEvent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, BossMusicStopEvent, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, BossIntroCinematic, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, bIsBountyHunter, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, UnknownData_398O, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, BountyActivationLevel, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, bBattleFinished, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, CurrentBattleState, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, bPlayedIntroCinematic, 0x0362);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, UnknownData_K6KP, 0x0363);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, ActiveBosses, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, BattleSpawnedActors, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, OnBossBattleEvent, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossBattleInfo, UnknownData_FQDF, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_BossBattleInfo, 0x03A8);
		}

		// class UME_BossInterface : public UInterface
		TEST_METHOD(Class__Maneater__ME_BossInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_BossInterface, 0x0028);
		}

		// class AME_BountySpawner : public AActor
		TEST_METHOD(Class__Maneater__ME_BountySpawner)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_BountySpawner, 0x0220);
		}

		// class AME_BossHunterSpawner : public AME_BountySpawner
		TEST_METHOD(Class__Maneater__ME_BossHunterSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BossHunterSpawner, PreferredBossClass, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_BossHunterSpawner, 0x0228);
		}

		// class AME_BountyManager : public AActor
		TEST_METHOD(Class__Maneater__ME_BountyManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, OnBossHunterBoatDied, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, OnBountyBeginning, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, OnBountyEnding, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, OnThreatAdded, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, OnInfamyRankUp, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, OnBountyBossSpawnedDelegate, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, UnknownData_92PJ, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, ME_BountyTiers, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, InfamyPointsEarnedPerKill, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, MaxInfamyTier, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, BountySpawnDistanceMultiple, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, MaxNumActiveDivers, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, MaxSharkWitnessDistance, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, TimeUntilThreatDegrades, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, ThreatDegradationInterval, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, TimeRecentKillStaysActive, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, MinDistanceForCinematic, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, BountyActiveTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, ReturnToSearchDelay, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, ReinforcementTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, RetreatTimeoutTime, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, DistanceForDespawning, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, BossKillSlomoRatio, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, BossKillSlomoDuration, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, BountySearchingPulsePeriod, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, RadioStartName, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, RadioReinforcementsName, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, RadioEndEvadeName, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, RadioEndDeathName, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, RadioSearchingStartName, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, RadioFoundBoatName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, RadioSearchingPulseName, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, FleeTriggerDistance, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, FleeBroadcastRadius, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, UpdateFleeTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, UpdateFleeTimeDeviation, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, NumHumansKilled, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, PlayerInfamyLevel, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, UnknownData_90H1, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, InfamyPointsEarned, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, LastBossLevelDefeated, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, UnknownData_QB0I, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, DebugDaveLocation, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BountyManager, UnknownData_PM35, 0x05A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_BountyManager, 0x05C8);
		}

		// class UME_BountyTier : public UObject
		TEST_METHOD(Class__Maneater__ME_BountyTier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BountyTier, BossBoat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BountyTier, SlaveBoatList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BountyTier, MaxNumActiveSlaveBoats, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BountyTier, NumBoatsPerWave, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BountyTier, NumKillsToTrigger, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BountyTier, NumInfamyPointsRequiredForBoss, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BountyTier, NutritionTableRow, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BountyTier, BountyViewData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BountyTier, StartNarratorEventName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BountyTier, FinishNarratorEventName, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BountyTier, RankUpNarratorEventName, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_BountyTier, 0x0138);
		}

		// class UHunterSupportEntry : public UObject
		TEST_METHOD(Class__Maneater__HunterSupportEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterSupportEntry, SupportName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterSupportEntry, SupportIcon, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHunterSupportEntry, 0x0068);
		}

		// class UME_BTDecorator_HasValidActivity : public UBTDecorator
		TEST_METHOD(Class__Maneater__ME_BTDecorator_HasValidActivity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_BTDecorator_HasValidActivity, 0x0068);
		}

		// class UME_BTTask_PerformAmbientActivity : public UBTTaskNode
		TEST_METHOD(Class__Maneater__ME_BTTask_PerformAmbientActivity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_BTTask_PerformAmbientActivity, 0x0070);
		}

		// class UME_BuoyancyForceComponent : public UActorComponent
		TEST_METHOD(Class__Maneater__ME_BuoyancyForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, OceanManager, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, MeshDensity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, FluidDensity, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, FluidLinearDamping, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, FluidAngularDamping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, VelocityDamper, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, ClampMaxVelocity, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, UnknownData_AZ43, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, MaxUnderwaterVelocity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, TestPointRadius, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, TestPoints, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, ApplyForceToBones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, SnapToSurfaceIfNoPhysics, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, TwoGerstnerIterations, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, UnknownData_XDQX, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, PointDensityOverride, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, BoneOverride, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, DrawDebugPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, EnableStayUprightConstraint, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, UnknownData_CVDX, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, StayUprightStiffness, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, StayUprightDamping, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, StayUprightDesiredRotation, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, EnableWaveForces, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, UnknownData_761J, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, WaveForceMultiplier, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, TickGroup, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, UnknownData_EW7F, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_BuoyancyForceComponent, ActiveConstraint, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_BuoyancyForceComponent, 0x0178);
		}

		// class AME_BuoyantDecoration : public AStaticMeshActor
		TEST_METHOD(Class__Maneater__ME_BuoyantDecoration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BuoyantDecoration, BuoyancyComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_BuoyantDecoration, UnknownData_N1S7, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_BuoyantDecoration, 0x0240);
		}

		// class UME_CalculationBoatStun : public UGameplayEffectExecutionCalculation
		TEST_METHOD(Class__Maneater__ME_CalculationBoatStun)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CalculationBoatStun, 0x0040);
		}

		// class UME_CalculationGenericDamage : public UGameplayEffectExecutionCalculation
		TEST_METHOD(Class__Maneater__ME_CalculationGenericDamage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CalculationGenericDamage, 0x0040);
		}

		// class UME_CalculationElectricDamage : public UME_CalculationGenericDamage
		TEST_METHOD(Class__Maneater__ME_CalculationElectricDamage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CalculationElectricDamage, 0x0040);
		}

		// class UME_CalculationExplosiveDamage : public UME_CalculationGenericDamage
		TEST_METHOD(Class__Maneater__ME_CalculationExplosiveDamage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CalculationExplosiveDamage, 0x0040);
		}

		// class UME_CalculationHealthCondition : public UGameplayEffectExecutionCalculation
		TEST_METHOD(Class__Maneater__ME_CalculationHealthCondition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CalculationHealthCondition, 0x0040);
		}

		// class UME_CalculationSlamDamage : public UME_CalculationGenericDamage
		TEST_METHOD(Class__Maneater__ME_CalculationSlamDamage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CalculationSlamDamage, 0x0040);
		}

		// class UME_CalculationStrikeDamage : public UME_CalculationGenericDamage
		TEST_METHOD(Class__Maneater__ME_CalculationStrikeDamage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CalculationStrikeDamage, 0x0040);
		}

		// class UME_CalculationTailwhipDamage : public UME_CalculationGenericDamage
		TEST_METHOD(Class__Maneater__ME_CalculationTailwhipDamage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CalculationTailwhipDamage, 0x0040);
		}

		// class UME_CalculationThrashDamage : public UME_CalculationGenericDamage
		TEST_METHOD(Class__Maneater__ME_CalculationThrashDamage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CalculationThrashDamage, 0x0040);
		}

		// class UME_CalculationThrashStruggle : public UME_CalculationGenericDamage
		TEST_METHOD(Class__Maneater__ME_CalculationThrashStruggle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CalculationThrashStruggle, 0x0040);
		}

		// class UME_CameraAnimInst : public UCameraAnimInst
		TEST_METHOD(Class__Maneater__ME_CameraAnimInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CameraAnimInst, 0x0110);
		}

		// class UME_CameraComponent : public UCameraComponent
		TEST_METHOD(Class__Maneater__ME_CameraComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CameraComponent, 0x07B0);
		}

		// class UME_CameraSpringArmComponent : public USpringArmComponent
		TEST_METHOD(Class__Maneater__ME_CameraSpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CameraSpringArmComponent, ArmLengthBlendInSpeed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CameraSpringArmComponent, ArmLengthBlendOutSpeed, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CameraSpringArmComponent, UnderwaterMaxZ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CameraSpringArmComponent, AboveWaterMinZ, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CameraSpringArmComponent, SharkOwner, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CameraSpringArmComponent, CameraLagCurve, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CameraSpringArmComponent, bEnforceMinLagBoomLength, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CameraSpringArmComponent, UnknownData_QWW2, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CameraSpringArmComponent, SavedProbeSize, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CameraSpringArmComponent, UnknownData_ES67, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CameraSpringArmComponent, 0x02B0);
		}

		// class UME_CharacterAbilityHelper : public UObject
		TEST_METHOD(Class__Maneater__ME_CharacterAbilityHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAbilityHelper, UnknownData_FXJ0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAbilityHelper, OwningCharacter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAbilityHelper, CachedDeathCDO, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CharacterAbilityHelper, 0x0040);
		}

		// class UME_CharacterAttributeSet : public UME_AttributeSet
		TEST_METHOD(Class__Maneater__ME_CharacterAttributeSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, UnknownData_CVT4, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, Stunned, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, BiteDamageScale, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, BoatBiteDamageScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, ThrashStruggleScale, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, SlamDamageScale, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, ThrashDamageScale, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, CriticalDamageScale, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, ThrashDamagePool, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, ThrashRegenerationRate, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, ThrashHoldPool, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, BaseThrashHoldPool, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, TailWhipDamageScale, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, GravityScale, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, WhipShotVelocity, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, WhipShotRange, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, WorldTimeDilationScale, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, StunArmor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, AirLungeForceScale, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, BaseMoveSpeed, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, LungeSpeed, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, MaxSpeedLungeT1, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, MaxSpeedLungeT2, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, MaxSpeedLungeT3, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, MaxSpeedSprintT1, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, MaxSpeedSprintT2, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, MaxSpeedSprintT3, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, EvadeSpeed, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, MaxSwimSpeedScale, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, FatNutrientModifier, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, ProteinNutrientModifier, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, MineralNutrientModifier, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, MutagenNutrientModifier, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, HealthNutrientModifier, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, DrownSpeedBase, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, DrownSpeedModifier, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, GenericDamageResistance, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, GenericDamageReduction, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, BoatDamageBonusModifier, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, OnLandSpeedModifier, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, MassScale, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, EvolutionAbilityResource, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, SmashAoEMultiplier, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, HighestBreachPosition, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, TailwhipImpulseMultiplier, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, TailwhipDefenseImpulseMultiplier, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, RamImpulseMultiplier, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, SlamEjectChancePct, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, LungeCameraBoomMultiplierTier1, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, LungeCameraBoomMultiplierTier2, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, LungeCameraBoomMultiplierTier3, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, BioElectricDamageMultiplier, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, ProjectileDamageResistance, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, ElectricDamageResistance, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, BoatMovementDisable, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, ManeuverabilityMultiplier, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, DamageRating, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, DefenseRating, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, SpeedRating, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, AITimeDilationScale, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, SonarDuration, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, SonarRadius, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, KnifingMinPitch, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, KnifingMaxPitch, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, BiteLungeSpeed, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, BiteLungeSpeedNoTarget, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, BiteLungeSpeedOnClose, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, SoftLockTargetRange, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, DangerSense, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterAttributeSet, VulnerabilityThreshold, 0x0AF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CharacterAttributeSet, 0x0B10);
		}

		// class UME_CharacterCollisionComponent : public UCapsuleComponent
		TEST_METHOD(Class__Maneater__ME_CharacterCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterCollisionComponent, bSimulatePhysicsInWater, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterCollisionComponent, UnknownData_M050, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterCollisionComponent, InWaterCapsuleHeightModifier, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterCollisionComponent, InWaterCapsuleRadiusModifier, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterCollisionComponent, UnknownData_1HLC, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterCollisionComponent, CharacterOwner, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterCollisionComponent, TheWaterVolume, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterCollisionComponent, UnknownData_W6FK, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CharacterCollisionComponent, 0x0460);
		}

		// class UME_CharacterFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Maneater__ME_CharacterFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CharacterFunctionLibrary, 0x0028);
		}

		// class UME_CharacterVoiceData : public UDataAsset
		TEST_METHOD(Class__Maneater__ME_CharacterVoiceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CharacterVoiceData, VoiceBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CharacterVoiceData, 0x0080);
		}

		// class UME_CheatManager : public UCheatManager
		TEST_METHOD(Class__Maneater__ME_CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CheatManager, GodEffectHandle, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CheatManager, DemiGodEffectHandle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CheatManager, OnePunchEffectHandle, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CheatManager, GottaGoFastEffectHandle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CheatManager, DetachedCameraControllerRef, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CheatManager, 0x00A0);
		}

		// class AME_ChopperAIController : public AME_VehicleAIController
		TEST_METHOD(Class__Maneater__ME_ChopperAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ChopperAIController, ChopperPawn, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_ChopperAIController, 0x0788);
		}

		// class AME_ChopperPawn : public AME_VehiclePawn
		TEST_METHOD(Class__Maneater__ME_ChopperPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ChopperPawn, ChopperAIController, 0x0B18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_ChopperPawn, 0x0B20);
		}

		// class AME_CollectableActor : public AME_ThrashableActor
		TEST_METHOD(Class__Maneater__ME_CollectableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CollectableActor, bAlreadyDestroyed, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CollectableActor, UnknownData_EGQB, 0x02E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_CollectableActor, 0x02F0);
		}

		// class UME_CombatManager : public UActorComponent
		TEST_METHOD(Class__Maneater__ME_CombatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CombatManager, MaxAttackingHunters, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CombatManager, UnknownData_D6HX, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CombatManager, AICombatStatusChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CombatManager, bScareCombatWildlife, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CombatManager, UnknownData_K1K1, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CombatManager, CombatLockAI, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CombatManager, UnknownData_QU38, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CombatManager, CombatQueue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CombatManager, HunterCombatLockAI, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CombatManager, HunterCombatQueue, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CombatManager, UnknownData_CBL0, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CombatManager, 0x0130);
		}

		// class UMEControlSchemes : public UDeveloperSettings
		TEST_METHOD(Class__Maneater__MEControlSchemes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEControlSchemes, ControlSchemes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEControlSchemes, UnknownData_YH9I, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEControlSchemes, 0x0080);
		}

		// class AME_CreatureSchoolAIController : public AME_AIController
		TEST_METHOD(Class__Maneater__ME_CreatureSchoolAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolAIController, SchoolPawn, 0x0748);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_CreatureSchoolAIController, 0x0750);
		}

		// class UME_CreatureSchoolMeshComponent : public USkeletalMeshComponent
		TEST_METHOD(Class__Maneater__ME_CreatureSchoolMeshComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CreatureSchoolMeshComponent, 0x0AE0);
		}

		// class UME_CreatureSchoolMoveComponent : public UFloatingPawnMovement
		TEST_METHOD(Class__Maneater__ME_CreatureSchoolMoveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CreatureSchoolMoveComponent, CurrentFrameSkip, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CreatureSchoolMoveComponent, UnknownData_K98R, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CreatureSchoolMoveComponent, OwningSchool, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CreatureSchoolMoveComponent, SchoolCollision, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CreatureSchoolMoveComponent, 0x0168);
		}

		// class AME_CreatureSchoolPawn : public APawn
		TEST_METHOD(Class__Maneater__ME_CreatureSchoolPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, UnknownData_9KAH, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, SpriteComponent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, DelayedDestroyTime, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, UnknownData_M22P, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, SphereCollision, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, SchoolMovement, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, SchoolCount, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, CurrentSchoolCount, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, SchoolCountReductionPerBucket, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, CurrentSchoolCountPercentage, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, HealthPerFish, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, UnknownData_1S0F, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, SchoolAIController, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, NutritionTableRow, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, ThrashGrabPoints, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, MaxSwimSpeed, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, MaxSchoolSize, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, MinSchoolSize, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, GrowthRate, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, ShrinkRate, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, CautiousStateTime, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, UnknownData_ZWZT, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, BaitBallPS, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, BaitBallPSC, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, DispersePS, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, DispersePSLoaded, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, OrbitUpdateRate, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, UnknownData_QSVI, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, LocationSizeScalar, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, FishOrbitRange, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, BaseAlertedOrbitSize, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, IntensityScale, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, SwimSpeedScale, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, AlertedStateOrbitScale, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, FishOrbitRateRange, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, AlertedStateOrbitRateScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, DispersionRate, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, UnknownData_QTCJ, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, LoopingSchoolEvent, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, LoopingStopEvent, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, LoopingStopEventLoaded, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, DisperseSoundEvent, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, DisperseSoundEventLoaded, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, LoopingAmbientSound, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, OverlapEvent, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, OverlapEventLoaded, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, OverlapBeginSound, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, UnknownData_UVYD, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, AbilitySystemComponent, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, AttributeSetClass, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, CharacterAttributeSet, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, UnknownData_RU0Y, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, AIPatrolPlotter, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_CreatureSchoolPawn, UnknownData_U04A, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_CreatureSchoolPawn, 0x05A0);
		}

		// class UME_DamageType : public UDamageType
		TEST_METHOD(Class__Maneater__ME_DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DamageType, DamageSurfaceType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DamageType, bAppliesTag, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DamageType, bAffectsHitMask, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DamageType, UnknownData_J68G, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DamageType, HitMaskSize, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_DamageType, 0x0048);
		}

		// class AME_DebugCameraController : public ADebugCameraController
		TEST_METHOD(Class__Maneater__ME_DebugCameraController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_DebugCameraController, 0x0678);
		}

		// class AME_DestructibleActor : public ADestructibleActor
		TEST_METHOD(Class__Maneater__ME_DestructibleActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, UnknownData_YMHX, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, bIsActive, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, UnknownData_UR30, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, ActiveHitDeformations, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, MaxHitDeformations, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, UnknownData_9CXC, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, DamagedSound, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, DamagedInvincibleParticle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, DamagedInvincibleSound, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, BrokenSound, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, HitMaskResolution, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, Strength, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, RequiredSizeToDamage, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, UnknownData_DJ2B, 0x028E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, AbilitySystemComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, ChunkBreakEffects, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, DestructionEffects, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, ChunkScaleWhenFractured, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, bApplyImpulseOnBreak, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, bRadialImpulse, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, UnknownData_8VZL, 0x02BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, FractureImpulseRadius, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, FractureImpulseScalar, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, bExplosionImmunity, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, UnknownData_EP60, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, MinHitImpulse, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, NutritionTableRow, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, RelatedObjectiveType, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, UnknownData_FB2Y, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, DistanceSignificanceComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, GameplayEffectOnDestroyed, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, FriendlyName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, bAlreadyDestroyed, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, bDestroyedPermanently, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, UnknownData_ODAY, 0x0312);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, AttributeDefaults, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, DistanceVisible, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, UnknownData_L5QK, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, bAffectsOctreePathing, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, UpdateOctreeType, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, UnknownData_961O, 0x037A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_DestructibleActor, ModifierVolume, 0x037A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_DestructibleActor, 0x03A8);
		}

		// class UME_DestructibleComponent : public UDestructibleComponent
		TEST_METHOD(Class__Maneater__ME_DestructibleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, FluidDensity, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, FluidLinearDamping, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, FluidAngularDamping, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, VelocityDamper, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, ClampMaxVelocity, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, UnknownData_L6TC, 0x0745);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, MaxUnderwaterVelocity, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, TestPointRadius, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, DrawDebugPoints, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, EnableWaveForces, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, UnknownData_2TZJ, 0x0752);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, WaveForceMultiplier, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, ChunkSleepThreshold, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, ChunkStabilizationThreshold, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, TargetingOffset, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, UnknownData_SPUS, 0x076C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, OceanManager, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DestructibleComponent, UnknownData_SJXI, 0x0780);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_DestructibleComponent, 0x07A0);
		}

		// class UME_DialogueFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Maneater__ME_DialogueFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_DialogueFunctionLibrary, 0x0028);
		}

		// class UME_DialogueSystem : public UObject
		TEST_METHOD(Class__Maneater__ME_DialogueSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DialogueSystem, UnknownData_QRSS, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DialogueSystem, OnDialogueAkEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DialogueSystem, OnDynamicDialogueAkEvent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DialogueSystem, OnSequencerAkEvent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DialogueSystem, ExternalSoundBank, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DialogueSystem, UnknownData_YEL5, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DialogueSystem, AudioDialogueRowMappings, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DialogueSystem, UnknownData_B91H, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_DialogueSystem, 0x0150);
		}

		// class UME_SignificanceHandlerInterface : public UInterface
		TEST_METHOD(Class__Maneater__ME_SignificanceHandlerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SignificanceHandlerInterface, 0x0028);
		}

		// class UME_DistanceSignificanceComponent : public UActorComponent
		TEST_METHOD(Class__Maneater__ME_DistanceSignificanceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DistanceSignificanceComponent, SignificantDistance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DistanceSignificanceComponent, UnknownData_2SCC, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_DistanceSignificanceComponent, 0x00B8);
		}

		// class UME_DiverAttachmentAnimSet : public UDataAsset
		TEST_METHOD(Class__Maneater__ME_DiverAttachmentAnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DiverAttachmentAnimSet, IdleAnimations, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DiverAttachmentAnimSet, SuspiciousAnimations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DiverAttachmentAnimSet, AlertAnimations, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DiverAttachmentAnimSet, MovingAnimations, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DiverAttachmentAnimSet, MovingAlertAnimations, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_DiverAttachmentAnimSet, FiringAnimations, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_DiverAttachmentAnimSet, 0x0090);
		}

		// class UME_EnvQueryContext_PlayerSharkActor : public UEnvQueryContext
		TEST_METHOD(Class__Maneater__ME_EnvQueryContext_PlayerSharkActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_EnvQueryContext_PlayerSharkActor, 0x0028);
		}

		// class UME_EnvQueryGenerator_ActivityPoints : public UEnvQueryGenerator
		TEST_METHOD(Class__Maneater__ME_EnvQueryGenerator_ActivityPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_EnvQueryGenerator_ActivityPoints, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_EnvQueryGenerator_ActivityPoints, 0x0058);
		}

		// class AME_ExplodingBarrelBase : public AME_ThrashableActor
		TEST_METHOD(Class__Maneater__ME_ExplodingBarrelBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, UnknownData_2SR9, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, OnBarrelExplodedEvent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, OnCountDownDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, ExplodeOnImpactMinVelocity, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, ExplosionCountdownTime, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, BittenExplosionCountdownTime, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, UnknownData_T6GE, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, ExplosionActorClass, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, BuoyancyComponent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, bCauseFluidDisturbance, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, UnknownData_8MLT, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, WaterSplashMinSpeed, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, WaterSplashParticle, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, WaterSplashAudio, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, WhipshotImpactSound, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, UnknownData_3Z9U, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, RotationSpeed, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplodingBarrelBase, UnknownData_YUYT, 0x037C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_ExplodingBarrelBase, 0x0380);
		}

		// class AME_ExplosionActor : public AActor
		TEST_METHOD(Class__Maneater__ME_ExplosionActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, IgnoreActors, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, bExplosionParticlesSpawnAttached, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, bForceWaterlineFX, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, UnknownData_CVII, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, ExplosionParticle_AboveWater, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, ExplosionParticle_AtWaterline, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, ExplosionParticle_Shallow, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, ExplosionParticle_Deep, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, UnknownData_MRAC, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, SoundEffectStart, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, SoundEffectStop, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, GameplayEffectItems, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, ExplosionRadiusModifiers, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, ImpactMomentum, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, UnknownData_T6L2, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, ImpactMomentumModifiers, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, AkAudioComponent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, NavModifier, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, CanOnlyHitOneHuman, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, UnknownData_3FVS, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, ExplosionRadius, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ExplosionActor, UnknownData_2E3P, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_ExplosionActor, 0x02D0);
		}

		// class AME_FogOverrideVolume : public ATriggerVolume
		TEST_METHOD(Class__Maneater__ME_FogOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_FogOverrideVolume, UnknownData_E1KF, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_FogOverrideVolume, FogStateOverride, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_FogOverrideVolume, UnknownData_43HY, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_FogOverrideVolume, 0x0268);
		}

		// class UMEGameEngine : public UGameEngine
		TEST_METHOD(Class__Maneater__MEGameEngine)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEGameEngine, 0x0E30);
		}

		// class UME_GameInstance : public UGameInstance
		TEST_METHOD(Class__Maneater__ME_GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, UnknownData_NIA1, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, NarratorCueTable, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, UnknownData_MTOZ, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, SaveGameInstance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, UnknownData_SRSB, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, ActiveLocalUserIdx, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, UnknownData_1FDN, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, ProfileSaveInstance, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, UnknownData_I4HW, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, LoadingScreenWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, UnknownData_XV8O, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, maneaterBaseGameProductId, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, maneaterTigerSharkSkinProductId, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, UnknownData_JSKL, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, LoadingMovies, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, UnknownData_C766, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, ReconcileAchievementsParams, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameInstance, UnknownData_DBRZ, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameInstance, 0x0400);
		}

		// class AME_GameMode : public AGameMode
		TEST_METHOD(Class__Maneater__ME_GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, UnknownData_TTFG, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, StoryCinematicData, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, CurrentCinematicSequenceActor, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, UnknownData_3FV4, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, StoryCinematicsDataTable, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnCinematicLoaded, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnCinematicStarted, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnCinematicFinished, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnCinematicCleanedUp, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, UnknownData_VEKP, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnLoadingScreenStateChanged, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnPostLoadingScreenShowing, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnPreLoadingScreenRemoving, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, CurrentBossFight, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnPlayerPawnStatusChanged, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnBountyLevelIncrease, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnBountyIncrease, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnAnyCharacterDied, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnGrottoLocationEntered, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnGrottoLocationExited, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, BountyAmount, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, MaxBountyDollarValue, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, bFirstPlay, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, bDesiresPrologue, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, UnknownData_OPOA, 0x04DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnStoryUpdated, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, RegionStates, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, BountyLevel, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, UnknownData_3ID3, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, BountyLevelCurve, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, AllNutrientCaches, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, AllLandmarks, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, AllGrottos, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, AllBreakables, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, AllBeaches, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, AllWhales, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, AllRegionVolumes, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, bSpawnedAIThisFrame, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, bIsFastTraveling, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, UnknownData_FTCH, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, LastFastTravelTime, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, SubLevelsForFastTravel, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, DefaultSubtitleDialogTable, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, UnknownData_Y2Y5, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, SpawnPool, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, SpawnManagerClass, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, ME_BountyManagerClass, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, ME_BountyManager, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, Grottos, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, GameRunTimeGrottos, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnHumanEscaped, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, ME_PlayerObjectiveManagerClass, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, ME_PlayerObjectiveManager, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, ME_TutorialManagerClass, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, ME_TutorialManager, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, AIDirectorClass, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, AIDirector, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, ME_AssetLoaderClass, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, ME_AssetLoader, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, ME_SonarManagerClass, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, ME_SonarManager, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, bIsWaterPoisoned, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, UnknownData_7QYJ, 0x0661);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, TimeOfDayTracker, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, OnTimeOfDayTrackerCreated, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, TimeOfDayInfoClass, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, ME_DialogueSystem, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, ExternalSourcesBank, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, DynamicDialogueSoundBank, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GameMode, UnknownData_BZWN, 0x06A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_GameMode, 0x06B0);
		}

		// class UME_GameplayAbility : public UGameplayAbility
		TEST_METHOD(Class__Maneater__ME_GameplayAbility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility, CombatPriority, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility, UnknownData_ERL0, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility, AbilitiesCancelOnActivate, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility, UnknownData_MSFW, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility, OwningCharacter, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility, bEvolutionAbility, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility, EvolutionSetType, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility, UnknownData_5SEZ, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility, EvolutionAbilityChargedAudioEventName, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility, bSonarAbility, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility, bForceReleasePrey, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility, UnknownData_MO3D, 0x0432);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility, 0x0438);
		}

		// class UME_GameplayAbility_Montage : public UME_GameplayAbility
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_Montage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_5HD1, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, MontageToPlay, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, PlayRate, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, SectionName, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_6D87, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, bEndAbilityOnInputRelease, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_M1NY, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_M7SB, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, DisableInputTime, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, MomentumToApply, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, MomentumToApplyWhileAnimating, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, RootMotionScale, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, HitEffectClasses, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_45MO, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, bSimulateInputPress, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_I43P, 0x04E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, GameplayEffectClassesWhileAnimating, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, GameplayEffectClassesAppliedOnActivation, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_TOOV, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, bShouldForceStopMontage, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_ADSC, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_FY9N, 0x0515);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, bStopMontageOnExitWater, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, bSwitchToFlying, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_X6CQ, 0x051A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, PlayingMontage, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_O9QR, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, AbilityActivationSound, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, AbilityEndedSound, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_ECA5, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, CamAnim, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, GrowthStageCameraAnims, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_DDSJ, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, CamRate, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, CamBlendInTime, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, CamBlendOutTime, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, CamScale, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, bShouldTimeoutMontage, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, bStopMovementWhenUsed, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Montage, UnknownData_FPJM, 0x05BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_Montage, 0x05E0);
		}

		// class UME_GameplayAbility_DirectionalMontage : public UME_GameplayAbility_Montage
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_DirectionalMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_DirectionalMontage, UnknownData_ISC0, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_DirectionalMontage, Anim_FORWARD, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_DirectionalMontage, Anim_BACKWARD, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_DirectionalMontage, Anim_LEFT, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_DirectionalMontage, Anim_RIGHT, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_DirectionalMontage, Anim_FORWARD_LEFT, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_DirectionalMontage, Anim_FORWARD_RIGHT, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_DirectionalMontage, Anim_BACKWARD_LEFT, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_DirectionalMontage, Anim_BACKWARD_RIGHT, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_DirectionalMontage, 0x06A8);
		}

		// class UME_GameplayAbility_KillSequence : public UME_GameplayAbility_Montage
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_KillSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_KillSequence, UnknownData_NKDR, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_KillSequence, GrowthInfo, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_KillSequence, 0x0638);
		}

		// class UME_GameplayAbilitySharkMontage : public UME_GameplayAbility_Montage
		TEST_METHOD(Class__Maneater__ME_GameplayAbilitySharkMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbilitySharkMontage, AsyncLoadComplete, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbilitySharkMontage, UnknownData_PRJM, 0x05E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbilitySharkMontage, MontageData, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbilitySharkMontage, UnknownData_M2NW, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbilitySharkMontage, CurrentData, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbilitySharkMontage, 0x0620);
		}

		// class UME_GameplayAbility_LandLunge : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_LandLunge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_LandLunge, DefaultZVelocity, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_LandLunge, UnknownData_A337, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_LandLunge, CustomStageSettings, 0x0628);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_LandLunge, 0x0638);
		}

		// class UME_GameplayAbility_Loop : public UME_GameplayAbility_Montage
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_Loop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Loop, LoopDuration, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Loop, WakeUpSectionName, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Loop, UnknownData_DW8H, 0x05EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_Loop, 0x0608);
		}

		// class UME_GameplayAbility_MontageSequence : public UME_GameplayAbility
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_MontageSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, UnknownData_IGF0, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, MontageSequence, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, GameplayEffectClassesAppliedOnActivation, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, bShouldForceStopMontage, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, UnknownData_PWFE, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, UnknownData_4LCE, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, PlayingMontage, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, AbilityActivationSound, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, AbilityEndedSound, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, UnknownData_69BW, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, bShouldTimeoutMontage, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, UnknownData_3YSL, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, bDefaultStopMovement, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, bDefaultStopRotation, 0x04A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, UnknownData_057H, 0x04A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, DefaultMontageSequence, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_MontageSequence, UnknownData_IELO, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_MontageSequence, 0x04D8);
		}

		// class UME_GameplayAbility_Projectiles : public UME_GameplayAbility
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_Projectiles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Projectiles, ProjectileType, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Projectiles, NumProjectiles, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Projectiles, Spread, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Projectiles, SocketSpawn, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Projectiles, bAutoAimProjectile, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Projectiles, UnknownData_ZEX1, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_Projectiles, AutoAimDOT, 0x0454);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_Projectiles, 0x0458);
		}

		// class UME_GameplayAbility_SharkAirLunge : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_SharkAirLunge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_SharkAirLunge, LungeSpeed, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_SharkAirLunge, UnknownData_MT70, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_SharkAirLunge, NoGravityEffect, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_SharkAirLunge, bApplyLungeSpeedToZ, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_SharkAirLunge, UnknownData_XI2A, 0x0631);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_SharkAirLunge, 0x0638);
		}

		// class UME_GameplayAbility_SharkEvade : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_SharkEvade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_SharkEvade, 0x0620);
		}

		// class UME_GameplayAbility_SlowWorld : public UME_GameplayAbility
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_SlowWorld)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_SlowWorld, TimeDilation, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_SlowWorld, TimeDilationDuration, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_SlowWorld, bAffectsShark, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_SlowWorld, bAffectsCamera, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_SlowWorld, UnknownData_5CIA, 0x0442);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_SlowWorld, 0x0448);
		}

		// class UME_GameplayAbility_Sonar : public UME_GameplayAbility
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_Sonar)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_Sonar, 0x0438);
		}

		// class UME_GameplayAbility_ThrashEscape : public UME_GameplayAbility
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_ThrashEscape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_ThrashEscape, OwningAnimalCharacter, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_ThrashEscape, GameplayEffect, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_ThrashEscape, 0x0448);
		}

		// class UME_GameplayAbility_WildlifeDirectionalLunge : public UME_GameplayAbility
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_WildlifeDirectionalLunge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, UnknownData_02JJ, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, DirectionalLunges, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, PlayRate, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, SectionName, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, UnknownData_12XR, 0x04BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, RootMotionScale, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, UnknownData_D7LG, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, HitEffectClasses, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, GameplayEffectClassesWhileAnimating, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, GameplayEffectClassesAppliedOnActivation, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, bShouldForceStopMontage, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, UnknownData_6KWS, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, UnknownData_9IYZ, 0x0505);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, bSwitchToFlying, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, UnknownData_N6AO, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, MomentumToApply, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, MomentumToApplyWhileAnimating, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, UnknownData_CWP6, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeDirectionalLunge, PlayingMontage, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_WildlifeDirectionalLunge, 0x0580);
		}

		// class UME_GameplayAbility_WildlifeLunge : public UME_GameplayAbility_MontageSequence
		TEST_METHOD(Class__Maneater__ME_GameplayAbility_WildlifeLunge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeLunge, LungeMissAudioEvent, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeLunge, IntendedActorTarget, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeLunge, InitialDirectionDot, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplayAbility_WildlifeLunge, UnknownData_65XK, 0x04EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbility_WildlifeLunge, 0x0510);
		}

		// class UME_GameplayAbilityMontageInterface : public UInterface
		TEST_METHOD(Class__Maneater__ME_GameplayAbilityMontageInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayAbilityMontageInterface, 0x0028);
		}

		// class AME_GameplayAbilityTargetActor_Radius : public AGameplayAbilityTargetActor_Radius
		TEST_METHOD(Class__Maneater__ME_GameplayAbilityTargetActor_Radius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_GameplayAbilityTargetActor_Radius, 0x0340);
		}

		// class UME_GameplaySettings : public UDeveloperSettings
		TEST_METHOD(Class__Maneater__ME_GameplaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplaySettings, GameplayVocabulary, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplaySettings, Tutorials, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplaySettings, bCruiseEnabled, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplaySettings, UnknownData_QSCN, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameplaySettings, TurnSoundOverride, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplaySettings, 0x00E0);
		}

		// class UME_GameplayStatics : public UObject
		TEST_METHOD(Class__Maneater__ME_GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameplayStatics, 0x0028);
		}

		// class UMEGameSingleton : public UObject
		TEST_METHOD(Class__Maneater__MEGameSingleton)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEGameSingleton, 0x0028);
		}

		// class UME_GameUserSettings : public UGameUserSettings
		TEST_METHOD(Class__Maneater__ME_GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameUserSettings, GlobalQualityLevel, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameUserSettings, VSyncType, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameUserSettings, OceanQualityLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameUserSettings, bShowFrameRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameUserSettings, UnknownData_AHPL, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameUserSettings, DefaultFOV, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameUserSettings, Brightness, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameUserSettings, UnknownData_A69E, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameUserSettings, bShadowsOn, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameUserSettings, UnknownData_EA9D, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GameUserSettings, LastActiveUserId, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GameUserSettings, 0x0150);
		}

		// class AME_GateLever : public AActor
		TEST_METHOD(Class__Maneater__ME_GateLever)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_GateLever, WidgetCreator, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_GateLever, 0x0228);
		}

		// class AME_GoreChunk : public AME_ThrashableActor
		TEST_METHOD(Class__Maneater__ME_GoreChunk)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_GoreChunk, 0x02E0);
		}

		// class UME_GraphicsSettings : public UDeveloperSettings
		TEST_METHOD(Class__Maneater__ME_GraphicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GraphicsSettings, FoliageShadowParameterName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GraphicsSettings, ContentLink, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GraphicsSettings, OnFoliageShadowStrengthChanged, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GraphicsSettings, UnknownData_JXVB, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GraphicsSettings, 0x0060);
		}

		// class UME_GraphicsSettingsContentLink : public UObject
		TEST_METHOD(Class__Maneater__ME_GraphicsSettingsContentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_GraphicsSettingsContentLink, Maneater_MPCs, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_GraphicsSettingsContentLink, 0x0038);
		}

		// class AME_Grotto : public AActor
		TEST_METHOD(Class__Maneater__ME_Grotto)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto, UnknownData_FQ6X, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto, LevelName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto, Region, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto, bIsLocked, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto, UnknownData_LP7G, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto, GrottoVolume, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto, bHasBeenDiscovered, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto, UnknownData_8WSO, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_Grotto, 0x0268);
		}

		// class UME_HitComponent : public UObject
		TEST_METHOD(Class__Maneater__ME_HitComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_HitComponent, 0x0028);
		}

		// class UME_HitComponentAOE : public UME_HitComponent
		TEST_METHOD(Class__Maneater__ME_HitComponentAOE)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_HitComponentAOE, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_HitComponentAOE, UnknownData_3BSV, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_HitComponentAOE, 0x0030);
		}

		// class AME_HumanAIController : public AME_CharacterAIController
		TEST_METHOD(Class__Maneater__ME_HumanAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanAIController, HumanPawn, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanAIController, bCanLookForBoats, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanAIController, UnknownData_NM02, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanAIController, NearestBoat, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanAIController, BB_NearestBoatKey, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanAIController, BB_NearestBoatBoardLocKey, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanAIController, UnknownData_FE9D, 0x07A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_HumanAIController, 0x07B8);
		}

		// class AME_HumanCharacter : public AME_Character
		TEST_METHOD(Class__Maneater__ME_HumanCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, bHasRandomizedAppearance, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, UnknownData_0YHD, 0x0C21);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, RegionMaterials, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, SpecificCharacter, 0x0C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, UnknownData_7KK9, 0x0C3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, ConfigTable, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, LoadedConfig, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, BodyConfig, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, HairConfig, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, ClothingConfig, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, FitSizeInformation, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, PlusSizeInformation, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, ArmBoneNames, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, LegBonesNames, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, bIsBountyBoss, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, UnknownData_0R62, 0x0D89);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, OnVehicleReceivedHit, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, DynamicDialoguePathModelName, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, ChatterUpdateFrequencyMin, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, ChatterUpdateFrequencyMax, 0x0DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, ChatterSpamCooldown, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, UnknownData_NXRK, 0x0DBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, BleedOutDamageIncrement, 0x0DCC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, ME_WeaponComponentClass, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, ME_WeaponComponent, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, UnknownData_XDT7, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, EjectedDamageAudioChance, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, UnknownData_K1ME, 0x0DF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, BleedOutTimerHandle, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, AttackCooldownWhenBitten, 0x0E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, UnknownData_JCBR, 0x0E04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, AbandonImpulseModifier, 0x0E2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, AbandonTurnTime, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, UnknownData_U630, 0x0E34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, AbandonVehicleMontage, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanCharacter, UnknownData_RTCL, 0x0E48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_HumanCharacter, 0x0E58);
		}

		// class AME_HumanBeachgoer : public AME_HumanCharacter
		TEST_METHOD(Class__Maneater__ME_HumanBeachgoer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, DefaultBeachgoer, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, bAllowedToEscape, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, UnknownData_YG2T, 0x0E61);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, bIsGettingUp, 0x0E74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, UnknownData_P259, 0x0E75);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, EscapeMoveSpeed, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, UnknownData_29RB, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, EscapeMoveSpeedToUse, 0x0E84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, LegsCrawlSpeed, 0x0E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, NoLegsCrawlSpeed, 0x0E8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, ChanceToTrip, 0x0E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, TripMinMaxTime, 0x0E94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, UnknownData_JDM4, 0x0E9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, TrippedEffect, 0x0EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, AddedForwardImpulse, 0x0EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, AddedVerticalImpulse, 0x0EAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, UnknownData_M1YV, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, FleeDistanceBetweenChecks, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, ForwardCapsulePlacementDistance, 0x0EC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, UnknownData_UIE6, 0x0EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, FleeDelay, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, UnknownData_LLX7, 0x0EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, StartFleeing, 0x0F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, NavigationWaitTime, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, UnknownData_6C8F, 0x0F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, CasualWalkSpeedRange, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, UnknownData_JXVV, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, PitchMaximum, 0x0F44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, RollMaximum, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, PitchBlendSpeed, 0x0F4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, YawBlendSpeed, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, RollBlendSpeed, 0x0F54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoer, UnknownData_VF4B, 0x0F58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_HumanBeachgoer, 0x0F60);
		}

		// class AME_HumanBeachgoerAIController : public AME_HumanAIController
		TEST_METHOD(Class__Maneater__ME_HumanBeachgoerAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoerAIController, ActivityComponent, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoerAIController, BeachgoerPawn, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoerAIController, ThreatSearchInterval, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanBeachgoerAIController, UnknownData_EL2W, 0x07CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_HumanBeachgoerAIController, 0x0820);
		}

		// class UME_HumanMovementComponent : public UME_CharacterMovementComponent
		TEST_METHOD(Class__Maneater__ME_HumanMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_HumanMovementComponent, UnknownData_VQV8, 0x0750);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_HumanMovementComponent, 0x0760);
		}

		// class AME_HumanPassenger : public AME_HumanCharacter
		TEST_METHOD(Class__Maneater__ME_HumanPassenger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_HumanPassenger, UnknownData_6Y80, 0x0E58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_HumanPassenger, 0x0E60);
		}

		// class AME_HumanPassengerController : public AME_HumanAIController
		TEST_METHOD(Class__Maneater__ME_HumanPassengerController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_HumanPassengerController, 0x07B8);
		}

		// class UME_InputComponent : public UInputComponent
		TEST_METHOD(Class__Maneater__ME_InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_InputComponent, UnknownData_B5IE, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_InputComponent, PlayerBiteDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_InputComponent, PlayerSharkCharacter, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_InputComponent, UnknownData_E7D0, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_InputComponent, MaxLookSpeed, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_InputComponent, UnknownData_AM2W, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_InputComponent, EvadeInputDeadZone, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_InputComponent, UnknownData_S1IG, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_InputComponent, ComboInputDeadZone, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_InputComponent, DotVectorAcceptanceValue, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_InputComponent, InputWindow, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_InputComponent, UnknownData_6XQJ, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_InputComponent, 0x01B8);
		}

		// class AME_InterpolatedSplineActor : public AActor
		TEST_METHOD(Class__Maneater__ME_InterpolatedSplineActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InterpolatedSplineActor, SplineComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InterpolatedSplineActor, MeshMoveSpeed, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InterpolatedSplineActor, MeshTurnSpeed, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InterpolatedSplineActor, TickRateMin, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InterpolatedSplineActor, TickRateMax, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InterpolatedSplineActor, TickDistMin, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InterpolatedSplineActor, bUpdateWhileInvisible, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InterpolatedSplineActor, UnknownData_PSL4, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InterpolatedSplineActor, InterpolationRotOffsets, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InterpolatedSplineActor, UnknownData_ZY19, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_InterpolatedSplineActor, 0x02B8);
		}

		// class AME_SharkCharacter : public AME_AnimalCharacter
		TEST_METHOD(Class__Maneater__ME_SharkCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SharkCharacter, UnknownData_FDT4, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SharkCharacter, DorsalPSComponent, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SharkCharacter, GrowthStagePSTemplates, 0x0F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SharkCharacter, DorsalPSCDeactivationSpeedSq, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SharkCharacter, UnknownData_NETZ, 0x0FA4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_SharkCharacter, 0x0FB0);
		}

		// class AME_PlayerSharkCharacter : public AME_SharkCharacter
		TEST_METHOD(Class__Maneater__ME_PlayerSharkCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_1R9I, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, OnTailwhipPerformedDelegate, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, OnWhipShotPerformedDelegate, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, OnKnifingJumpPerformedDelegate, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, OnLungePerformedDelegate, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TimeDilationEventDelegate, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, HeldTailWhipGE, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, HeldTailWhipGEHandle, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TailWhipDilationLerpSpeed, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TailWhipTargetingRotationRate, 0x104C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BiteChainWindowTime, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_ZWLQ, 0x1054);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MinDeltaDotForBreachKnifing, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MaxDeltaDotForBreachKnifing, 0x1064);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_M6M7, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ThrashEndDelay, 0x106C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, OnFocalTargetChanged, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, OnKnifingStateChanged, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_9DIX, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FocalTargetTraceExtent, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_8OSN, 0x10B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, AllComboAttacks, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_DRBR, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, CurrentFocusedGrabPointLoc, 0x10CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, RegionCheckDelay, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_WIN0, 0x10DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, CurrentWorldRegion, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_7S8H, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, DeathFadeOutTime, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, DeathSlomoRatio, 0x10FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, bDisableSlomoOnDeath, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_IA88, 0x1101);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LastVictim, 0x1104);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_I1K8, 0x110C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, RegionAmbientNarratorPeriodFloor, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, RegionAmbientNarratorPeriodCeil, 0x111C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, OnRegionChanged, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_E4C4, 0x1130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FrenzyHealthBonus, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FrenzyHealthBonusMax, 0x113C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FrenzyStaminaBonus, 0x1140);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FrenzyStaminaBonusMax, 0x1144);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_3QMH, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, StartLowHealthWarningEvent, 0x1178);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, StopLowHealthWarningEvent, 0x1180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, StartDrowningEvent, 0x1188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, StopDrowningEvent, 0x1190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, HealthDangerStartPct, 0x1198);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LowAirThreshold, 0x119C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_D3OP, 0x11A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SharkMovementComponent, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SharkPlayerState, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SharkPlayerController, 0x11E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, AIDirector, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_1J2K, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FollowCamera, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_QRVR, 0x1200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, CameraBoom, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, PlayerCameraMaxPitch, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, PlayerCameraMinPitch, 0x121C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, CameraPitchCapBlend, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnderwaterSurfaceCameraThreshold, 0x1224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnderwaterSurfaceCameraMinPitch, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, WaterSurfaceCameraBoomMultiplier, 0x122C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, WaterSurfaceAddedCameraHeight, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FallingCameraBoomMultiplier, 0x1234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, CameraLagDistLevelMultiplier, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, CameraArmSprintMultiplier, 0x123C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MaxFinalSprintArmLengthMultiplier, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_FKOH, 0x1244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MeshFadeMIC, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MaxFocusCharacterDist, 0x1250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MaxFocusVehicleDist, 0x1254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MaxFocusLandSurfaceDiff, 0x1258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MeshFadeDistanceBuffer, 0x125C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_EUIJ, 0x1260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SharkGrowthScale, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_PGYG, 0x12BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LevelUpParticle, 0x12C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LevelUpSocketName, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LevelUpBloomCurve, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LevelUpGlowCurve, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_IYR0, 0x12E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TagTrackerAttachSocketName, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TagTrackerClass, 0x1318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TagActivatedSound, 0x1320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TagExpiredSound, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MotionlessPitchLerpDelay, 0x1330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_LI7Z, 0x1334);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SharkTeethMeshName, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SharkMaterialName, 0x1340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SharkScarredMaterialName, 0x1348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TeethMaterialName, 0x1350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, HeadMaterialName, 0x1358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TailMaterialName, 0x1360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BodyMaterialName, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FinsMaterialName, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, HitAudioName, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, HardHitAudioName, 0x1380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, PainSoundDelay, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_0MC3, 0x138C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TeethSkeletalMesh, 0x1390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, HeadSkeletalMesh, 0x1398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TailSkeletalMesh, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BodySkeletalMesh, 0x13A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FinsSkeletalMesh, 0x13B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_OHKH, 0x13B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, StickHoldTimeForSprint, 0x141C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, AutoAimSpeedMin, 0x1420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, AutoAimSpeedMax, 0x1424);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, AutoAimSpeedMinDot, 0x1428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, AutoAimSpeedMaxDot, 0x142C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, StickForwardThresholdForSprint, 0x1430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, StickForwardThresholdToCancelSprint, 0x1434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TimeToBlendToFullSprint, 0x1438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_AT5J, 0x143C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SprintTier1, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SprintTier2, 0x1450);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SprintTier3, 0x1460);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MotherSharkMesh, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ScarredAdultMesh, 0x1478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MotherSharkStage, 0x1480);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, PupSharkStage, 0x1570);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, TeenSharkStage, 0x1660);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, AdultSharkStage, 0x1750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ElderSharkStage, 0x1840);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MegaSharkStage, 0x1930);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_3OVE, 0x1A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, bBitingVulnerableCharacter, 0x1A2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_7PZN, 0x1A2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, PerfectEntrySplash, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, PerfectTrailBubbles, 0x1A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SmallEntrySplash, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SmallTrailBubbles, 0x1A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MediumEntrySplash, 0x1A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MediumTrailBubbles, 0x1A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LargeEntrySplash, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LargeTrailBubbles, 0x1A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ExitWaterSplash, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ExitWaterSplashSound, 0x1A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ExitWaterTrail, 0x1A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ActiveTrail, 0x1A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FloppingTakeoffFromWater, 0x1A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FloppingLandInWater, 0x1A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, EnterKnifingFromUnderwaterTrail, 0x1AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, EnterKnifingFromBreachTrail, 0x1AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ExitKnifingUnderwaterTrail, 0x1AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_5Y7G, 0x1AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, CameraInterpolationSpeed, 0x1AFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, bFreeMoveEnabled, 0x1B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_J8QT, 0x1B01);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, DoubleTapTimeWindow, 0x1B14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ReverseMovementModifier, 0x1B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, StrafeMovementModifier, 0x1B1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, InputComponentClass, 0x1B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_D3Y6, 0x1B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MinWhipshotAimDistance, 0x1B4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MaxWhipshotAimDistance, 0x1B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, WhipshotAimTraceChannel, 0x1B54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_II8Y, 0x1B55);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, WhipShotMassDifferential, 0x1B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SlamDamageMassDifferential, 0x1B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, bPlayerOnLand, 0x1B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, CurrentActionMode, 0x1B69);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_2I71, 0x1B6A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, DamageEffectScreenSpaceParticle, 0x1B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LoopingMeshParticle, 0x1B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_IUV6, 0x1B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MaxLockOnDistance, 0x1B9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_TTA9, 0x1BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BeginLockOnSound, 0x1BA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, EndLockOnSound, 0x1BAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_WUB1, 0x1BB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SharkMaterialParams, 0x1BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, CachedMovementComponent, 0x1BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MovementLoop, 0x1BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MovementLoopStop, 0x1BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, WaterLineMovementLoop, 0x1BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, WaterLineMovementLoopStop, 0x1BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FoliageDisplacementScalingFactor, 0x1BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BaseFogRevealDistance, 0x1BEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LastRevealedMapLocation, 0x1BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, CurrentMovementAudioEvent, 0x1BFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LastTickRotation, 0x1C04);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, AudioPitchRange, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, AudioYawRange, 0x1C14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ScreenEffectsPPM, 0x1C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ScreenEffectsPPMI, 0x1C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, Param_ScreenEffect_Pain, 0x1C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FadeTime_ScreenEffect_Pain, 0x1C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_FAML, 0x1C34);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, Param_ScreenEffect_SpeedBurst, 0x1C38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FadeInTime_ScreenEffect_SpeedBurst, 0x1C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FadeOutTime_ScreenEffect_SpeedBurst, 0x1C44);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, Duration_ScreenEffect_SpeedBurst, 0x1C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LastSpeedBurstTime, 0x1C4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_VYA4, 0x1C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, Param_ScreenEffect_Drowning, 0x1C54);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_8CAE, 0x1C5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, Param_ScreenEffect_LowHealth, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_02FQ, 0x1C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SonarEffectsPPM, 0x1C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SonarEffectsPPMI, 0x1C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, QueuedInputs, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_2CYU, 0x1C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SharkFlipSpeed, 0x1C94);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SharkAirTurnSpeed, 0x1C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, bFaceCameraOnLanding, 0x1C9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_0KCL, 0x1C9D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BreachCameraAngle, 0x1CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, KnifingPitchControllerGravity, 0x1CA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, KnifingRelaxedPitch, 0x1CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, KnifingJumpTestAngle, 0x1CAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FallingMaxPitch, 0x1CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, FallingMinPitch, 0x1CB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ThrashingInputDampeningMultiplier, 0x1CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_DAW0, 0x1CBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, LeftGillGrabBlood, 0x1CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, RightGillGrabBlood, 0x1CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BreachCameraPitchTransitionSpeed, 0x1CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BreachCameraYawTransitionSpeed, 0x1CD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BreachSharkRotationCorrectionSpeed, 0x1CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, KnifingCameraAngle, 0x1CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, KnifingCameraPitchTransitionSpeed, 0x1CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, KnifingCameraYawTransitionSpeed, 0x1CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BreachControlImpulse, 0x1CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_8Q7S, 0x1CEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SlamVehicleHitEffects, 0x1CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SlamCharacterHitEffects, 0x1D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SlamAttackCooldown, 0x1D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SlamDamageMinDamagePct, 0x1D14);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SlamDamageMaxDamagePct, 0x1D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, SlamDamageSpeedPctThreshold, 0x1D1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MaxSpeedMultiplier, 0x1D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, EvadeSlamDamageMultiplier, 0x1D24);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_6WCD, 0x1D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MinVehicleDamageImpulse, 0x1D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MinVehicleImpactDamageInterval, 0x1D3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, VehicleDamageHitEffects, 0x1D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, PlayerTargetingSystem, 0x1D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, bUseTargetSystemRotation, 0x1D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_TRG0, 0x1D59);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BiteLungeCooldownTime, 0x1D64);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MaxBiteLungeTime, 0x1D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BiteLungeInterpSpeed, 0x1D6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BiteLungeMaxTargetHeight, 0x1D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BiteLungeMinCameraDot, 0x1D74);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BiteLungeGroundLeapZ, 0x1D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BiteLungeStartAudioEvent, 0x1D7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, BiteLungeStopAudioEvent, 0x1D84);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_NUHT, 0x1D8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, bDebugWaveHeights, 0x1DB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_6RA4, 0x1DB2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, DebugWaveHeightGridCount, 0x1DB4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, bDebugAIVision, 0x1DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_7BIV, 0x1DB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, OnDangerSenseUpdatedDelegate, 0x1E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, DangerSensePSC, 0x1E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, DangerSenseEventName, 0x1E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, DangerSenseSocketName, 0x1E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, GainedMutagenParticle, 0x1E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MutagenSocketName, 0x1E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, ActiveMutagenParticle, 0x1E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, UnknownData_CK6R, 0x1E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MutagenHead02crv, 0x1E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MutagenHead01crv, 0x1E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MutagenBodyMaincrv, 0x1E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MutagenBody01crv, 0x1E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MutagenBody02crv, 0x1E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MutagenBody03crv, 0x1EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MutagenBody04crv, 0x1EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MutagenBody05crv, 0x1EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MutagenBody06crv, 0x1EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MutagenBody07crv, 0x1EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkCharacter, MutagenBody08crv, 0x1EC8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_PlayerSharkCharacter, 0x1ED0);
		}

		// class AME_InventoryActor : public AME_PlayerSharkCharacter
		TEST_METHOD(Class__Maneater__ME_InventoryActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, OwningCharacter, 0x1ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, UnknownData_46MO, 0x1ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, PupAnimInstance, 0x1FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, TeenAnimInstance, 0x1FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, AdultAnimInstance, 0x1FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, ElderAnimInstance, 0x1FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, MegaAnimInstance, 0x1FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, PupMeshLocation, 0x1FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, TeenMeshLocation, 0x1FFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, AdultMeshLocation, 0x2008);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, MegaMeshLocation, 0x2014);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, ElderMeshLocation, 0x2020);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, UnknownData_INVL, 0x202C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, SceneCaptureComponent, 0x2030);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InventoryActor, UnknownData_77K5, 0x2038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_InventoryActor, 0x2040);
		}

		// class AME_InWorldWidgetCreator : public AActor
		TEST_METHOD(Class__Maneater__ME_InWorldWidgetCreator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InWorldWidgetCreator, UnknownData_FNZR, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InWorldWidgetCreator, RelatedObjectiveType, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InWorldWidgetCreator, bRegisterWithSonarManager, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_InWorldWidgetCreator, UnknownData_ACUL, 0x022B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_InWorldWidgetCreator, 0x0230);
		}

		// class AME_LandmarkObjective : public AActor
		TEST_METHOD(Class__Maneater__ME_LandmarkObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective, UnknownData_EMMB, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective, Billboard, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective, Box, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective, ParticleSpawnLocation, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective, PointLight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective, MaxDistanceVisible, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective, IsAboveWater, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective, bIsActive, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective, bIsDiscovered, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective, UnknownData_JW0G, 0x024F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_LandmarkObjective, 0x0250);
		}

		// class UME_MapWidgetInterface : public UInterface
		TEST_METHOD(Class__Maneater__ME_MapWidgetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_MapWidgetInterface, 0x0028);
		}

		// class UME_MercunaNavigableInterface : public UInterface
		TEST_METHOD(Class__Maneater__ME_MercunaNavigableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_MercunaNavigableInterface, 0x0028);
		}

		// class UME_MercunaNavigationComponent : public UMercunaNavigationComponent
		TEST_METHOD(Class__Maneater__ME_MercunaNavigationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_MercunaNavigationComponent, UnknownData_8RJ1, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_MercunaNavigationComponent, 0x0148);
		}

		// class AME_MercunaNavOctree : public AMercunaNavOctree
		TEST_METHOD(Class__Maneater__ME_MercunaNavOctree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_MercunaNavOctree, bBoatOctree, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_MercunaNavOctree, UnknownData_6A4D, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_MercunaNavOctree, 0x02C0);
		}

		// class AME_MercunaNavVolume : public AMercunaNavVolume
		TEST_METHOD(Class__Maneater__ME_MercunaNavVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_MercunaNavVolume, 0x0268);
		}

		// class UME_MercunaObstacleComponent : public UMercunaObstacleComponent
		TEST_METHOD(Class__Maneater__ME_MercunaObstacleComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_MercunaObstacleComponent, 0x0200);
		}

		// class UMontageInstance : public UObject
		TEST_METHOD(Class__Maneater__MontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, MontagesToPlay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, PlayRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, SectionName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, bStopMontageOnHit, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, UnknownData_159Y, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, StopMontageBlendOutTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, bStopMontageOnExitWater, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, UnknownData_BJDE, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, UnknownData_TW5K, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, bSwitchToFlying, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, UnknownData_LD30, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, HomingRotationSpeed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, RootMotionScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, BaseRootMotionDistance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, UnknownData_4FGS, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, HitEffectClasses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, GameplayEffectClassesWhileAnimating, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, MontageStartedSound, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, MontageEndedSound, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, CamAnim, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, UnknownData_GJ9D, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, CamRate, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, CamBlendInTime, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, CamBlendOutTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, CamScale, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, bLoop, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, UnknownData_DD9X, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, LoopDuration, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, WakeUpSectionName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontageInstance, UnknownData_4JTM, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMontageInstance, 0x0100);
		}

		// class UWildlifeMontageInstance : public UMontageInstance
		TEST_METHOD(Class__Maneater__WildlifeMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, bIsLunge, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, bUseDynamicLungeDistance, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, UnknownData_CSHL, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, DynamicLungeDistance, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, bContinueToHoneIn, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, UnknownData_NGLB, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, DropFocusRange, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, bSuccessfulAttackWithVictim, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, UnknownData_9U54, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, LungeSuccessful, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, LungeMissed, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, GameplayEffectsOnLungeSuccess, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, GameplayEffectsOnLungeMissed, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWildlifeMontageInstance, GameplayEffectsOnLungeCompletedAndMissed, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWildlifeMontageInstance, 0x0168);
		}

		// class UDirectionalMontageInstance : public UWildlifeMontageInstance
		TEST_METHOD(Class__Maneater__DirectionalMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalMontageInstance, DirectionalMontagesToPlay, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalMontageInstance, 0x0178);
		}

		// class UME_NavigationSystem : public UNavigationSystemV1
		TEST_METHOD(Class__Maneater__ME_NavigationSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_NavigationSystem, PathRequestQueue, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_NavigationSystem, UnknownData_IHLG, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_NavigationSystem, 0x0588);
		}

		// class AME_NutrientCache : public AME_ThrashableActor
		TEST_METHOD(Class__Maneater__ME_NutrientCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_NutrientCache, UnknownData_IZ2X, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_NutrientCache, OnPhysicsStateChanged, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_NutrientCache, bCauseFluidDisturbance, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_NutrientCache, bDestroyOnDeath, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_NutrientCache, UnknownData_BLZX, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_NutrientCache, FragmentTypes, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_NutrientCache, BuoyancyComponent, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_NutrientCache, DistanceSignificanceComponent, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_NutrientCache, UnknownData_RL6G, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_NutrientCache, 0x0370);
		}

		// class AME_NutrientCache_Skeletal : public AME_NutrientCache
		TEST_METHOD(Class__Maneater__ME_NutrientCache_Skeletal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_NutrientCache_Skeletal, 0x0370);
		}

		// class AME_NutrientCache_Static : public AME_NutrientCache
		TEST_METHOD(Class__Maneater__ME_NutrientCache_Static)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_NutrientCache_Static, 0x0370);
		}

		// class UME_ObjectiveConditionBase : public UObject
		TEST_METHOD(Class__Maneater__ME_ObjectiveConditionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveConditionBase, ActivityTaskId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ObjectiveConditionBase, 0x0038);
		}

		// class UME_ObjectiveCondition_GamePercentComplete : public UME_ObjectiveConditionBase
		TEST_METHOD(Class__Maneater__ME_ObjectiveCondition_GamePercentComplete)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_GamePercentComplete, RequiredPercentComplete, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_GamePercentComplete, ObjectiveManager, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_GamePercentComplete, UnknownData_VG4M, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ObjectiveCondition_GamePercentComplete, 0x0048);
		}

		// class UME_ObjectiveCondition_InfamyRank : public UME_ObjectiveConditionBase
		TEST_METHOD(Class__Maneater__ME_ObjectiveCondition_InfamyRank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_InfamyRank, InfamyRank, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_InfamyRank, BountyManager, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_InfamyRank, UnknownData_6XKR, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ObjectiveCondition_InfamyRank, 0x0048);
		}

		// class UME_ObjectiveCondition_ObjectiveComplete : public UME_ObjectiveConditionBase
		TEST_METHOD(Class__Maneater__ME_ObjectiveCondition_ObjectiveComplete)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_ObjectiveComplete, Region, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_ObjectiveComplete, ObjectiveType, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_ObjectiveComplete, UnknownData_8TRH, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_ObjectiveComplete, NumberToComplete, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_ObjectiveComplete, ObjectiveManager, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ObjectiveCondition_ObjectiveComplete, 0x0048);
		}

		// class UME_ObjectiveCondition_PlayerLevel : public UME_ObjectiveConditionBase
		TEST_METHOD(Class__Maneater__ME_ObjectiveCondition_PlayerLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_PlayerLevel, PlayerLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_PlayerLevel, PlayerShark, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_PlayerLevel, UnknownData_RABN, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ObjectiveCondition_PlayerLevel, 0x0048);
		}

		// class UME_ObjectiveCondition_RegionPercentComplete : public UME_ObjectiveConditionBase
		TEST_METHOD(Class__Maneater__ME_ObjectiveCondition_RegionPercentComplete)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_RegionPercentComplete, RequiredPercentComplete, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_RegionPercentComplete, Region, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_RegionPercentComplete, UnknownData_V7IT, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_RegionPercentComplete, ObjectiveManager, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ObjectiveCondition_RegionPercentComplete, 0x0048);
		}

		// class UME_ObjectiveCondition_SharkGrowthStageReached : public UME_ObjectiveConditionBase
		TEST_METHOD(Class__Maneater__ME_ObjectiveCondition_SharkGrowthStageReached)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_SharkGrowthStageReached, RequiredGrowthStage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_SharkGrowthStageReached, UnknownData_LKEE, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_SharkGrowthStageReached, SharkState, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_SharkGrowthStageReached, UnknownData_DFJ6, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ObjectiveCondition_SharkGrowthStageReached, 0x0048);
		}

		// class UME_ObjectiveCondition_TutorialComplete : public UME_ObjectiveConditionBase
		TEST_METHOD(Class__Maneater__ME_ObjectiveCondition_TutorialComplete)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectiveCondition_TutorialComplete, TutorialManager, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ObjectiveCondition_TutorialComplete, 0x0040);
		}

		// class UME_ObjectiveCondition_ManuallyAdvanceOnly : public UME_ObjectiveConditionBase
		TEST_METHOD(Class__Maneater__ME_ObjectiveCondition_ManuallyAdvanceOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ObjectiveCondition_ManuallyAdvanceOnly, 0x0038);
		}

		// class AME_ObjectiveSpawnActor : public AActor
		TEST_METHOD(Class__Maneater__ME_ObjectiveSpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ObjectiveSpawnActor, UnknownData_3V0P, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_ObjectiveSpawnActor, 0x0228);
		}

		// class AME_OceanBloodDecal : public AActor
		TEST_METHOD(Class__Maneater__ME_OceanBloodDecal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanBloodDecal, TargetDecalScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanBloodDecal, TargetDecalOpacity, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanBloodDecal, CurrentDecalOpacity, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanBloodDecal, UnknownData_B76B, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanBloodDecal, MeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanBloodDecal, UnknownData_PNYS, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_OceanBloodDecal, 0x0240);
		}

		// class UME_OceanCameraMesh : public UStaticMeshComponent
		TEST_METHOD(Class__Maneater__ME_OceanCameraMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanCameraMesh, MeshVisibility, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanCameraMesh, UnknownData_PY1V, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanCameraMesh, GridSnapSize, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanCameraMesh, UnknownData_1NNC, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_OceanCameraMesh, 0x04B0);
		}

		// class AME_OceanManager : public AActor
		TEST_METHOD(Class__Maneater__ME_OceanManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, OceanPhysicsVolume, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, UnknownData_SCIK, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, OceanSurfaceMaterialInstance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, OceanRoofMaterialInstance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, SurfaceComponentNear, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, SurfaceComponentFar, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, RoofComponentNear, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, RoofComponentFar, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, OceanMPC, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, OceanMPCInstance, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, PostProcessComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, GlobalWaveDirection, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, GlobalWaveSpeed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, GlobalWaveAmplitude, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, DistanceCheck, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, UnknownData_7S56, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, WaveClusters, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, WaveSetOffsetsOverride, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, UnknownData_HVEE, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, ChoppyWaveSize, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, ChoppyWaveSpeed, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, ChoppyWaveHeight, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, WaveChoppinessBias, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, WaveChoppinessDimensions, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, WaveChoppinessTexture, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, WaveChoppinessPixels, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, WaveModulationMapDimensions, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, ModulationPower, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, MinimumModulation, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, WaveModulationTexture, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, WaveModulationPixels, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidUpdateRate, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidSurfaceResolution, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidSimRenderTargetFormat, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidNormalsRenderTargetFormat, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, UnknownData_1CGS, 0x0322);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidRippleSplatMaterial, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidRippleSplatMID, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidSimMaterial, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidColorSplatMaterial, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidColorSplatMID, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidNormalMaterial, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidParameters, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidHeight0, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidHeight1, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidHeight2, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidHeightNormalRT, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, bFluidSimNeedsClear, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, UnknownData_BL69, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidSimMID, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidComputeNormalMID, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, bIgnoreDistantDisturbances, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, UnknownData_ODJM, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidHeightState, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, UnknownData_7X5X, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, FluidSimSizeInWorld, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, UnknownData_7PRG, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, bTwTranslucencySortingEnabled, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OceanManager, UnknownData_4EUR, 0x03D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_OceanManager, 0x03E0);
		}

		// class AME_OceanPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Maneater__ME_OceanPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_OceanPhysicsVolume, 0x0268);
		}

		// class UME_OceanPostProcessComponent : public UPostProcessComponent
		TEST_METHOD(Class__Maneater__ME_OceanPostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanPostProcessComponent, OceanManager, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanPostProcessComponent, UnknownData_HPR6, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_OceanPostProcessComponent, 0x0760);
		}

		// class AME_OceanSurfaceEmitter : public AEmitter
		TEST_METHOD(Class__Maneater__ME_OceanSurfaceEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_OceanSurfaceEmitter, 0x0270);
		}

		// class UME_OceanSurfaceParticleSystemComponent : public UParticleSystemComponent
		TEST_METHOD(Class__Maneater__ME_OceanSurfaceParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanSurfaceParticleSystemComponent, OverrideVelocity, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanSurfaceParticleSystemComponent, bShouldOverrideIntensity, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanSurfaceParticleSystemComponent, UnknownData_IIK4, 0x0689);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanSurfaceParticleSystemComponent, OverrideIntensity, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanSurfaceParticleSystemComponent, bCalculateSurfaceNormal, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanSurfaceParticleSystemComponent, UnknownData_5WDI, 0x0691);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanSurfaceParticleSystemComponent, SurfaceNormal, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanSurfaceParticleSystemComponent, WaveModulation, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanSurfaceParticleSystemComponent, UnknownData_EBQP, 0x06A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_OceanSurfaceParticleSystemComponent, 0x0710);
		}

		// class UME_OceanTileComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Maneater__ME_OceanTileComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_OceanTileComponent, 0x0640);
		}

		// class AME_OverlapDamageProjectile : public AActor
		TEST_METHOD(Class__Maneater__ME_OverlapDamageProjectile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OverlapDamageProjectile, DamageRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OverlapDamageProjectile, UnknownData_26NK, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OverlapDamageProjectile, ProjectileParticleComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OverlapDamageProjectile, ProjectileMovement, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OverlapDamageProjectile, DamageEffects, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OverlapDamageProjectile, HitActors, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OverlapDamageProjectile, ProjectileDamageNoise, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_OverlapDamageProjectile, UnknownData_XH82, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_OverlapDamageProjectile, 0x0268);
		}

		// class UME_ParticleModuleManeaterBase : public UParticleModule
		TEST_METHOD(Class__Maneater__ME_ParticleModuleManeaterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ParticleModuleManeaterBase, 0x0030);
		}

		// class UME_ParticleModuleDetachFromOwner : public UME_ParticleModuleManeaterBase
		TEST_METHOD(Class__Maneater__ME_ParticleModuleDetachFromOwner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleDetachFromOwner, TimeToDetach, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ParticleModuleDetachFromOwner, 0x0060);
		}

		// class UME_ParticleModuleDynamiclyEnabled : public UME_ParticleModuleManeaterBase
		TEST_METHOD(Class__Maneater__ME_ParticleModuleDynamiclyEnabled)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleDynamiclyEnabled, bCanSpawnAboveWater, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleDynamiclyEnabled, bCanSpawnBelowWater, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleDynamiclyEnabled, bCheckOnSpawnOnly, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleDynamiclyEnabled, UnknownData_6UBL, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ParticleModuleDynamiclyEnabled, 0x0040);
		}

		// class UME_ParticleModuleDynamicTranslucencySort : public UME_ParticleModuleManeaterBase
		TEST_METHOD(Class__Maneater__ME_ParticleModuleDynamicTranslucencySort)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleDynamicTranslucencySort, TranslucencySortValueAboveWater, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleDynamicTranslucencySort, TranslucencySortValueBelowWater, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ParticleModuleDynamicTranslucencySort, 0x0038);
		}

		// class UME_ParticleModuleFishball : public UME_ParticleModuleManeaterBase
		TEST_METHOD(Class__Maneater__ME_ParticleModuleFishball)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleFishball, DisperseAkEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleFishball, UnknownData_57ZY, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ParticleModuleFishball, 0x0088);
		}

		// class UME_ParticleModuleFluidEffect : public UParticleModuleColorBase
		TEST_METHOD(Class__Maneater__ME_ParticleModuleFluidEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleFluidEffect, FluidEffectType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleFluidEffect, UnknownData_2Y7W, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleFluidEffect, EffectStrength, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleFluidEffect, EffectRadiusScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleFluidEffect, MaxEffectsPerUpdate, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ParticleModuleFluidEffect, 0x0040);
		}

		// class UME_ParticleModuleSortValue : public UME_ParticleModuleManeaterBase
		TEST_METHOD(Class__Maneater__ME_ParticleModuleSortValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleSortValue, TranslucencySortValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ParticleModuleSortValue, UnknownData_PXQ4, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ParticleModuleSortValue, 0x0038);
		}

		// class UME_WeaponComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Maneater__ME_WeaponComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, WeaponType, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, UnknownData_X8R4, 0x04A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MuzzleSocketName, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, EjectionPortSocketName, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, bHasFiringAnimNotify, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, bHideMeshDuringReload, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, UnknownData_4FU9, 0x04B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, FireRate, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, ReloadTime, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, ShotsPerMagazine, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, Range, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, Damage, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, Spread, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, ProjectileAdditiveImpulse, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, ProjectileFireForce, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, WeaponProjectiles, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, TargetingDelay, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, LaserTrackingSpeed, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, LaserLockOnThresholdDist, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, TimeUntilFullLaserLock, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, TimeBeforeLaserLockLost, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MaximumTargetVelocity, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MaximumVelocityExceededTime, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, bEvadeBreaksLock, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, UnknownData_3RX5, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MaximumEvadedTime, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, bLockOnPreventsEvade, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, UnknownData_H11I, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, BaseTargetingCircleScale, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, TargetingPctConsideredLocked, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, bHasLoopingFireSound, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, bOneFireSoundPerReload, 0x0565);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, UnknownData_2JUE, 0x0566);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, FireSound_Looping, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, StopFiringSound, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, FireSound, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, RTPCLockOnTimeName, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, LockOnSound, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, ReloadSound, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MuzzleFlash, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, ShellCasingMesh, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, LaserPointerBeamParticle, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, LaserPointerDotParticle, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, LaserPointerBeamParticleComponent, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, LaserPointerDotParticleComponent, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, AnimationSets, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, DiverSets, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, UnknownData_A2BC, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MeleeAttackCooldownTimer, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, CastAnimBP, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, AttachmentBone, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, UnknownData_D2TM, 0x0619);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MeleeAttackDistance, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MeleeAttackAnimations, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MeleeDelayTime, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, UnknownData_ODHO, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MinFireForce, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MaxFireForce, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, FireForceScale, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, RandomFiringOffset, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, UnknownData_NMCK, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, bCanPredictTargetMovement, 0x06BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, UnknownData_58GD, 0x06BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, AimPredictionMultiplier, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MECharacterOwner, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, TargetedActor, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, MeleeAttackCooldown, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WeaponComponent, UnknownData_K2BI, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_WeaponComponent, 0x06E0);
		}

		// class UME_PassengerAttachment : public UME_WeaponComponent
		TEST_METHOD(Class__Maneater__ME_PassengerAttachment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PassengerAttachment, 0x06E0);
		}

		// class UME_PathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__Maneater__ME_PathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PathFollowingComponent, UnknownData_VP5C, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PathFollowingComponent, 0x0278);
		}

		// class UME_PathRequestQueue : public UObject
		TEST_METHOD(Class__Maneater__ME_PathRequestQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PathRequestQueue, DecayQueueHandle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PathRequestQueue, PathRequestQueue, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PathRequestQueue, 0x0040);
		}

		// class AME_PathWisp : public AActor
		TEST_METHOD(Class__Maneater__ME_PathWisp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PathWisp, WispHead, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_PathWisp, 0x0228);
		}

		// class UME_PawnSpawnInterface : public UInterface
		TEST_METHOD(Class__Maneater__ME_PawnSpawnInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PawnSpawnInterface, 0x0028);
		}

		// class UME_PhysicalImpactResponse : public UObject
		TEST_METHOD(Class__Maneater__ME_PhysicalImpactResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PhysicalImpactResponse, GlobalLimit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PhysicalImpactResponse, PerObjectLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PhysicalImpactResponse, bProcessScrapes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PhysicalImpactResponse, UnknownData_K7W7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PhysicalImpactResponse, ScrapeAngle, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PhysicalImpactResponse, UnknownData_LMDA, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PhysicalImpactResponse, 0x0040);
		}

		// class UME_PhysicalMaterial : public UPhysicalMaterial
		TEST_METHOD(Class__Maneater__ME_PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PhysicalMaterial, ImpactResponse, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PhysicalMaterial, 0x0088);
		}

		// class AME_PlayerCameraManager : public APlayerCameraManager
		TEST_METHOD(Class__Maneater__ME_PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerCameraManager, UnknownData_NR4X, 0x2740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerCameraManager, CameraEnterWaterSound, 0x2748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerCameraManager, CameraExitWaterSound, 0x2750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerCameraManager, TransparencyCaptureComponent, 0x2758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerCameraManager, UnknownData_DG8Y, 0x2760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_PlayerCameraManager, 0x2770);
		}

		// class UME_PlayerEvolution : public UDataAsset
		TEST_METHOD(Class__Maneater__ME_PlayerEvolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, EvolutionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, EvolutionDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, MinGrowthStageRequirement, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, UnknownData_02RY, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, AssociatedSlots, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, EvolutionSetType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, GrantsAbility, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, UnknownData_6QBR, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, AbilityIcon, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, AbilityName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, AbilityDescription, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, EquippedVFX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, EvolutionIcon, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, EvolutionGameplayEffects, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerEvolution, EvolutionUpgradePrices, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerEvolution, 0x00F0);
		}

		// class UME_PlayerObjective : public UObject
		TEST_METHOD(Class__Maneater__ME_PlayerObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, UnknownData_VXPD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, AvailableConditions, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, bCanSaveGame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, UnknownData_NKIT, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, NutritionTableRow, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, Type, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, UnknownData_7NDY, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, Name, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, Description, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, ShortDescription, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, SubtitleText, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, ActivityTaskId, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, State, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, AssignedRegion, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, UnknownData_R6ST, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, CompletionPoints, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, StartNarratorEventName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, FinishNarratorEventName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, bStoryObjective, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, UnknownData_BVWO, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, ObjectiveImage, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, AudioLog, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, bAutoTrack, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, bTracked, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, UnknownData_2D8W, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjective, OutOfRegionWidget, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjective, 0x0118);
		}

		// class UME_ObjectCollectObjective : public UME_PlayerObjective
		TEST_METHOD(Class__Maneater__ME_ObjectCollectObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectCollectObjective, SubObjectiveStates, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectCollectObjective, SubObjectivePositions, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectCollectObjective, TrackedIndex, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ObjectCollectObjective, UnknownData_ZPHY, 0x013C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ObjectCollectObjective, 0x0140);
		}

		// class UME_PlayerObjectiveLandmark : public UME_ObjectCollectObjective
		TEST_METHOD(Class__Maneater__ME_PlayerObjectiveLandmark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveLandmark, RequiredActors, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjectiveLandmark, 0x0150);
		}

		// class UME_PlayerObjectiveNutrientCache : public UME_ObjectCollectObjective
		TEST_METHOD(Class__Maneater__ME_PlayerObjectiveNutrientCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveNutrientCache, NutrientCaches, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveNutrientCache, NumCachesToTriggerObjective, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveNutrientCache, UnknownData_F6C4, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjectiveNutrientCache, 0x0158);
		}

		// class UME_PlayerObjectiveCollectable : public UME_ObjectCollectObjective
		TEST_METHOD(Class__Maneater__ME_PlayerObjectiveCollectable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveCollectable, AllCollectables, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveCollectable, NumCollectablesToTriggerObjective, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveCollectable, UnknownData_G9JK, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjectiveCollectable, 0x0158);
		}

		// class UME_PlayerObjectiveGrates : public UME_ObjectCollectObjective
		TEST_METHOD(Class__Maneater__ME_PlayerObjectiveGrates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveGrates, AllGrates, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjectiveGrates, 0x0150);
		}

		// class UME_PlayerObjectiveGates : public UME_ObjectCollectObjective
		TEST_METHOD(Class__Maneater__ME_PlayerObjectiveGates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveGates, AllGates, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjectiveGates, 0x0150);
		}

		// class UME_PlayerObjectiveCustom : public UME_PlayerObjective
		TEST_METHOD(Class__Maneater__ME_PlayerObjectiveCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveCustom, AssociatedActor, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjectiveCustom, 0x0140);
		}

		// class UME_PlayerObjectiveGrotto : public UME_PlayerObjective
		TEST_METHOD(Class__Maneater__ME_PlayerObjectiveGrotto)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveGrotto, AssociatedGrotto, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveGrotto, GrottoPosition, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjectiveGrotto, 0x0148);
		}

		// class UME_PlayerObjectiveCutscene : public UME_PlayerObjective
		TEST_METHOD(Class__Maneater__ME_PlayerObjectiveCutscene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveCutscene, CutsceneWidgetActor, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveCutscene, CutscenePosition, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveCutscene, TriggerDistance, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveCutscene, LevelCinematicName, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveCutscene, bEndBountyWhenTriggered, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveCutscene, UnknownData_LVSX, 0x0159);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjectiveCutscene, 0x0160);
		}

		// class UME_PlayerObjectiveBoss : public UME_PlayerObjectiveCutscene
		TEST_METHOD(Class__Maneater__ME_PlayerObjectiveBoss)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveBoss, BossBoatClass, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveBoss, BossBoat, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveBoss, BossFightSequence, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveBoss, UnknownData_ARFE, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveBoss, BossAnnouncementText, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjectiveBoss, 0x0190);
		}

		// class UME_PlayerObjectiveDestroyThrashable : public UME_PlayerObjective
		TEST_METHOD(Class__Maneater__ME_PlayerObjectiveDestroyThrashable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveDestroyThrashable, SpawnPosition, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveDestroyThrashable, UnknownData_LW6V, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveDestroyThrashable, SpawnClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerObjectiveDestroyThrashable, SpawnedActor, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjectiveDestroyThrashable, 0x0138);
		}

		// class UME_StoryEvent : public UObject
		TEST_METHOD(Class__Maneater__ME_StoryEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, ConditionsToActivate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, BossBoatClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, BossBoat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, BossAnnouncementText, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, EnemiesToSpawn, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, LevelCinematicName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, bUseTriggerLocation, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, UnknownData_BO42, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, TriggerLocation, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, TriggerDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, bHasTriggered, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, UnknownData_Z4U5, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, DelayBeforeTriggering, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, UnknownData_ZQME, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, EventTitle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, EpisodeNumber, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, UnknownData_F78W, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, ActivityId, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, GrottoActivityId, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, ActivityIdsUsedBeforeGrotto, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_StoryEvent, UnusedActivityIdsForEpisode, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_StoryEvent, 0x00F0);
		}

		// class UME_RegionObjectiveCollection : public UObject
		TEST_METHOD(Class__Maneater__ME_RegionObjectiveCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_RegionObjectiveCollection, Objectives, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_RegionObjectiveCollection, Region, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_RegionObjectiveCollection, UnknownData_3E8Z, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_RegionObjectiveCollection, 0x0040);
		}

		// class AME_PlayerObjectiveManager : public AActor
		TEST_METHOD(Class__Maneater__ME_PlayerObjectiveManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, OwningGameMode, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, UnknownData_RXPH, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, LastBossKilled, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, UnknownData_LH4X, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, PoisonBeginStoryIndex, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, ObjectiveCompleteDelegate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, LandmarkFoundDelegate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, ObjectiveStartedDelegate, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, ObjectiveUpdatedDelegate, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, OnBossFightAvailableDelegate, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, OnNutrientCacheDestroyed, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, ObjectiveStateChangedDelegate, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, ObjectiveDiscoveredDelegate, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, ObjectiveTrackDelegate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, ObjectiveFirstBossDelegate, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, StoryEventProgressDelegate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, AdvancedToNextEpisodeDelegate, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, NewQuestAvailableChangedDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, HUDErrorMessageDelegate, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, AllInWorldWidgets, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, Regions, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, UnknownData_E2VX, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, AllObjectives, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, UnavailableObjectives, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, AvailableObjectives, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, CompletedObjectives, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, TickedObjectives, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, StoryEvents, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, ActiveStoryIndex, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, StoryEventConditionsComplete, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, bNewQuestsAvailable, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, UnknownData_411P, 0x03B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, ScalyPeteBoat, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, UnknownData_S1HL, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, CachedConditionResults, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, UnknownData_0IZF, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, PlayerWaypoint, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, PlayerWaypointClass, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, WorldMarkerPSC, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, WorldMarkerParticleSystem, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerObjectiveManager, OutOfRegionWidgetClass, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_PlayerObjectiveManager, 0x0420);
		}

		// class AME_PlayerSharkController : public APlayerController
		TEST_METHOD(Class__Maneater__ME_PlayerSharkController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, UnknownData_I90K, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, PauseAllAudio, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, ResumeAllAudio, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, NearbyAIs, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, bFirstPossession, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, UnknownData_Y0VG, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, WorldMapWidget, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, UnknownData_7MSF, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, OnCinematicModeChanged, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, UnknownData_2JQI, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, BeachCrowdAsset, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, BeachCrowdComponent, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, bDebugCrowdPosition, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, UnknownData_X04I, 0x0611);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, PreviousAveragedPosition, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, CrowdPositionInterpSpeed, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, HighestHumanAlertLevel, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkController, UnknownData_7JJD, 0x0628);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_PlayerSharkController, 0x0650);
		}

		// class UME_PlayerSharkMovementComponent : public UME_AnimalMovementComponent
		TEST_METHOD(Class__Maneater__ME_PlayerSharkMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, WaterSurfaceLockMaxRequiredAngle, 0x07EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, WaterSurfaceLockMinRequiredAngle, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, UnknownData_7ZZV, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, CruisingWaterInputDeadzone, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, WaterSurfaceEntryDistance, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, UnknownData_T6GT, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, WaterEnteredDelegate, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, WaterBreachDelegate, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, OnSwimmingToBreachDelegate, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, OnPlayerMovementModeChangedDelegate, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, AirbornVelocityLimitMultiplier, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, UnknownData_A6W9, 0x084C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, BoatFriction, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, TimeForForcedSurfaceLock, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, MaxSpeedForSurfaceLock, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, MinZSpeedForSurfaceLock, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, MinDeltaDotForReentryVelocityMult, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, MaxDeltaDotForReentryVelocityMult, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, MinReentryVelocityMult, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, MaxReentryVelocityMult, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, UnknownData_XSIW, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, SharkOwner, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, BreachAngleAdjustmentCurve, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerSharkMovementComponent, UnknownData_ZZQE, 0x0888);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerSharkMovementComponent, 0x08A0);
		}

		// class AME_PlayerSharkState : public APlayerState
		TEST_METHOD(Class__Maneater__ME_PlayerSharkState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, UnknownData_FEWM, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, OnNutrientsGained, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, OnNutrientsSpent, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, OnPlayerLevelChanged, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, OnGrowthStageChanged, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, OnGrowthStageAvailable, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CurrentProteinReserve, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CurrentFatReserve, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CurrentMineralReserve, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CurrentMutagenReserve, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CurrentExpAmount, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CurrentPlayerLevel, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CumulativeXPGainedFromObjectives, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CumulativeXPGainedFromBounties, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CumulativeXPGainedFromEating, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CumulativeXPGainedFromLandmarks, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CumulativeXPGainedFromCaches, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CumulativeXPGainedFromCollectables, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CumulativeXPGainedFromCheats, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, GrowthStageBehindTheScenesLevel, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, UnknownData_RSGT, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, TheoreticalPlayerLevel, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CurrentGrowthStage, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, UnknownData_7I3M, 0x03B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, EvolutionStageSettings, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, OnWaypointDestroyed, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, WaypointMarkerClass, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CurrentWayPoint, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, DesiredRespawnLocation, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, DesiredRespawnRotation, 0x03F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CurrentRegionIndex, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, UnknownData_8TRZ, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CurrentGrotto, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, PlayerStats, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, OnStatChanged, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, PlayerSharkPawn, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, ExperienceLevelRequirements, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CameraArmLengthPerLevel, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CameraArmMinLengthPerLevel, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CameraZSocketOffsetByLevel, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, WaterLineCruiseHeightPerLevel, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, KnifingSnapDistanceFromLevel, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CameraFOVFromLevel, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, CameraLagSpeedFromLevel, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, MaxSwimSpeedFromLevel, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, MaxSafeGameplaySpeedFromLevel, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, PerchRadiusThreshold, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, MaxAggroWildlifeFromLevel, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, LevelUpGameplayEffect, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, EvolutionInventoryData, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, SlottedEvolutions, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, EvolutionSetBonusDataTable, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, EvolutionListDataTable, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, UnknownData_JA92, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, OnInventoryEvolutionChanged, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, OnSlottedEvolutionChanged, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, OnEvolutionInventoryLoaded, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, TigerSharkEvolution, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerSharkState, UnknownData_DUBD, 0x0750);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_PlayerSharkState, 0x0760);
		}

		// class UME_PlayerTargetingSystem : public UActorComponent
		TEST_METHOD(Class__Maneater__ME_PlayerTargetingSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, DotToDistanceArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, UnknownData_OU7C, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, CurrentWhipshotTargetColor, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, CurrentFocusedObjectiveColor, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, AlertedColor, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, UnknownData_KJ7N, 0x00CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, OnSoftTargetChangedEvent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, OnRelevantTargetChangedEvent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, CurrentFocusedObjectiveTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, CurrentFocusedTarget, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, CurrentLockOnTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, CurrentSoftLockOnTarget, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, CurrentWhipShotTarget, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, PotentialTargets, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, PotentialObjectiveTargets, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, ME_PlayerSharkCharacter, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, bSoftLockEnabled, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, UnknownData_L60E, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, WorldDistanceWeight, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, DotProductWeight, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, LandTargetDistanceMultiplier, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, TickRate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_PlayerTargetingSystem, UnknownData_0B84, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerTargetingSystem, 0x0158);
		}

		// class AME_PlayerUIAvatarActor : public AActor
		TEST_METHOD(Class__Maneater__ME_PlayerUIAvatarActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_PlayerUIAvatarActor, AvatarSceneCapture, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_PlayerUIAvatarActor, 0x0228);
		}

		// class UME_PlayerUIAvatarMeshComponent : public USkeletalMeshComponent
		TEST_METHOD(Class__Maneater__ME_PlayerUIAvatarMeshComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerUIAvatarMeshComponent, 0x0AE0);
		}

		// class AME_Projectile : public AActor
		TEST_METHOD(Class__Maneater__ME_Projectile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Projectile, BubbleTrailComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Projectile, SphereComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Projectile, MeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Projectile, ProjectileMovement, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Projectile, ProjectileAmbientMovementSound, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Projectile, bAttachOnHit, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Projectile, bCanHitVehicles, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Projectile, UnknownData_E52T, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Projectile, DamageEffects, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Projectile, ExplosionActorClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Projectile, MaxRange, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Projectile, UnknownData_O5EA, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_Projectile, 0x0270);
		}

		// class UME_ProjectileMovementComponent : public UProjectileMovementComponent
		TEST_METHOD(Class__Maneater__ME_ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_ProjectileMovementComponent, UnknownData_XUUV, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ProjectileMovementComponent, 0x01E0);
		}

		// class AME_ProximityBomb : public AME_ExplodingBarrelBase
		TEST_METHOD(Class__Maneater__ME_ProximityBomb)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ProximityBomb, DetectionRadius, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ProximityBomb, UnknownData_CS9A, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ProximityBomb, CleanupRadius, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ProximityBomb, bAutomaticallyHandleDespawning, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ProximityBomb, UnknownData_OXEN, 0x0391);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_ProximityBomb, 0x03A8);
		}

		// class UME_SaveObjectBase : public USaveGame
		TEST_METHOD(Class__Maneater__ME_SaveObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveObjectBase, UnknownData_K0CY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SaveObjectBase, 0x0030);
		}

		// class UME_SaveGameObject : public UME_SaveObjectBase
		TEST_METHOD(Class__Maneater__ME_SaveGameObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, TotalPlayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, PlayerLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, StoryLineProgress, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, UnknownData_K5BB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, StoryChapterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, SaveTimestamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, UnknownData_VH9R, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, NarratorHistory, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, UnlockedAchievements, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, TopLevelActivities, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, InProgressActivities, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, UnknownData_XUFT, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, eTigerSharkEvolutonRarity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveGameObject, UnknownData_P7PZ, 0x010D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SaveGameObject, 0x0110);
		}

		// class UME_SaveProfileObject : public UME_SaveObjectBase
		TEST_METHOD(Class__Maneater__ME_SaveProfileObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, PreviouslySelectedSlot, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, UnknownData_3D7K, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, LastTimeStampWhenSaved, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, SavedTutorials, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, ProfileName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, StatNames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, GlobalStats, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, ControlScheme, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, bInvertMouseY, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, bInvertGamepadY, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, UnknownData_R101, 0x00C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, LeftStickSensitivity, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, RightStickSensitivity, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, MouseSensitivity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, DEV_BoostType, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, UnknownData_TS95, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, MasterVolume, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, SfxVolume, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, MusicVolume, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, DialogVolume, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, NarratorVolume, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, RaytracingQuality, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, bSubtitlesEnabled, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, bControllerVibrationEnabled, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, bTutorialPopupEnabled, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SaveProfileObject, UnknownData_TRM4, 0x0103);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SaveProfileObject, 0x0108);
		}

		// class UME_SaveSystemStatics : public UObject
		TEST_METHOD(Class__Maneater__ME_SaveSystemStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SaveSystemStatics, 0x0028);
		}

		// class AME_SignificanceEmitter : public AEmitter
		TEST_METHOD(Class__Maneater__ME_SignificanceEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SignificanceEmitter, UnknownData_WHBQ, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_SignificanceEmitter, 0x0280);
		}

		// class UME_SignificanceEntity : public UInterface
		TEST_METHOD(Class__Maneater__ME_SignificanceEntity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SignificanceEntity, 0x0028);
		}

		// class UME_SignificanceManager : public USignificanceManager
		TEST_METHOD(Class__Maneater__ME_SignificanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SignificanceManager, MaxAIWeight, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SignificanceManager, UnknownData_EWS6, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SignificanceManager, 0x0130);
		}

		// class UME_SonarDetectableInterface : public UInterface
		TEST_METHOD(Class__Maneater__ME_SonarDetectableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SonarDetectableInterface, 0x0028);
		}

		// class AME_SonarManager : public AActor
		TEST_METHOD(Class__Maneater__ME_SonarManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SonarManager, UnknownData_AV1N, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SonarManager, OnSonarTargetEvent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SonarManager, OnSonarUntargetEvent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SonarManager, OnSonarRefreshTargetEvent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SonarManager, UnknownData_IKVV, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_SonarManager, 0x02B0);
		}

		// class UME_SpawnActorVisualizerComponent : public UActorComponent
		TEST_METHOD(Class__Maneater__ME_SpawnActorVisualizerComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnActorVisualizerComponent, 0x00B0);
		}

		// class UME_SpawningObjectiveBase : public UME_PlayerObjective
		TEST_METHOD(Class__Maneater__ME_SpawningObjectiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawningObjectiveBase, UnknownData_XHUM, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawningObjectiveBase, SpawnDistance, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawningObjectiveBase, DespawnDistance, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawningObjectiveBase, UnknownData_ANHV, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawningObjectiveBase, 0x0178);
		}

		// class UME_KillObjective : public UME_SpawningObjectiveBase
		TEST_METHOD(Class__Maneater__ME_KillObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_KillObjective, SpawnInfo, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_KillObjective, ApexName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_KillObjective, ApexImage, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_KillObjective, ApexPosition, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_KillObjective, bDiscovered, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_KillObjective, UnknownData_MGLM, 0x020D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_KillObjective, 0x0210);
		}

		// class UME_HighValueTargetObjective : public UME_SpawningObjectiveBase
		TEST_METHOD(Class__Maneater__ME_HighValueTargetObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_HighValueTargetObjective, SpawnInfo, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_HighValueTargetObjective, AvailableSpawnInfo, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_HighValueTargetObjective, ActiveSpawnInfo, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_HighValueTargetObjective, HVTsToComplete, 0x019C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_HighValueTargetObjective, 0x01A0);
		}

		// class UME_AreaSpawnObjective : public UME_SpawningObjectiveBase
		TEST_METHOD(Class__Maneater__ME_AreaSpawnObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AreaSpawnObjective, SpawnInfo, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AreaSpawnObjective, TargetKillCount, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AreaSpawnObjective, UnknownData_9BMG, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AreaSpawnObjective, CompletedSubObjectives, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AreaSpawnObjective, SubObjectiveStates, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AreaSpawnObjective, SubObjectiveRemaining, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AreaSpawnObjective, SubObjectivePositions, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AreaSpawnObjective, ActiveSpawnIndex, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AreaSpawnObjective, UnknownData_8ENE, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_AreaSpawnObjective, SpawnedControllers, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AreaSpawnObjective, 0x01E8);
		}

		// class UME_HuntObjective : public UME_AreaSpawnObjective
		TEST_METHOD(Class__Maneater__ME_HuntObjective)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_HuntObjective, 0x01E8);
		}

		// class UME_PlayerObjectiveTerrorize : public UME_AreaSpawnObjective
		TEST_METHOD(Class__Maneater__ME_PlayerObjectiveTerrorize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjectiveTerrorize, 0x01E8);
		}

		// class UME_PlayerObjectivePopulationControl : public UME_AreaSpawnObjective
		TEST_METHOD(Class__Maneater__ME_PlayerObjectivePopulationControl)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_PlayerObjectivePopulationControl, 0x01E8);
		}

		// class AME_SpawnManagerBase : public AActor
		TEST_METHOD(Class__Maneater__ME_SpawnManagerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnManagerBase, PlayerShark, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnManagerBase, CurrentAIList, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_SpawnManagerBase, 0x0238);
		}

		// class AME_ObjectiveSpawnManager : public AME_SpawnManagerBase
		TEST_METHOD(Class__Maneater__ME_ObjectiveSpawnManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_ObjectiveSpawnManager, UnknownData_NG1O, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_ObjectiveSpawnManager, 0x02D8);
		}

		// class UME_SpawnlistCondition : public UObject
		TEST_METHOD(Class__Maneater__ME_SpawnlistCondition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnlistCondition, 0x0028);
		}

		// class UME_SpawnListCondition_ActiveBounty : public UME_SpawnlistCondition
		TEST_METHOD(Class__Maneater__ME_SpawnListCondition_ActiveBounty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_ActiveBounty, bInverseCondition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_ActiveBounty, UnknownData_WQN7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnListCondition_ActiveBounty, 0x0030);
		}

		// class UME_SpawnListCondition_BossIsActive : public UME_SpawnlistCondition
		TEST_METHOD(Class__Maneater__ME_SpawnListCondition_BossIsActive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_BossIsActive, bInverseCondition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_BossIsActive, UnknownData_0XJC, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnListCondition_BossIsActive, 0x0030);
		}

		// class UME_SpawnListCondition_IgnoreForObjective : public UME_SpawnlistCondition
		TEST_METHOD(Class__Maneater__ME_SpawnListCondition_IgnoreForObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_IgnoreForObjective, bUseObjectiveSpawnManager, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_IgnoreForObjective, UnknownData_ET7P, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnListCondition_IgnoreForObjective, 0x0030);
		}

		// class UME_SpawnListCondition_MaxInPlay : public UME_SpawnlistCondition
		TEST_METHOD(Class__Maneater__ME_SpawnListCondition_MaxInPlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_MaxInPlay, MaxInPlay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_MaxInPlay, NumInPlay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_MaxInPlay, bPrioritySpawn, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_MaxInPlay, UnknownData_32WT, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnListCondition_MaxInPlay, 0x0040);
		}

		// class UME_SpawnListCondition_PoisonedWater : public UME_SpawnlistCondition
		TEST_METHOD(Class__Maneater__ME_SpawnListCondition_PoisonedWater)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_PoisonedWater, bInverseCondition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_PoisonedWater, UnknownData_QIXI, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnListCondition_PoisonedWater, 0x0030);
		}

		// class UME_SpawnListCondition_StorylineProgress : public UME_SpawnlistCondition
		TEST_METHOD(Class__Maneater__ME_SpawnListCondition_StorylineProgress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_StorylineProgress, MinimumStorylineProgress, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_StorylineProgress, MaximumStorylineProgress, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_StorylineProgress, ObjectiveManager, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnListCondition_StorylineProgress, 0x0038);
		}

		// class UME_SpawnListCondition_TimeOfDay : public UME_SpawnlistCondition
		TEST_METHOD(Class__Maneater__ME_SpawnListCondition_TimeOfDay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_TimeOfDay, StartTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_TimeOfDay, EndTime, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnListCondition_TimeOfDay, 0x0030);
		}

		// class UME_SpawnListCondition_TutorialComplete : public UME_SpawnlistCondition
		TEST_METHOD(Class__Maneater__ME_SpawnListCondition_TutorialComplete)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnListCondition_TutorialComplete, TutorialManager, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnListCondition_TutorialComplete, 0x0030);
		}

		// class AME_SpawnManager : public AME_SpawnManagerBase
		TEST_METHOD(Class__Maneater__ME_SpawnManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnManager, MaxProxMines, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnManager, UnknownData_4L9B, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnManager, ManagedSpawners, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnManager, MaxSpawnsPerFrame, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnManager, UnknownData_BV3U, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_SpawnManager, 0x0280);
		}

		// class UME_SpawnPool : public UObject
		TEST_METHOD(Class__Maneater__ME_SpawnPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnPool, AllSpawnedActors, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnPool, UnknownData_TI8Y, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnPool, 0x0090);
		}

		// class UME_SpawnPoolEntity : public UInterface
		TEST_METHOD(Class__Maneater__ME_SpawnPoolEntity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnPoolEntity, 0x0028);
		}

		// class UME_SpawnData : public UDataAsset
		TEST_METHOD(Class__Maneater__ME_SpawnData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnData, SpawnDataList, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnData, 0x0040);
		}

		// class UME_SpawnVolumeCollection : public UObject
		TEST_METHOD(Class__Maneater__ME_SpawnVolumeCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, UnknownData_ZP30, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, CachedNextSpawn, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, UnknownData_OOIQ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, bObjectiveVolumeCollection, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, UnknownData_OSC2, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, SignificanceMod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, bIsExplorable, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, UnknownData_9E6A, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, SpawnLists, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, UnknownData_2MNR, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, OwnedVolumes, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, UnknownData_IZ7S, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, FilteredSpawnPercentage, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, FilterDelay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection, UnknownData_GYLV, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnVolumeCollection, 0x00F8);
		}

		// class AME_SpawnVolume : public AVolume
		TEST_METHOD(Class__Maneater__ME_SpawnVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, OwningCollection, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, UnknownData_0QDM, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, AIDensity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, UnknownData_KO3I, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, ExpectedMaxAICount, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, bRequiresUniqueCollection, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, UnknownData_WZ7P, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, SignificanceMod, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, bIsExplorableSpawner, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, UnknownData_CSWS, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, SpawnLists, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, GridSpawnPoints, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, bObjectiveVolume, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume, UnknownData_TAVP, 0x02B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_SpawnVolume, 0x02B8);
		}

		// class UME_SpawnVolumeCollection_Beachgoer : public UME_SpawnVolumeCollection
		TEST_METHOD(Class__Maneater__ME_SpawnVolumeCollection_Beachgoer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection_Beachgoer, CollectionActivities, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_SpawnVolumeCollection_Beachgoer, UnknownData_L769, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnVolumeCollection_Beachgoer, 0x0160);
		}

		// class AME_SpawnVolume_Beachgoer : public AME_SpawnVolume
		TEST_METHOD(Class__Maneater__ME_SpawnVolume_Beachgoer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume_Beachgoer, ValidActivities, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume_Beachgoer, SpawnRotation, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume_Beachgoer, UnknownData_WIG9, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume_Beachgoer, SpawnRotationActor, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume_Beachgoer, ForcedEscapeVolumes, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume_Beachgoer, ExcludedEscapeVolumes, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume_Beachgoer, PercentChanceOfFleeing, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_SpawnVolume_Beachgoer, UnknownData_RLT0, 0x031C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_SpawnVolume_Beachgoer, 0x0320);
		}

		// class UME_SpawnVolumeVisualizerComponent : public UActorComponent
		TEST_METHOD(Class__Maneater__ME_SpawnVolumeVisualizerComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_SpawnVolumeVisualizerComponent, 0x00B0);
		}

		// class AME_TerrainMappedAmbience : public AAkAmbientSound
		TEST_METHOD(Class__Maneater__ME_TerrainMappedAmbience)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TerrainMappedAmbience, AmbienceHeatmap, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TerrainMappedAmbience, HeatmapChannel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TerrainMappedAmbience, UnknownData_I40L, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TerrainMappedAmbience, AmbienceRTPCParam, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TerrainMappedAmbience, bPrintRTPCValue, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TerrainMappedAmbience, bDrawHeatmapVisualization, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TerrainMappedAmbience, bEnableMultiPositionAudio, 0x0276);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TerrainMappedAmbience, EmitterPositionMethod, 0x0277);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TerrainMappedAmbience, UnknownData_GHMP, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_TerrainMappedAmbience, 0x02A0);
		}

		// class UME_ThrashableInterface : public UME_ActorDamageInterface
		TEST_METHOD(Class__Maneater__ME_ThrashableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ThrashableInterface, 0x0028);
		}

		// class AME_TimeofDayInfo : public AInfo
		TEST_METHOD(Class__Maneater__ME_TimeofDayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeofDayInfo, TimeofDaySpeedScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeofDayInfo, UnknownData_K22A, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeofDayInfo, CurrentHourOfDay, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeofDayInfo, UnknownData_0YZP, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeofDayInfo, DayPhases, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeofDayInfo, CurrentPhaseOfDay, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeofDayInfo, NextPhaseOfDay, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeofDayInfo, OnTimeOfDayChanged, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeofDayInfo, OnTimeOfDayForceChanged, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeofDayInfo, UnknownData_8ND4, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_TimeofDayInfo, 0x0290);
		}

		// class AME_TimeOfDayWorldActor : public AActor
		TEST_METHOD(Class__Maneater__ME_TimeOfDayWorldActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, bEnableNativeTick, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, UnknownData_TR3G, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, OceanDepthPostInterpSpeed, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, TODBaseComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, WeatherParams, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, LightValueTransitionSpeed, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, CurrentLightValue, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, PlayerShark, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, bTickDayNight, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, UnknownData_YWQ0, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, AirPostProcess, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, AirPostDayExposureCompensation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, AirPostNightExposureCompensation, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, OceanPostProcess, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, MinOceanDepthExposure, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, MaxOceanDepthExposure, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, OceanDepthPostMinStartingExposureDay, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, OceanDepthPostMaxStartingExposureDay, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, OceanDepthPostMinStartingExposureNight, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, OceanDepthPostMaxStartingExposureNight, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, OceanPostMaximumDepth, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, UnknownData_XY1A, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, HorizonColorCurve, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, ZenithColorCurve, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, CloudColorCurve, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SkyLightComponent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SkyMaterial, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SkylightIntensityDay, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SkylightIntensityNight, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SkylightSunriseColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SkylightNoonColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SkylightMidnightColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, UnderWaterFogCubemap, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, TimeOfDayCubemapList, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, LastTimeOfDayCubemapIndex, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, UnknownData_EBXQ, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SunLightComponent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SunSpeedCurve, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, StartingSunIntensity, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SunTemp6AM, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SunTemp12PM, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SunHeight, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, SunAngleInTheSky, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, NorthDirectionOffset, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, MoonLightComponent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, MoonMaterial, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, bHideMoonDuringDay, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, UnknownData_6CER, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, StartingMoonIntensity, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, MoonlightIntensity, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, MoonPhase, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, HeightFogComponent, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, FogCurrentTransitionAlpha, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, UnderWaterFogDensity, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, AboveWaterFogDensity, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, UnderWaterFogHeightFalloff, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, AboveWaterFogHeightFalloff, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, AboveWaterFogExtinctionScale, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, FogSunriseColor, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, FogNoonColor, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, FogMidnightColor, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, CurrentFogState, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, UnknownData_NYKC, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, CurrentRegionFogExtinctionScale, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, UnknownData_641G, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, bIsDaytime, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, UnknownData_7NIR, 0x03AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, DayNightTransitionAlpha, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, CurrentMinute, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TimeOfDayWorldActor, UnknownData_32E7, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_TimeOfDayWorldActor, 0x03C8);
		}

		// class UME_TorpedoLauncherComponent : public UActorComponent
		TEST_METHOD(Class__Maneater__ME_TorpedoLauncherComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoLauncherComponent, TorpedoProjectileClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoLauncherComponent, MaxActiveTorpedos, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoLauncherComponent, FireCooldownTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoLauncherComponent, MinimumTargetAngleDot, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoLauncherComponent, UnknownData_XMGV, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoLauncherComponent, LeftLauncherSocket, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoLauncherComponent, RightLauncherSocket, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoLauncherComponent, UnknownData_B10H, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_TorpedoLauncherComponent, 0x00F8);
		}

		// class UME_TorpedoMovementComponent : public UME_ProjectileMovementComponent
		TEST_METHOD(Class__Maneater__ME_TorpedoMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoMovementComponent, UnknownData_GOK6, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoMovementComponent, DelayBeforeHomingStart, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoMovementComponent, MininumHomingTime, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoMovementComponent, MinimumDistanceForDodge, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoMovementComponent, DodgeRadiusHomingAccelScale, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_TorpedoMovementComponent, UnknownData_ZW7R, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_TorpedoMovementComponent, 0x0210);
		}

		// class AME_TorpedoProjectile : public AME_ThrashableActor
		TEST_METHOD(Class__Maneater__ME_TorpedoProjectile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TorpedoProjectile, ProjectileMovement, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TorpedoProjectile, DetonatorSocketName, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TorpedoProjectile, ExplosionActorClass, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TorpedoProjectile, ThrustParticle, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TorpedoProjectile, ThrustParticleSocketName, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TorpedoProjectile, WhipshotImpactSound, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TorpedoProjectile, UnknownData_ML2A, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_TorpedoProjectile, 0x0320);
		}

		// class UME_TransparencyCaptureComponent : public USceneCaptureComponent2D
		TEST_METHOD(Class__Maneater__ME_TransparencyCaptureComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_TransparencyCaptureComponent, 0x0880);
		}

		// class AME_TutorialManager : public AActor
		TEST_METHOD(Class__Maneater__ME_TutorialManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnHudTipRequestedDelegate, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialObjectiveAdded, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialObjectiveActive, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialObjectiveComplete, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialObjectiveRemoved, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialObjectivesCleared, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialFinished, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialEnded, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialRepeatedStepCompleted, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialStepTimerStarted, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialStepTimerStopped, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, TutorialEventTriggeredDelegate, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialEventRequestMarker, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialEventClearCompassMarker, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialManagerDisabled, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, OnTutorialSinglePopupRequestDelegate, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, RequestInvertedControlsPopup, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, TutorialPopupDelay, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, UnknownData_5AL2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, AudioEventTutorialComplete, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, AudioEventTutorialIncrementStep, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, TutorialEvents, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, HudTips, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, CurrentTutorialIndex, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, SavedStepIndex, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, UnknownData_ETCR, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, MaxVisibleTutorialObjectives, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, UnknownData_387D, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, TimeBeforeInvertedControlsWidgetShows, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, UnknownData_HZUV, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, TutorialPopupMap, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager, TutorialPopupCompleted, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_TutorialManager, 0x0450);
		}

		// class UME_UserProfileSettings : public UObject
		TEST_METHOD(Class__Maneater__ME_UserProfileSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_UserProfileSettings, 0x0028);
		}

		// class AME_VehicleDebrisActor : public AActor
		TEST_METHOD(Class__Maneater__ME_VehicleDebrisActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehicleDebrisActor, DebrisMesh, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_VehicleDebrisActor, DebrisBuoyancyComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_VehicleDebrisActor, 0x0230);
		}

		// class UME_VehicleNavigationComponent : public UME_MercunaNavigationComponent
		TEST_METHOD(Class__Maneater__ME_VehicleNavigationComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_VehicleNavigationComponent, 0x0148);
		}

		// class UME_ViewportClient : public UGameViewportClient
		TEST_METHOD(Class__Maneater__ME_ViewportClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_ViewportClient, 0x0330);
		}

		// class UME_WaterVehicleMoveComponent : public UME_VehicleMovementComponent
		TEST_METHOD(Class__Maneater__ME_WaterVehicleMoveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WaterVehicleMoveComponent, UnknownData_5RRD, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_WaterVehicleMoveComponent, 0x0238);
		}

		// class UME_WaterVehicleNavComponent : public UME_VehicleNavigationComponent
		TEST_METHOD(Class__Maneater__ME_WaterVehicleNavComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_WaterVehicleNavComponent, 0x0148);
		}

		// class AME_WaypointMarker : public AActor
		TEST_METHOD(Class__Maneater__ME_WaypointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WaypointMarker, UnknownData_EMV3, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WaypointMarker, WaypointMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WaypointMarker, WaypointFriendlyName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WaypointMarker, WaypointDescription, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WaypointMarker, WaypointReachedSound, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WaypointMarker, WaypointSetSound, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WaypointMarker, CollisionComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WaypointMarker, WaypointIconCache, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WaypointMarker, bRenderProjectedIcon, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WaypointMarker, UnknownData_BN0G, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_WaypointMarker, 0x02B0);
		}

		// class AME_WhippableActorBase : public AME_NutrientCache_Static
		TEST_METHOD(Class__Maneater__ME_WhippableActorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WhippableActorBase, MaxUses, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WhippableActorBase, UnknownData_FXN7, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_WhippableActorBase, 0x0378);
		}

		// class UME_WhipshotMovementComponent : public UProjectileMovementComponent
		TEST_METHOD(Class__Maneater__ME_WhipshotMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WhipshotMovementComponent, FluidFrictionAdjustment, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WhipshotMovementComponent, MaxWhipshotPhysicsTime, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WhipshotMovementComponent, UnknownData_NMK7, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_WhipshotMovementComponent, 0x0230);
		}

		// class AME_WildlifeCharacter : public AME_AnimalCharacter
		TEST_METHOD(Class__Maneater__ME_WildlifeCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WildlifeCharacter, bCanWalkOnLand, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WildlifeCharacter, UnknownData_WH4J, 0x0F51);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_WildlifeCharacter, 0x0F60);
		}

		// class UME_WorldMapCaptureComponent : public USceneCaptureComponent2D
		TEST_METHOD(Class__Maneater__ME_WorldMapCaptureComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_WorldMapCaptureComponent, 0x0880);
		}

		// class UME_WorldMapWidget : public UUserWidget
		TEST_METHOD(Class__Maneater__ME_WorldMapWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WorldMapWidget, FogRenderTarget, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WorldMapWidget, RTColorBuffer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WorldMapWidget, UnknownData_KE97, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_WorldMapWidget, 0x0278);
		}

		// class UME_WorldRegionData : public UDataAsset
		TEST_METHOD(Class__Maneater__ME_WorldRegionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_WorldRegionData, WorldRegions, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_WorldRegionData, 0x0040);
		}

		// class AME_WorldRegionVolume : public AVolume
		TEST_METHOD(Class__Maneater__ME_WorldRegionVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldRegionVolume, VolumeColor, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldRegionVolume, RegionPriority, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_WorldRegionVolume, 0x0260);
		}

		// class AME_WorldSettings : public AWorldSettings
		TEST_METHOD(Class__Maneater__ME_WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, WorldCaptureSource, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, UnknownData_KNPT, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, WorldCaptureResolution, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, bIncludeOceanInWorldCapture, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, bPrintAlertnessDebugLogs, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, bAllowEvolutionDrops, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, UnknownData_PS01, 0x03AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, WorldRegionData, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, WorldBoundsActor, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, TheLand, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, TheOcean, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, FriendlyFireDamageMultiplier, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, UnknownData_35MF, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, WorldCaptureComponent, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, UnknownData_UA05, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, ActiveImpactResponses, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_WorldSettings, UnknownData_PW8Y, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_WorldSettings, 0x04D0);
		}

		// class UMEAIDataProvider_CombatHeight : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__Maneater__MEAIDataProvider_CombatHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEAIDataProvider_CombatHeight, DefaultValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEAIDataProvider_CombatHeight, UnknownData_XI2A, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEAIDataProvider_CombatHeight, 0x0048);
		}

		// class UMEAIDataProvider_CombatRange : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__Maneater__MEAIDataProvider_CombatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEAIDataProvider_CombatRange, DefaultValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEAIDataProvider_CombatRange, UnknownData_MXUD, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEAIDataProvider_CombatRange, 0x0048);
		}

		// class UMEAIDataProvider_EscapeVolExtents : public UAIDataProvider
		TEST_METHOD(Class__Maneater__MEAIDataProvider_EscapeVolExtents)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEAIDataProvider_EscapeVolExtents, FloatValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEAIDataProvider_EscapeVolExtents, IntValue, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEAIDataProvider_EscapeVolExtents, 0x0030);
		}

		// class UMEAIDataProvider_LeashDistance : public UAIDataProvider
		TEST_METHOD(Class__Maneater__MEAIDataProvider_LeashDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEAIDataProvider_LeashDistance, FloatValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEAIDataProvider_LeashDistance, IntValue, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEAIDataProvider_LeashDistance, 0x0030);
		}

		// class UMEBTDecorator_AbilityBase : public UBTDecorator
		TEST_METHOD(Class__Maneater__MEBTDecorator_AbilityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_AbilityBase, bUseAbilityType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_AbilityBase, UnknownData_M6PR, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_AbilityBase, AbilityGameplayTag, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_AbilityBase, AbilityType, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_AbilityBase, UnknownData_R2WA, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_AbilityBase, AbilityIndex, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTDecorator_AbilityBase, 0x00B0);
		}

		// class UMEBTDecorator_BBValueChanged : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__Maneater__MEBTDecorator_BBValueChanged)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTDecorator_BBValueChanged, 0x0090);
		}

		// class UMEBTDecorator_CanSpawnDiver : public UBTDecorator
		TEST_METHOD(Class__Maneater__MEBTDecorator_CanSpawnDiver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTDecorator_CanSpawnDiver, 0x0068);
		}

		// class UMEBTDecorator_CanUseAbility : public UMEBTDecorator_AbilityBase
		TEST_METHOD(Class__Maneater__MEBTDecorator_CanUseAbility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_CanUseAbility, UnknownData_23MI, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTDecorator_CanUseAbility, 0x00B8);
		}

		// class UMEBTDecorator_CombatState : public UBTDecorator
		TEST_METHOD(Class__Maneater__MEBTDecorator_CombatState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_CombatState, DesiredStatus, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_CombatState, UnknownData_YS7C, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTDecorator_CombatState, 0x0070);
		}

		// class UMEBTDecorator_HasGameplayTags : public UBTDecorator_CheckGameplayTagsOnActor
		TEST_METHOD(Class__Maneater__MEBTDecorator_HasGameplayTags)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTDecorator_HasGameplayTags, 0x00C8);
		}

		// class UMEBTDecorator_HasGrabbedPrey : public UBTDecorator
		TEST_METHOD(Class__Maneater__MEBTDecorator_HasGrabbedPrey)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTDecorator_HasGrabbedPrey, 0x0068);
		}

		// class UMEBTDecorator_IsPawnRelevant : public UBTDecorator
		TEST_METHOD(Class__Maneater__MEBTDecorator_IsPawnRelevant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_IsPawnRelevant, MinTimeSinceLastRendered, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_IsPawnRelevant, MinDistanceFromPlayer, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTDecorator_IsPawnRelevant, 0x0070);
		}

		// class UMEBTDecorator_LandOrSea : public UBTDecorator
		TEST_METHOD(Class__Maneater__MEBTDecorator_LandOrSea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_LandOrSea, TerrainType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_LandOrSea, UnknownData_UPG1, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTDecorator_LandOrSea, 0x0070);
		}

		// class UMEBTDecorator_TimeSince : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__Maneater__MEBTDecorator_TimeSince)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_TimeSince, TimeValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_TimeSince, ComparisonOp, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_TimeSince, UnknownData_7XP7, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTDecorator_TimeSince, 0x00D0);
		}

		// class UMEBTDecorator_TimeSinceLastSpawn : public UBTDecorator
		TEST_METHOD(Class__Maneater__MEBTDecorator_TimeSinceLastSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_TimeSinceLastSpawn, ComparisonOp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_TimeSinceLastSpawn, UnknownData_Q4Y2, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_TimeSinceLastSpawn, ComparisonValue, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTDecorator_TimeSinceLastSpawn, 0x00A8);
		}

		// class UMEBTDecorator_WaterDepth : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__Maneater__MEBTDecorator_WaterDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_WaterDepth, ExpectedWaterDepth, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_WaterDepth, ComparisonOp, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTDecorator_WaterDepth, UnknownData_N08Y, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTDecorator_WaterDepth, 0x00D0);
		}

		// class UMEBTService_AbilityBase : public UBTService
		TEST_METHOD(Class__Maneater__MEBTService_AbilityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_AbilityBase, bUseAbilityType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_AbilityBase, UnknownData_2NHT, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_AbilityBase, AbilityGameplayTag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_AbilityBase, AbilityType, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_AbilityBase, UnknownData_KM5G, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_AbilityBase, AbilityIndex, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTService_AbilityBase, 0x00B8);
		}

		// class UMEBTService_AttackTarget : public UBTService_BlackboardBase
		TEST_METHOD(Class__Maneater__MEBTService_AttackTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_AttackTarget, WeaponPreference, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTService_AttackTarget, 0x00A0);
		}

		// class UMEBTService_CacheEscapeRoutes : public UBTService
		TEST_METHOD(Class__Maneater__MEBTService_CacheEscapeRoutes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTService_CacheEscapeRoutes, 0x0070);
		}

		// class UMEBTService_CheckThreatUnderBoat : public UBTService
		TEST_METHOD(Class__Maneater__MEBTService_CheckThreatUnderBoat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_CheckThreatUnderBoat, BlackboardKey, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_CheckThreatUnderBoat, TimeNeededToTrigger, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_CheckThreatUnderBoat, UnknownData_SK39, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTService_CheckThreatUnderBoat, 0x00A0);
		}

		// class UMEBTService_ClaimCombatLocation : public UBTService_BlackboardBase
		TEST_METHOD(Class__Maneater__MEBTService_ClaimCombatLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_ClaimCombatLocation, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_ClaimCombatLocation, UnknownData_T0H3, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTService_ClaimCombatLocation, 0x00F0);
		}

		// class UMEBTService_LookForBoats : public UBTService
		TEST_METHOD(Class__Maneater__MEBTService_LookForBoats)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTService_LookForBoats, 0x0070);
		}

		// class UMEBTService_LookForThreats : public UBTService
		TEST_METHOD(Class__Maneater__MEBTService_LookForThreats)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTService_LookForThreats, 0x0070);
		}

		// class UMEBTService_RepelFromGeometry : public UBTService
		TEST_METHOD(Class__Maneater__MEBTService_RepelFromGeometry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTService_RepelFromGeometry, 0x0070);
		}

		// class UMEBTService_UseAbility : public UMEBTService_AbilityBase
		TEST_METHOD(Class__Maneater__MEBTService_UseAbility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_UseAbility, bCancelImmediately, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTService_UseAbility, UnknownData_XS88, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTService_UseAbility, 0x00C0);
		}

		// class UMEBTTask_AbilityBase : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_AbilityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_AbilityBase, bUseAbilityType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_AbilityBase, UnknownData_FT5R, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_AbilityBase, AbilityGameplayTag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_AbilityBase, AbilityType, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_AbilityBase, UnknownData_GZ94, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_AbilityBase, AbilityIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_AbilityBase, bWaitForAbilityToFinish, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_AbilityBase, UnknownData_KMJG, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_AbilityBase, 0x00C0);
		}

		// class UMEBTTask_TargetBase : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Maneater__MEBTTask_TargetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_TargetBase, TargetAssetId, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_TargetBase, 0x00C0);
		}

		// class UMEBTTask_AttackTarget : public UMEBTTask_TargetBase
		TEST_METHOD(Class__Maneater__MEBTTask_AttackTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_AttackTarget, WeaponPreference, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_AttackTarget, 0x00C8);
		}

		// class UMEBTTask_CacheActivityPoints : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_CacheActivityPoints)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_CacheActivityPoints, 0x0070);
		}

		// class UMEBTTask_CacheEscapeRoutes : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_CacheEscapeRoutes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_CacheEscapeRoutes, 0x0070);
		}

		// class UMEBTTask_ChangeAlertState : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_ChangeAlertState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_ChangeAlertState, NewAlertState, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_ChangeAlertState, bResetSuspicion, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_ChangeAlertState, UnknownData_HXQU, 0x0072);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_ChangeAlertState, 0x0078);
		}

		// class UMEBTTask_ChangeCombatPriority : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_ChangeCombatPriority)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_ChangeCombatPriority, PriorityBuff, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_ChangeCombatPriority, Duration, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_ChangeCombatPriority, 0x0078);
		}

		// class UMEBTTask_ClaimCombatLocation : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Maneater__MEBTTask_ClaimCombatLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_ClaimCombatLocation, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_ClaimCombatLocation, UnknownData_2IOG, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_ClaimCombatLocation, 0x00F0);
		}

		// class UMEBTTask_MoveToBase : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Maneater__MEBTTask_MoveToBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_MoveToBase, 0x0098);
		}

		// class UMEBTTask_DirectMoveTo : public UMEBTTask_MoveToBase
		TEST_METHOD(Class__Maneater__MEBTTask_DirectMoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_DirectMoveTo, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_DirectMoveTo, Speed, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_DirectMoveTo, bReachTestIncludesAgentRadius, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_DirectMoveTo, bReachTestIncludesGoalRadius, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_DirectMoveTo, UnknownData_BZ82, 0x010A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_DirectMoveTo, 0x0110);
		}

		// class UMEBTTask_EjectPassengers : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_EjectPassengers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_EjectPassengers, UnknownData_KREN, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_EjectPassengers, VehicleImpulseScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_EjectPassengers, UnknownData_XN7J, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_EjectPassengers, OverboardVelocityImpulseXY, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_EjectPassengers, OverboardVelocityImpulseZ, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_EjectPassengers, NumToEjectOnExecute, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_EjectPassengers, UnknownData_PJO0, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_EjectPassengers, 0x0088);
		}

		// class UMEBTTask_EmitNoise : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_EmitNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_EmitNoise, NoiseIntensity, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_EmitNoise, NoiseVoiceType, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_EmitNoise, UnknownData_QNA2, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_EmitNoise, 0x0078);
		}

		// class UMEBTTask_FireTorpedo : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_FireTorpedo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_FireTorpedo, 0x0070);
		}

		// class UMEBTTask_GetNextPatrol : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Maneater__MEBTTask_GetNextPatrol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_GetNextPatrol, 0x0098);
		}

		// class UMEBTTask_MoveTo : public UMEBTTask_MoveToBase
		TEST_METHOD(Class__Maneater__MEBTTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_MoveTo, Speed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_MoveTo, AcceptableRadius, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_MoveTo, bReachTestIncludesAgentRadius, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_MoveTo, bReachTestIncludesGoalRadius, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_MoveTo, bAllowPartialPath, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_MoveTo, UnknownData_K9YR, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_MoveTo, FilterClass, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_MoveTo, bObserveBlackboardValue, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_MoveTo, UnknownData_LJJ6, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_MoveTo, UnknownData_JWBP, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_MoveTo, 0x0130);
		}

		// class UMEBTTask_PlayCustomAnimations : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_PlayCustomAnimations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_PlayCustomAnimations, Animations, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_PlayCustomAnimations, PlayRate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_PlayCustomAnimations, BlendIn, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_PlayCustomAnimations, BlendOut, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_PlayCustomAnimations, NumLoops, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_PlayCustomAnimations, StartTimeMin, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_PlayCustomAnimations, StartTimeMax, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_PlayCustomAnimations, UnknownData_D26P, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_PlayCustomAnimations, 0x00A8);
		}

		// class UMEBTTask_PlayCustomPassengerAnimations : public UMEBTTask_PlayCustomAnimations
		TEST_METHOD(Class__Maneater__MEBTTask_PlayCustomPassengerAnimations)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_PlayCustomPassengerAnimations, 0x00A8);
		}

		// class UMEBTTask_PlayDialogueAkEvent : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Maneater__MEBTTask_PlayDialogueAkEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_PlayDialogueAkEvent, Event, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_PlayDialogueAkEvent, DialogueTableOverride, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_PlayDialogueAkEvent, 0x00A8);
		}

		// class UMEBTTask_PlayDialogueFile : public UBTTask_BlackboardBase
		TEST_METHOD(Class__Maneater__MEBTTask_PlayDialogueFile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_PlayDialogueFile, DialogueRowHandle, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_PlayDialogueFile, 0x00A8);
		}

		// class UMEBTTask_ReleasePrey : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_ReleasePrey)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_ReleasePrey, 0x0070);
		}

		// class UMEBTTask_RemoveAI : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_RemoveAI)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_RemoveAI, 0x0070);
		}

		// class UMEBTTask_SpawnActor : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_SpawnActor, UnknownData_UWH7, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_SpawnActor, ClassToSpawn, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_SpawnActor, TriggerSound, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_SpawnActor, SpawnActorParticle, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_SpawnActor, DelayTillActorSpawn, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_SpawnActor, DepthToSpawnActor, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_SpawnActor, 0x0098);
		}

		// class UMEBTTask_SpawnAI : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_SpawnAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_SpawnAI, SpawnList, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_SpawnAI, 0x0080);
		}

		// class UMEBTTask_StopAllMovement : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_StopAllMovement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_StopAllMovement, 0x0070);
		}

		// class UMEBTTask_StopCustomAnimation : public UBTTaskNode
		TEST_METHOD(Class__Maneater__MEBTTask_StopCustomAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_StopCustomAnimation, BlendOut, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_StopCustomAnimation, UnknownData_PA08, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_StopCustomAnimation, 0x0078);
		}

		// class UMEBTTask_UseAbility : public UMEBTTask_AbilityBase
		TEST_METHOD(Class__Maneater__MEBTTask_UseAbility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_UseAbility, bCancelImmediately, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_UseAbility, UnknownData_JZDO, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_UseAbility, 0x00C8);
		}

		// class UMEBTTask_VehicleMoveTo : public UMEBTTask_MoveToBase
		TEST_METHOD(Class__Maneater__MEBTTask_VehicleMoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_VehicleMoveTo, Speed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_VehicleMoveTo, AcceptanceRadius, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_VehicleMoveTo, MoveUpdateThreshold, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_VehicleMoveTo, TaskUpdateInterval, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_VehicleMoveTo, UnknownData_IW5C, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_VehicleMoveTo, SurfaceZOffset, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEBTTask_VehicleMoveTo, UnknownData_ARRB, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEBTTask_VehicleMoveTo, 0x00C0);
		}

		// class UMEEnvQueryContext_BoatEscape : public UEnvQueryContext
		TEST_METHOD(Class__Maneater__MEEnvQueryContext_BoatEscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryContext_BoatEscape, 0x0028);
		}

		// class UMEEnvQueryContext_BossVehicleActor : public UEnvQueryContext
		TEST_METHOD(Class__Maneater__MEEnvQueryContext_BossVehicleActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryContext_BossVehicleActor, 0x0028);
		}

		// class UMEEnvQueryContext_ClosestEscape : public UEnvQueryContext
		TEST_METHOD(Class__Maneater__MEEnvQueryContext_ClosestEscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryContext_ClosestEscape, 0x0028);
		}

		// class UMEEnvQueryContext_ClosestLandNavPoint : public UEnvQueryContext
		TEST_METHOD(Class__Maneater__MEEnvQueryContext_ClosestLandNavPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryContext_ClosestLandNavPoint, 0x0028);
		}

		// class UMEEnvQueryContext_CombatLocation : public UEnvQueryContext
		TEST_METHOD(Class__Maneater__MEEnvQueryContext_CombatLocation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryContext_CombatLocation, 0x0028);
		}

		// class UMEEnvQueryContext_LastSawThreatLocation : public UEnvQueryContext
		TEST_METHOD(Class__Maneater__MEEnvQueryContext_LastSawThreatLocation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryContext_LastSawThreatLocation, 0x0028);
		}

		// class UMEEnvQueryContext_LeashLocation : public UEnvQueryContext
		TEST_METHOD(Class__Maneater__MEEnvQueryContext_LeashLocation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryContext_LeashLocation, 0x0028);
		}

		// class UMEEnvQueryContext_NextPatrolLoc : public UEnvQueryContext
		TEST_METHOD(Class__Maneater__MEEnvQueryContext_NextPatrolLoc)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryContext_NextPatrolLoc, 0x0028);
		}

		// class UMEEnvQueryContext_PlayerCameraLocation : public UEnvQueryContext
		TEST_METHOD(Class__Maneater__MEEnvQueryContext_PlayerCameraLocation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryContext_PlayerCameraLocation, 0x0028);
		}

		// class UMEEnvQueryContext_PlayerCameraRotation : public UEnvQueryContext
		TEST_METHOD(Class__Maneater__MEEnvQueryContext_PlayerCameraRotation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryContext_PlayerCameraRotation, 0x0028);
		}

		// class UMEEnvQueryGenerator_3DGrid : public UEnvQueryGenerator
		TEST_METHOD(Class__Maneater__MEEnvQueryGenerator_3DGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryGenerator_3DGrid, GridHalfExtentX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryGenerator_3DGrid, GridHalfExtentY, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryGenerator_3DGrid, SpaceBetween, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryGenerator_3DGrid, NumLayers, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryGenerator_3DGrid, SpaceBetweenLayers, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryGenerator_3DGrid, GenerateAround, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryGenerator_3DGrid, 0x0170);
		}

		// class UMEEnvQueryGenerator_CombatLocations : public UEnvQueryGenerator
		TEST_METHOD(Class__Maneater__MEEnvQueryGenerator_CombatLocations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryGenerator_CombatLocations, DefaultCombatDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryGenerator_CombatLocations, DefaultCombatHeight, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryGenerator_CombatLocations, QueryContext, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryGenerator_CombatLocations, 0x00C8);
		}

		// class UMEEnvQueryGenerator_EscapeVolume : public UEnvQueryGenerator
		TEST_METHOD(Class__Maneater__MEEnvQueryGenerator_EscapeVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryGenerator_EscapeVolume, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryGenerator_EscapeVolume, 0x0058);
		}

		// class UMEEnvQueryItemType_CombatLocation : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__Maneater__MEEnvQueryItemType_CombatLocation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryItemType_CombatLocation, 0x0030);
		}

		// class UMEEnvQueryTest_InsideEscapeVol : public UEnvQueryTest
		TEST_METHOD(Class__Maneater__MEEnvQueryTest_InsideEscapeVol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryTest_InsideEscapeVol, 0x01F8);
		}

		// class UMEEnvQueryTest_IsInsideOcean : public UEnvQueryTest
		TEST_METHOD(Class__Maneater__MEEnvQueryTest_IsInsideOcean)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryTest_IsInsideOcean, CapsuleRadius, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryTest_IsInsideOcean, CapsuleHalfHeight, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryTest_IsInsideOcean, 0x0268);
		}

		// class UMEEnvQueryTest_ProjectToSeaLevel : public UEnvQueryTest
		TEST_METHOD(Class__Maneater__MEEnvQueryTest_ProjectToSeaLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEEnvQueryTest_ProjectToSeaLevel, OffsetZValue, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryTest_ProjectToSeaLevel, 0x0230);
		}

		// class UMEEnvQueryTest_WaterDepth : public UEnvQueryTest
		TEST_METHOD(Class__Maneater__MEEnvQueryTest_WaterDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEEnvQueryTest_WaterDepth, 0x01F8);
		}

		// class AMEEscapeVolume : public AVolume
		TEST_METHOD(Class__Maneater__MEEscapeVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMEEscapeVolume, UnknownData_HIDA, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMEEscapeVolume, 0x0260);
		}

		// class UMENavArea_Escape : public UNavArea
		TEST_METHOD(Class__Maneater__MENavArea_Escape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMENavArea_Escape, 0x0048);
		}

		// class AMerEQSTestingPawn : public AEQSTestingPawn
		TEST_METHOD(Class__Maneater__MerEQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMerEQSTestingPawn, MercunaNavigation, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMerEQSTestingPawn, UnknownData_MSFX, 0x0558);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMerEQSTestingPawn, 0x0560);
		}

		// class UOvodusButton : public UButton
		TEST_METHOD(Class__Maneater__OvodusButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOvodusButton, AdvancedHitTexture, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOvodusButton, AdvancedHitAlpha, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOvodusButton, UnknownData_M8FO, 0x0434);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOvodusButton, 0x0438);
		}

		// class UNavTestRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavTestRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x0410);
		}

		// class UNavigationQueryFilter : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationQueryFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_PHYY, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0048);
		}

		// class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
		TEST_METHOD(Class__NavigationSystem__RecastFilter_UseDefaultArea)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0048);
		}

		// class ANavigationData : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_6HBJ, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RenderingComp, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, NavDataConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_3QTR, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, RuntimeGeneration, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_HUMI, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, ObservedPathsTickInterval, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, DataVersion, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_GYVT, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, SupportedAreas, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationData, UnknownData_R5U4, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationData, 0x0400);
		}

		// class ARecastNavMesh : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__RecastNavMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_I4CJ, 0x0403);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DrawOffset, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_P94D, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TilePoolSize, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultStreamingTilePoolSize, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSizeUU, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellSize, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, CellHeight, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentRadius, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentHeight, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxHeight, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxSlope, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, AgentMaxStepHeight, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MinRegionArea, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MergeRegionSize, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimplificationError, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileNumberHardLimit, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefTileBits, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefNavPolyBits, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, PolyRefSaltBits, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, NavMeshOriginOffset, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultDrawDistance, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxSearchNodes, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionPartitioning, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerPartitioning, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_H1WU, 0x046E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, RegionChunkSplits, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, LayerChunkSplits, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_BD7W, 0x047A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, TileSetUpdateInterval, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, HeuristicScale, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, VerticalDeviationFromGroundCompensation, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::ARecastNavMesh, UnknownData_2GVM, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARecastNavMesh, 0x04B8);
		}

		// class URecastNavMeshDataChunk : public UNavigationDataChunk
		TEST_METHOD(Class__NavigationSystem__RecastNavMeshDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_ELVY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0040);
		}

		// class UNavigationSystemV1 : public UNavigationSystemBase
		TEST_METHOD(Class__NavigationSystem__NavigationSystemV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, MainNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, AbstractNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DefaultAgentName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, CrowdManagerClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_5KH9, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DataGatheringMode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_7I49, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_SSHU, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, ActiveTilesUpdateInterval, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgents, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgentsMask, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_5KL3, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataSet, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataRegistrationQueue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_IKS4, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavDataRegisteredEvent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavigationGenerationFinishedDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_QU0D, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OperationMode, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_4MHK, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreasUpdateFreq, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_AHS8, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemV1, 0x0538);
		}

		// class UNavArea : public UNavAreaBase
		TEST_METHOD(Class__NavigationSystem__NavArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_NRSP, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0048);
		}

		// class AAbstractNavData : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__AbstractNavData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAbstractNavData, 0x0400);
		}

		// class UCrowdManagerBase : public UObject
		TEST_METHOD(Class__NavigationSystem__CrowdManagerBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0028);
		}

		// class UNavArea_Default : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Default)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0048);
		}

		// class UNavArea_LowHeight : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_LowHeight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0048);
		}

		// class UNavArea_Null : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Null)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0048);
		}

		// class UNavArea_Obstacle : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Obstacle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0048);
		}

		// class UNavAreaMeta : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0048);
		}

		// class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta_SwitchByAgent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00C8);
		}

		// class UNavCollision : public UNavCollisionBase
		TEST_METHOD(Class__NavigationSystem__NavCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_D2KN, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_ENOR, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x00D8);
		}

		// class ANavigationGraph : public ANavigationData
		TEST_METHOD(Class__NavigationSystem__NavigationGraph)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraph, 0x0400);
		}

		// class ANavigationGraphNode : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationGraphNode, 0x0220);
		}

		// class UNavigationGraphNodeComponent : public USceneComponent
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, UnknownData_IRU7, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0220);
		}

		// class UNavigationInvokerComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavigationInvokerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x00B8);
		}

		// class UNavigationPath : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_INMM, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0088);
		}

		// class UNavigationPathGenerator : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavigationPathGenerator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0028);
		}

		// class UNavigationSystemModuleConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__NavigationSystem__NavigationSystemModuleConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemModuleConfig, UnknownData_BW81, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemModuleConfig, 0x0058);
		}

		// class ANavigationTestingActor : public AActor
		TEST_METHOD(Class__NavigationSystem__NavigationTestingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_2ZFL, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CapsuleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, InvokerComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_C8D6, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, NavAgentProps, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, QueryingExtent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_9YL7, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MyNavData, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ProjectedLocation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_6F83, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostLimitFactor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, MinimumCostLimit, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_DRM0, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, CostDisplayMode, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_RZQP, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, TextCanvasOffset, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_BBEM, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathCost, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, PathfindingSteps, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OtherActor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, FilterClass, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, ShowStepIndex, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, OffsetFromCornersDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationTestingActor, UnknownData_VM4P, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationTestingActor, 0x0310);
		}

		// class UNavLinkComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_KTUB, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_QZMR, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x0430);
		}

		// class UNavRelevantComponent : public UActorComponent
		TEST_METHOD(Class__NavigationSystem__NavRelevantComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_AWWX, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_4B9J, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x00E0);
		}

		// class UNavLinkCustomComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_EWAE, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_99AA, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, SupportedAgents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_F5WE, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_RDXT, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_8ZA7, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_GKBT, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x0190);
		}

		// class UNavLinkCustomInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0028);
		}

		// class UNavLinkHostInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkHostInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0028);
		}

		// class UNavLinkRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkRenderingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x0410);
		}

		// class UNavLinkTrivial : public UNavLinkDefinition
		TEST_METHOD(Class__NavigationSystem__NavLinkTrivial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0050);
		}

		// class ANavMeshBoundsVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavMeshBoundsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, SupportedAgents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavMeshBoundsVolume, UnknownData_1F63, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavMeshBoundsVolume, 0x0260);
		}

		// class UNavMeshRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavMeshRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_9SRU, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x0420);
		}

		// class UNavModifierComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavModifierComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_T8MI, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0140);
		}

		// class ANavModifierVolume : public AVolume
		TEST_METHOD(Class__NavigationSystem__NavModifierVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, UnknownData_3Y3C, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavModifierVolume, AreaClass, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavModifierVolume, 0x0268);
		}

		// class UNavNodeInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavNodeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0028);
		}

		// class ANavSystemConfigOverride : public AActor
		TEST_METHOD(Class__NavigationSystem__NavSystemConfigOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, NavigationSystemConfig, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, OverridePolicy, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavSystemConfigOverride, UnknownData_LTGK, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavSystemConfigOverride, 0x0230);
		}

		// class UAbilityTierWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__AbilityTierWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTierWidget, AgeTierDiamond1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTierWidget, AgeTierDiamond2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTierWidget, AgeTierDiamond3, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTierWidget, AgeTierDiamond4, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbilityTierWidget, AbilityDescription, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTierWidget, 0x0280);
		}

		// class UAgeTierDiamond : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__AgeTierDiamond)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierDiamond, PipBG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierDiamond, PipFill, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierDiamond, NewPip, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierDiamond, InAnimation, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAgeTierDiamond, 0x0278);
		}

		// class UAgeTierInfographicWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__AgeTierInfographicWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, EvolutionUpgradeButton_BP, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, AgeTierText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, AbilityTierWidget1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, AbilityTierWidget2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, AbilityTierWidget3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, UpgradeVerticalBox, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, UpgradeAbilityText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, AbilityIconImage, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, AbilityIconTailwhip, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, AbilityIconWhipshot, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, InAnimation, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, AudioEventShowWidget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgeTierInfographicWidget, UnknownData_6V64, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAgeTierInfographicWidget, 0x02D0);
		}

		// class UAttributesWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__AttributesWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesWidget, InventoryActor, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttributesWidget, 0x0260);
		}

		// class UAwarenessWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__AwarenessWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAwarenessWidget, UnknownData_B0DT, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAwarenessWidget, 0x0260);
		}

		// class UBaseObjectiveDecorator : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__BaseObjectiveDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseObjectiveDecorator, LifeTime, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseObjectiveDecorator, UnknownData_RV63, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseObjectiveDecorator, InAnimation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseObjectiveDecorator, IdleAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseObjectiveDecorator, OutAnimation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseObjectiveDecorator, AssignedObjective, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseObjectiveDecorator, UnknownData_T90O, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseObjectiveDecorator, 0x0288);
		}

		// class UMapMarkerWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__MapMarkerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, MarkerCanvas, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, MarkerImage, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, MarkerName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, MarkerDescription, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, MarkerType, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, UnknownData_I50V, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, Position, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, Rotation, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, Offset, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, IconOverride, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, MarkerRadius, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, MapScale, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerWidget, UnknownData_ZNYJ, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarkerWidget, 0x02F0);
		}

		// class UBountyBoatMapMarkerWidget : public UMapMarkerWidget
		TEST_METHOD(Class__ManeaterUI__BountyBoatMapMarkerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyBoatMapMarkerWidget, LeaderIcon, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyBoatMapMarkerWidget, BoatIcon, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyBoatMapMarkerWidget, 0x0340);
		}

		// class UBountyPanel : public UTwBaseMenuPanel
		TEST_METHOD(Class__ManeaterUI__BountyPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, InfamyRankIcons, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, HunterFirstName, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, HunterLastName, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, GuideText, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, HunterIcon, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, HunterPortrait, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, HunterBio, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, HunterQuote, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, RankIcon, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, SupportBox, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, RewardWidget, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, ProgressBox, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, Progress, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, CurrentLevel, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, NextLevel, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, RightContent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, CenterContent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, LeftContent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, HunterNumber, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, Hunter1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, Hunter2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, Hunter3, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, Hunter4, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, Hunter5, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, Hunter6, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, Hunter7, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, Hunter8, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, Hunter9, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, Hunter10, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, UnknownData_G66P, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, GuideTextTemplate, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, SupportEntries, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, TierIcons, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, HunterSupportIconClass, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, TierIconClass, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, NumLevels, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, UnknownData_CFLX, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, NewRank, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel, UnknownData_JFZ3, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyPanel, 0x0400);
		}

		// class UBountyTimer : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__BountyTimer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, TierProgressLerpTime, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, UnknownData_9S3F, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, ProgressTime, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, InfamyProgressRadial, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, InfamyProgressRadialBackground, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, TierIcon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, TimerText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, InfamyTierText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, StatusText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, HuntingStatusText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, SearchingStatusText, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, ReinforcementStatusText, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, ThreatStatusText, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, ReinforcementTextColor, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, BountyTextColor, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, ThreatTextColor, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, ReinforcementBGColor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, HuntingBGColor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, SearchingBGColor, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, ThreatBGColor, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, RankUp, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, InAnimation, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, OutAnimation, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, Idle_Searching, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, InfamyRankIcons, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyTimer, UnknownData_15YH, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyTimer, 0x03F8);
		}

		// class UCompassMarkerWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__CompassMarkerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassMarkerWidget, Icon, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassMarkerWidget, DirectionText, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompassMarkerWidget, 0x0268);
		}

		// class UCompassWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__CompassWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, CompassStrip, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, MarkerCanvas, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, CompassCombatBG, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, CompassBG, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, StripSlot, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, TotalSegments, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, UniqueSegments, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, MarkerClass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, BGOutOfCombatColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, BGInCombatColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, CombatBGInCombatColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, CombatBGOutOfCombatColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, BoatIcon, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, BossBoatIcon, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, ScalyPeteIcon, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, WaypointIcon, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, WildlifeEnemyIcon, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, UndiscoveredIcon, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, TrackedActors, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, TrackedActorWidgetMap, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, UnknownData_UEJU, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, PlayerWaypointMarker, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, UnknownData_2LMN, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, DirectionWidgets, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassWidget, GrottoIcon, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompassWidget, 0x0398);
		}

		// class UContextualControlWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__ContextualControlWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualControlWidget, WidgetMap, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualControlWidget, EntryWidgetClass, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualControlWidget, WidgetContainer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualControlWidget, ControlWidgetPoolSize, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualControlWidget, UnknownData_RJ63, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualControlWidget, ControlWidgetPool, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualControlWidget, ControlWidgetUsedPool, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextualControlWidget, 0x02E0);
		}

		// class UContextualControlWidgetEntry : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__ContextualControlWidgetEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualControlWidgetEntry, ButtonText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualControlWidgetEntry, PoolOwner, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextualControlWidgetEntry, 0x0268);
		}

		// class UControlsSettingsWidget : public UTwBaseMenuPanel
		TEST_METHOD(Class__ManeaterUI__ControlsSettingsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, ControllerWidgetSwitcher, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LayoutStepper, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, XboxPadTextureSwitcher, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, SpecialLeftText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftTriggerText, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftShoulderText, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftStickClickText, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftStickMoveText, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadUpText, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadLeftText, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadDownText, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadRightText, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, SpecialRightText, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightTriggerText, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightShoulderText, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonTopText, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonBottomText, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonLeftText, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonRightText, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightStickMoveText, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightStickClickText, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, SpecialLeftSlot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftTriggerSlot, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftShoulderSlot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftStickClickSlot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftStickMoveSlot, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadUpSlot, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadLeftSlot, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadDownSlot, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadRightSlot, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, SpecialRightSlot, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightTriggerSlot, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightShoulderSlot, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonTopSlot, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonBottomSlot, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonLeftSlot, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonRightSlot, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightStickMoveSlot, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightStickClickSlot, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, ControllerImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, PS5PadTextureSwitcher, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, SpecialLeftTextPS, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftTriggerTextPS, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftShoulderTextPS, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftStickClickTextPS, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftStickMoveTextPS, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadUpTextPS, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadLeftTextPS, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadDownTextPS, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadRightTextPS, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, SpecialRightTextPS, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightTriggerTextPS, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightShoulderTextPS, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonTopTextPS, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonBottomTextPS, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonLeftTextPS, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonRightTextPS, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightStickMoveTextPS, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightStickClickTextPS, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, SpecialLeftSlotPS, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftTriggerSlotPS, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftShoulderSlotPS, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftStickClickSlotPS, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, LeftStickMoveSlotPS, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadUpSlotPS, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadLeftSlotPS, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadDownSlotPS, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, DpadRightSlotPS, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, SpecialRightSlotPS, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightTriggerSlotPS, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightShoulderSlotPS, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonTopSlotPS, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonBottomSlotPS, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonLeftSlotPS, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, FaceButtonRightSlotPS, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightStickMoveSlotPS, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, RightStickClickSlotPS, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, ControllerImagePS, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, ResetDefaultKey, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, ResetDefaultControllerInput, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, ResetDefaultModalSubject, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, ResetDefaultModalTitle, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, ResetDefaultModalYes, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlsSettingsWidget, ResetDefaultModalCancel, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlsSettingsWidget, 0x0598);
		}

		// class UCreditsScreenView : public UTwBaseView
		TEST_METHOD(Class__ManeaterUI__CreditsScreenView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreenView, CreditScrollWidget_BP, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreenView, RadialProgressWidget, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditsScreenView, UnknownData_AMF3, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditsScreenView, 0x02B8);
		}

		// class UCrosshairNavigationWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__CrosshairNavigationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrosshairNavigationWidget, FocusedMarker, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrosshairNavigationWidget, 0x0260);
		}

		// class UDamageTextController : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__DamageTextController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextController, WidgetContainer, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextController, PoolSize, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextController, DrawDist, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextController, DamageTextWidgetClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextController, WidgetPool, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextController, UsedPool, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageTextController, 0x0290);
		}

		// class UDamageTextWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__DamageTextWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, UnknownData_3M1E, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, DamageText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, ShadowDamage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, BoneDamage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, PoisonDamage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, ElectricDamage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, CriticalDamage, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, EvadeText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, HealthIcon, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, SubCanvas, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, Radius, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, LifeTime, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, EasingFunc, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, UnknownData_UWQU, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, Tweener, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, Controller, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, UnknownData_ND8D, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageTextWidget, AudioEvent, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageTextWidget, 0x02E8);
		}

		// class UDeathView : public UTwBaseView
		TEST_METHOD(Class__ManeaterUI__DeathView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, BackgroundImage, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, QuitButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, RespawnBtn, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, InAnimation, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, OutAnimation, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, DeathText, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, BossDeathText, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, ApexDeathText, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, DrowningDeathText, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, WildlifeDeathText, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, BountyHunterDeathText, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, GenericDeathText, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, BossDeathNarration, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, ApexDeathNarration, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, DrowningDeathNarration, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, WildlifeDeathNarration, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, BountyHunterDeathNarration, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, GenericDeathNarration, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathView, UnknownData_679I, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathView, 0x0398);
		}

		// class UEnemyHealthWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__EnemyHealthWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyHealthWidget, HealthBar, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyHealthWidget, NameText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyHealthWidget, EnemyLevelNumberContainer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyHealthWidget, LevelNumber, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyHealthWidget, HostileFillColor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyHealthWidget, NeutralFillColor, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnemyHealthWidget, 0x0298);
		}

		// class UEnemyOverheadWidgetComponent : public UWidgetComponent
		TEST_METHOD(Class__ManeaterUI__EnemyOverheadWidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetComponent, TargetCharacter, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetComponent, ContainerClass, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetComponent, UnknownData_RB80, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnemyOverheadWidgetComponent, 0x0570);
		}

		// class UEnemyOverheadWidgetContainer : public UTwScreenSpaceConstrainedWidget
		TEST_METHOD(Class__ManeaterUI__EnemyOverheadWidgetContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, UnknownData_NI27, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, Arrow, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, HealthWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, RootCanvas, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, OnScreenContainer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, Invalidator, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, NutrientImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, LockOnIcon, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, MassDifferentialIndicator, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, BottomText, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, IdleAnimation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, LockAnimation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, BlinkAnimation, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, SimpleQuestIndicatorIdleAnimation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, MassDiffImage_Lessthan, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, MassDiffImage_SignificantlyLessthan, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, MassDiffImage_Greaterthan, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, MassDiffImage_SignificantlyGreaterthan, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, MassDiffImage_EqualTo, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, ObjectiveIndicatorIcon, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, SimpleQuestIndicatorIcon, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, WaypointNumberContainer, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, WaypointDistanceText, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, TargetController, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, CurrentAlertState, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, UnknownData_4Z2G, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, HunterRankIconMap, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, CachedTargetingSystem, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, PoolOwner, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, SignificantDifferenceThreshold, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, EquivalentThreshold, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyOverheadWidgetContainer, UnknownData_JXGG, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnemyOverheadWidgetContainer, 0x03C0);
		}

		// class UEnemyScreenSpaceWidgetContainer : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__EnemyScreenSpaceWidgetContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyScreenSpaceWidgetContainer, WidgetContainer, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyScreenSpaceWidgetContainer, EnemyWidgetClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyScreenSpaceWidgetContainer, ExplodingBarrelWidgetClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyScreenSpaceWidgetContainer, EnemyWidgetPoolSize, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyScreenSpaceWidgetContainer, ExplosiveBarrelPoolSize, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyScreenSpaceWidgetContainer, UnknownData_BEMU, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyScreenSpaceWidgetContainer, EnemyWidgetPool, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyScreenSpaceWidgetContainer, EnemyWidgetUsedPool, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyScreenSpaceWidgetContainer, ExplosiveBarrelWidgetPool, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyScreenSpaceWidgetContainer, ExplosiveBarrelWidgetUsedPool, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnemyScreenSpaceWidgetContainer, 0x02B8);
		}

		// class UEnemySuspicionWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__EnemySuspicionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemySuspicionWidget, AtEaseColor, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemySuspicionWidget, SuspicionColor, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemySuspicionWidget, ThreatColor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemySuspicionWidget, ThreatIcon, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemySuspicionWidget, IdleAnimation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemySuspicionWidget, PulseAnimation, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemySuspicionWidget, OnAlertAnimation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemySuspicionWidget, UnknownData_WMYW, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnemySuspicionWidget, 0x02B0);
		}

		// class UEpisodeItemListWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__EpisodeItemListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEpisodeItemListWidget, ItemText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEpisodeItemListWidget, Complete, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEpisodeItemListWidget, CompletedState, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEpisodeItemListWidget, 0x0270);
		}

		// class UEvolutionAbilityWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__EvolutionAbilityWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, Glow, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, Blink, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, MeterFull, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, ChargedBarColor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, ChargedBGColor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, DefaultBGColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, ChargeEndingColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, BindDisabledOpacity, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, UnknownData_T3CI, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, EvolutionChargeBar, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, EvolutionBindName, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, EvolutionAbilityIcon, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, EvolutionAbilityIconBg, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, EvolutionCanvasPanel, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, TigerBodyActive, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, UnknownData_B2X6, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, SonarChargeBar, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, SonarBindName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, SonarFull, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, SonarFullAkEvent, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget, UnknownData_0AAM, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolutionAbilityWidget, 0x0340);
		}

		// class UEvolutionIconButtonWidget : public UTwBaseButton
		TEST_METHOD(Class__ManeaterUI__EvolutionIconButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, UnknownData_VYIY, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, OnErrorAkEvent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, OnUnequipAkEvent, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, OnDenyEquipAkEvent, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, SlotNameText, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, RarityColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, SelectedFrameImage, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, SelectedFlashBorder, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, LockedImage, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, UnlockedImage, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, EvolutionIconUpgradeFX, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, NewEvolutionAnimation, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, SlotName, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, DefaultBackgroundImage, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, SlotType, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, EvolutionRarity, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, SelectedFrameEnabled, 0x04E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, UnknownData_DJNR, 0x04E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, InvalidAgeTierColor, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, ValidAgeTierColor, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, NewEvolutionColor, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, UnknownData_4KHY, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, EvolutionData, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, IsLocked, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, UseCustomFocus, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, IsEquipped, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, UnknownData_M51Z, 0x052B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionIconButtonWidget, ParentListWidget, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolutionIconButtonWidget, 0x0538);
		}

		// class UEvolutionListWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__EvolutionListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionListWidget, UnknownData_Q0BJ, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionListWidget, EvolutionList, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionListWidget, TitleText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionListWidget, BackBtn, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionListWidget, EvolutionListItemWidgetClass, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionListWidget, EvolutionListItemBackgroundImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionListWidget, EvolutionsPerRow, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionListWidget, EvolutionSlotFilter, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionListWidget, UnknownData_TNC5, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionListWidget, FocusedInventoryEvolution, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionListWidget, UnknownData_SZ22, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolutionListWidget, 0x02F0);
		}

		// class UEvolutionsPanel : public UTwBaseMenuPanel
		TEST_METHOD(Class__ManeaterUI__EvolutionsPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, SlotContainer, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, JawSlot, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, HeadSlot, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, BodySlot, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, FinSlot, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, TailSlot, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, Organ1Slot, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, Organ2Slot, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, Organ3Slot, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, EvolutionListWidget, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, EvolutionUpgradeWidget, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, TransitionToList, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, TransitionToSlots, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, TransitionToUpgrade, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, TransitionOutOfUpgrade, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, LevelProgressWidget, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, AttributesWidget, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, PaperDollImage, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, OnMenuBackTransitionAkEvent, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, UpgradeTransitionAkEvent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, AgeTierInfographic, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, TutorialpopupWidget_BP, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, InventoryActorClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, InventoryActor, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, UnknownData_QVO0, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, SelectDisabledFooterText, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, DefaultFooterText, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, UnknownData_U9T5, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionsPanel, GameMenuView, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolutionsPanel, 0x0408);
		}

		// class UEvolutionUpgradeWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__EvolutionUpgradeWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionUpgradeWidget, UnknownData_NMGH, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionUpgradeWidget, UpgradeCostText1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionUpgradeWidget, UpgradeCostText2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionUpgradeWidget, NutrientImage1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionUpgradeWidget, NutrientImage2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionUpgradeWidget, UpgradeButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionUpgradeWidget, CancelButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionUpgradeWidget, InAnimation, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionUpgradeWidget, OutAnimation, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionUpgradeWidget, EvolutionToBeUpgraded, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolutionUpgradeWidget, 0x02C0);
		}

		// class UExplosiveIndicatorScreenSpaceWidget : public UTwScreenSpaceConstrainedWidget
		TEST_METHOD(Class__ManeaterUI__ExplosiveIndicatorScreenSpaceWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveIndicatorScreenSpaceWidget, BlinkAnim, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveIndicatorScreenSpaceWidget, Icon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveIndicatorScreenSpaceWidget, MinBlinkSpeed, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveIndicatorScreenSpaceWidget, MaxBlinkSpeed, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveIndicatorScreenSpaceWidget, bLerpSpeed, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveIndicatorScreenSpaceWidget, UnknownData_VNFO, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveIndicatorScreenSpaceWidget, SplitPercent, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveIndicatorScreenSpaceWidget, UnknownData_RV0N, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExplosiveIndicatorScreenSpaceWidget, PoolOwner, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExplosiveIndicatorScreenSpaceWidget, 0x02C8);
		}

		// class UFastTravelConfirmationWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__FastTravelConfirmationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFastTravelConfirmationWidget, UnknownData_DXBH, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFastTravelConfirmationWidget, 0x0260);
		}

		// class UGameplaySettingsWidget : public UTwBaseMenuPanel
		TEST_METHOD(Class__ManeaterUI__GameplaySettingsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplaySettingsWidget, SubtitlesWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplaySettingsWidget, TUtorialPopupWidget, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplaySettingsWidget, InvertMouseY, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplaySettingsWidget, MouseSensitivity, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplaySettingsWidget, InvertGamepadY, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplaySettingsWidget, RightStickSensitivity, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplaySettingsWidget, VibrationWidget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplaySettingsWidget, BrightnessStepper, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplaySettingsWidget, RaytracingWidget, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplaySettingsWidget, 0x02E0);
		}

		// class UGrottoMapMarkerWidget : public UMapMarkerWidget
		TEST_METHOD(Class__ManeaterUI__GrottoMapMarkerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrottoMapMarkerWidget, OwningGrottoActor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrottoMapMarkerWidget, FastTravelHoldTime, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrottoMapMarkerWidget, CurrentFastTravelHoldTime, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrottoMapMarkerWidget, AudioEventFastTravel, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrottoMapMarkerWidget, UnknownData_32VQ, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGrottoMapMarkerWidget, 0x0310);
		}

		// class UHUDErrorMessageWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__HUDErrorMessageWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDErrorMessageWidget, ErrorText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDErrorMessageWidget, InAnimation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDErrorMessageWidget, OutAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDErrorMessageWidget, ObjController, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDErrorMessageWidget, 0x0278);
		}

		// class UHUDRewardQueueWidget : public UTwWidgetQueue
		TEST_METHOD(Class__ManeaterUI__HUDRewardQueueWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDRewardQueueWidget, RewardWidgetClass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDRewardQueueWidget, CurrentWidgetPool, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDRewardQueueWidget, MaxWidgetCount, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDRewardQueueWidget, UnknownData_H138, 0x0314);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDRewardQueueWidget, 0x0318);
		}

		// class UHUDRewardWidget : public UBaseObjectiveDecorator
		TEST_METHOD(Class__ManeaterUI__HUDRewardWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDRewardWidget, RewardName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDRewardWidget, RewardIcon, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDRewardWidget, RarityBG, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDRewardWidget, NutrientRewardImage, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDRewardWidget, 0x02A8);
		}

		// class UHUDTipInfo : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__HUDTipInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDTipInfo, HeaderText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDTipInfo, BodyText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDTipInfo, InputText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDTipInfo, CurrentTipTimeOnScreen, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDTipInfo, bIsTipShowing, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHUDTipInfo, UnknownData_9LKS, 0x0275);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHUDTipInfo, 0x0290);
		}

		// class UHunterButtonWidget : public UTwBaseButton
		TEST_METHOD(Class__ManeaterUI__HunterButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterButtonWidget, UnknownData_G7TQ, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterButtonWidget, HunterIndex, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterButtonWidget, bIsKilled, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterButtonWidget, bIsCurrentTarget, 0x044D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterButtonWidget, UnknownData_VJHK, 0x044E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterButtonWidget, HunterTexture, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterButtonWidget, ButtonFrameGlow, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterButtonWidget, CurrentHunterMarker, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterButtonWidget, HunterKilled, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHunterButtonWidget, 0x0470);
		}

		// class UHunterSupportIcon : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__HunterSupportIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterSupportIcon, SupportIcon, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterSupportIcon, SupportName, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHunterSupportIcon, 0x0268);
		}

		// class UInfamyRankUpWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__InfamyRankUpWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpWidget, ImageTarget, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpWidget, InAnimation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpWidget, OutAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpWidget, OutRank10Animation, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpWidget, RankUpSoundEvent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpWidget, InfamyRankUpText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpWidget, InfamyWidgetSwitcher, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpWidget, TierTextures, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpWidget, RootCanvas, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpWidget, ObjController, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpWidget, NumLevels, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRankUpWidget, UnknownData_84N0, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfamyRankUpWidget, 0x02B8);
		}

		// class UInfamyRewardWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__InfamyRewardWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, IsComplete, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, UnknownData_4E24, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, RewardIcon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, RewardPanel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, NutrientPanel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, CompletePanel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, RewardName, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, RewardDescription, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, FatRewardImage, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, FatRewardAmountText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, ProteinRewardImage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, ProteinRewardAmountText, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, MineralRewardImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, MineralRewardAmountText, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, MutagenRewardImage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyRewardWidget, MutagenRewardAmountText, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfamyRewardWidget, 0x02D0);
		}

		// class UInfamyTierIcon : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__InfamyTierIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyTierIcon, LevelText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyTierIcon, LockIcon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyTierIcon, Selected, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyTierIcon, Deselected, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfamyTierIcon, 0x0278);
		}

		// class UInGameMenuButton : public UTwBaseButton
		TEST_METHOD(Class__ManeaterUI__InGameMenuButton)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameMenuButton, 0x0438);
		}

		// class UInGameMenuController : public UTwBaseMenu
		TEST_METHOD(Class__ManeaterUI__InGameMenuController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuController, NewQuestNotificationImage, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuController, NewEvolutionNotificationImage, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameMenuController, 0x0318);
		}

		// class UInGameMenuView : public UTwBaseMenuView
		TEST_METHOD(Class__ManeaterUI__InGameMenuView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuView, InventoryActor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuView, UnknownData_8LBP, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameMenuView, 0x02C0);
		}

		// class UInvertedControlsWidget : public UTwBaseModal
		TEST_METHOD(Class__ManeaterUI__InvertedControlsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertedControlsWidget, UnknownData_ZP0V, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertedControlsWidget, AcceptButton, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertedControlsWidget, InvertButton, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertedControlsWidget, UnInvertButton, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvertedControlsWidget, UnknownData_SHIJ, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvertedControlsWidget, 0x0290);
		}

		// class UKeyMappingMultiOptionModal : public UTwMultiOptionModal
		TEST_METHOD(Class__ManeaterUI__KeyMappingMultiOptionModal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyMappingMultiOptionModal, 0x0360);
		}

		// class UKeyMappingSettingsWidget : public UTwBaseMenuPanel
		TEST_METHOD(Class__ManeaterUI__KeyMappingSettingsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, MoveForwardWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, MoveLeftWidget, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, MoveBackwardWidget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, MoveRightWidget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, BiteWidget, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, TailwhipWidget, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, EvadeLeftWidget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, EvadeRightWidget, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, EvadeUpWidget, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, EvadeDownWidget, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, LungeWidget, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, ActivateEvolutionWidget, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, MapMenuWidget, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, InfamyMenuWidget, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, EvolutionsMenuWidget, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, SonarWidget, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, FocusThreatWidget, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, ResetDefaultKey, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, ResetDefaultControllerInput, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, ResetDefaultModalSubject, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, ResetDefaultModalTitle, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, ResetDefaultModalYes, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsWidget, ResetDefaultModalCancel, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyMappingSettingsWidget, 0x03B0);
		}

		// class UKeyMappingWidget : public UTwBaseButton
		TEST_METHOD(Class__ManeaterUI__KeyMappingWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, UnknownData_CXHT, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, SettingsLabel, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, SelectedSettingsLabel, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, SettingName, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, BindFormatting, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, EmptyBindText, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, SettingActionName, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, SettingAxisScale, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, UnknownData_CK14, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, SettingDefaultKey, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, KeyMappingMultiOptionModalAssetRef, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, KeyModalTitle, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, KeyModalSubject, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, KeyModalCancel, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingWidget, UnknownData_P1I9, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyMappingWidget, 0x0540);
		}

		// class ULandmarkMapMarkerWidget : public UMapMarkerWidget
		TEST_METHOD(Class__ManeaterUI__LandmarkMapMarkerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandmarkMapMarkerWidget, OwningWorldLandmarkActor, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandmarkMapMarkerWidget, 0x02F8);
		}

		// class ULevelProgressWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__LevelProgressWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, AgeTierText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, LevelText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, PercentToNextLevelBar, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, DeltaBar, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, Invalidator, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, ValueTweener, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, VisitGrottoText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, FightPeteText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, LevelUpImageContainer, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, MessageLoop, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, NutrientWidgetSwitcher, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, ShowText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, ShowGrottoText, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, ShouldFadeOut, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, ShowNutrientText, 0x02B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, UnknownData_P5VC, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, CachedOpacityTween, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, OpacityInTweenTime, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, VisibleTime, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, OpacityOutTweenTime, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, IdleOpactity, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, OpacityInEaseFunc, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, OpacityOutEaseFunc, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressWidget, UnknownData_89E8, 0x02E2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelProgressWidget, 0x02E8);
		}

		// class ULoadGameButtonWidget : public UTwBaseButton
		TEST_METHOD(Class__ManeaterUI__LoadGameButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, SaveSlotIndex, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, UnknownData_SV11, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, OnSaveSlotDeleted, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, EmptyPadding, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, UnknownData_VDYH, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, FrameSwitcher, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, EmptySlotNameText, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, SlotNameText, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, DateTimeText, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, CurrentRegionText, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, PlayerLevelText, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, TimePlayedText, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, SaveImage, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, NewGameMap, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, DeleteSaveKey, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, DeleteSaveControllerInput, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, DeleteSaveModalSubject, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, DeleteSaveModalTitle, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, DeleteSaveModalYes, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadGameButtonWidget, DeleteSaveModalCancel, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadGameButtonWidget, 0x0548);
		}

		// class UMacroObjectiveMeterWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__MacroObjectiveMeterWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, RegionTweener, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, GameTweener, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, OpacityTweener, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, ObjectiveVisibleDuration, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, EasingFunc, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, UnknownData_6I2U, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, RegionBar, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, RegionBarBg, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, RegionPctText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, GameBar, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, GameBarBg, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, RegionNameText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, RegionImage, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, PoisonWarning, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget, UnknownData_J2SH, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMacroObjectiveMeterWidget, 0x02C8);
		}

		// class AManeaterBaseHUD : public ATwHUD
		TEST_METHOD(Class__ManeaterUI__ManeaterBaseHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AManeaterBaseHUD, 0x0358);
		}

		// class UManeaterBaseViewController : public UTwViewController
		TEST_METHOD(Class__ManeaterUI__ManeaterBaseViewController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterBaseViewController, UnknownData_DCA3, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterBaseViewController, 0x02B8);
		}

		// class UManeaterCinematicView : public UTwBaseView
		TEST_METHOD(Class__ManeaterUI__ManeaterCinematicView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterCinematicView, RadialProgressWidget, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterCinematicView, 0x02A0);
		}

		// class UManeaterCinematicViewController : public UTwBaseMenu
		TEST_METHOD(Class__ManeaterUI__ManeaterCinematicViewController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterCinematicViewController, 0x0308);
		}

		// class AManeaterHUD : public AManeaterBaseHUD
		TEST_METHOD(Class__ManeaterUI__ManeaterHUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnPlayerSkippedCinematic, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnPlayerDamaged, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnNutrientsChanged, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnNutrientGained, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnRegionChanged, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnCharacterAbilityTriggered, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, GameplayTagAdded, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, GameplayTagRemoved, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnTimeDilationEventDelegate, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnPlayerMovementModeChangedDelegate, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnScreenSpaceWidgetRequested, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnRemoveScreenSpaceWidgetRequested, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnGamePauseStateChanged, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnPlayerCausedCombatEvent, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnObjectiveCompleteEvent, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnStoryEventProgressEvent, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnAdvancedToNextEpisodeEvent, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnBossFightAvailableEvent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnBountyBossSpawnedEvent, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnLandmarkObjectFoundEvent, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnObjectiveStartedEvent, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnObjectiveUpdatedEvent, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnObjectiveDiscoveredEvent, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnObjectiveTrackEvent, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnObjectiveStateChangedEvent, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnNewQuestAvailableChangedEvent, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnHUDErrorMessageEvent, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnBasicTooltipRequestedEvent, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnPlayerKnifingStateChanged, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnAICombatStatusChangedEvent, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnThrashUIChangedEvent, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OnPlayerLevelChanged, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, UnknownData_3YWT, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, DeathScreenTimerHandle, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, HUDViewClass, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, OwnerCharacter, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, DeathViewClass, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, ManeaterCinematicViewClass, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, CreditsScreenViewClass, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD, UnknownData_DKUZ, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AManeaterHUD, 0x07C8);
		}

		// class UManeaterHUDPauseMenuView : public UTwBaseView
		TEST_METHOD(Class__ManeaterUI__ManeaterHUDPauseMenuView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDPauseMenuView, QuitButton, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDPauseMenuView, MainMenu, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDPauseMenuView, Settings, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDPauseMenuView, QuitModalAccept, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDPauseMenuView, QuitModalCancel, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDPauseMenuView, QuitModalSubtext, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterHUDPauseMenuView, 0x02F8);
		}

		// class UManeaterHUDView : public UTwBaseView
		TEST_METHOD(Class__ManeaterUI__ManeaterHUDView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, UnknownData_TWL4, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, SavingThrobber, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, Speedometer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, SavingBox, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, HudTipInfoWidget, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, TutorialInfoWidget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, UnknownData_GOF0, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, InvertedControlsWidget, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, UnknownData_GUY5, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, TutorialSinglePopupWidgetClass, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, InvertedControlsWidgetClass, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, StoryCompleteWidgetClass, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, ObjectiveWidgetClass, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, ObjectiveWidgetPoolSize, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, UnknownData_4N12, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView, ObjectiveWidgetPool, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterHUDView, 0x0390);
		}

		// class UManeaterHUDViewController : public UManeaterBaseViewController
		TEST_METHOD(Class__ManeaterUI__ManeaterHUDViewController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDViewController, bDisablePause, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDViewController, UnknownData_C7L4, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDViewController, PauseViewClass, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterHUDViewController, 0x02C8);
		}

		// class UManeaterMapPanel : public UTwBaseMenuPanel
		TEST_METHOD(Class__ManeaterUI__ManeaterMapPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, UnknownData_8IYL, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, FastTravelConfirmationWidgetClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, WorldMapWidget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, CrosshairNavigationWidget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, MapMarkerPopupWidget, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, PoisonWaterMessage, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, CurrentRegionProgressWidget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, CurrentFocusedRegion, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, UnknownData_S9ET, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, Regions, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, MapToRealWorldScale, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, RegionMapInFocus, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, UnknownData_U3BW, 0x02ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, MapScrollSpeed, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, GamepadMapZoomSpeed, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, MouseScrollingScale, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, MouseZoomingScale, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, UnknownData_RXHV, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, PlayAudioGamepadKey, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, PlayAudioKeyboardKey, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, TrackObjectiveGamepadKey, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, TrackObjectiveKeyboardKey, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, TutorialSimplePopupWidget, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, LegendIn, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, LegendOut, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, UnknownData_ZYWP, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, TrackObjectiveAudioEvent, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterMapPanel, UntrackObjectiveAudioEvent, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterMapPanel, 0x03C8);
		}

		// class UManeaterModalViewController : public UManeaterBaseViewController
		TEST_METHOD(Class__ManeaterUI__ManeaterModalViewController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterModalViewController, 0x02B8);
		}

		// class UManeaterSettingsMenuView : public UTwBaseMenuView
		TEST_METHOD(Class__ManeaterUI__ManeaterSettingsMenuView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterSettingsMenuView, SavingThrobber, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterSettingsMenuView, 0x02B0);
		}

		// class AManeaterTitleMenuHUD : public AManeaterBaseHUD
		TEST_METHOD(Class__ManeaterUI__ManeaterTitleMenuHUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterTitleMenuHUD, TitleSplashViewClass, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AManeaterTitleMenuHUD, 0x0360);
		}

		// class UManeaterTitleMenuView : public UTwBaseView
		TEST_METHOD(Class__ManeaterUI__ManeaterTitleMenuView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, SavingThrobber, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, SaveSlotsIn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, SaveSlotsOut, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, SaveSlotSwitcher, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, LoadSlot1Button, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, LoadSlot2Button, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, LoadSlot3Button, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, ContinueGameButton, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, PlayGameButton, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, SettingsButton, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, ExitButton, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, ExitPanel, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, QuitModalAccept, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, QuitModalCancel, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, QuitModalSubtext, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, SettingsView, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, StatsView, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, NewGameMap, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, CachedSaveGames, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, UnknownData_KR60, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuView, OnNavigateBackAkEvent, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterTitleMenuView, 0x0380);
		}

		// class UManeaterTitleMenuViewController : public UManeaterBaseViewController
		TEST_METHOD(Class__ManeaterUI__ManeaterTitleMenuViewController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleMenuViewController, ActiveUserID, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterTitleMenuViewController, 0x02C0);
		}

		// class UManeaterTitleSplashView : public UTwBaseView
		TEST_METHOD(Class__ManeaterUI__ManeaterTitleSplashView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleSplashView, ProfileText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleSplashView, StartButton, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleSplashView, TitleMenuClass, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleSplashView, OnSplashClosingAkEvent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterTitleSplashView, UnknownData_JWFM, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterTitleSplashView, 0x02D0);
		}

		// class UManeaterUIFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ManeaterUI__ManeaterUIFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterUIFunctionLibrary, 0x0028);
		}

		// class UManeaterUISettings : public UDeveloperSettings
		TEST_METHOD(Class__ManeaterUI__ManeaterUISettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterUISettings, EpisodeImages, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterUISettings, MapSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterUISettings, DisplayStatLookupDataTable, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterUISettings, RarityToColorMap, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterUISettings, NutrientTypeToColorMap, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterUISettings, InputTextFormat, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterUISettings, RestrictedKeys, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterUISettings, 0x0188);
		}

		// class UMapMarkerPopupWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__MapMarkerPopupWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, RightOfCenterPos, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, LeftOfCenterPos, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, QuestTitleText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, QuestImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, DefaultQuestImage, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, QuestDescriptionText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, SubtitleText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, ShortObjectiveText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, QuestProgressText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, AudioLog, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, ObjectiveRewards, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, QuestTypeText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, FocusedMarker, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, ErrorText, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, FastTravelRTB, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, InCombatErrorText, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget, AlreadyAtGrottoErrorText, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarkerPopupWidget, 0x0300);
		}

		// class UMapProgressButtonWidget : public UTwBaseButton
		TEST_METHOD(Class__ManeaterUI__MapProgressButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, UnknownData_M9D3, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, IconTexture, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, SectionName, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, DefaultActionName, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, SelectedActionName, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, WidgetSwitcherIndex, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, DisplayProgress, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, bFocused, 0x04AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, bDisableActionContainer, 0x04AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, UnknownData_ZPOD, 0x04AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, SectionText, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, ActionText, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, SectionIconImage, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, SectionProgressBar, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressButtonWidget, ClickActionContainer, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProgressButtonWidget, 0x04D8);
		}

		// class UMapProgressWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__MapProgressWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressWidget, IconTexture, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressWidget, SectionName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressWidget, SectionText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressWidget, LandmarkProgressText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressWidget, NutrientCacheProgressText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressWidget, CollectableProgressText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressWidget, LandmarkContainer, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressWidget, NutrientCacheContainer, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressWidget, CollectableContainer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressWidget, SectionIconImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressWidget, SectionProgressBar, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProgressWidget, SectionPercentage, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProgressWidget, 0x02C8);
		}

		// class UMapWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__MapWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MapContainerCanvas, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MapCanvasPanel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MapScaleBox, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MapImage, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, FocalTarget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, FocusInterpSpeed, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MapZoomSpeed, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MinZoomLevel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MaxZoomLevel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, TransitionZoomLevel, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MapScale, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, UnknownData_E826, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapWidget, MapContainerCanvasSlot, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapWidget, 0x02A8);
		}

		// class UME_CinematicMovieWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__ME_CinematicMovieWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CinematicMovieWidget, RadialProgressWidget, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CinematicMovieWidget, Movie_720p, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CinematicMovieWidget, Movie_1080p, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_CinematicMovieWidget, Movie_1088p, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_CinematicMovieWidget, 0x0278);
		}

		// class UME_RadialProgressWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__ME_RadialProgressWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_RadialProgressWidget, HoldProgressImage, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_RadialProgressWidget, UnknownData_WEL6, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_RadialProgressWidget, 0x0268);
		}

		// class UMEToastWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__METoastWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEToastWidget, Duration, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEToastWidget, ObjController, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEToastWidget, UnknownData_LMGL, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEToastWidget, 0x0270);
		}

		// class UMEApexSpawnToast : public UMEToastWidget
		TEST_METHOD(Class__ManeaterUI__MEApexSpawnToast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEApexSpawnToast, ApexNameText, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEApexSpawnToast, 0x0278);
		}

		// class UMEControllerDisconnectedModal : public UTwControllerDisconnectedModal
		TEST_METHOD(Class__ManeaterUI__MEControllerDisconnectedModal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEControllerDisconnectedModal, UnknownData_V645, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEControllerDisconnectedModal, 0x0278);
		}

		// class UMELevelUpToast : public UMEToastWidget
		TEST_METHOD(Class__ManeaterUI__MELevelUpToast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMELevelUpToast, HeaderText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMELevelUpToast, AudioEventLevelUp, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMELevelUpToast, 0x0280);
		}

		// class UMENewEpisodeToast : public UMEToastWidget
		TEST_METHOD(Class__ManeaterUI__MENewEpisodeToast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMENewEpisodeToast, EpisodeTitleText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMENewEpisodeToast, EpisodeNumberText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMENewEpisodeToast, AudioEventNewEpisode, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMENewEpisodeToast, 0x0288);
		}

		// class UMERegionToast : public UMEToastWidget
		TEST_METHOD(Class__ManeaterUI__MERegionToast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMERegionToast, HeaderText, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMERegionToast, RegionText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMERegionToast, RegionProgressText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMERegionToast, RegionImage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMERegionToast, DiscoveredText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMERegionToast, EnteringText, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMERegionToast, 0x02C0);
		}

		// class UMESettingsStepper : public UTwBaseButton
		TEST_METHOD(Class__ManeaterUI__MESettingsStepper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMESettingsStepper, OnStepperValueChanged, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMESettingsStepper, SettingsLabel, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMESettingsStepper, SelectedSettingsLabel, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMESettingsStepper, PrevButton, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMESettingsStepper, NextButton, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMESettingsStepper, OptionsList, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMESettingsStepper, SettingName, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMESettingsStepper, UnknownData_H4CL, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMESettingsStepper, 0x0498);
		}

		// class UMEStoryProgressToast : public UMEToastWidget
		TEST_METHOD(Class__ManeaterUI__MEStoryProgressToast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEStoryProgressToast, EpisodeTextures, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEStoryProgressToast, CurrentEpisodeImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEStoryProgressToast, NextEpisodeImage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEStoryProgressToast, EpisodeProgressBar, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEStoryProgressToast, EpisodeTitleText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEStoryProgressToast, EpisodeListItemText, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMEStoryProgressToast, AudioEventStoryProgress, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMEStoryProgressToast, 0x02B0);
		}

		// class UMETooltipContainer : public UTwTooltipContainer
		TEST_METHOD(Class__ManeaterUI__METooltipContainer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMETooltipContainer, 0x0268);
		}

		// class UNotorietyMeterWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__NotorietyMeterWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNotorietyMeterWidget, 0x0258);
		}

		// class UObjectiveButtonWidget : public UTwBaseButton
		TEST_METHOD(Class__ManeaterUI__ObjectiveButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveButtonWidget, UnknownData_9OX0, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveButtonWidget, ObjectiveData, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveButtonWidget, ObjectiveNameText, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveButtonWidget, ObjectiveIcon, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveButtonWidget, TrackIcon, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveButtonWidget, CompletedTextOpacity, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveButtonWidget, NormalTextOpacity, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveButtonWidget, CompletedImageColor, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveButtonWidget, NormalImageColor, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveButtonWidget, 0x04C8);
		}

		// class UObjectiveCollectionWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__ObjectiveCollectionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCollectionWidget, UnknownData_U7SG, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCollectionWidget, ObjectiveList, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCollectionWidget, TitleText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCollectionWidget, ObjectiveButtonWidgetClass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCollectionWidget, StoryTitleText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCollectionWidget, FocusedObjective, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCollectionWidget, FocusedObjectiveIndex, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCollectionWidget, UnknownData_QV6I, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveCollectionWidget, 0x02C8);
		}

		// class UObjectiveCompletionDecorator : public UBaseObjectiveDecorator
		TEST_METHOD(Class__ManeaterUI__ObjectiveCompletionDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, LocationText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, ObjectiveText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, CompletedText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, ObjectiveIcon, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, CompleteAkEvent, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, TutorialCompleteAkEvent, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, BossFightAvailableAkEvent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, DefaultCompletedText, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, TutorialCompletedText, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, TutorialCompletedIcon, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, UnknownData_WTCJ, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, RegionCompletedText, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, UnknownData_EVTO, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, GameCompletedTitleText, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, GameCompletedText, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, GameCompletedIcon, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, UnknownData_J8LI, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, BossFightText, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, BossFightIcon, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveCompletionDecorator, UnknownData_LXKC, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveCompletionDecorator, 0x0388);
		}

		// class UObjectiveControllerWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__ObjectiveControllerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, NewQuestDuration, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, UnknownData_OVRZ, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, IncrementalObjectiveDecoratorMap, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, CenterProgressObjectiveDecoratorMap, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, CompletionObjectiveDecorator, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, DiscoveredObjectiveDecorator, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, TrackObjectiveDecorator, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, RegionToastClass, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, LevelUpToastClass, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, StoryProgressToastClass, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, NewEpisodeToastClass, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, InfamyRankUpClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, ApexSpawnToastClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, HUDErrorMessageClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, MacroObjectiveWidget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, IncrementalQueue, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, CenterQueue, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, TopQueue, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, DiscoveredQueue, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, NewQuestNotificationWidget, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, UnknownData_VFQ0, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveControllerWidget, ToastWidgetPool, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveControllerWidget, 0x0410);
		}

		// class UObjectiveDecoratorQueueWidget : public UTwWidgetQueue
		TEST_METHOD(Class__ManeaterUI__ObjectiveDecoratorQueueWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveDecoratorQueueWidget, 0x0288);
		}

		// class UObjectiveDiscoveredDecorator : public UBaseObjectiveDecorator
		TEST_METHOD(Class__ManeaterUI__ObjectiveDiscoveredDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveDiscoveredDecorator, ObjectiveNameText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveDiscoveredDecorator, QuestIcon, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveDiscoveredDecorator, 0x0298);
		}

		// class UObjectiveMapMarkerWidget : public UMapMarkerWidget
		TEST_METHOD(Class__ManeaterUI__ObjectiveMapMarkerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveMapMarkerWidget, OwningPlayerObjective, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveMapMarkerWidget, ObjectiveState, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveMapMarkerWidget, UnknownData_LXQU, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveMapMarkerWidget, ObjectiveIndex, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveMapMarkerWidget, MarkerScale, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveMapMarkerWidget, TrackedState, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveMapMarkerWidget, InProgressColor, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveMapMarkerWidget, 0x0320);
		}

		// class UObjectiveProgressDecorator : public UBaseObjectiveDecorator
		TEST_METHOD(Class__ManeaterUI__ObjectiveProgressDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveProgressDecorator, MainText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveProgressDecorator, SubtitleText, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveProgressDecorator, ObjectiveIcon, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveProgressDecorator, ObjectiveMainTextMap, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveProgressDecorator, ObjectiveSubtitleTextMap, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveProgressDecorator, ScalyPeteTexture, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveProgressDecorator, HunterSubtitleText, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveProgressDecorator, UnknownData_XYRM, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveProgressDecorator, LandmarkFoundAkEvent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveProgressDecorator, UnknownData_FIJB, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveProgressDecorator, 0x0378);
		}

		// class UObjectiveTrackDecorator : public UBaseObjectiveDecorator
		TEST_METHOD(Class__ManeaterUI__ObjectiveTrackDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveTrackDecorator, QuestTitle, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveTrackDecorator, QuestProgress, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveTrackDecorator, QuestDescription, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveTrackDecorator, QuestIcon, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveTrackDecorator, ProgressUpdate, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveTrackDecorator, QuestComplete, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectiveTrackDecorator, UnknownData_JGR8, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveTrackDecorator, 0x02C0);
		}

		// class UObjectiveTrackerQueueWidget : public UTwMultiWidgetQueue
		TEST_METHOD(Class__ManeaterUI__ObjectiveTrackerQueueWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveTrackerQueueWidget, 0x0310);
		}

		// class UOverheadAgroWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__OverheadAgroWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverheadAgroWidget, 0x0258);
		}

		// class UPercentageUpdateDecorator : public UBaseObjectiveDecorator
		TEST_METHOD(Class__ManeaterUI__PercentageUpdateDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPercentageUpdateDecorator, Progress, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPercentageUpdateDecorator, IconImage, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPercentageUpdateDecorator, ObjectiveCompleteAkEvent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPercentageUpdateDecorator, NutrientCacheOpenedAkEvent, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPercentageUpdateDecorator, 0x02A8);
		}

		// class UPlayerAbilitiesWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__PlayerAbilitiesWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilitiesWidget, LeftAbility, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilitiesWidget, RightAbility, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilitiesWidget, TopAbility, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilitiesWidget, BottomAbility, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilitiesWidget, AbilitySlotMap, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilitiesWidget, UnknownData_TISN, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerAbilitiesWidget, 0x02D0);
		}

		// class UPlayerAbilityInstanceWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__PlayerAbilityInstanceWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, AbilitySlot, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, UnknownData_NN8P, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, Material, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, AbilityImage, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, AbilityIcon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, CooldownText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, TopBottomMat, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, LeftMat, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, RightMat, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, MatDynamic, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, IconCooldownOpacity, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, AbilityCooldownColorActive, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, AbilityCooldownColorReady, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAbilityInstanceWidget, UnknownData_MMXR, 0x02C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerAbilityInstanceWidget, 0x02D8);
		}

		// class UPlayerEvolutionContainer : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__PlayerEvolutionContainer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerEvolutionContainer, 0x0258);
		}

		// class UPlayerHealthBarWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__PlayerHealthBarWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, ProgressBar, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, DeltaBar, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, BreathBar, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, BreathCanvas, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, ValueTweener, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, TweenDuration, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, UnknownData_F8PF, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, LightAttackAnim, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, HeavyAttackAnim, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, Suffocating, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, BreathBarOn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, BreathBarOff, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, Invalidator, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, HeavyHitPercentage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBarWidget, UnknownData_332O, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerHealthBarWidget, 0x02C0);
		}

		// class UPlayerInfoWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__PlayerInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoWidget, HealthWidget, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInfoWidget, PoisonDebuff, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInfoWidget, 0x0268);
		}

		// class UPlayerNutrientImage : public UImage
		TEST_METHOD(Class__ManeaterUI__PlayerNutrientImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientImage, NutrientType, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientImage, UnknownData_O3LJ, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientImage, NutrientDictionary, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerNutrientImage, 0x0268);
		}

		// class UPlayerNutrientInstanceIcon : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__PlayerNutrientInstanceIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, UnknownData_0BA3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, IncreaseText, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, ValueText, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, NutrientImage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, NutrientType, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, UnknownData_V1Y5, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, CachedValueTweener, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, CachedOpacityTweener, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, IncreaseOpacityInTime, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, IncreaseOpacityOutTime, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, ValueIncreaseTime, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, IncreaseInEasingFunc, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, IncreaseOutEasingFunc, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, ValueIncreaseEasingFunc, 0x02B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientInstanceIcon, UnknownData_BJRN, 0x02B7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerNutrientInstanceIcon, 0x02C0);
		}

		// class UPlayerNutrientWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__PlayerNutrientWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, ProteinIcon, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, FatIcon, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, MineralIcon, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, MutagenIcon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, UnknownData_CYSU, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, CachedOpacityTween, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, OpacityInTweenTime, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, VisibleTime, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, OpacityOutTweenTime, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, OpacityInEaseFunc, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, OpacityOutEaseFunc, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, UnknownData_3NUU, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, StartNutrientTickAkEvent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, StoptNutrientTickAkEvent, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, IsPlayingNutrientSfx, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNutrientWidget, UnknownData_VUGI, 0x02B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerNutrientWidget, 0x02B8);
		}

		// class UPlayerSkillContainer : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__PlayerSkillContainer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerSkillContainer, 0x0258);
		}

		// class UPlayerSkillWIdget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__PlayerSkillWIdget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerSkillWIdget, 0x0258);
		}

		// class UPlayerWaypointMapMarkerWidget : public UMapMarkerWidget
		TEST_METHOD(Class__ManeaterUI__PlayerWaypointMapMarkerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerWaypointMapMarkerWidget, LeaderIcon, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerWaypointMapMarkerWidget, 0x0318);
		}

		// class UQuestLogPanel : public UTwBaseMenuPanel
		TEST_METHOD(Class__ManeaterUI__QuestLogPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, RegionFilter, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, RegionFilterButtonWidgetClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, ObjectiveCollectionsList, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, EpisodeItemList, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, ObjectiveCollectionWidgetClass, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, EpisodeListItemWidgetClass, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, CenterPanel, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, ObjectiveScrollBox, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, QuestTitleText, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, QuestImage, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, DefaultQuestImage, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, StoryRegionImage, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, QuestDescriptionText, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, SubtitleText, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, ShortObjectiveText, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, QuestProgressText, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, EpisodeTitleText, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, AudioLog, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, ObjectiveRewards, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, AwarenessWidget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, QuestTypeText, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, ObjectiveCollections, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, RegionFilterButtons, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, CurrentFilterButton, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, CurrentObjectiveWidget, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, PlayAudioGamepadKey, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel, PlayAudioKeyboardKey, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestLogPanel, 0x0420);
		}

		// class UQuestStatusHUDWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__QuestStatusHUDWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestStatusHUDWidget, 0x0258);
		}

		// class URegionHUDWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__RegionHUDWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URegionHUDWidget, 0x0258);
		}

		// class URegionInfoListEntry : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__RegionInfoListEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoListEntry, Entry, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoListEntry, UncheckedAlpha, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoListEntry, UnknownData_YOWG, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoListEntry, Checkmark, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoListEntry, SelectedImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoListEntry, EntryName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoListEntry, UnknownData_3TQX, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URegionInfoListEntry, 0x0298);
		}

		// class URegionInfoWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__RegionInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget, ViewingRegionMap, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget, UnknownData_V4IG, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget, WorldMapPosition, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget, UnknownData_27S9, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget, RegionData, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget, MapScale, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget, UnknownData_OUT2, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget, RegionBoundsTexture, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget, PoisonBoundsTexture, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget, bIsZoomed, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget, UnknownData_5465, 0x03B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URegionInfoWidget, 0x03B8);
		}

		// class URegionObjectiveProgressWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__RegionObjectiveProgressWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionObjectiveProgressWidget, ObjectiveProgress, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionObjectiveProgressWidget, ProgressLabel, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URegionObjectiveProgressWidget, 0x0268);
		}

		// class URegionProgressWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__RegionProgressWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionProgressWidget, RegionProgress, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionProgressWidget, RegionName, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionProgressWidget, RegionPercentage, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URegionProgressWidget, 0x0270);
		}

		// class UResolutionSettingsStepper : public UMESettingsStepper
		TEST_METHOD(Class__ManeaterUI__ResolutionSettingsStepper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResolutionSettingsStepper, ResolutionOptions, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResolutionSettingsStepper, 0x04A8);
		}

		// class UResourceListWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__ResourceListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceListWidget, ProtienCountText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceListWidget, FatCountText, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceListWidget, MineralCountText, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResourceListWidget, MutagenCountText, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResourceListWidget, 0x0278);
		}

		// class USaveSlotSelectWidget : public UTwBaseButton
		TEST_METHOD(Class__ManeaterUI__SaveSlotSelectWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveSlotSelectWidget, UnknownData_46HZ, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveSlotSelectWidget, ProfileName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveSlotSelectWidget, LeftButton, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveSlotSelectWidget, RightButton, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveSlotSelectWidget, OnSubClickAkEvent, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveSlotSelectWidget, UnknownData_KB7Y, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveSlotSelectWidget, DeleteSaveKey, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveSlotSelectWidget, DeleteSaveControllerInput, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveSlotSelectWidget, DeleteSaveModalSubject, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveSlotSelectWidget, DeleteSaveModalTitle, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveSlotSelectWidget, DeleteSaveModalYes, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USaveSlotSelectWidget, DeleteSaveModalCancel, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveSlotSelectWidget, 0x0500);
		}

		// class USettingsMenuController : public UTwBaseMenu
		TEST_METHOD(Class__ManeaterUI__SettingsMenuController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USettingsMenuController, UnknownData_E3J5, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USettingsMenuController, 0x0310);
		}

		// class UStoryCompleteWidget : public UTwBaseModal
		TEST_METHOD(Class__ManeaterUI__StoryCompleteWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, UnknownData_0NBJ, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, WidgetSwitcher_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, ME_BaseButton_BP, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, StoryContinue, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, PlayerLevel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, EvolutionsFound, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, InfamyRank, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, TimePlayed, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, CrawfishBayCompletion, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, FawtickBayouCompletion, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, DeadHorseLakeCompletion, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, GoldenShoresCompletion, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, CaviarKeyCompletion, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, ProsperitySandsCompletion, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, SapphireBayCompletion, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, TheGulfCompletion, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, Background_IntroAnim, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, Congrats_IntroAnim, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, EndgameStats_IntroAnim, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoryCompleteWidget, AudioEvent, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoryCompleteWidget, 0x0308);
		}

		// class USubtitleTextWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__SubtitleTextWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubtitleTextWidget, SubtitleTextBlock, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubtitleTextWidget, SubtitleBorder, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubtitleTextWidget, 0x0268);
		}

		// class UThrashingControlsWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__ThrashingControlsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingControlsWidget, ThrashLoop, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrashingControlsWidget, 0x0260);
		}

		// class UThrashingWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__ThrashingWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, UnknownData_75OL, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, LowColor, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, MediumColor, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, HighColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, UnknownData_XD0N, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, ProgressBar, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, BarPanel, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, ThrashingControlsWidget, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, TopJaw, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, BottomJaw, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, ActionText, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, InAnimation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, OutAnimation, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, ThrashPulseAnimation, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, ThrashText, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, BreakFreeText, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, ThrashEnableTimerHandle, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, ThrashEnableDelay, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashingWidget, UnknownData_WNEY, 0x0314);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrashingWidget, 0x0318);
		}

		// class UTutorialInfoWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__TutorialInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget, UnknownData_LW6V, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget, AudioEventInfo, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget, Invalidator, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget, TutName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget, Counter, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget, TutBody, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget, InputText, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget, InAnimation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget, IdleAnimation, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget, OutAnimation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialInfoWidget, UnknownData_OPGO, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialInfoWidget, 0x02F0);
		}

		// class UTutorialObjectiveListEntry : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__TutorialObjectiveListEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialObjectiveListEntry, CurrentStatus, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialObjectiveListEntry, UnknownData_MS01, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialObjectiveListEntry, ObjectiveData, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialObjectiveListEntry, CompletedAnim, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialObjectiveListEntry, ActivatedAnim, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialObjectiveListEntry, ObjectiveName, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialObjectiveListEntry, 0x0338);
		}

		// class UTUtorialPopupWidget : public UTwBaseWidget
		TEST_METHOD(Class__ManeaterUI__TUtorialPopupWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialPopupWidget, UnknownData_P34X, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialPopupWidget, AudioEventDisplayPopup, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialPopupWidget, Heading, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialPopupWidget, SizeBox_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialPopupWidget, SizeBox_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialPopupWidget, SizeBox_4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialPopupWidget, SizeBox_5, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialPopupWidget, SizeBox_6, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialPopupWidget, TutorialButton_BP, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialPopupWidget, UnknownData_XX1H, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTUtorialPopupWidget, 0x02B0);
		}

		// class UTUtorialSinglePopupWidget : public UTwBaseModal
		TEST_METHOD(Class__ManeaterUI__TUtorialSinglePopupWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialSinglePopupWidget, UnknownData_BQ2X, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialSinglePopupWidget, HeadingSwitcher, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialSinglePopupWidget, IconSwitcher, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialSinglePopupWidget, DescriptionSwitcher, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialSinglePopupWidget, OkButton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialSinglePopupWidget, AudioEventDisplayPopup, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialSinglePopupWidget, NextPageText, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialSinglePopupWidget, OkText, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTUtorialSinglePopupWidget, UnknownData_S1J7, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTUtorialSinglePopupWidget, 0x02D0);
		}

		// class UVideoSettingsWidget : public UTwBaseMenuPanel
		TEST_METHOD(Class__ManeaterUI__VideoSettingsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, WindowModeStepper, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ResolutionStepper, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, QualityStepper, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ViewDistanceStepper, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ShadowsStepper, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, AATypeStepper, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, TexturesStepper, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, EffectsStepper, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, PostProcessingStepper, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, VsyncStepper, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, BrightnessStepper, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, FoliageStepper, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ResetDefaultKey, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ResetDefaultControllerInput, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ResetDefaultModalSubject, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ResetDefaultModalTitle, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ResetDefaultModalYes, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ResetDefaultModalCancel, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ConfirmDefaultModalSubject, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ConfirmDefaultModalTitle, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ConfirmDefaultModalYes, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, ConfirmDefaultModalCancel, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsWidget, UnknownData_FJQK, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoSettingsWidget, 0x03F0);
		}

		// class UWorldMapWidget : public UMapWidget
		TEST_METHOD(Class__ManeaterUI__WorldMapWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, UnknownData_TK56, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, MapMarkerOverlay, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, UnknownData_6R38, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, MapMarkerWidgetClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, ObjectiveMapMarkerWidgetClass, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, LandmarkMapMarkerWidgetClass, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, BountyBoatMapMarkerWidgetClass, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, PlayerWaypointWidgetClass, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, GrottoMapMarkerWidgetClass, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, ScalyPeteMapMarkerWidgetClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, AudioEventZoomIn, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, AudioEventZoomOut, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, AudioEventOutlineAppear, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, AudioEventWaypointPlacement, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, AudioEventWaypointRemoved, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, BountyBoatMapMarkers, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, PlayerLocationMapMarker, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, PlayerWaypointMapMarker, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, AllMarkers, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, MapMarkerWidgets, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, MapMarkerSnapDistance, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, HoveredMapMarkerWidget, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, UnknownData_W7W4, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, RegionInfoOverlay, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, HoveredRegion, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, UnknownData_4JCX, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, Regions, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, RegionInfoWidgets, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, UnknownData_NGAY, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, WorldMapMaterial, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget, UnknownData_23RS, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldMapWidget, 0x0400);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0028);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0028);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_554M, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x0098);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0028);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, Tags, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0048);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0038);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0038);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_7BSJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_8NMK, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_IMM1, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0210);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0048);
		}

		// class URestrictedGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0048);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_H5YE, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, InvalidTagCharacters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00B8);
		}

		// class UGameplayTagsDeveloperSettings : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0038);
		}

		// class UAssetTagsSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__AssetTags__AssetTagsSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetTagsSubsystem, 0x0030);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0028);
		}

		// class UMotionControllerComponent : public UPrimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, PlayerIndex, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, Hand, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_I8D4, 0x0415);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_WLDI, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_X7I2, 0x0426);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_8MXO, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_D53L, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x04D0);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0028);
		}

		// class UVRNotificationsComponent : public UActorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0140);
		}

		// class UXRAssetFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0028);
		}

		// class UAsyncTask_LoadXRDeviceVisComponent : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_PHXA, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0060);
		}

		// class UXRLoadingScreenFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRLoadingScreenFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRLoadingScreenFunctionLibrary, 0x0028);
		}

		// class UChaosDestructionListener : public USceneComponent
		TEST_METHOD(Class__GeometryCollectionEngine__ChaosDestructionListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_T18A, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, CollisionEventRequestSettings, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, BreakingEventRequestSettings, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, TrailingEventRequestSettings, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_0ES3, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, ChaosSolverActors, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, GeometryCollectionActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnCollisionEvents, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnBreakingEvents, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnTrailingEvents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_AXVA, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDestructionListener, 0x0420);
		}

		// class AGeometryCollectionActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionActor, GeometryCollectionDebugDrawComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionActor, 0x0230);
		}

		// class UGeometryCollectionCache : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, RecordedData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, SupportedCollection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, CompatibleCollectionState, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionCache, 0x0050);
		}

		// class UGeometryCollectionComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_LDP8, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ChaosSolverActor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_THHI, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RestCollection, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitializationFields, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Simulating, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_REBJ, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ObjectType, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, EnableClustering, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_OET4, 0x054A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterGroupIndex, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MaxClusterLevel, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_VLA0, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DamageThreshold, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterConnectionType, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_ZVDT, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionGroup, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionSampleFraction, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, LinearEtherDrag, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, AngularEtherDrag, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_N8KT, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, PhysicalMaterial, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialVelocityType, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_WYDR, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialLinearVelocity, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialAngularVelocity, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_69YA, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CacheParameters, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsStateChange, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsLoadingStateChange, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_ZFO1, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosBreakEvent, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DesiredCacheTime, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CachePlayback, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_IYZK, 0x0645);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosPhysicsCollision, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyBreaks, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyCollisions, 0x0659);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_1LL3, 0x065A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DummyBodySetup, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_426A, 0x0840);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionComponent, 0x0860);
		}

		// class AGeometryCollectionDebugDrawActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, WarningMessage, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_288P, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SelectedRigidBody, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawWholeCollection, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawHierarchy, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bDebugDrawClustering, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, HideGeometry, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyId, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyCollision, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bCollisionAtOrigin, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyTransform, 0x0247);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInertia, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyVelocity, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyForce, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowRigidBodyInfos, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransformIndex, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowTransform, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowParent, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowLevel, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowConnectivityEdges, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryIndex, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowGeometryTransform, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowBoundingBox, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaces, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceIndices, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowFaceNormals, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowSingleFace, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceIndex, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertices, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexIndices, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bShowVertexNormals, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bUseActiveVisualization, 0x025F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, PointThickness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LineThickness, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, bTextShadow, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_91A8, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TextScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, NormalScale, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, AxisScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ArrowScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyIdColor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyTransformScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyCollisionColor, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInertiaColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyVelocityColor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyForceColor, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, RigidBodyInfoColor, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformIndexColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, TransformScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, LevelColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ParentColor, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, ConnectivityEdgeThickness, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryIndexColor, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, GeometryTransformScale, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, BoundingBoxColor, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceColor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceIndexColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, FaceNormalColor, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SingleFaceColor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexIndexColor, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, VertexNormalColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_D967, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, SpriteComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionDebugDrawActor, UnknownData_X9KD, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionDebugDrawActor, 0x0308);
		}

		// class UGeometryCollectionDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSetActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_O679, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionDebugDrawComponent, 0x00C8);
		}

		// class UGeometryCollection : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_TTD0, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, ImplicitType, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_ENGM, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinLevelSetResolution, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxLevelSetResolution, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinClusterLevelSetResolution, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxClusterLevelSetResolution, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionObjectReductionPercentage, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, bMassAsDensity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_9XMA, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Mass, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinimumMassClamp, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionParticlesFraction, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaximumCollisionParticles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_ITMG, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, SizeSpecificData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, EnableRemovePiecesOnFracture, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_4OVL, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, RemoveOnFractureMaterials, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, PersistentGuid, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, StateGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, BoneSelectedMaterialIndex, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_5KE8, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollection, 0x00D0);
		}

		// class AGeometryCollectionRenderLevelSetActor : public AActor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionRenderLevelSetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, TargetVolumeTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RayMarchMaterial, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, SurfaceTolerance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Isovalue, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, Enabled, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCollectionRenderLevelSetActor, UnknownData_9QXY, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCollectionRenderLevelSetActor, 0x02C0);
		}

		// class USkeletalMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__SkeletalMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_UJ2J, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, PhysicalMaterial, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ChaosSolverActor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bSimulating, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bNotifyCollisions, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ObjectType, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_5ILW, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, Density, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinMass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxMass, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionType, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_UX8P, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeParticlesPerUnitArea, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMinNumParticles, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMaxNumParticles, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinLevelSetResolution, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxLevelSetResolution, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionGroup, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialVelocityType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_X6YE, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialLinearVelocity, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialAngularVelocity, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OnChaosPhysicsCollision, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_XDI9, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimulationComponent, 0x0138);
		}

		// class UStaticMeshSimulationComponent : public UActorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__StaticMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_LVEJ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Simulating, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, bNotifyCollisions, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ObjectType, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_PF0X, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Mass, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, CollisionType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ImplicitType, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_ZSG9, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MinLevelSetResolution, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MaxLevelSetResolution, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialVelocityType, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_JHQ8, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialLinearVelocity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialAngularVelocity, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, DamageThreshold, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_1DLW, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, PhysicalMaterial, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ChaosSolverActor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, OnChaosPhysicsCollision, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_D80I, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, SimulatedComponents, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_LYLD, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSimulationComponent, 0x0138);
		}

		// class UNetAnalyticsAggregatorConfig : public UObject
		TEST_METHOD(Class__NetCore__NetAnalyticsAggregatorConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0038);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_RX7C, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x0778);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0028);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0028);
		}

		// class USignificanceManager : public UObject
		TEST_METHOD(Class__SignificanceManager__SignificanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, UnknownData_11VN, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, SignificanceManagerClassName, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USignificanceManager, 0x0120);
		}

		// class UGeometryCache : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_0LA8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_6ELG, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0068);
		}

		// class AGeometryCacheActor : public AActor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGeometryCacheActor, GeometryCacheComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeometryCacheActor, 0x0228);
		}

		// class UGeometryCacheCodecBase : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0038);
		}

		// class UGeometryCacheCodecRaw : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_QRKG, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0040);
		}

		// class UGeometryCacheCodecV1 : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_FUI8, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0040);
		}

		// class UGeometryCacheComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_8389, 0x0442);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_4DN8, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, Duration, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_OSWF, 0x0489);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x0490);
		}

		// class UGeometryCacheTrack : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, Duration, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_GDYA, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0058);
		}

		// class UGeometryCacheTrack_FlipbookAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_F6EB, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0080);
		}

		// class UGeometryCacheTrackStreamable : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_5768, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_2VSX, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x00D0);
		}

		// class UGeometryCacheTrack_TransformAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_8CTN, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0100);
		}

		// class UGeometryCacheTrack_TransformGroupAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_SFRG, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0100);
		}

		// class UGDKNetDriver : public UIpNetDriver
		TEST_METHOD(Class__OnlineSubsystemGDK__GDKNetDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGDKNetDriver, 0x07B8);
		}

		// class UInputBehavior : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehavior, UnknownData_9SWR, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehavior, 0x0030);
		}

		// class UAnyButtonInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__AnyButtonInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyButtonInputBehavior, UnknownData_QME5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnyButtonInputBehavior, 0x0080);
		}

		// class UInteractiveGizmoBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoBuilder, 0x0028);
		}

		// class UAxisAngleGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmoBuilder, 0x0028);
		}

		// class UInteractiveGizmo : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, UnknownData_HYEV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, InputBehaviors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmo, 0x0038);
		}

		// class UAxisAngleGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_L79P, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AngleSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, bInInteraction, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_865C, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartAngle, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurAngle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_Q9B4, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmo, 0x00F0);
		}

		// class UAxisPositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmoBuilder, 0x0028);
		}

		// class UAxisPositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_DFSB, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bInInteraction, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_CW1K, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartPoint, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurPoint, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartParameter, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurParameter, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSign, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_GB2X, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmo, 0x00D8);
		}

		// class UGizmoConstantAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, UnknownData_SROI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, Direction, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantAxisSource, 0x0048);
		}

		// class UGizmoConstantFrameAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantFrameAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, UnknownData_IAUK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, Direction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentY, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantFrameAxisSource, 0x0060);
		}

		// class UGizmoWorldAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoWorldAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, UnknownData_19UL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, Origin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, AxisIndex, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoWorldAxisSource, 0x0040);
		}

		// class UGizmoComponentAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_LGNQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, AxisIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, bLocalAxes, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_WMXJ, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentAxisSource, 0x0040);
		}

		// class UInteractiveToolPropertySet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_EM7R, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, CachedProperties, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, bIsPropertySetEnabled, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_RWRR, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolPropertySet, 0x0050);
		}

		// class UBrushBaseProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__InteractiveToolsFramework__BrushBaseProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bSpecifyRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_ZJVD, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushStrength, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushFalloffAmount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowStrength, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowFalloff, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_VHMN, 0x0066);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBaseProperties, 0x0068);
		}

		// class UInteractiveTool : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_KZMU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, InputBehaviors, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, ToolPropertyObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_Y34X, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveTool, 0x0080);
		}

		// class USingleSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleSelectionTool, UnknownData_9MQ6, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleSelectionTool, 0x0088);
		}

		// class UMeshSurfacePointTool : public USingleSelectionTool
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointTool, UnknownData_7C5S, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointTool, 0x00C0);
		}

		// class UBaseBrushTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__InteractiveToolsFramework__BaseBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushProperties, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, bInBrushStroke, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_BAX3, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, LastBrushStamp, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_PJDL, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, PropertyClass, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushStampIndicator, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBrushTool, 0x01B8);
		}

		// class UBrushStampIndicatorBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicatorBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicatorBuilder, 0x0028);
		}

		// class UBrushStampIndicator : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushFalloff, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushNormal, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawIndicatorLines, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawRadiusCircle, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawFalloffCircle, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_ZDOZ, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SampleStepCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineThickness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDepthTested, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawSecondaryLines, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_0PC3, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineThickness, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineColor, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_MY3W, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, AttachedComponent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_XA9E, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicator, 0x00B0);
		}

		// class UClickDragInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_MEC5, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, bUpdateModifiersDuringDrag, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_TLVH, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragInputBehavior, 0x0140);
		}

		// class ULocalClickDragInputBehavior : public UClickDragInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__LocalClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalClickDragInputBehavior, UnknownData_YEM7, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalClickDragInputBehavior, 0x0280);
		}

		// class UInteractiveToolBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolBuilder, 0x0028);
		}

		// class UClickDragToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragToolBuilder, 0x0028);
		}

		// class UClickDragTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragTool, UnknownData_ELH7, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragTool, 0x0088);
		}

		// class AInternalToolFrameworkActor : public AActor
		TEST_METHOD(Class__InteractiveToolsFramework__InternalToolFrameworkActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInternalToolFrameworkActor, 0x0220);
		}

		// class AGizmoActor : public AInternalToolFrameworkActor
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGizmoActor, 0x0220);
		}

		// class UGizmoBaseComponent : public UPrimitiveComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, Color, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, HoverSizeMultiplier, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, PixelHitDistanceThreshold, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, UnknownData_1OV8, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseComponent, 0x0430);
		}

		// class UGizmoArrowComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Direction, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Gap, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Length, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Thickness, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, UnknownData_10IX, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoArrowComponent, 0x0450);
		}

		// class UGizmoBoxComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Origin, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_CN87, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Rotation, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Dimensions, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, LineThickness, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bRemoveHiddenLines, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bEnableAxisFlip, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_E18R, 0x0462);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBoxComponent, 0x0470);
		}

		// class UGizmoCircleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoCircleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Normal, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Radius, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Thickness, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, NumSides, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bViewAligned, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bOnlyAllowFrontFacingHits, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, UnknownData_DFZA, 0x044A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoCircleComponent, 0x0450);
		}

		// class UGizmoTransformSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformSource, 0x0028);
		}

		// class UGizmoAxisSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisSource, 0x0028);
		}

		// class UGizmoClickTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoClickTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoClickTarget, 0x0028);
		}

		// class UGizmoStateTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoStateTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoStateTarget, 0x0028);
		}

		// class UGizmoFloatParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoFloatParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoFloatParameterSource, 0x0028);
		}

		// class UGizmoVec2ParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoVec2ParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoVec2ParameterSource, 0x0028);
		}

		// class UGizmoLineHandleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLineHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Normal, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, HandleSize, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Thickness, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Direction, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Length, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, bImageScale, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, UnknownData_ND3W, 0x0455);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLineHandleComponent, 0x0460);
		}

		// class UGizmoRectangleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoRectangleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionX, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionY, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetY, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthX, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthY, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, Thickness, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, SegmentFlags, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, UnknownData_OZBH, 0x045D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoRectangleComponent, 0x0460);
		}

		// class UGizmoLambdaHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaHitTarget, UnknownData_VOUK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaHitTarget, 0x00B0);
		}

		// class UGizmoComponentHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_MR14, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, Component, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_082Q, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentHitTarget, 0x0080);
		}

		// class UInputBehaviorSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehaviorSet, Behaviors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSet, 0x0038);
		}

		// class UInputBehaviorSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSource, 0x0028);
		}

		// class UInputRouter : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputRouter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnHover, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnCapture, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_XEJY, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, ActiveInputBehaviors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_UQ13, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputRouter, 0x00B0);
		}

		// class UInteractionMechanic : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionMechanic, UnknownData_XLRH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionMechanic, 0x0030);
		}

		// class UInteractiveGizmoManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_90TT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, ActiveGizmos, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_GZ2S, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, GizmoBuilders, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_GT68, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoManager, 0x00B8);
		}

		// class UToolContextTransactionProvider : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolContextTransactionProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolContextTransactionProvider, 0x0028);
		}

		// class UInteractiveToolManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_PK8R, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveLeftTool, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveRightTool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_87ZA, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ToolBuilders, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_8B8W, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolManager, 0x0138);
		}

		// class UToolFrameworkComponent : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolFrameworkComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolFrameworkComponent, 0x0028);
		}

		// class UInteractiveToolsContext : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolsContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, UnknownData_BMXT, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, InputRouter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, GizmoManager, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManagerClass, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolsContext, 0x0098);
		}

		// class AIntervalGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, UpIntervalComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, DownIntervalComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AIntervalGizmoActor, ForwardIntervalComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIntervalGizmoActor, 0x0238);
		}

		// class UIntervalGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoBuilder, UnknownData_20IS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmoBuilder, 0x00C0);
		}

		// class UIntervalGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, StateTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_01SC, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, TransformProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveComponents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveGizmos, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_JE3B, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisYSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisZSource, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_WJSC, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmo, 0x0130);
		}

		// class UGizmoBaseFloatParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseFloatParameterSource, UnknownData_DOX3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseFloatParameterSource, 0x0048);
		}

		// class UGizmoAxisIntervalParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisIntervalParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, FloatParameterSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MinParameter, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MaxParameter, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisIntervalParameterSource, 0x0060);
		}

		// class UKeyAsModifierInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__KeyAsModifierInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyAsModifierInputBehavior, UnknownData_UJ14, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyAsModifierInputBehavior, 0x0110);
		}

		// class UMeshSurfacePointToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointToolBuilder, UnknownData_Y58C, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointToolBuilder, 0x0030);
		}

		// class UMouseHoverBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MouseHoverBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseHoverBehavior, UnknownData_B2ON, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseHoverBehavior, 0x0098);
		}

		// class UMultiClickSequenceInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MultiClickSequenceInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiClickSequenceInputBehavior, UnknownData_F635, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiClickSequenceInputBehavior, 0x0130);
		}

		// class UMultiSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__MultiSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiSelectionTool, UnknownData_Q3IQ, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiSelectionTool, 0x0090);
		}

		// class UGizmoLocalFloatParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, LastChange, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, UnknownData_YYXO, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalFloatParameterSource, 0x0058);
		}

		// class UGizmoBaseVec2ParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseVec2ParameterSource, UnknownData_3JEZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseVec2ParameterSource, 0x0048);
		}

		// class UGizmoLocalVec2ParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, LastChange, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalVec2ParameterSource, 0x0060);
		}

		// class UGizmoAxisTranslationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_ZD66, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_DZ0K, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisTranslationParameterSource, 0x0110);
		}

		// class UGizmoPlaneTranslationParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_CMDQ, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, LastChange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationNormal, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_M3UV, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneTranslationParameterSource, 0x0130);
		}

		// class UGizmoAxisRotationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisRotationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, Angle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, LastChange, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationOrigin, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_L6AV, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, InitialTransform, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisRotationParameterSource, 0x00C0);
		}

		// class UGizmoUniformScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoUniformScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, LastChange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleNormal, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisY, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, UnknownData_8OZ6, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, InitialTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoUniformScaleParameterSource, 0x00F0);
		}

		// class UGizmoAxisScaleParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, TransformSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, ScaleMultiplier, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, Parameter, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, LastChange, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleAxis, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleOrigin, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, InitialTransform, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisScaleParameterSource, 0x00C0);
		}

		// class UGizmoPlaneScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_PWGO, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, ScaleMultiplier, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, Parameter, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, LastChange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleOrigin, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleNormal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisX, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisY, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_SGAV, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneScaleParameterSource, 0x0130);
		}

		// class UPlanePositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmoBuilder, 0x0028);
		}

		// class UPlanePositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_Q64J, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, AxisSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, HitTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, StateTarget, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bEnableSignedAxis, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipX, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipY, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bInInteraction, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionNormal, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartPoint, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurPoint, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartParameter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurParameter, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSigns, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_OFD2, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmo, 0x0100);
		}

		// class USelectionSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__SelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectionSet, UnknownData_C7FL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectionSet, 0x0040);
		}

		// class UMeshSelectionSet : public USelectionSet
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Vertices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Edges, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Faces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Groups, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionSet, 0x0080);
		}

		// class USingleClickInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_NZRF, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, HitTestOnRelease, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_HHP1, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickInputBehavior, 0x0130);
		}

		// class USingleClickToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickToolBuilder, 0x0028);
		}

		// class USingleClickTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickTool, UnknownData_AHGG, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickTool, 0x0088);
		}

		// class UGizmoNilStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoNilStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoNilStateTarget, UnknownData_TZSC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoNilStateTarget, 0x0030);
		}

		// class UGizmoLambdaStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaStateTarget, UnknownData_VADK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaStateTarget, 0x00B0);
		}

		// class UGizmoObjectModifyStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoObjectModifyStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoObjectModifyStateTarget, UnknownData_SNLU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoObjectModifyStateTarget, 0x0058);
		}

		// class UGizmoTransformChangeStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformChangeStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_BZPY, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, TransactionManager, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_MMX0, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformChangeStateTarget, 0x00E0);
		}

		// class ATransformGizmoActor : public AGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateX, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateY, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateZ, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateYZ, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXZ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, TranslateXY, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateY, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, RotateZ, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, UniformScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleX, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleY, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, AxisScaleZ, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleYZ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATransformGizmoActor, PlaneScaleXY, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATransformGizmoActor, 0x02A0);
		}

		// class UTransformGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoBuilder, UnknownData_WHW4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmoBuilder, 0x00C0);
		}

		// class UTransformGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_VQ3D, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveTarget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldGrid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bUseContextCoordinateSystem, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_793W, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CurrentCoordinateSystem, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_ULEH, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_CGL0, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, NonuniformScaleComponents, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveGizmos, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_Y6WH, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CameraAxisSource, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisXSource, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisYSource, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisZSource, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisXSource, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisYSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisZSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, StateTarget, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ScaledTransformSource, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_ICKK, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmo, 0x0180);
		}

		// class UTransformProxy : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__TransformProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_IU63, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bRotatePerObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bSetPivotMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_JVIO, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, SharedTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, InitialSharedTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformProxy, 0x00F0);
		}

		// class UGizmoBaseTransformSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseTransformSource, UnknownData_BX0Y, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseTransformSource, 0x0048);
		}

		// class UGizmoComponentWorldTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentWorldTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, Component, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, bModifyComponentOnTransform, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, UnknownData_LU0Q, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentWorldTransformSource, 0x0058);
		}

		// class UGizmoScaledTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoScaledTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, ChildTransformSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, UnknownData_GJN9, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoScaledTransformSource, 0x00E0);
		}

		// class UGizmoTransformProxyTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformProxyTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformProxyTransformSource, Proxy, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformProxyTransformSource, 0x0050);
		}

		// class ABP_Paddleboat_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Paddleboat_Fragment5__BP_Paddleboat_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Paddleboat_Fragment5_C, 0x0230);
		}

		// class ABP_Paddleboat_Fragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Paddleboat_Fragment7__BP_Paddleboat_Fragment7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Paddleboat_Fragment7_C, 0x0230);
		}

		// class UME_OceanColorComponent_C : public UActorComponent
		TEST_METHOD(BlueprintGeneratedClass__ME_OceanColorComponent__ME_OceanColorComponent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanColorComponent_C, LakeWaterColorStruct, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanColorComponent_C, SwampWaterColorStruct, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanColorComponent_C, OceanWaterColorStruct, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanColorComponent_C, PoisonWaterColorStruct, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanColorComponent_C, CurrentWaterColorStruct, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanColorComponent_C, TargetWaterColorStruct, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanColorComponent_C, WaterTypeEnum, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanColorComponent_C, UnknownData_XC4X, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanColorComponent_C, BayWaterColorStruct, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanColorComponent_C, ShoreSEWaterColorStruct, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanColorComponent_C, ShoreSBWaterColorStruct, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UME_OceanColorComponent_C, DeepOceanWaterColorStruct, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_OceanColorComponent_C, 0x0334);
		}

		// class APrologue_Sub_Cine_Tutorial_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_Cine_Tutorial__Prologue_Sub_Cine_Tutorial_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_Cine_Tutorial_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_Cine_Tutorial_C, PlayerShark, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_Cine_Tutorial_C, IntroCinematic_UnbreakableGrate_SM_00_ExecuteUbergraph_Prologue_Sub_Cine_Tutorial_RefProperty, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_Cine_Tutorial_C, PawnGoesHere_ExecuteUbergraph_Prologue_Sub_Cine_Tutorial_RefProperty, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_Cine_Tutorial_C, 0x0248);
		}

		// class UBP_Base_IR_C : public UME_PhysicalImpactResponse
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_IR__BP_Base_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Base_IR_C, 0x0040);
		}

		// class UHunterSupport_HUNTER2_BP_C : public UHunterSupportEntry
		TEST_METHOD(BlueprintGeneratedClass__HunterSupport_HUNTER2_BP__HunterSupport_HUNTER2_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHunterSupport_HUNTER2_BP_C, 0x0068);
		}

		// class ABP_USCG_Small_Bounty7_Assault_Divers_C : public ABP_Base_USCG_Small_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Small_Bounty7_Assault_Divers__BP_USCG_Small_Bounty7_Assault_Divers_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty7_Assault_Divers_C, LastHitTime_1, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty7_Assault_Divers_C, SequencePlayer_0_1, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty7_Assault_Divers_C, SequenceActor_0_1, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty7_Assault_Divers_C, CinematicCamera_0_1, 0x0CF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Small_Bounty7_Assault_Divers_C, 0x0D00);
		}

		// class ABP_USCG_Small_Bounty5_Boss_Divers_C : public ABP_Base_USCG_Small_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Small_Bounty5_Boss_Divers__BP_USCG_Small_Bounty5_Boss_Divers_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty5_Boss_Divers_C, UnknownData_PY65, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty5_Boss_Divers_C, UberGraphFrame, 0x0CE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Small_Bounty5_Boss_Divers_C, 0x0CF0);
		}

		// class ABP_USCG_Medium_Bounty9_Mixed_MixDivers_C : public ABP_Base_USCG_Medium_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Medium_Bounty9_Mixed_MixDivers__BP_USCG_Medium_Bounty9_Mixed_MixDivers_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Medium_Bounty9_Mixed_MixDivers_C, 0x0CDC);
		}

		// class ABP_USCG_Command_Ship_Bounty10_Mixed_Dynamite_C : public ABP_Base_USCG_Command_Ship_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Command_Ship_Bounty10_Mixed_Dynamite__BP_USCG_Command_Ship_Bounty10_Mixed_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Command_Ship_Bounty10_Mixed_Dynamite_C, 0x0CE8);
		}

		// class ABP_Small_FishingBoat_Bounty8_Assault_Shotguns_C : public ABP_Base_Small_FishingBoat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Small_FishingBoat_Bounty8_Assault_Shotguns__BP_Small_FishingBoat_Bounty8_Assault_Shotguns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Small_FishingBoat_Bounty8_Assault_Shotguns_C, 0x0CDC);
		}

		// class ABP_SkiBoat_Bounty7_Shotgun_Rifles_C : public ABP_Base_SkiBoat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Bounty7_Shotgun_Rifles__BP_SkiBoat_Bounty7_Shotgun_Rifles_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Bounty7_Shotgun_Rifles_C, 0x0CD4);
		}

		// class ABP_SkiBoat_Bounty6_Assault_C : public ABP_Base_SkiBoat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Bounty6_Assault__BP_SkiBoat_Bounty6_Assault_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Bounty6_Assault_C, 0x0CD4);
		}

		// class ABP_JetSki_Bounty1_Assault_C : public ABP_Base_JetSki_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Bounty1_Assault__BP_JetSki_Bounty1_Assault_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_JetSki_Bounty1_Assault_C, UberGraphFrame, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Bounty1_Assault_C, 0x0CE8);
		}

		// class ABP_Skiff_Bounty4_Spearguns_C : public ABP_Base_Skiff_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Bounty4_Spearguns__BP_Skiff_Bounty4_Spearguns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Bounty4_Spearguns_C, 0x0CDC);
		}

		// class ABP_Skiff_Bounty4_Assault_Dynamite_C : public ABP_Base_Skiff_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Bounty4_Assault_Dynamite__BP_Skiff_Bounty4_Assault_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Bounty4_Assault_Dynamite_C, 0x0CDC);
		}

		// class ABP_Airboat_Bounty4_Shotguns_C : public ABP_Base_Airboat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Bounty4_Shotguns__BP_Airboat_Bounty4_Shotguns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Bounty4_Shotguns_C, 0x0CDC);
		}

		// class UGE_Evo_MutagenDigestion1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_MutagenDigestion1__GE_Evo_MutagenDigestion1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_MutagenDigestion1_C, 0x0870);
		}

		// class UGE_EVO_Shadow_TailFX_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Shadow_TailFX_T5__GE_EVO_Shadow_TailFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Shadow_TailFX_T5_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Tail_T5_C : public UME_GameplayAbility_Projectiles
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Tail_T5__GA_Evo_Shadow_Tail_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Tail_T5_C, 0x0458);
		}

		// class UGA_Evo_Shadow_Tail_T4_C : public UME_GameplayAbility_Projectiles
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Tail_T4__GA_Evo_Shadow_Tail_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Tail_T4_C, 0x0458);
		}

		// class AInWorldWidgetCreator_BP_C : public AME_InWorldWidgetCreator
		TEST_METHOD(BlueprintGeneratedClass__InWorldWidgetCreator_BP__InWorldWidgetCreator_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInWorldWidgetCreator_BP_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInWorldWidgetCreator_BP_C, Billboard, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInWorldWidgetCreator_BP_C, Widget, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInWorldWidgetCreator_BP_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInWorldWidgetCreator_BP_C, StepIndexForEnable, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInWorldWidgetCreator_BP_C, ActiveWidgetIndex, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInWorldWidgetCreator_BP_C, ObjectiveWidgetType, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInWorldWidgetCreator_BP_C, OverwriteObjIndex_, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInWorldWidgetCreator_BP_C, UnknownData_G4L2, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInWorldWidgetCreator_BP_C, NavVector, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInWorldWidgetCreator_BP_C, 0x0270);
		}

		// class APlayerWaypointBP_C : public AInWorldWidgetCreator_BP_C
		TEST_METHOD(BlueprintGeneratedClass__PlayerWaypointBP__PlayerWaypointBP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerWaypointBP_C, UberGraphFrame, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerWaypointBP_C, 0x0278);
		}

		// class ABP_SpawnManager_C : public AME_SpawnManager
		TEST_METHOD(BlueprintGeneratedClass__BP_SpawnManager__BP_SpawnManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SpawnManager_C, DefaultSceneRoot, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SpawnManager_C, 0x0288);
		}

		// class AME_TutorialManager_BP_C : public AME_TutorialManager
		TEST_METHOD(BlueprintGeneratedClass__ME_TutorialManager_BP__ME_TutorialManager_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_TutorialManager_BP_C, DefaultSceneRoot, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_TutorialManager_BP_C, 0x0458);
		}

		// class UGE_ApexSpermWhale_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_ApexSpermWhale_Native__GE_ApexSpermWhale_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ApexSpermWhale_Native_C, 0x0870);
		}

		// class AAIController_SpermWhale_Apex_BP_C : public AAIController_SpermWhale_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_SpermWhale_Apex_BP__AIController_SpermWhale_Apex_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_SpermWhale_Apex_BP_C, UberGraphFrame, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_SpermWhale_Apex_BP_C, 0x07D8);
		}

		// class UGA_M_SpermWhale_ThrashRelease_BP_C : public UGA_M_ThrashRelease_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_SpermWhale_ThrashRelease_BP__GA_M_SpermWhale_ThrashRelease_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_SpermWhale_ThrashRelease_BP_C, 0x05E0);
		}

		// class UGE_AI_ReleaseThrashTarget_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AI_ReleaseThrashTarget__GE_AI_ReleaseThrashTarget_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AI_ReleaseThrashTarget_C, 0x0870);
		}

		// class UGE_Apex_KillerWhale_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Apex_KillerWhale_Native__GE_Apex_KillerWhale_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Apex_KillerWhale_Native_C, 0x0870);
		}

		// class UGE_MissingDorsalFin_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MissingDorsalFin__GE_MissingDorsalFin_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MissingDorsalFin_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Set_Bonus4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Set_Bonus4__GE_Evo_Shadow_Set_Bonus4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Set_Bonus4_C, 0x0870);
		}

		// class ABP_PlayerObjectiveManager_C : public AME_PlayerObjectiveManager
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerObjectiveManager__BP_PlayerObjectiveManager_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerObjectiveManager_C, DefaultSceneRoot, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerObjectiveManager_C, 0x0428);
		}

		// class UExplosiveIndicatorScreenSpaceWidget_BP_C : public UExplosiveIndicatorScreenSpaceWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ExplosiveIndicatorScreenSpaceWidget_BP__ExplosiveIndicatorScreenSpaceWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExplosiveIndicatorScreenSpaceWidget_BP_C, 0x02C8);
		}

		// class UHudRewardWidget_BP_C : public UHUDRewardWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__HudRewardWidget_BP__HudRewardWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudRewardWidget_BP_C, UberGraphFrame, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudRewardWidget_BP_C, 0x02B0);
		}

		// class UBoostMeter_BP_C : public UTwBaseWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BoostMeter_BP__BoostMeter_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoostMeter_BP_C, UberGraphFrame, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoostMeter_BP_C, LungeBar, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoostMeter_BP_C, LungeTier, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoostMeter_BP_C, UnknownData_8ZZQ, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoostMeter_BP_C, LocalTagContainer, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoostMeter_BP_C, TagsOfConcern, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoostMeter_BP_C, SprintTier, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoostMeter_BP_C, 0x02A4);
		}

		// class ABP_USCG_SpawnDynamiteGem_C : public ABP_Base_USCG_Small_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SpawnDynamiteGem__BP_USCG_SpawnDynamiteGem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_SpawnDynamiteGem_C, UnknownData_J0UA, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_SpawnDynamiteGem_C, UberGraphFrame, 0x0CE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SpawnDynamiteGem_C, 0x0CF0);
		}

		// class ABP_Hunter_Yacht_Objective_C : public ABP_Base_Hunter_Yacht_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Hunter_Yacht_Objective__BP_Hunter_Yacht_Objective_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Hunter_Yacht_Objective_C, 0x0CE0);
		}

		// class ABP_Base_BarrelRaftEmpty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_BarrelRaftEmpty__BP_Base_BarrelRaftEmpty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_BarrelRaftEmpty_C, ME_DistanceSignificance, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_BarrelRaftEmpty_C, LastHitTime_1, 0x0C00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_BarrelRaftEmpty_C, 0x0C04);
		}

		// class ABP_Base_Catamaran_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Catamaran_Empty__BP_Base_Catamaran_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Catamaran_Empty_C, ME_DistanceSignificance, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Catamaran_Empty_C, LastHitTime, 0x0C00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Catamaran_Empty_C, 0x0C04);
		}

		// class AManeaterHUD_BP_C : public AManeaterHUD
		TEST_METHOD(BlueprintGeneratedClass__ManeaterHUD_BP__ManeaterHUD_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AManeaterHUD_BP_C, DefaultSceneRoot, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AManeaterHUD_BP_C, 0x07D0);
		}

		// class UContextualControlWidget_BP_C : public UContextualControlWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ContextualControlWidget_BP__ContextualControlWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualControlWidget_BP_C, UberGraphFrame, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextualControlWidget_BP_C, 0x02E8);
		}

		// class ABP_JetSki_Debris_MainSeat_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Debris_MainSeat__BP_JetSki_Debris_MainSeat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Debris_MainSeat_C, 0x0230);
		}

		// class ABP_JetSki_Debris_Jet_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Debris_Jet__BP_JetSki_Debris_Jet_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Debris_Jet_C, 0x0230);
		}

		// class ABP_JetSki_Debris_Front_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Debris_Front__BP_JetSki_Debris_Front_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Debris_Front_C, 0x0230);
		}

		// class ABP_ICHuman_CivBoats_C : public ABP_Swimmer_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ICHuman_CivBoats__BP_ICHuman_CivBoats_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ICHuman_CivBoats_C, 0x0F50);
		}

		// class UGE_SpearGun_Damage_Tier1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpearGun_Damage_Tier1__GE_SpearGun_Damage_Tier1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpearGun_Damage_Tier1_C, 0x0870);
		}

		// class UGCD_General_2_0_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GCD_General_2_1__GCD_General_2_0_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCD_General_2_0_C, 0x07B8);
		}

		// class UGE_Evo_Shadow_Teeth_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Teeth_T4__GE_Evo_Shadow_Teeth_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Teeth_T4_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Teeth_Bonus_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Teeth_Bonus_T1__GE_Evo_Shadow_Teeth_Bonus_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Teeth_Bonus_T1_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Teeth_T5_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Teeth_T5__GA_Evo_Shadow_Teeth_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Teeth_T5_C, 0x0400);
		}

		// class UGE_Evo_Shadow_Head_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Head_T5__GE_Evo_Shadow_Head_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Head_T5_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Head_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Head_T4__GE_Evo_Shadow_Head_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Head_T4_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Head_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Head_T3__GE_Evo_Shadow_Head_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Head_T3_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Tail_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Tail_T4__GE_Evo_Shadow_Tail_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Tail_T4_C, 0x0870);
		}

		// class UGA_Evo_Shadow_TailFX_T5_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_TailFX_T5__GA_Evo_Shadow_TailFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_TailFX_T5_C, 0x0438);
		}

		// class UGA_Evo_Shadow_TailFX_T4_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_TailFX_T4__GA_Evo_Shadow_TailFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_TailFX_T4_C, 0x0438);
		}

		// class UGA_Evo_Shadow_TailFX_T3_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_TailFX_T3__GA_Evo_Shadow_TailFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_TailFX_T3_C, 0x0438);
		}

		// class UGE_Evo_Bone_Teeth_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Teeth_T1__GE_Evo_Bone_Teeth_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Teeth_T1_C, 0x0870);
		}

		// class UGE_Evo_Bone_Tail_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Tail_T5__GE_Evo_Bone_Tail_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Tail_T5_C, 0x0870);
		}

		// class UGE_Evo_Bone_Head_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Head_T1__GE_Evo_Bone_Head_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Head_T1_C, 0x0870);
		}

		// class UGA_Evo_Bone_Tail_FX_Tailwhip_T5_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Tail_FX_Tailwhip_T5__GA_Evo_Bone_Tail_FX_Tailwhip_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Tail_FX_Tailwhip_T5_C, 0x0400);
		}

		// class UGA_Evo_Bone_Tail_FX_Submerge_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Tail_FX_Submerge_T1__GA_Evo_Bone_Tail_FX_Submerge_T1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bone_Tail_FX_Submerge_T1_C, UberGraphFrame, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bone_Tail_FX_Submerge_T1_C, Adult_Explosion_Class, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bone_Tail_FX_Submerge_T1_C, Elder_Explosion_Class, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Evo_Bone_Tail_FX_Submerge_T1_C, Mega_Explosion_Class, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Tail_FX_Submerge_T1_C, 0x0420);
		}

		// class UGA_Evo_Bone_Tail_FX_Tailwhip_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Tail_FX_Tailwhip_T1__GA_Evo_Bone_Tail_FX_Tailwhip_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Tail_FX_Tailwhip_T1_C, 0x0400);
		}

		// class UGE_Evo_Bone_TailWhipFX_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_TailWhipFX_T2__GE_Evo_Bone_TailWhipFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_TailWhipFX_T2_C, 0x0870);
		}

		// class UInGameMenuView_BP_C : public UInGameMenuView
		TEST_METHOD(WidgetBlueprintGeneratedClass__InGameMenuView_BP__InGameMenuView_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuView_BP_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuView_BP_C, BG, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuView_BP_C, SubtitleWidget, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuView_BP_C, TutorialInfoWidget_BP, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuView_BP_C, TutorialpopupWidget_BP, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameMenuView_BP_C, 0x02E8);
		}

		// class UGE_Evo_Bone_Set_Bonus4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Set_Bonus4__GE_Evo_Bone_Set_Bonus4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Set_Bonus4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Set_Bonus3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Set_Bonus3__GE_Evo_Bone_Set_Bonus3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Set_Bonus3_C, 0x0870);
		}

		// class UGE_Evo_Bone_Set_Bonus2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Set_Bonus2__GE_Evo_Bone_Set_Bonus2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Set_Bonus2_C, 0x0870);
		}

		// class UGE_Evo_BioElectric_Set_Bonus4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_BioElectric_Set_Bonus4__GE_Evo_BioElectric_Set_Bonus4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_BioElectric_Set_Bonus4_C, 0x0870);
		}

		// class UGA_M_Mako_ThrashV2_BP_C : public UGA_M_ThrashBase_V2_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Mako_ThrashV2_BP__GA_M_Mako_ThrashV2_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Mako_ThrashV2_BP_C, 0x0510);
		}

		// class UGA_M_Mako_LandLunge_BP_C : public UGA_M_LandLunge_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Mako_LandLunge_BP__GA_M_Mako_LandLunge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Mako_LandLunge_BP_C, 0x05E0);
		}

		// class UGA_M_HammerHead_ThrashV2_BP_C : public UGA_M_ThrashBase_V2_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_HammerHead_ThrashV2_BP__GA_M_HammerHead_ThrashV2_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_HammerHead_ThrashV2_BP_C, 0x0510);
		}

		// class UGA_M_HammerHead_Bite_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_HammerHead_Bite_BP__GA_M_HammerHead_Bite_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_HammerHead_Bite_BP_C, 0x0510);
		}

		// class UGE_Evo_Shadow_Stack_Count_1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack_Count_2__GE_Evo_Shadow_Stack_Count_1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_Count_1_C, 0x0870);
		}

		// class ABP_EVO_Shadow_Tail_AOE_T5_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Tail_AOE_T5__BP_EVO_Shadow_Tail_AOE_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Tail_AOE_T5_C, 0x02D0);
		}

		// class AEVO_ShadowTail_Projectile_T4_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__EVO_ShadowTail_Projectile_T4__EVO_ShadowTail_Projectile_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEVO_ShadowTail_Projectile_T4_C, 0x0270);
		}

		// class AEVO_ShadowTail_Projectile_T5_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__EVO_ShadowTail_Projectile_T5__EVO_ShadowTail_Projectile_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEVO_ShadowTail_Projectile_T5_C, 0x0270);
		}

		// class UAM_StationaryWaterReentryBackwards_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_StationaryWaterReentryBackwards__AM_StationaryWaterReentryBackwards_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_StationaryWaterReentryBackwards_C, 0x0620);
		}

		// class UAM_PerfectNoseEntry_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_PerfectNoseEntry__AM_PerfectNoseEntry_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_PerfectNoseEntry_C, 0x0620);
		}

		// class UAM_MovingWaterReentryForwards_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_MovingWaterReentryForwards__AM_MovingWaterReentryForwards_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_MovingWaterReentryForwards_C, 0x0620);
		}

		// class UGE_Shadow_Jaws_Proc_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Shadow_Jaws_Proc__GE_Shadow_Jaws_Proc_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Shadow_Jaws_Proc_C, 0x0870);
		}

		// class UGE_EVO_Bite_Charge_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Bite_Charge__GE_EVO_Bite_Charge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Bite_Charge_C, 0x0870);
		}

		// class UGE_Sprint_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Sprint_T3__GE_Sprint_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Sprint_T3_C, 0x0870);
		}

		// class UGE_Sprint_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Sprint_T2__GE_Sprint_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Sprint_T2_C, 0x0870);
		}

		// class UGE_Sprint_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Sprint_T1__GE_Sprint_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Sprint_T1_C, 0x0870);
		}

		// class AAIController_Swordfish_BP_C : public AAIController_Hostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Swordfish_BP__AIController_Swordfish_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Swordfish_BP_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Swordfish_BP_C, 0x07D0);
		}

		// class AAIController_Turtle_BP_C : public AAIController_NonHostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Turtle_BP__AIController_Turtle_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Turtle_BP_C, 0x07C8);
		}

		// class ABP_Whipshot_Stun_S_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Whipshot_Stun_S__BP_Whipshot_Stun_S_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Whipshot_Stun_S_C, 0x02D0);
		}

		// class ABP_Bumperboat_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bumperboat_Fragment3__BP_Bumperboat_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bumperboat_Fragment3_C, 0x0230);
		}

		// class ABP_Skiff_Bounty_Assault_C : public ABP_Base_Skiff_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Bounty_Assault__BP_Skiff_Bounty_Assault_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Bounty_Assault_C, 0x0CDC);
		}

		// class ADEP_BP_Skiff_Bounty_Shotgun_Pipebomb_C : public ABP_Base_Skiff_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__DEP_BP_Skiff_Bounty_Shotgun_Pipebomb__DEP_BP_Skiff_Bounty_Shotgun_Pipebomb_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADEP_BP_Skiff_Bounty_Shotgun_Pipebomb_C, 0x0CDC);
		}

		// class UBP_Shotgun_Tier1_C : public UBP_Shotgun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shotgun_Tier1__BP_Shotgun_Tier1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shotgun_Tier1_C, 0x06E0);
		}

		// class UBP_WeaponPipeBomb_C : public UME_WeaponComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_WeaponPipeBomb__BP_WeaponPipeBomb_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_WeaponPipeBomb_C, 0x06E0);
		}

		// class AShotgun_Projectile_Tier1_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__Shotgun_Projectile_Tier1__Shotgun_Projectile_Tier1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShotgun_Projectile_Tier1_C, 0x0270);
		}

		// class ABP_Bumperboat_AIController_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Bumperboat_AIController__BP_Bumperboat_AIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bumperboat_AIController_C, 0x07E8);
		}

		// class UGameplaySettingsMenuPanel_BP_C : public UGameplaySettingsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GameplaySettingsMenuPanel_BP__GameplaySettingsMenuPanel_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplaySettingsMenuPanel_BP_C, UberGraphFrame, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplaySettingsMenuPanel_BP_C, Box_Mouse, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplaySettingsMenuPanel_BP_C, LeftStickSensitivity, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplaySettingsMenuPanel_BP_C, 0x02F8);
		}

		// class UCompassTick_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CompassTick_BP__CompassTick_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassTick_BP_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassTick_BP_C, Marker, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompassTick_BP_C, Direction, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompassTick_BP_C, 0x0241);
		}

		// class UInGameMenuBarItem_BP_C : public UTwBaseMenuBarItem
		TEST_METHOD(WidgetBlueprintGeneratedClass__InGameMenuBarItem_BP__InGameMenuBarItem_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameMenuBarItem_BP_C, 0x0270);
		}

		// class ULevelProgressionWidget_BP_C : public ULevelProgressWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__LevelProgressionWidget_BP__LevelProgressionWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, Image_1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, Image_2, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_1, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_3, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_4, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_5, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_6, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_7, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_8, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_9, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_10, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_11, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_12, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_13, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_14, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_15, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelProgressionWidget_BP_C, PlayerNutrientImage_BP_C_16, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelProgressionWidget_BP_C, 0x0378);
		}

		// class USubtitleWidget_C : public USubtitleTextWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SubtitleWidget__SubtitleWidget_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubtitleWidget_C, UberGraphFrame, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubtitleWidget_C, AnimationOut, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubtitleWidget_C, AnimationIn, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubtitleWidget_C, 0x0280);
		}

		// class ABP_SmallFishingBoat_Debris_Rail_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmallFishingBoat_Debris_Rail__BP_SmallFishingBoat_Debris_Rail_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmallFishingBoat_Debris_Rail_C, 0x0230);
		}

		// class ABP_SmallFishingBoat_Debris_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmallFishingBoat_Debris_Fragment6__BP_SmallFishingBoat_Debris_Fragment6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmallFishingBoat_Debris_Fragment6_C, 0x0230);
		}

		// class ABP_SmallFishingBoat_Debris_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmallFishingBoat_Debris_Fragment5__BP_SmallFishingBoat_Debris_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmallFishingBoat_Debris_Fragment5_C, 0x0230);
		}

		// class ABP_SmallFishingBoat_Debris_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmallFishingBoat_Debris_Fragment2__BP_SmallFishingBoat_Debris_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmallFishingBoat_Debris_Fragment2_C, 0x0230);
		}

		// class ABP_SmallFishingBoat_Debris_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmallFishingBoat_Debris_Fragment1__BP_SmallFishingBoat_Debris_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmallFishingBoat_Debris_Fragment1_C, 0x0230);
		}

		// class ABP_Small_FishingBoat_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Small_FishingBoat_Controller__BP_Small_FishingBoat_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Small_FishingBoat_Controller_C, 0x07E8);
		}

		// class UGE_Bio_Electric_Body_PayResource_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_PayResource_T4__GE_Bio_Electric_Body_PayResource_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_PayResource_T4_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_AddResource_Eat_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AddResource_Eat_T4__GE_Bio_Electric_Body_AddResource_Eat_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AddResource_Eat_T4_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_Bonus_NearEndFX_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_Bonus_NearEndFX_T4__GE_Bio_Electric_Body_Bonus_NearEndFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_Bonus_NearEndFX_T4_C, 0x0870);
		}

		// class UAM_Bio_Electric_Body_Activate_T3_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_Bio_Electric_Body_Activate_T3__AM_Bio_Electric_Body_Activate_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Bio_Electric_Body_Activate_T3_C, 0x05E0);
		}

		// class UGE_Bio_Electric_Body_AddResource_Eat_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AddResource_Eat_T3__GE_Bio_Electric_Body_AddResource_Eat_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AddResource_Eat_T3_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_AddResource_Dam_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AddResource_Dam_T3__GE_Bio_Electric_Body_AddResource_Dam_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AddResource_Dam_T3_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_Bonus_NearEndFX_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_Bonus_NearEndFX_T3__GE_Bio_Electric_Body_Bonus_NearEndFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_Bonus_NearEndFX_T3_C, 0x0870);
		}

		// class UGA_Bio_Electric_Body_AddResource_Eat_T2_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AddResource_Eat_T2__GA_Bio_Electric_Body_AddResource_Eat_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AddResource_Eat_T2_C, 0x0438);
		}

		// class UGA_Bio_Electric_Body_AddResource_Dam_T2_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AddResource_Dam_T2__GA_Bio_Electric_Body_AddResource_Dam_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AddResource_Dam_T2_C, 0x0438);
		}

		// class UGA_Bio_Electric_Body_AddResource_Dam_T1_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AddResource_Dam_T1__GA_Bio_Electric_Body_AddResource_Dam_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AddResource_Dam_T1_C, 0x0438);
		}

		// class UAM_Bio_Electric_Body_Activate_T1_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_Bio_Electric_Body_Activate_T1__AM_Bio_Electric_Body_Activate_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Bio_Electric_Body_Activate_T1_C, 0x05E0);
		}

		// class UGE_Evo_Bio_Electric_Head_ImpactFX_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_ImpactFX_T3__GE_Evo_Bio_Electric_Head_ImpactFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_ImpactFX_T3_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Head_ImpactFX_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_ImpactFX_T4__GE_Evo_Bio_Electric_Head_ImpactFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_ImpactFX_T4_C, 0x0870);
		}

		// class UGA_Evo_Bio_Electric_Head_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Head_T1__GA_Evo_Bio_Electric_Head_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Head_T1_C, 0x0400);
		}

		// class UGE_Evo_Bio_Electric_Head_ImpactFX_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_ImpactFX_T1__GE_Evo_Bio_Electric_Head_ImpactFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_ImpactFX_T1_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Teeth_BiteFX_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_BiteFX_T5__GE_Evo_Bio_Electric_Teeth_BiteFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_BiteFX_T5_C, 0x0870);
		}

		// class ABP_Evo_Bio_Electric_Teeth_Explosion_T5_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Evo_Bio_Electric_Teeth_Explosion_T5__BP_Evo_Bio_Electric_Teeth_Explosion_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Evo_Bio_Electric_Teeth_Explosion_T5_C, 0x02D0);
		}

		// class UGE_Evo_Bio_Electric_Teeth_BiteFX_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_BiteFX_T1__GE_Evo_Bio_Electric_Teeth_BiteFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_BiteFX_T1_C, 0x0870);
		}

		// class ABP_Evo_Bio_Electric_Teeth_Explosion_T1_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Evo_Bio_Electric_Teeth_Explosion_T1__BP_Evo_Bio_Electric_Teeth_Explosion_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Evo_Bio_Electric_Teeth_Explosion_T1_C, 0x02D0);
		}

		// class UGA_M_Alligator_TailWhip_Defensive_BP_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Alligator_TailWhip_Defensive_BP__GA_M_Alligator_TailWhip_Defensive_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Alligator_TailWhip_Defensive_BP_C, 0x05E0);
		}

		// class UGA_M_Alligator_Bite_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Alligator_Bite_BP__GA_M_Alligator_Bite_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Alligator_Bite_BP_C, 0x0510);
		}

		// class UGE_Alligator_EvadeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Alligator_EvadeCD_BP__GE_Alligator_EvadeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Alligator_EvadeCD_BP_C, 0x0870);
		}

		// class UGE_AlligatorVulnerable_Apex_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AlligatorVulnerable_Apex_BP__GE_AlligatorVulnerable_Apex_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AlligatorVulnerable_Apex_BP_C, 0x0870);
		}

		// class UGE_Apex_Alligator_TailwhipCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Apex_Alligator_TailwhipCD_BP__GE_Apex_Alligator_TailwhipCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Apex_Alligator_TailwhipCD_BP_C, 0x0870);
		}

		// class ABP_Evo_Bone_Tail_Smash_Explosion_Submerge_Adult_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Evo_Bone_Tail_Smash_Explosion_Submerge_Adult__BP_Evo_Bone_Tail_Smash_Explosion_Submerge_Adult_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Evo_Bone_Tail_Smash_Explosion_Submerge_Adult_C, 0x02D0);
		}

		// class UGE_Evo_Bone_Tail_FX_Emerge_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Tail_FX_Emerge_T1__GE_Evo_Bone_Tail_FX_Emerge_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Tail_FX_Emerge_T1_C, 0x0870);
		}

		// class ABP_Evo_Bone_Tail_Smash_Explosion_Emerge_Mega_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Evo_Bone_Tail_Smash_Explosion_Emerge_Mega__BP_Evo_Bone_Tail_Smash_Explosion_Emerge_Mega_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Evo_Bone_Tail_Smash_Explosion_Emerge_Mega_C, 0x02D0);
		}

		// class UGE_SpermWhale_LungeClampCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhale_LungeClampCD_BP__GE_SpermWhale_LungeClampCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhale_LungeClampCD_BP_C, 0x0870);
		}

		// class UGE_SpermWhale_TailwhipCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhale_TailwhipCD_BP__GE_SpermWhale_TailwhipCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhale_TailwhipCD_BP_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Lunge_ImpactVFX_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Lunge_ImpactVFX_T2__GE_Evo_Shadow_Body_Lunge_ImpactVFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Lunge_ImpactVFX_T2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_AddResource_Damage_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_AddResource_Damage_T1__GE_Evo_Shadow_Body_AddResource_Damage_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_AddResource_Damage_T1_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_AddResource_Damage_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_AddResource_Damage_T2__GE_Evo_Bone_Body_AddResource_Damage_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_AddResource_Damage_T2_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_PayResource_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_PayResource_T2__GE_Evo_Bone_Body_PayResource_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_PayResource_T2_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_Lunge_ImpactVFX_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_Lunge_ImpactVFX_T3__GE_Evo_Bone_Body_Lunge_ImpactVFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_Lunge_ImpactVFX_T3_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_AddResource_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_AddResource_T1__GE_Evo_Shadow_Body_AddResource_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_AddResource_T1_C, 0x0870);
		}

		// class UGA_Evo_Bone_Body_AddResource_Damage_T2_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_AddResource_Damage_T2__GA_Evo_Bone_Body_AddResource_Damage_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_AddResource_Damage_T2_C, 0x0438);
		}

		// class UAM_EVO_Bone_Body_Activate_T2_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_EVO_Bone_Body_Activate_T2__AM_EVO_Bone_Body_Activate_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EVO_Bone_Body_Activate_T2_C, 0x05E0);
		}

		// class UGA_Evo_Bone_Body_AddResource_T3_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_AddResource_T3__GA_Evo_Bone_Body_AddResource_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_AddResource_T3_C, 0x0438);
		}

		// class UGA_Evo_Bone_Body_AddResource_Damage_T3_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_AddResource_Damage_T3__GA_Evo_Bone_Body_AddResource_Damage_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_AddResource_Damage_T3_C, 0x0438);
		}

		// class UAM_EVO_Bone_Body_Activate_T3_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_EVO_Bone_Body_Activate_T3__AM_EVO_Bone_Body_Activate_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EVO_Bone_Body_Activate_T3_C, 0x05E0);
		}

		// class UGE_Evo_Bone_Body_AddResource_Damage_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_AddResource_Damage_T5__GE_Evo_Bone_Body_AddResource_Damage_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_AddResource_Damage_T5_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_AddResource_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_AddResource_T5__GE_Evo_Bone_Body_AddResource_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_AddResource_T5_C, 0x0870);
		}

		// class AShotgun_Projectile_Tier8_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__Shotgun_Projectile_Tier8__Shotgun_Projectile_Tier8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShotgun_Projectile_Tier8_C, 0x0270);
		}

		// class UGE_AssaultRifle_Damage_Tier8_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Damage_Tier8__GE_AssaultRifle_Damage_Tier8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Damage_Tier8_C, 0x0870);
		}

		// class UBP_HunterSeaScooter_Bounty_C : public UBP_HunterSeaScooter_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterSeaScooter_Bounty__BP_HunterSeaScooter_Bounty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HunterSeaScooter_Bounty_C, 0x0708);
		}

		// class UEpisodeProgressWidget_BP_C : public UMEStoryProgressToast
		TEST_METHOD(WidgetBlueprintGeneratedClass__EpisodeProgressWidget_BP__EpisodeProgressWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEpisodeProgressWidget_BP_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEpisodeProgressWidget_BP_C, OutAnimation, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEpisodeProgressWidget_BP_C, InAnimation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEpisodeProgressWidget_BP_C, CompleteCheckmark, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEpisodeProgressWidget_BP_C, Image_1, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEpisodeProgressWidget_BP_C, 0x02D8);
		}

		// class UGE_Bio_Electric_Body_Bonus_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_Bonus_T3__GE_Bio_Electric_Body_Bonus_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_Bonus_T3_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_T2__GE_Bio_Electric_Body_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_T2_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_LungeBonus_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_LungeBonus_T2__GE_Bio_Electric_Body_LungeBonus_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_LungeBonus_T2_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Fins_Immunity_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Fins_Immunity_T2__GE_Evo_Bio_Electric_Fins_Immunity_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Fins_Immunity_T2_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Fins_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Fins_T1__GE_Evo_Bio_Electric_Fins_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Fins_T1_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Fins_Immunity_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Fins_Immunity_T1__GE_Evo_Bio_Electric_Fins_Immunity_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Fins_Immunity_T1_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Tail_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Tail_T2__GE_Evo_Bio_Electric_Tail_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Tail_T2_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Tail_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Tail_T1__GE_Evo_Bio_Electric_Tail_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Tail_T1_C, 0x0870);
		}

		// class UGE_Evo_Adrenal_Gland3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Adrenal_Gland3__GE_Evo_Adrenal_Gland3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Adrenal_Gland3_C, 0x0870);
		}

		// class UGE_Evo_Adrenal_Gland2_Rating_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Adrenal_Gland2_Rating__GE_Evo_Adrenal_Gland2_Rating_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Adrenal_Gland2_Rating_C, 0x0870);
		}

		// class UGE_Evo_Adrenal_Gland2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Adrenal_Gland2__GE_Evo_Adrenal_Gland2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Adrenal_Gland2_C, 0x0870);
		}

		// class UGE_Evo_Adrenal_Gland1_Rating_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Adrenal_Gland1_Rating__GE_Evo_Adrenal_Gland1_Rating_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Adrenal_Gland1_Rating_C, 0x0870);
		}

		// class UGE_Evo_Brutal_Muscles4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Brutal_Muscles4__GE_Evo_Brutal_Muscles4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Brutal_Muscles4_C, 0x0870);
		}

		// class UGE_Evo_Hearty2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Hearty2__GE_Evo_Hearty2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Hearty2_C, 0x0870);
		}

		// class UGE_Evo_Hearty1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Hearty1__GE_Evo_Hearty1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Hearty1_C, 0x0870);
		}

		// class UGE_Evo_MineralDigestion4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_MineralDigestion4__GE_Evo_MineralDigestion4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_MineralDigestion4_C, 0x0870);
		}

		// class UAbilityTierWidget_BP_C : public UAbilityTierWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AbilityTierWidget_BP__AbilityTierWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityTierWidget_BP_C, 0x0280);
		}

		// class UPoisionWaterMessage_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PoisionWaterMessage_BP__PoisionWaterMessage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoisionWaterMessage_BP_C, 0x0230);
		}

		// class UInfamyReward_BP_C : public UInfamyRewardWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__InfamyReward_BP__InfamyReward_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyReward_BP_C, RarityBG, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyReward_BP_C, RewardDescriptionContainer, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfamyReward_BP_C, 0x02E0);
		}

		// class UGE_Evo_Bone_Fins_Evade_ImpactFX_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Evade_ImpactFX_T5__GE_Evo_Bone_Fins_Evade_ImpactFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Evade_ImpactFX_T5_C, 0x0870);
		}

		// class ABP_Skiff_Debris_EngineCover_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Debris_EngineCover__BP_Skiff_Debris_EngineCover_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Debris_EngineCover_C, 0x0230);
		}

		// class ABP_Skiff_Debris_Engine_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Debris_Engine__BP_Skiff_Debris_Engine_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Debris_Engine_C, 0x0230);
		}

		// class ABP_Skiff_Debris_Cooler_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Debris_Cooler__BP_Skiff_Debris_Cooler_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Debris_Cooler_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_Bow_Boss_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_Bow_Boss__BP_USCG_MediumSkiff_Debris_Bow_Boss_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_Bow_Boss_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_RightSide_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_RightSide__BP_USCG_MediumSkiff_Debris_RightSide_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_RightSide_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_RightRear_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_RightRear__BP_USCG_MediumSkiff_Debris_RightRear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_RightRear_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_RightDoor_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_RightDoor__BP_USCG_MediumSkiff_Debris_RightDoor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_RightDoor_C, 0x0230);
		}

		// class ABulletprojectile_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__Bulletprojectile__Bulletprojectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABulletprojectile_C, 0x0270);
		}

		// class AAssaultRifle_Projectile_Tier1_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Tier1__AssaultRifle_Projectile_Tier1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Tier1_C, 0x0270);
		}

		// class AAssaultRifle_Projectile_Tier6_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Tier6__AssaultRifle_Projectile_Tier6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Tier6_C, 0x0270);
		}

		// class UResolutionStepper_BP_C : public UResolutionSettingsStepper
		TEST_METHOD(WidgetBlueprintGeneratedClass__ResolutionStepper_BP__ResolutionStepper_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResolutionStepper_BP_C, 0x04A8);
		}

		// class UVideoSettingsMenuPanel_BP_C : public UVideoSettingsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__VideoSettingsMenuPanel_BP__VideoSettingsMenuPanel_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoSettingsMenuPanel_BP_C, FoVStepper, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoSettingsMenuPanel_BP_C, 0x03F8);
		}

		// class UObjectiveControllerWidget_BP_C : public UObjectiveControllerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ObjectiveControllerWidget_BP__ObjectiveControllerWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveControllerWidget_BP_C, 0x0410);
		}

		// class UManeaterSettingsMenuView_BP_C : public UManeaterSettingsMenuView
		TEST_METHOD(WidgetBlueprintGeneratedClass__ManeaterSettingsMenuView_BP__ManeaterSettingsMenuView_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterSettingsMenuView_BP_C, UberGraphFrame, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterSettingsMenuView_BP_C, 0x02B8);
		}

		// class UTutorialpopupWidget_BP_C : public UTUtorialPopupWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TutorialpopupWidget_BP__TutorialpopupWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialpopupWidget_BP_C, UberGraphFrame, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialpopupWidget_BP_C, OutAnimation, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialpopupWidget_BP_C, InAnimation, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialpopupWidget_BP_C, Description, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialpopupWidget_BP_C, FatIcon, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialpopupWidget_BP_C, Image_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialpopupWidget_BP_C, MineralIcon, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialpopupWidget_BP_C, MutagenIcon, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialpopupWidget_BP_C, ProtienIcon, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialpopupWidget_BP_C, 0x02F8);
		}

		// class UBountyPanel_BP_C : public UBountyPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__BountyPanel_BP__BountyPanel_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel_BP_C, UberGraphFrame, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel_BP_C, Idle, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel_BP_C, BG, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel_BP_C, BorderLeft, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel_BP_C, BorderRight, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel_BP_C, InfamyBackground, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel_BP_C, RankIconBG, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel_BP_C, Strip, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel_BP_C, NumLevels_1, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel_BP_C, UnknownData_C1HK, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel_BP_C, TierIcons_1, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyPanel_BP_C, CurrentLevelIdx, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyPanel_BP_C, 0x045C);
		}

		// class UHunterIntroView_BP_C : public UTwBaseView
		TEST_METHOD(WidgetBlueprintGeneratedClass__HunterIntroView_BP__HunterIntroView_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterIntroView_BP_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterIntroView_BP_C, ApexRight, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterIntroView_BP_C, HunterLeaderName_BP, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterIntroView_BP_C, ScaleBox_1, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterIntroView_BP_C, SubtitleWidget, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHunterIntroView_BP_C, 0x02C0);
		}

		// class ABP_EVO_Shadow_Body_AOE_T5_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Body_AOE_T5__BP_EVO_Shadow_Body_AOE_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Body_AOE_T5_C, 0x02D0);
		}

		// class ABP_EVO_Shadow_Body_Aura_T5_C : public AME_AuraDamageActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Body_Aura_T5__BP_EVO_Shadow_Body_Aura_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Body_Aura_T5_C, 0x0400);
		}

		// class UGA_Evo_Shadow_Body_T1_C : public UME_GameplayAbility_SlowWorld
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_T1__GA_Evo_Shadow_Body_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_T1_C, 0x0448);
		}

		// class UGE_Evo_Shadow_Body_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_T2__GE_Evo_Shadow_Body_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_T2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_LungeBonus_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_LungeBonus_T2__GE_Evo_Shadow_Body_LungeBonus_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_LungeBonus_T2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Bonus_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Bonus_T2__GE_Evo_Shadow_Body_Bonus_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Bonus_T2_C, 0x0870);
		}

		// class ABP_BossBoatBase_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BossBoatBase__BP_BossBoatBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, UberGraphFrame, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, SpotLight, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, Widget, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, Cine_Pete, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, RadioSoundComponent, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, LastHitTime, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BabyStartLocation, 0x0CFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BossMaxHealth, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, UnknownData_JRL6, 0x0D0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BossHealthBar, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BossPhaseCineSequence, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, PlayerView, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, DeathSeqActor, 0x0D28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, DeathSequencePlayer, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, EndIntroTransitionSeq, 0x0D38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BattleStartPlayerLocation, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BattleStartPlayerRotation, 0x0D4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BossIntroAnimation, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BossPhaseTwoLoc, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BossPhase2Rot, 0x0D6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, PostBattleCinematicLevelName, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BossfightGameplayLevelName, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BossfightNavigationLevelName, 0x0D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BattleStartPeteLocation, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BattleStartPeteRotation, 0x0D9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, Battle1Phase2Cine, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, Battle3Phase2Cine, 0x0DA9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, Battle3Phase3Cine, 0x0DAA);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, WinConditionType, 0x0DAB);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, Battle2Phase2Cine, 0x0DAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, bHasPlayerDefeatedCine, 0x0DAD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, UnknownData_JV4Z, 0x0DAE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, PlayerDefeatCineCamera, 0x0DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BossPlayerDefeatCineSEQ, 0x0DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BossPlayerDefeatCineSEQActor, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BossPlayerDefeatCineSEQPlayer, 0x0DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, SurviveTimeElasped, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, UnknownData_HCT2, 0x0DD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, SurviveTimerHandle, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, SurviveTime, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, NumHuntersToDefeat, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, NumHunterProgress, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, BossUIType, 0x0DEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, IsPrologue, 0x0DED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, CageVOPlayed, 0x0DEE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, UnknownData_2TS8, 0x0DEF);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, PeteTauntVO, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, PeteCageVO, 0x0DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BossBoatBase_C, FadeSEQ, 0x0E00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BossBoatBase_C, 0x0E08);
		}

		// class ABP_Base_PT_Boat_C : public ABP_BossBoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_PT_Boat__BP_Base_PT_Boat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PT_Boat_C, UberGraphFrame, 0x0E08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PT_Boat_C, DummyElectro2, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PT_Boat_C, DummyElectro1, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PT_Boat_C, CageMesh, 0x0E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PT_Boat_C, ME_TorpedoLauncher, 0x0E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PT_Boat_C, SpotLight_1, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PT_Boat_C, BossShieldHealth, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PT_Boat_C, BossShieldMaxHealth, 0x0E3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PT_Boat_C, ElectroShield1, 0x0E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PT_Boat_C, ElectroShield2, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PT_Boat_C, NumValidShields, 0x0E50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_PT_Boat_C, 0x0E54);
		}

		// class ABP_Whipshot_Explosion_XL_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Whipshot_Explosion_XL__BP_Whipshot_Explosion_XL_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Whipshot_Explosion_XL_C, 0x02D0);
		}

		// class AALL_Apex_Alligator_BP_C : public AALL_Alligator_BP_C
		TEST_METHOD(BlueprintGeneratedClass__ALL_Apex_Alligator_BP__ALL_Apex_Alligator_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AALL_Apex_Alligator_BP_C, UberGraphFrame, 0x1050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AALL_Apex_Alligator_BP_C, 0x1058);
		}

		// class UQuestLogPanel_BP_C : public UQuestLogPanel
		TEST_METHOD(WidgetBlueprintGeneratedClass__QuestLogPanel_BP__QuestLogPanel_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel_BP_C, ArrowLeft, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel_BP_C, ArrowRight, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel_BP_C, AudioLogIcon, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel_BP_C, AudioLogInput, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel_BP_C, InfamyBackground, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestLogPanel_BP_C, ShortObjective, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestLogPanel_BP_C, 0x0450);
		}

		// class UGE_Grouper_EvadeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Grouper_EvadeCD_BP__GE_Grouper_EvadeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Grouper_EvadeCD_BP_C, 0x0870);
		}

		// class UGA_M_Grouper_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Grouper_EvadeRight_BP__GA_M_Grouper_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Grouper_EvadeRight_BP_C, 0x05E0);
		}

		// class UKeyMappingSettingsMenuPanel_BP_C : public UKeyMappingSettingsWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__KeyMappingSettingsMenuPanel_BP__KeyMappingSettingsMenuPanel_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsMenuPanel_BP_C, UberGraphFrame, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyMappingSettingsMenuPanel_BP_C, QuestLogMenuWidget, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyMappingSettingsMenuPanel_BP_C, 0x03C0);
		}

		// class UAttributesWidget_BP_C : public UAttributesWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AttributesWidget_BP__AttributesWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesWidget_BP_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesWidget_BP_C, AttributeRatingWidget1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesWidget_BP_C, AttributeRatingWidget2, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesWidget_BP_C, AttributeRatingWidget3, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesWidget_BP_C, AttributeRatingWidget4, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributesWidget_BP_C, AttributeRatingWidget5, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttributesWidget_BP_C, 0x0290);
		}

		// class UTutorialSimplePopupWidget_BP_C : public UTUtorialSinglePopupWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TutorialSimplePopupWidget_BP__TutorialSimplePopupWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, UberGraphFrame, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, OutAnimation, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, InAnimation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionApexPredator, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionBioElectric, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionBoats, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionBone, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionBounty, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionCollectibles, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionError, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionEvolutionBody, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionEvolutionCharged, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionEvolutions, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionFocusThreatBoats, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionFocusThreatWildlife, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionGates, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionHunts, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionLandmarks, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionMutagenX, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionNeutrientCache, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionNutrients, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionOnYourOwn, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionPete2, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionPete3, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionPopulationControl, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionShadow, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionSharkShield, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionSideQuest, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionSonar, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionTargetingLaser, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionTerrorize, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionTheGrotto, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionThrash, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionThreat, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, DescriptionWildlife, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingApex, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingBioElectric, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingBoats, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingBone, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingBounty, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingCollection, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingError, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingEvolution, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingEvolutionBody, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingEvolutionCharged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingFocusThreat, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingGates, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingGrotto, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingHunt, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingLandmark, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingMutagenX, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingNutrientCache, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingNutrients, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingOnYourOwn, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingPete2, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingPete3, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingPopulationControl, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingShadow, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingSharkShield, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingSideQuest, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingSonar, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingTargetingLaser, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingTerrorize, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingThrash, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingThreat, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, HeadingWildlife, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconApex, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconBoats, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconBounty, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconCollectibles, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconError, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconEvolution, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconEvolutionBody, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconEvolutionCharged, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconGates, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconHunts, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconLandmarks, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconMutagenX, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconNutrientCaches, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconNutrients, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconOnYourOwn, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconPete2, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconPete3, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconPopulationControl, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconSharkShield, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconSideQuest, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconSonar, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconTargetingLaser, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconTerrorize, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconTheGrotto, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconThrash, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconThreat, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, IconWildlife, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialSimplePopupWidget_BP_C, TextBlock_1, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialSimplePopupWidget_BP_C, 0x05C0);
		}

		// class AFSH_Barracuda_Albino_BP_C : public AFSH_Barracuda_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Barracuda_Albino_BP__FSH_Barracuda_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Barracuda_Albino_BP_C, 0x1050);
		}

		// class AFSH_Muskellunge_Hunted_BP_C : public AFSH_Muskellunge_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Muskellunge_Hunted_BP__FSH_Muskellunge_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Muskellunge_Hunted_BP_C, 0x1050);
		}

		// class ASHK_GreatWhite_Albino_BP_C : public ASHK_GreatWhite_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_GreatWhite_Albino_BP__SHK_GreatWhite_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_GreatWhite_Albino_BP_C, 0x1050);
		}

		// class AWHL_SpermWhale_Albino_BP_C : public AWHL_SpermWhale_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WHL_SpermWhale_Albino_BP__WHL_SpermWhale_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWHL_SpermWhale_Albino_BP_C, 0x1050);
		}

		// class AFSH_Marlin_Albino_BP_C : public AFSH_Marlin_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Marlin_Albino_BP__FSH_Marlin_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Marlin_Albino_BP_C, 0x10FA);
		}

		// class ABP_Base_BarrelRaft_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_BarrelRaft__BP_Base_BarrelRaft_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_BarrelRaft_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_BarrelRaft_C, 0x0CD4);
		}

		// class UBP_AssaultRifle_Base_C : public UME_WeaponComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Base__BP_AssaultRifle_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Base_C, 0x06E0);
		}

		// class UBP_AssaultRifle_Tier2_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Tier2__BP_AssaultRifle_Tier2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Tier2_C, 0x06E0);
		}

		// class UBP_AssaultRifle_Tier9_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Tier9__BP_AssaultRifle_Tier9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Tier9_C, 0x06E0);
		}

		// class UBP_AssaultRifle_Tier5_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Tier5__BP_AssaultRifle_Tier5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Tier5_C, 0x06E0);
		}

		// class UBP_AssaultRifle_Tier7_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Tier7__BP_AssaultRifle_Tier7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Tier7_C, 0x06E0);
		}

		// class ABP_Yacht_LeftSide_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Yacht_LeftSide__BP_Yacht_LeftSide_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Yacht_LeftSide_C, 0x0230);
		}

		// class ARifle_Projectile_Tier3_C : public ARifle_Projectile_Tier1_C
		TEST_METHOD(BlueprintGeneratedClass__Rifle_Projectile_Tier3__Rifle_Projectile_Tier3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARifle_Projectile_Tier3_C, 0x0270);
		}

		// class UBP_Rifle_Tier2_C : public UBP_Rifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rifle_Tier2__BP_Rifle_Tier2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rifle_Tier2_C, 0x06E0);
		}

		// class UBP_Shotgun_Tier8_C : public UBP_Shotgun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shotgun_Tier8__BP_Shotgun_Tier8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shotgun_Tier8_C, 0x06E0);
		}

		// class UBP_Shotgun_Tier9_C : public UBP_Shotgun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shotgun_Tier9__BP_Shotgun_Tier9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shotgun_Tier9_C, 0x06E0);
		}

		// class UBP_Shotgun_Tier2_C : public UBP_Shotgun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shotgun_Tier2__BP_Shotgun_Tier2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shotgun_Tier2_C, 0x06E0);
		}

		// class AShotgun_Projectile_Tier9_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__Shotgun_Projectile_Tier9__Shotgun_Projectile_Tier9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShotgun_Projectile_Tier9_C, 0x0270);
		}

		// class AShotgun_Projectile_Tier3_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__Shotgun_Projectile_Tier3__Shotgun_Projectile_Tier3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShotgun_Projectile_Tier3_C, 0x0270);
		}

		// class UBP_Speargun_Tier1_C : public UBP_Speargun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Speargun_Tier1__BP_Speargun_Tier1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Speargun_Tier1_C, 0x06E0);
		}

		// class UHumanBase_ABP_C : public UME_AnimInstance_HumanNPC
		TEST_METHOD(AnimBlueprintGeneratedClass__HumanBase_ABP__HumanBase_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, UberGraphFrame, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_Root, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_27, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_26, 0x0B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_Slot_7, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_33, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_32, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_31, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_30, 0x0CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_29, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_28, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_27, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_26, 0x0D58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_25, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_24, 0x0DA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_57, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_24, 0x0E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_56, 0x0E78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_23, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_55, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_25, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_21, 0x1038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_24, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_RotationOffsetBlendSpace_2, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_23, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_22, 0x12B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_21, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_20, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_19, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_18, 0x1350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_17, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_16, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_54, 0x13C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_22, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_53, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_21, 0x14E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_20, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_20, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateMachine_12, 0x1570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LayeredBoneBlend_10, 0x1620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_52, 0x16E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_23, 0x1758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_Slot_6, 0x17F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_19, 0x1840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_19, 0x1868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_15, 0x1898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_51, 0x18C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_18, 0x1938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateMachine_11, 0x1968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_14, 0x1A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_13, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_17, 0x1A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_15, 0x1B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_50, 0x1BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_49, 0x1C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_48, 0x1CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_22, 0x1D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_21, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_20, 0x1EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_16, 0x1F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_17, 0x2020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_47, 0x2050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_46, 0x20C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_14, 0x2140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_45, 0x21F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_44, 0x2268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_43, 0x22E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_42, 0x2358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_13, 0x23D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_41, 0x2480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_16, 0x24F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateMachine_10, 0x2528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_12, 0x25D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_11, 0x2600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_RotationOffsetBlendSpace, 0x2628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_40, 0x27B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_19, 0x2828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_39, 0x28C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_38, 0x2940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_37, 0x29B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_36, 0x2A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_12, 0x2AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_35, 0x2B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_15, 0x2BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_11, 0x2CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_10, 0x2D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_34, 0x2E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_33, 0x2E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_18, 0x2F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_32, 0x2FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_17, 0x3018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_31, 0x30B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_16, 0x3130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_30, 0x31D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_15, 0x3248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_29, 0x3278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LayeredBoneBlend_9, 0x32F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_14, 0x33B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_13, 0x3490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_12, 0x3570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_11, 0x3650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_9, 0x3730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_10, 0x37E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_9, 0x38C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_8, 0x39A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_8, 0x3A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_14, 0x3B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateMachine_9, 0x3B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_28, 0x3C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SaveCachedPose_10, 0x3C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_15, 0x3D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalRefPose_6, 0x3DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_Slot_5, 0x3DF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_Slot_4, 0x3E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_14, 0x3E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_13, 0x3F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_12, 0x3FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_PoseSnapshot_2, 0x4068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ComponentToLocalSpace_7, 0x40F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, UnknownData_91M2, 0x4118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LookAt_4, 0x4120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalToComponentSpace_7, 0x42D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LookAt_3, 0x42F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_27, 0x44A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_26, 0x4518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_25, 0x4590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_24, 0x4608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_23, 0x4680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_22, 0x46F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_21, 0x4770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_20, 0x47E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_19, 0x4860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_18, 0x48D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_17, 0x4950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_16, 0x49C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_7, 0x4A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_6, 0x4AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_5, 0x4BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_15, 0x4C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_4, 0x4CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_14, 0x4D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_3, 0x4DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum_2, 0x4EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_13, 0x4F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_12, 0x4FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_11, 0x5040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_10, 0x50B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_9, 0x5130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_13, 0x51A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateMachine_8, 0x51D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_Slot_3, 0x5288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SaveCachedPose_9, 0x52D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_18, 0x5388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_17, 0x53B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_Slot_2, 0x53D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LayeredBoneBlend_8, 0x5420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LayeredBoneBlend_7, 0x54E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_8, 0x55A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalToComponentSpace_6, 0x5618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ComponentToLocalSpace_6, 0x5638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, UnknownData_HXGX, 0x5658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LookAt_2, 0x5660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalToComponentSpace_5, 0x5810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ComponentToLocalSpace_5, 0x5830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_11, 0x5850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LayeredBoneBlend_6, 0x58F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SaveCachedPose_8, 0x59B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_16, 0x5A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_15, 0x5A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_10, 0x5AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_9, 0x5AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_8, 0x5B08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_7, 0x5B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ComponentToLocalSpace_4, 0x5B58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalToComponentSpace_4, 0x5B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ModifyBone_9, 0x5B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_7, 0x5CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_12, 0x5D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ComponentToLocalSpace_3, 0x5DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalToComponentSpace_3, 0x5DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ModifyBone_8, 0x5DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_6, 0x5EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_11, 0x5FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalRefPose_5, 0x6008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_10, 0x6020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateMachine_7, 0x6050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ApplyAdditive_4, 0x6100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_6, 0x61C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_5, 0x61F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_7, 0x6218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_9, 0x6290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalRefPose_4, 0x62C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_8, 0x62D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateMachine_6, 0x6308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequenceEvaluator, 0x63B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByEnum, 0x6400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SaveCachedPose_7, 0x64B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_14, 0x6568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_5, 0x6590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SaveCachedPose_6, 0x6670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_4, 0x6728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SaveCachedPose_5, 0x6808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_10, 0x68C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_3, 0x6960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_9, 0x6A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer_2, 0x6AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendSpacePlayer, 0x6BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_8, 0x6CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LayeredBoneBlend_5, 0x6D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_4, 0x6E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_3, 0x6E28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_6, 0x6E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_7, 0x6EC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalRefPose_3, 0x6EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_6, 0x6F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateMachine_5, 0x6F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ApplyAdditive_3, 0x6FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_13, 0x70B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_12, 0x70E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_11, 0x7108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_10, 0x7130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LayeredBoneBlend_4, 0x7158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult_2, 0x7218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TransitionResult, 0x7240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_5, 0x7268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_5, 0x72E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalRefPose_2, 0x7310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_4, 0x7328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateMachine_4, 0x7358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ApplyAdditive_2, 0x7408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_7, 0x74D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_4, 0x7570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_6, 0x75E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_9, 0x7688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_5, 0x76B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_3, 0x7750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateMachine_3, 0x7780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LookAt, 0x7830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ApplyAdditive, 0x79E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_3, 0x7AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LayeredBoneBlend_3, 0x7B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalRefPose, 0x7BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SaveCachedPose_4, 0x7BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_8, 0x7CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LayeredBoneBlend_2, 0x7CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_7, 0x7D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_4, 0x7DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer_2, 0x7E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_3, 0x7ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SequencePlayer, 0x7F78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TwoWayBlend, 0x7FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_PoseSnapshot, 0x80B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult_2, 0x8148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateMachine_2, 0x8178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_6, 0x8228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ModifyBone_7, 0x8250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ModifyBone_6, 0x8358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ModifyBone_5, 0x8460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ModifyBone_4, 0x8568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ModifyBone_3, 0x8670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ComponentToLocalSpace_2, 0x8778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalToComponentSpace_2, 0x8798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateResult, 0x87B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_StateMachine, 0x87E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SaveCachedPose_3, 0x8898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool_2, 0x8950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_5, 0x89F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ModifyBone_2, 0x8A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x8B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x8B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_TwoBoneIK, 0x8B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_Slot, 0x8D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_LayeredBoneBlend, 0x8D88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SaveCachedPose_2, 0x8E48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_4, 0x8F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_3, 0x8F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_BlendListByBool, 0x8F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_SaveCachedPose, 0x8FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose_2, 0x90A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_UseCachedPose, 0x90D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, AnimGraphNode_ModifyBone, 0x90F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHumanBase_ABP_C, bPassengerGoToMovingVehicle, 0x9200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHumanBase_ABP_C, 0x9201);
		}

		// class UManeaterHUDView_BP_C : public UManeaterHUDView
		TEST_METHOD(WidgetBlueprintGeneratedClass__ManeaterHUDView_BP__ManeaterHUDView_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, UberGraphFrame, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, AutoSaveLoop, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, BoostMeter_BP, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, BossHealthWidget_BP, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, BountyTimer_BP, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, Compass_BP, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, ContextualControlWidget_BP, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, Crosshair, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, DamageTextController_BP, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, EnemyScreenSpaceWidgetContainer_BP, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, EvolutionAbilityWidget_BP, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, HUDRewardQueueWidget_BP, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, LevelProgressionWidget_BP, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, LoadingIcon, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, ObjectiveControllerWidget_BP, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, PlayerInfoWidget_BP, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, PlayerNutrientsWidget_BP, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, SubtitleWidget, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, ThrashMeterV2_BP, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDView_BP_C, TooltipContainer_BP, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterHUDView_BP_C, 0x0430);
		}

		// class UGE_Evo_Shadow_Stack_FX_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack_FX__GE_Evo_Shadow_Stack_FX_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_FX_C, 0x0870);
		}

		// class UBP_GE_TorpedoExplosion_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_TorpedoExplosion__BP_GE_TorpedoExplosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_TorpedoExplosion_C, 0x0870);
		}

		// class UBP_HunterSeaScooter_Pete2_C : public UME_WeaponComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterSeaScooter_Pete2__BP_HunterSeaScooter_Pete2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HunterSeaScooter_Pete2_C, UberGraphFrame, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HunterSeaScooter_Pete2_C, CastHumanOwner, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HunterSeaScooter_Pete2_C, VelocityParticlesHandle, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HunterSeaScooter_Pete2_C, FanSprayParticles, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HunterSeaScooter_Pete2_C, ActiveFanSpray, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HunterSeaScooter_Pete2_C, 0x0708);
		}

		// class UGE_SpearGun_Damage_Pete2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpearGun_Damage_Pete2__GE_SpearGun_Damage_Pete2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpearGun_Damage_Pete2_C, 0x0870);
		}

		// class ABP_ElectroShield_C : public AME_AuraDamageActor
		TEST_METHOD(BlueprintGeneratedClass__BP_ElectroShield__BP_ElectroShield_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ElectroShield_C, 0x0400);
		}

		// class ABP_ElectroShield_Bounty_C : public ABP_ElectroShield_C
		TEST_METHOD(BlueprintGeneratedClass__BP_ElectroShield_Bounty__BP_ElectroShield_Bounty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_ElectroShield_Bounty_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ElectroShield_Bounty_C, 0x0408);
		}

		// class ABP_Airboat_Pete1_Support_C : public ABP_Boss_Support_Boat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Pete1_Support__BP_Airboat_Pete1_Support_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Pete1_Support_C, 0x0D18);
		}

		// class AEVO_ShadowTail_Projectile_T3_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__EVO_ShadowTail_Projectile_T3__EVO_ShadowTail_Projectile_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEVO_ShadowTail_Projectile_T3_C, 0x0270);
		}

		// class UBP_Bullet_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bullet_IR__BP_Bullet_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Bullet_IR_C, 0x0040);
		}

		// class ABP_AirBoat_Debris_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AirBoat_Debris_Fragment2__BP_AirBoat_Debris_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AirBoat_Debris_Fragment2_C, 0x0230);
		}

		// class ABP_AirBoat_Debris_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AirBoat_Debris_Fragment1__BP_AirBoat_Debris_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AirBoat_Debris_Fragment1_C, 0x0230);
		}

		// class ABP_Airboat_Debris_Chair_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Debris_Chair__BP_Airboat_Debris_Chair_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Debris_Chair_C, 0x0230);
		}

		// class ABP_Airboat_Debris_AmmoCrate_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Debris_AmmoCrate__BP_Airboat_Debris_AmmoCrate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Debris_AmmoCrate_C, 0x0230);
		}

		// class UHunterSupportIcon_BP_C : public UHunterSupportIcon
		TEST_METHOD(WidgetBlueprintGeneratedClass__HunterSupportIcon_BP__HunterSupportIcon_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHunterSupportIcon_BP_C, 0x0268);
		}

		// class UGE_Evo_Bone_Body_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_T2__GE_Evo_Bone_Body_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_T2_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_LungeBonus_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_LungeBonus_T2__GE_Evo_Bone_Body_LungeBonus_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_LungeBonus_T2_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_Bonus_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_Bonus_T2__GE_Evo_Bone_Body_Bonus_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_Bonus_T2_C, 0x0870);
		}

		// class UGE_Evo_Bone_Fins_Evade_ImpactFX_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Evade_ImpactFX_T2__GE_Evo_Bone_Fins_Evade_ImpactFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Evade_ImpactFX_T2_C, 0x0870);
		}

		// class UGA_Evo_Bone_Fins_Evade_ImpactFX_T3_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Fins_Evade_ImpactFX_T3__GA_Evo_Bone_Fins_Evade_ImpactFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Fins_Evade_ImpactFX_T3_C, 0x0400);
		}

		// class UGE_Evo_Bone_Fins_Evade_ImpactFX_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Evade_ImpactFX_T4__GE_Evo_Bone_Fins_Evade_ImpactFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Evade_ImpactFX_T4_C, 0x0870);
		}

		// class UGA_Evo_Bone_Fins_T4_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Fins_T4__GA_Evo_Bone_Fins_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Fins_T4_C, 0x0400);
		}

		// class UGE_Evo_Bone_Fins_Defense_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Defense_T3__GE_Evo_Bone_Fins_Defense_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Defense_T3_C, 0x0870);
		}

		// class ABP_EVO_Shadow_Body_Aura_T3_C : public AME_AuraDamageActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Body_Aura_T3__BP_EVO_Shadow_Body_Aura_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Body_Aura_T3_C, 0x0400);
		}

		// class ABP_EVO_Shadow_Body_AOE_T3_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Body_AOE_T3__BP_EVO_Shadow_Body_AOE_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Body_AOE_T3_C, 0x02D0);
		}

		// class UGA_EVO_Shadow_Body_AOE_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_AOE_T1__GA_EVO_Shadow_Body_AOE_T1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_AOE_T1_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_AOE_T1_C, 0x0408);
		}

		// class UGA_EVO_Shadow_Body_Aura_T2_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_Aura_T2__GA_EVO_Shadow_Body_Aura_T2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_Aura_T2_C, UberGraphFrame, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_Aura_T2_C, Shadow_Aura, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_Aura_T2_C, 0x0410);
		}

		// class UGA_EVO_Shadow_Body_AOE_End_T2_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_AOE_End_T2__GA_EVO_Shadow_Body_AOE_End_T2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_AOE_End_T2_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_AOE_End_T2_C, 0x0408);
		}

		// class ABP_Deathcorn_AIController_C : public ABP_Base_Hunter_AIController_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Deathcorn_AIController__BP_Deathcorn_AIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Deathcorn_AIController_C, 0x07E8);
		}

		// class ABP_Kayak_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Kayak_Fragment6__BP_Kayak_Fragment6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Kayak_Fragment6_C, 0x0230);
		}

		// class ABP_DepthBoat_Left_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthBoat_Left__BP_DepthBoat_Left_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthBoat_Left_C, 0x0230);
		}

		// class UGE_Seal_EvadeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Seal_EvadeCD_BP__GE_Seal_EvadeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Seal_EvadeCD_BP_C, 0x0870);
		}

		// class UGA_M_EvadeLeft_Seal_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_EvadeLeft_Seal_BP__GA_M_EvadeLeft_Seal_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_EvadeLeft_Seal_BP_C, 0x0510);
		}

		// class UGE_Marlin_EvadeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Marlin_EvadeCD_BP__GE_Marlin_EvadeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Marlin_EvadeCD_BP_C, 0x0870);
		}

		// class ATRT_Medium_Turtle_Albino_BP_C : public ATRT_Medium_Turtle_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TRT_Medium_Turtle_Albino_BP__TRT_Medium_Turtle_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATRT_Medium_Turtle_Albino_BP_C, 0x1050);
		}

		// class ATRT_Large_Turtle_Albino_BP_C : public ATRT_Large_Turtle_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TRT_Large_Turtle_Albino_BP__TRT_Large_Turtle_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATRT_Large_Turtle_Albino_BP_C, 0x1050);
		}

		// class ASHK_Small_Seal_Albino_BP_C : public ASHK_Small_Seal_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_Small_Seal_Albino_BP__SHK_Small_Seal_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_Small_Seal_Albino_BP_C, 0x1050);
		}

		// class AFSH_KingMackerel_Large_BP_C : public AFSH_KingMackerel_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_KingMackerel_Large_BP__FSH_KingMackerel_Large_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_KingMackerel_Large_BP_C, 0x1048);
		}

		// class AFSH_KingMackerel_Small_Albino_BP_C : public AFSH_KingMackerel_Small_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_KingMackerel_Small_Albino_BP__FSH_KingMackerel_Small_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_KingMackerel_Small_Albino_BP_C, 0x1048);
		}

		// class ADEP_BP_USCG_Command_Pete3_Phase2_C : public ABP_Boss_Support_Boat_C
		TEST_METHOD(BlueprintGeneratedClass__DEP_BP_USCG_Command_Pete3_Phase2__DEP_BP_USCG_Command_Pete3_Phase2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADEP_BP_USCG_Command_Pete3_Phase2_C, 0x0D18);
		}

		// class ABP_WaterTrike_Fragment9_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WaterTrike_Fragment9__BP_WaterTrike_Fragment9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WaterTrike_Fragment9_C, 0x0230);
		}

		// class ABP_FishingTrawlerFragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawlerFragment7__BP_FishingTrawlerFragment7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawlerFragment7_C, 0x0230);
		}

		// class ABP_FishingTrawlerFragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawlerFragment4__BP_FishingTrawlerFragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawlerFragment4_C, 0x0230);
		}

		// class ABP_FishingTrawlerFragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawlerFragment2__BP_FishingTrawlerFragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawlerFragment2_C, 0x0230);
		}

		// class ABP_Rowboat_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rowboat_Fragment6__BP_Rowboat_Fragment6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Rowboat_Fragment6_C, 0x0230);
		}

		// class ABP_SportFishingBoat_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Fragment4__BP_SportFishingBoat_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Fragment4_C, 0x0230);
		}

		// class ABP_SportFishingBoat_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Fragment3__BP_SportFishingBoat_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Fragment3_C, 0x0230);
		}

		// class ABP_SportFishingBoat_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Fragment2__BP_SportFishingBoat_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Fragment2_C, 0x0230);
		}

		// class ABP_Base_PontoonBoat_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_PontoonBoat_Empty__BP_Base_PontoonBoat_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PontoonBoat_Empty_C, ME_DistanceSignificance, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_PontoonBoat_Empty_C, 0x0C00);
		}

		// class ABP_Tikibar_Fragment14_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment14__BP_Tikibar_Fragment14_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment14_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment13_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment13__BP_Tikibar_Fragment13_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment13_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment12_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment12__BP_Tikibar_Fragment12_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment12_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment11_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment11__BP_Tikibar_Fragment11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment11_C, 0x0230);
		}

		// class ABP_PontoonBoat_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment6__BP_PontoonBoat_Fragment6_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment6_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment6_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment5__BP_PontoonBoat_Fragment5_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment5_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment5_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment4__BP_PontoonBoat_Fragment4_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment4_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment4_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment12_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment12__BP_PontoonBoat_Fragment12_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment12_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment12_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment11_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment11__BP_PontoonBoat_Fragment11_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment11_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment11_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment10_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment10__BP_PontoonBoat_Fragment10_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment10_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment10_C, 0x0238);
		}

		// class ABP_Base_Sailboat_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Sailboat__BP_Base_Sailboat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Sailboat_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Sailboat_C, 0x0CD4);
		}

		// class ABP_Sailboat_Hatch_Blue_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Hatch_Blue__BP_Sailboat_Hatch_Blue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Hatch_Blue_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment5_Blue_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment5_Blue__BP_Sailboat_Fragment5_Blue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment5_Blue_C, 0x0230);
		}

		// class ABP_Base_TourAirboat_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_TourAirboat_Controller__BP_Base_TourAirboat_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_TourAirboat_Controller_C, 0x07E8);
		}

		// class ABP_Skiff_Outboard_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Outboard__BP_Skiff_Outboard_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Outboard_C, 0x0230);
		}

		// class UFSH_MahiMahi_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__FSH_MahiMahi_ABP__FSH_MahiMahi_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFSH_MahiMahi_ABP_C, 0x5C8C);
		}

		// class UGE_MarlinLungeDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MarlinLungeDamage_BP__GE_MarlinLungeDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MarlinLungeDamage_BP_C, 0x0870);
		}

		// class UGE_Marlin_ThrashDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Marlin_ThrashDamage_BP__GE_Marlin_ThrashDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Marlin_ThrashDamage_BP_C, 0x0870);
		}

		// class ABP_BreakableBase_C : public AME_DestructibleActor
		TEST_METHOD(BlueprintGeneratedClass__BP_BreakableBase__BP_BreakableBase_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableBase_C, UberGraphFrame, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableBase_C, Widget, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableBase_C, bShowOnMap, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableBase_C, UnknownData_DON5, 0x03B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableBase_C, HUD, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableBase_C, IconData, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableBase_C, ShowInWorldWidget_, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableBase_C, UnknownData_VVEB, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableBase_C, WidgetIndex, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_BreakableBase_C, IsTutorialGate_, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BreakableBase_C, 0x0401);
		}

		// class ABP_BreakableGate_Adult_C : public ABP_BreakableGate_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BreakableGate_Adult__BP_BreakableGate_Adult_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BreakableGate_Adult_C, 0x0410);
		}

		// class AWorldMap_Sound_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__WorldMap_Sound__WorldMap_Sound_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Sound_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Sound_C, PlayingGrottoAmbience, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldMap_Sound_C, 0x0231);
		}

		// class UGE_ThrashRight_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_ThrashRight__GE_ThrashRight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ThrashRight_C, 0x0870);
		}

		// class UBP_PlayerSharkThrash_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerSharkThrash_IR__BP_PlayerSharkThrash_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerSharkThrash_IR_C, 0x0040);
		}

		// class UGE_PlayerSharkTailWhipRagdoll_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PlayerSharkTailWhipRagdoll__GE_PlayerSharkTailWhipRagdoll_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PlayerSharkTailWhipRagdoll_C, 0x0870);
		}

		// class ANutrientCacheDestructibleObjective_BP_C : public ABP_Breakable_Sewer_Grate_Strong_Round_C
		TEST_METHOD(BlueprintGeneratedClass__NutrientCacheDestructibleObjective_BP__NutrientCacheDestructibleObjective_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, UnknownData_28CU, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, UberGraphFrame, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, BaseInsert, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, Bubbles_Emitter, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, PointLight1, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, PointLight, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, Sphere, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, Box, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, Base, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, BlinkLightAnimation_Blink_09D2748741CC755378319C9C3B3C0CE8, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, BlinkLightAnimation__Direction_09D2748741CC755378319C9C3B3C0CE8, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, UnknownData_EOM9, 0x044D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, BlinkLightAnimation, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, RampLight_NewTrack_0_820B648C471F2153B518A4AE242B9AB1, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, RampLight__Direction_820B648C471F2153B518A4AE242B9AB1, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, UnknownData_5R0V, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, RampLight, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, IsActive_, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, ShowDebugInfo_, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, UnknownData_AGXO, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, CurrentLightIntensity, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, DynamicMat, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, CurrentEmissiveIntensity, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANutrientCacheDestructibleObjective_BP_C, NavVector, 0x047C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANutrientCacheDestructibleObjective_BP_C, 0x0488);
		}

		// class AME_Collectible_Objective_BP_C : public AME_CollectableActor
		TEST_METHOD(BlueprintGeneratedClass__ME_Collectible_Objective_BP__ME_Collectible_Objective_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Collectible_Objective_BP_C, UberGraphFrame, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Collectible_Objective_BP_C, ParticleSystem, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Collectible_Objective_BP_C, Widget, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Collectible_Objective_BP_C, PointLight, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Collectible_Objective_BP_C, WidgetIndex, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Collectible_Objective_BP_C, Region, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Collectible_Objective_BP_C, bIsActive, 0x0315);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Collectible_Objective_BP_C, MinSharkHeight, 0x0316);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Collectible_Objective_BP_C, UnknownData_ZQAL, 0x0317);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Collectible_Objective_BP_C, NavVector, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_Collectible_Objective_BP_C, 0x0324);
		}

		// class ABP_Breakable_Sewer_Grate_Strong_Round_C : public ABP_BreakableBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Breakable_Sewer_Grate_Strong_Round__BP_Breakable_Sewer_Grate_Strong_Round_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Breakable_Sewer_Grate_Strong_Round_C, 0x0401);
		}

		// class ABP_Seagull_Group_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Seagull_Group_PS__BP_Seagull_Group_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Seagull_Group_PS_C, 0x0280);
		}

		// class ABP_Grotto_Buoy_01_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Grotto_Buoy_01__BP_Grotto_Buoy_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Grotto_Buoy_01_C, 0x0280);
		}

		// class ALG_Ship_Walkway_Lights_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_Ship_Walkway_Lights__LG_Ship_Walkway_Lights_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Ship_Walkway_Lights_C, 0x0238);
		}

		// class ALG_HighBayDock_Light_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_HighBayDock_Light__LG_HighBayDock_Light_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_HighBayDock_Light_C, 0x0238);
		}

		// class ALG_DockLight_A_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_DockLight_A__LG_DockLight_A_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_DockLight_A_C, 0x0238);
		}

		// class ANightTimeActivity_Bonfire_BP_C : public ANightTimeActivityBase_BP_C
		TEST_METHOD(BlueprintGeneratedClass__NightTimeActivity_Bonfire_BP__NightTimeActivity_Bonfire_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivity_Bonfire_BP_C, UberGraphFrame, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivity_Bonfire_BP_C, VoiceGroupComponent_BP, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivity_Bonfire_BP_C, ParticleSystem1, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivity_Bonfire_BP_C, PointLight, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivity_Bonfire_BP_C, ParticleSystem, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivity_Bonfire_BP_C, StaticMesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANightTimeActivity_Bonfire_BP_C, BonFireParent, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANightTimeActivity_Bonfire_BP_C, 0x0290);
		}

		// class ULandmarkCinInterface_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__LandmarkCinInterface__LandmarkCinInterface_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandmarkCinInterface_C, 0x0028);
		}

		// class ADO_Sub_Explorable_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DO_Sub_Explorable__DO_Sub_Explorable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADO_Sub_Explorable_C, 0x0228);
		}

		// class ADMI_Sub_Landscape_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DMI_Sub_Landscape__DMI_Sub_Landscape_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADMI_Sub_Landscape_C, 0x0228);
		}

		// class ASB_Sub_Landscape_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__SB_Sub_Landscape__SB_Sub_Landscape_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASB_Sub_Landscape_C, 0x0228);
		}

		// class ASB_Sub_Paths1_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__SB_Sub_Paths1__SB_Sub_Paths1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASB_Sub_Paths1_C, 0x0228);
		}

		// class ASB_Sub_NightLighting_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__SB_Sub_NightLighting__SB_Sub_NightLighting_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_NightLighting_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_NightLighting_C, GameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_NightLighting_C, SBSpotLights, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_NightLighting_C, SBPointLights, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_NightLighting_C, SBSeagulls, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_NightLighting_C, SBAmber, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASB_Sub_NightLighting_C, 0x0278);
		}

		// class ABP_DispersalBubbles_Volume_ENV_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_DispersalBubbles_Volume_ENV_PS__BP_DispersalBubbles_Volume_ENV_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DispersalBubbles_Volume_ENV_PS_C, 0x0280);
		}

		// class ABP_FloatingTrash_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_FloatingTrash_PS__BP_FloatingTrash_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FloatingTrash_PS_C, 0x0280);
		}

		// class ABP_ToxicStream01_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_ToxicStream01_PS__BP_ToxicStream01_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ToxicStream01_PS_C, 0x0280);
		}

		// class AIC_Sub_Landscape_Low_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__IC_Sub_Landscape_Low__IC_Sub_Landscape_Low_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIC_Sub_Landscape_Low_C, 0x0228);
		}

		// class AOuterLandscape_B_Low_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__OuterLandscape_B_Low__OuterLandscape_B_Low_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOuterLandscape_B_Low_C, 0x0228);
		}

		// class AOuterLandscape_C_Low_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__OuterLandscape_C_Low__OuterLandscape_C_Low_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOuterLandscape_C_Low_C, 0x0228);
		}

		// class ASB_Sub_Cine_Landmarks_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__SB_Sub_Cine_Landmarks__SB_Sub_Cine_Landmarks_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_Cine_Landmarks_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_Cine_Landmarks_C, Cine_Landmark_SB_ToyTime_SEQ_ExecuteUbergraph_SB_Sub_Cine_Landmarks_RefProperty, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_Cine_Landmarks_C, Cine_Landmark_SB_DoesItFloat_SEQ_ExecuteUbergraph_SB_Sub_Cine_Landmarks_RefProperty, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_Cine_Landmarks_C, Cine_Landmark_SB_GoodFind_SEQ_ExecuteUbergraph_SB_Sub_Cine_Landmarks_RefProperty, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_Cine_Landmarks_C, Cine_Landmark_SB_Saviors_SEQ_ExecuteUbergraph_SB_Sub_Cine_Landmarks_RefProperty, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_Cine_Landmarks_C, Cine_Landmark_SB_BigFin_SEQ_ExecuteUbergraph_SB_Sub_Cine_Landmarks_RefProperty, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_Cine_Landmarks_C, Cine_Landmark_SB_WeAllFloat_SEQ_ExecuteUbergraph_SB_Sub_Cine_Landmarks_RefProperty, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_Cine_Landmarks_C, Cine_Landmark_SB_VandalismMasterpiece_SEQ_ExecuteUbergraph_SB_Sub_Cine_Landmarks_RefProperty, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASB_Sub_Cine_Landmarks_C, Cine_Landmark_SB_QuickTurn_SEQ_2_ExecuteUbergraph_SB_Sub_Cine_Landmarks_RefProperty, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASB_Sub_Cine_Landmarks_C, 0x0270);
		}

		// class ABP_SportFishingBoat_Empty_Red_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Empty_Red__BP_SportFishingBoat_Empty_Red_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Empty_Red_C, 0x0BF8);
		}

		// class ABP_Base_SportFishingBoat_Roof_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_SportFishingBoat_Roof_Empty__BP_Base_SportFishingBoat_Roof_Empty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_SportFishingBoat_Roof_Empty_C, 0x0BF8);
		}

		// class AHISMActor_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__HISMActor__HISMActor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHISMActor_C, HISM, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHISMActor_C, StaticMesh, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHISMActor_C, 0x0230);
		}

		// class APrologue_Sub_Explorable_AI_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_Explorable_AI__Prologue_Sub_Explorable_AI_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_Explorable_AI_C, 0x0228);
		}

		// class UMercuna3DMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Mercuna3DMovement__Mercuna3DMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercuna3DMovementComponent, UnknownData_ZGRC, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercuna3DMovementComponent, MovementProperties, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercuna3DMovementComponent, UnknownData_R626, 0x0195);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercuna3DMovementComponent, PendingImpulseToApply, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercuna3DMovementComponent, Acceleration, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercuna3DMovementComponent, AngularVelocity, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMercuna3DMovementComponent, UnknownData_09S1, 0x01BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercuna3DMovementComponent, 0x01E0);
		}

		// class UMercuna3DMovementInterface : public UInterface
		TEST_METHOD(Class__Mercuna3DMovement__Mercuna3DMovementInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMercuna3DMovementInterface, 0x0028);
		}

		// class UAudioCapture : public UAudioGenerator
		TEST_METHOD(Class__AudioCapture__AudioCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCapture, UnknownData_JLG5, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCapture, 0x00B0);
		}

		// class UAudioCaptureFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioCapture__AudioCaptureFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureFunctionLibrary, 0x0028);
		}

		// class UAudioCaptureComponent : public USynthComponent
		TEST_METHOD(Class__AudioCapture__AudioCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, JitterLatencyFrames, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, UnknownData_1UDY, 0x06D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureComponent, 0x0790);
		}

		// class ACableActor : public AActor
		TEST_METHOD(Class__CableComponent__CableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACableActor, CableComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACableActor, 0x0228);
		}

		// class UCableComponent : public UMeshComponent
		TEST_METHOD(Class__CableComponent__CableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_L6JU, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndTo, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, AttachEndToSocketName, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, EndLocation, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableLength, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSegments, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SubstepTime, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, SolverIterations, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableStiffness, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, bEnableCollision, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_J65L, 0x048E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CollisionFriction, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableForce, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableGravityScale, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, CableWidth, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, NumSides, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, TileMaterial, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCableComponent, UnknownData_E1VK, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCableComponent, 0x04D0);
		}

		// class UMovieSceneGeometryCacheSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0120);
		}

		// class UMovieSceneGeometryCacheTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0068);
		}

		// class UOceanMaterialAssets : public UObject
		TEST_METHOD(Class__Renderer__OceanMaterialAssets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOceanMaterialAssets, OceanSurfaceMaterial, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOceanMaterialAssets, OceanRoofMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOceanMaterialAssets, SkyMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOceanMaterialAssets, 0x0040);
		}

		// class ABP_PlayerSharkState_C : public AME_PlayerSharkState
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerSharkState__BP_PlayerSharkState_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerSharkState_C, UberGraphFrame, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerSharkState_C, DefaultSceneRoot, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerSharkState_C, GainingNutrientSound, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerSharkState_C, DayCycleActor, 0x0778);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerSharkState_C, 0x07A0);
		}

		// class ABP_PlayerSharkController_C : public AME_PlayerSharkController
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerSharkController__BP_PlayerSharkController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerSharkController_C, UberGraphFrame, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerSharkController_C, GameplayMenus, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerSharkController_C, EscapeMenu, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerSharkController_C, PlayerSharkState, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerSharkController_C, LastSaveSlotName, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerSharkController_C, OnPlayerPressedKey, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerSharkController_C, 0x0690);
		}

		// class ABP_AssetLoader_C : public AME_AssetLoader
		TEST_METHOD(BlueprintGeneratedClass__BP_AssetLoader__BP_AssetLoader_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AssetLoader_C, DefaultSceneRoot, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AssetLoader_C, 0x02F8);
		}

		// class UGA_M_Swordfish_Thrash_BP_C : public UGA_M_ThrashBase_V2_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Swordfish_Thrash_BP__GA_M_Swordfish_Thrash_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Swordfish_Thrash_BP_C, 0x0510);
		}

		// class ASHK_GreatWhite_Apex_BP_C : public ASHK_GreatWhite_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_GreatWhite_Apex_BP__SHK_GreatWhite_Apex_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASHK_GreatWhite_Apex_BP_C, UberGraphFrame, 0x1050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_GreatWhite_Apex_BP_C, 0x1058);
		}

		// class AFSH_Apex_Barracuda_BP_C : public AFSH_Barracuda_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Apex_Barracuda_BP__FSH_Apex_Barracuda_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Apex_Barracuda_BP_C, UberGraphFrame, 0x1050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Apex_Barracuda_BP_C, 0x1058);
		}

		// class UGE_GreatWhite_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GreatWhite_Native__GE_GreatWhite_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GreatWhite_Native_C, 0x0870);
		}

		// class USHK_GreatWhite_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__SHK_GreatWhite_ABP__SHK_GreatWhite_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USHK_GreatWhite_ABP_C, 0x5C8C);
		}

		// class ABP_Whipshot_Explosion_M_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Whipshot_Explosion_M__BP_Whipshot_Explosion_M_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Whipshot_Explosion_M_C, 0x02D0);
		}

		// class UGE_Evo_Shadow_Body_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_T5__GE_Evo_Shadow_Body_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_T5_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_LungeBonus_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_LungeBonus_T5__GE_Evo_Shadow_Body_LungeBonus_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_LungeBonus_T5_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Bonus_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Bonus_T5__GE_Evo_Shadow_Body_Bonus_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Bonus_T5_C, 0x0870);
		}

		// class UAM_EVO_Shadow_Body_Activate_T5_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_EVO_Shadow_Body_Activate_T5__AM_EVO_Shadow_Body_Activate_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EVO_Shadow_Body_Activate_T5_C, 0x05E0);
		}

		// class UGE_Evo_Shadow_Body_AddResource_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_AddResource_T5__GE_Evo_Shadow_Body_AddResource_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_AddResource_T5_C, 0x0870);
		}

		// class UAM_EVO_Shadow_Body_Activate_T4_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_EVO_Shadow_Body_Activate_T4__AM_EVO_Shadow_Body_Activate_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EVO_Shadow_Body_Activate_T4_C, 0x05E0);
		}

		// class UGE_ApexMako_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_ApexMako_Native__GE_ApexMako_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_ApexMako_Native_C, 0x0870);
		}

		// class UTooltipContainer_BP_C : public UMETooltipContainer
		TEST_METHOD(WidgetBlueprintGeneratedClass__TooltipContainer_BP__TooltipContainer_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTooltipContainer_BP_C, 0x0268);
		}

		// class UMacroObjectiveMeterWidget_BP_C : public UMacroObjectiveMeterWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MacroObjectiveMeterWidget_BP__MacroObjectiveMeterWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget_BP_C, Image_1, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget_BP_C, Image_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMacroObjectiveMeterWidget_BP_C, viewmap, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMacroObjectiveMeterWidget_BP_C, 0x02E0);
		}

		// class UEnemyScreenSpaceWidgetContainer_BP_C : public UEnemyScreenSpaceWidgetContainer
		TEST_METHOD(WidgetBlueprintGeneratedClass__EnemyScreenSpaceWidgetContainer_BP__EnemyScreenSpaceWidgetContainer_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnemyScreenSpaceWidgetContainer_BP_C, 0x02B8);
		}

		// class UBlankView_BP_C : public UTwBaseView
		TEST_METHOD(WidgetBlueprintGeneratedClass__BlankView_BP__BlankView_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlankView_BP_C, UberGraphFrame, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlankView_BP_C, SubtitleWidget, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlankView_BP_C, 0x02A8);
		}

		// class UGE_HammerheadVulnerable_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HammerheadVulnerable_BP__GE_HammerheadVulnerable_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HammerheadVulnerable_BP_C, 0x0870);
		}

		// class UGA_M_Barracuda_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Barracuda_EvadeLeft_BP__GA_M_Barracuda_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Barracuda_EvadeLeft_BP_C, 0x05E0);
		}

		// class UGE_Barracuda_EvadeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Barracuda_EvadeCD_BP__GE_Barracuda_EvadeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Barracuda_EvadeCD_BP_C, 0x0870);
		}

		// class UGE_BarracudaVulnerableTaunt_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_BarracudaVulnerableTaunt_BP__GE_BarracudaVulnerableTaunt_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_BarracudaVulnerableTaunt_BP_C, 0x0870);
		}

		// class UGE_Apex_BarracudaBiteDamage_BP_C : public UGE_BarracudaBiteDamage_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GE_Apex_BarracudaBiteDamage_BP__GE_Apex_BarracudaBiteDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Apex_BarracudaBiteDamage_BP_C, 0x0870);
		}

		// class UGE_BarracudaBiteDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_BarracudaBiteDamage_BP__GE_BarracudaBiteDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_BarracudaBiteDamage_BP_C, 0x0870);
		}

		// class UGE_Barracuda_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Barracuda_Native__GE_Barracuda_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Barracuda_Native_C, 0x0870);
		}

		// class AAIController_Barracuda_BP_C : public AAIController_Hostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Barracuda_BP__AIController_Barracuda_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Barracuda_BP_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Barracuda_BP_C, 0x07D0);
		}

		// class UGA_M_GreatWhite_Feint_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_GreatWhite_Feint_BP__GA_M_GreatWhite_Feint_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_GreatWhite_Feint_BP_C, 0x0510);
		}

		// class UGA_M_GreatWhite_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_GreatWhite_EvadeRight_BP__GA_M_GreatWhite_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_GreatWhite_EvadeRight_BP_C, 0x05E0);
		}

		// class UGA_M_GreatWhite_Bite_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_GreatWhite_Bite_BP__GA_M_GreatWhite_Bite_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_GreatWhite_Bite_BP_C, 0x0510);
		}

		// class UGE_GreatWhiteThrashDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GreatWhiteThrashDamage_BP__GE_GreatWhiteThrashDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GreatWhiteThrashDamage_BP_C, 0x0870);
		}

		// class UBP_Rifle_Pete1Battle_C : public UBP_Rifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rifle_Pete1Battle__BP_Rifle_Pete1Battle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rifle_Pete1Battle_C, 0x06E0);
		}

		// class ABP_Base_PontoonBoat2_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_PontoonBoat2_Empty__BP_Base_PontoonBoat2_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PontoonBoat2_Empty_C, ME_DistanceSignificance, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_PontoonBoat2_Empty_C, 0x0C00);
		}

		// class UGE_WhipshotVulnerabilityDelay_Long_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_WhipshotVulnerabilityDelay_Long__GE_WhipshotVulnerabilityDelay_Long_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_WhipshotVulnerabilityDelay_Long_C, 0x0870);
		}

		// class UGA_M_Mako_Recovery_BP_C : public UGA_M_Base_Recovery_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Mako_Recovery_BP__GA_M_Mako_Recovery_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Mako_Recovery_BP_C, 0x05E0);
		}

		// class UBP_BTTask_OnLeashFinished_C : public UBTTask_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__BP_BTTask_OnLeashFinished__BP_BTTask_OnLeashFinished_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BTTask_OnLeashFinished_C, UberGraphFrame, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BTTask_OnLeashFinished_C, 0x00B0);
		}

		// class UBP_APEX_LG_Bite_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_APEX_LG_Bite_IR__BP_APEX_LG_Bite_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_APEX_LG_Bite_IR_C, 0x0040);
		}

		// class UGE_Shotgun_Damage_Tier2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Shotgun_Damage_Tier2__GE_Shotgun_Damage_Tier2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Shotgun_Damage_Tier2_C, 0x0870);
		}

		// class UGE_AssaultRifle_Damage_Tier6_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Damage_Tier6__GE_AssaultRifle_Damage_Tier6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Damage_Tier6_C, 0x0870);
		}

		// class UGE_Shotgun_Damage_Tier7_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Shotgun_Damage_Tier7__GE_Shotgun_Damage_Tier7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Shotgun_Damage_Tier7_C, 0x0870);
		}

		// class UGE_AlligatorVulnerable_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AlligatorVulnerable_BP__GE_AlligatorVulnerable_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AlligatorVulnerable_BP_C, 0x0870);
		}

		// class UGE_MultiHit_VulnerabilityCooldown_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MultiHit_VulnerabilityCooldown__GE_MultiHit_VulnerabilityCooldown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MultiHit_VulnerabilityCooldown_C, 0x0870);
		}

		// class UBP_GE_Whipshot_M_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_Whipshot_M__BP_GE_Whipshot_M_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_Whipshot_M_C, 0x0870);
		}

		// class AFSH_Spade_Med_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Spade_Med_BP__FSH_Spade_Med_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Spade_Med_BP_C, VoiceGroupComponent_BP, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Spade_Med_BP_C, TwAkEmitterArray, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Spade_Med_BP_C, 0x1050);
		}

		// class AFSH_Catfish_Large_Albino_BP_C : public AFSH_Catfish_Large_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Catfish_Large_Albino_BP__FSH_Catfish_Large_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Catfish_Large_Albino_BP_C, 0x1050);
		}

		// class ATRT_Large_Turtle_BP_C : public ATRT_Turtle_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TRT_Large_Turtle_BP__TRT_Large_Turtle_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATRT_Large_Turtle_BP_C, 0x1050);
		}

		// class ATRT_Medium_Turtle_BP_C : public ATRT_Turtle_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TRT_Medium_Turtle_BP__TRT_Medium_Turtle_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATRT_Medium_Turtle_BP_C, 0x1050);
		}

		// class ATRT_Small_Turtle_BP_C : public ATRT_Turtle_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TRT_Small_Turtle_BP__TRT_Small_Turtle_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATRT_Small_Turtle_BP_C, 0x1050);
		}

		// class UViewFooter_BP_C : public UTwViewFooter
		TEST_METHOD(WidgetBlueprintGeneratedClass__ViewFooter_BP__ViewFooter_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewFooter_BP_C, 0x02A0);
		}

		// class UGE_SpearGun_Damage_Tier5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpearGun_Damage_Tier5__GE_SpearGun_Damage_Tier5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpearGun_Damage_Tier5_C, 0x0870);
		}

		// class UGA_Human_ShadowPoison_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Human_ShadowPoison__GA_Human_ShadowPoison_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Human_ShadowPoison_C, UberGraphFrame, 0x05E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Human_ShadowPoison_C, 0x05E8);
		}

		// class UAlertEvent_Consumed_C : public UME_AlertEvent
		TEST_METHOD(BlueprintGeneratedClass__AlertEvent_Consumed__AlertEvent_Consumed_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlertEvent_Consumed_C, 0x0090);
		}

		// class ABP_USCG_MediumSkiff_Debris_RearDoor_Minion_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_RearDoor_Minion__BP_USCG_MediumSkiff_Debris_RearDoor_Minion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_RearDoor_Minion_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_Radar_Minion_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_Radar_Minion__BP_USCG_MediumSkiff_Debris_Radar_Minion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_Radar_Minion_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_LeftSide_Minion_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_LeftSide_Minion__BP_USCG_MediumSkiff_Debris_LeftSide_Minion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_LeftSide_Minion_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_LeftRear_Minion_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_LeftRear_Minion__BP_USCG_MediumSkiff_Debris_LeftRear_Minion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_LeftRear_Minion_C, 0x0230);
		}

		// class ARifle_Pete1Battle_Projectile_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__Rifle_Pete1Battle_Projectile__Rifle_Pete1Battle_Projectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARifle_Pete1Battle_Projectile_C, 0x0270);
		}

		// class UBP_GE_Explosion_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_Explosion__BP_GE_Explosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_Explosion_C, 0x0870);
		}

		// class ABP_DynamiteStick_Pete2_UnderBoat_C : public ABP_DynamiteStick_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DynamiteStick_Pete2_UnderBoat__BP_DynamiteStick_Pete2_UnderBoat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DynamiteStick_Pete2_UnderBoat_C, 0x0390);
		}

		// class ABP_DepthChargeBarrel_Base_C : public AME_ProximityBomb
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthChargeBarrel_Base__BP_DepthChargeBarrel_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Base_C, UberGraphFrame, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Base_C, VulnerableVFX, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Base_C, Sphere, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Base_C, Bubbles, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Base_C, MaterialTimeline_Active_2FF683944219DBE3B4A6DAB91BF5BDBC, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Base_C, MaterialTimeline_FlashSpeed_2FF683944219DBE3B4A6DAB91BF5BDBC, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Base_C, MaterialTimeline__Direction_2FF683944219DBE3B4A6DAB91BF5BDBC, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Base_C, UnknownData_7JN1, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Base_C, MaterialTimeline, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_DepthChargeBarrel_Base_C, DMIC, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthChargeBarrel_Base_C, 0x03E8);
		}

		// class ABP_DepthChargeExplosion_Pete2_C : public ABP_DepthChargeExplosion_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthChargeExplosion_Pete2__BP_DepthChargeExplosion_Pete2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthChargeExplosion_Pete2_C, 0x02D0);
		}

		// class UPlayerWaypointMapMarkerWidget_BP_C : public UPlayerWaypointMapMarkerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlayerWaypointMapMarkerWidget_BP__PlayerWaypointMapMarkerWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerWaypointMapMarkerWidget_BP_C, UberGraphFrame, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerWaypointMapMarkerWidget_BP_C, Placed, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerWaypointMapMarkerWidget_BP_C, Image_2, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerWaypointMapMarkerWidget_BP_C, 0x0330);
		}

		// class UGE_AssaultRifle_Damage_Tier9_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Damage_Tier9__GE_AssaultRifle_Damage_Tier9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Damage_Tier9_C, 0x0870);
		}

		// class UBP_GE_Explosion_Bounty_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_Explosion_Bounty__BP_GE_Explosion_Bounty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_Explosion_Bounty_C, 0x0870);
		}

		// class UGA_Smash_Emerge_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Smash_Emerge__GA_Smash_Emerge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Smash_Emerge_C, UberGraphFrame, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Smash_Emerge_C, Pup_Explosion_Class, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Smash_Emerge_C, Teen_Explosion_Class, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Smash_Emerge_C, Adult_Explosion_Class, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Smash_Emerge_C, Elder_Explosion_Class, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Smash_Emerge_C, Mega_Explosion_Class, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Smash_Emerge_C, 0x0430);
		}

		// class UAM_TailWhip_FullMouth_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_TailWhip_FullMouth__AM_TailWhip_FullMouth_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_TailWhip_FullMouth_C, 0x0620);
		}

		// class UAM_TailWhip_FullMouth_Knifing_C : public UAM_TailWhip_FullMouth_C
		TEST_METHOD(BlueprintGeneratedClass__AM_TailWhip_FullMouth_Knifing__AM_TailWhip_FullMouth_Knifing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_TailWhip_FullMouth_Knifing_C, 0x0620);
		}

		// class UAM_PlayerStunned_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_PlayerStunned__AM_PlayerStunned_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_PlayerStunned_C, 0x0620);
		}

		// class UAM_KillSequence_Breaching_C : public UAM_KillSequence_C
		TEST_METHOD(BlueprintGeneratedClass__AM_KillSequence_Breaching__AM_KillSequence_Breaching_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_KillSequence_Breaching_C, 0x0640);
		}

		// class UAM_Jump_Knifing_C : public UME_GameplayAbility_SharkEvade
		TEST_METHOD(BlueprintGeneratedClass__AM_Jump_Knifing__AM_Jump_Knifing_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAM_Jump_Knifing_C, UberGraphFrame, 0x0620);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Jump_Knifing_C, 0x0628);
		}

		// class UAM_EvadeLeft_Breaching_C : public UME_GameplayAbility_SharkEvade
		TEST_METHOD(BlueprintGeneratedClass__AM_EvadeLeft_Breaching__AM_EvadeLeft_Breaching_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EvadeLeft_Breaching_C, 0x0620);
		}

		// class UAM_EvadeDown_C : public UME_GameplayAbility_SharkEvade
		TEST_METHOD(BlueprintGeneratedClass__AM_EvadeDown__AM_EvadeDown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EvadeDown_C, 0x0620);
		}

		// class UAM_DoubleJump_T2_C : public UME_GameplayAbility_SharkAirLunge
		TEST_METHOD(BlueprintGeneratedClass__AM_DoubleJump_T2__AM_DoubleJump_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_DoubleJump_T2_C, 0x0638);
		}

		// class UAM_Bite_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_Bite__AM_Bite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Bite_C, 0x05E0);
		}

		// class UBountyBoatMapMarkerWidget_BP_C : public UBountyBoatMapMarkerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BountyBoatMapMarkerWidget_BP__BountyBoatMapMarkerWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyBoatMapMarkerWidget_BP_C, UberGraphFrame, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBountyBoatMapMarkerWidget_BP_C, DangerLoop, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyBoatMapMarkerWidget_BP_C, 0x0350);
		}

		// class UBP_DepthCharge_Bounty_C : public UME_WeaponComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthCharge_Bounty__BP_DepthCharge_Bounty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DepthCharge_Bounty_C, 0x06E0);
		}

		// class UGE_Bio_Electric_Stack_Stun_Nonhostile_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Stack_Stun_Nonhostile__GE_Bio_Electric_Stack_Stun_Nonhostile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Stack_Stun_Nonhostile_C, 0x0870);
		}

		// class UGE_EVO_Bio_Electric_Tail_Damage_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Bio_Electric_Tail_Damage_T1__GE_EVO_Bio_Electric_Tail_Damage_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Bio_Electric_Tail_Damage_T1_C, 0x0870);
		}

		// class UGE_Smash_Submerge_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Smash_Submerge__GE_Smash_Submerge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Smash_Submerge_C, 0x0870);
		}

		// class ABP_Scaly_PeteV1_C : public ABP_HumanBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Scaly_PeteV1__BP_Scaly_PeteV1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Scaly_PeteV1_C, 0x0F50);
		}

		// class ABP_Dynamite_Stick_Pete2_Thrown_C : public ABP_DynamiteStick_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Dynamite_Stick_Pete2_Thrown__BP_Dynamite_Stick_Pete2_Thrown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Dynamite_Stick_Pete2_Thrown_C, 0x0390);
		}

		// class AAssaultRifle_Projectile_Pete3Support_C : public AAssaultRifle_Projectile_Tier3_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Pete3Support__AssaultRifle_Projectile_Pete3Support_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Pete3Support_C, 0x0270);
		}

		// class UGE_LMG_Damage_Pete3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_LMG_Damage_Pete3__GE_LMG_Damage_Pete3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_LMG_Damage_Pete3_C, 0x0870);
		}

		// class ASpearProjectile_Pete1_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__SpearProjectile_Pete1__SpearProjectile_Pete1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpearProjectile_Pete1_C, UberGraphFrame, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpearProjectile_Pete1_C, 0x0278);
		}

		// class ALMG_Bullet_Projectile_Pete3_C : public ALMG_Bullet_Projectile_C
		TEST_METHOD(BlueprintGeneratedClass__LMG_Bullet_Projectile_Pete3__LMG_Bullet_Projectile_Pete3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALMG_Bullet_Projectile_Pete3_C, 0x0270);
		}

		// class UBP_MachineGun_Pete3_C : public UBP_MachineGun_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MachineGun_Pete3__BP_MachineGun_Pete3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MachineGun_Pete3_C, 0x06E0);
		}

		// class ABP_SkiBoat_Debris_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Debris_Fragment5__BP_SkiBoat_Debris_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Debris_Fragment5_C, 0x0230);
		}

		// class ABP_SkiBoat_Debris_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Debris_Fragment4__BP_SkiBoat_Debris_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Debris_Fragment4_C, 0x0230);
		}

		// class UGE_MultiHit10_Vulnerability_C : public UGE_MultiHit4_Vulnerability_C
		TEST_METHOD(BlueprintGeneratedClass__GE_MultiHit10_Vulnerability__GE_MultiHit10_Vulnerability_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MultiHit10_Vulnerability_C, 0x0870);
		}

		// class ABP_CorpseExplosion_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_CorpseExplosion__BP_CorpseExplosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CorpseExplosion_C, 0x02D0);
		}

		// class UAM_StartThrashLeft_C : public UAM_StartThrashDown_C
		TEST_METHOD(BlueprintGeneratedClass__AM_StartThrashLeft__AM_StartThrashLeft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_StartThrashLeft_C, 0x0620);
		}

		// class ABP_Base_SkiBoat_Bounty_C : public ABP_Base_SkiBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_SkiBoat_Bounty__BP_Base_SkiBoat_Bounty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_SkiBoat_Bounty_C, 0x0CD4);
		}

		// class ABP_Airboat_Bounty_Shotguns_C : public ABP_Base_Airboat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Bounty_Shotguns__BP_Airboat_Bounty_Shotguns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Bounty_Shotguns_C, 0x0CDC);
		}

		// class UGE_KillerWhaleVulnerable_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhaleVulnerable_BP__GE_KillerWhaleVulnerable_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhaleVulnerable_BP_C, 0x0870);
		}

		// class UGE_KillerWhaleTailwhipCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhaleTailwhipCooldown_BP__GE_KillerWhaleTailwhipCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhaleTailwhipCooldown_BP_C, 0x0870);
		}

		// class UGE_KillerWhale_LungeClampCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhale_LungeClampCD_BP__GE_KillerWhale_LungeClampCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhale_LungeClampCD_BP_C, 0x0870);
		}

		// class UGE_KillerWhaleVulnerableTaunt_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhaleVulnerableTaunt_BP__GE_KillerWhaleVulnerableTaunt_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhaleVulnerableTaunt_BP_C, 0x0870);
		}

		// class UGA_M_KillerWhale_Tailwhip_BP_C : public UME_GameplayAbility_WildlifeDirectionalLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_KillerWhale_Tailwhip_BP__GA_M_KillerWhale_Tailwhip_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_KillerWhale_Tailwhip_BP_C, 0x0580);
		}

		// class UGA_M_Apex_KillerWhale_ThrashV2_BP_C : public UGA_M_ThrashBase_V2_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Apex_KillerWhale_ThrashV2_BP__GA_M_Apex_KillerWhale_ThrashV2_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Apex_KillerWhale_ThrashV2_BP_C, 0x0510);
		}

		// class UGA_M_Apex_KillerWhale_Feint_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Apex_KillerWhale_Feint_BP__GA_M_Apex_KillerWhale_Feint_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Apex_KillerWhale_Feint_BP_C, 0x0510);
		}

		// class UGA_M_Apex_KillerWhale_Bite_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Apex_KillerWhale_Bite_BP__GA_M_Apex_KillerWhale_Bite_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Apex_KillerWhale_Bite_BP_C, 0x0510);
		}

		// class UGA_M_SpermWhale_ShakeOffHeavy_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_SpermWhale_ShakeOffHeavy_BP__GA_M_SpermWhale_ShakeOffHeavy_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_SpermWhale_ShakeOffHeavy_BP_C, 0x0510);
		}

		// class UGE_Evo_Bone_Fins_Immunity_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Immunity_T5__GE_Evo_Bone_Fins_Immunity_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Immunity_T5_C, 0x0870);
		}

		// class UGE_Evo_Bone_HeadFX_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_HeadFX_T5__GE_Evo_Bone_HeadFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_HeadFX_T5_C, 0x0870);
		}

		// class UGE_Evo_Bone_HeadFX_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_HeadFX_T4__GE_Evo_Bone_HeadFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_HeadFX_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_HeadFX_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_HeadFX_T3__GE_Evo_Bone_HeadFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_HeadFX_T3_C, 0x0870);
		}

		// class UGE_Evo_ReinforcedCartilage5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_ReinforcedCartilage5__GE_Evo_ReinforcedCartilage5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_ReinforcedCartilage5_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_AddResource_Damage_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_AddResource_Damage_T3__GE_Evo_Shadow_Body_AddResource_Damage_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_AddResource_Damage_T3_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Bonus_End_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Bonus_End_T1__GE_Evo_Shadow_Body_Bonus_End_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Bonus_End_T1_C, 0x0870);
		}

		// class UAM_EVO_Shadow_Body_Activate_T1_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_EVO_Shadow_Body_Activate_T1__AM_EVO_Shadow_Body_Activate_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EVO_Shadow_Body_Activate_T1_C, 0x05E0);
		}

		// class UGA_Evo_Shadow_Body_AddResource_T2_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_AddResource_T2__GA_Evo_Shadow_Body_AddResource_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_AddResource_T2_C, 0x0438);
		}

		// class ABP_TrackingTag_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__BP_TrackingTag__BP_TrackingTag_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrackingTag_C, ParticleSystem, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_TrackingTag_C, TagMesh, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TrackingTag_C, 0x0230);
		}

		// class APoisonTheRegionController_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__PoisonTheRegionController_BP__PoisonTheRegionController_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheRegionController_BP_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheRegionController_BP_C, PoisonRegionControllerText, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheRegionController_BP_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheRegionController_BP_C, PoisonBarrels, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheRegionController_BP_C, AssociatedSky, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheRegionController_BP_C, IsPoisonActive_, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheRegionController_BP_C, UnknownData_WD8F, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheRegionController_BP_C, GEHandle, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheRegionController_BP_C, BarrelsArrayLength, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheRegionController_BP_C, CurrentBarrelIndex, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheRegionController_BP_C, UnknownData_4623, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::APoisonTheRegionController_BP_C, SpawnPoisonTimerHandle, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APoisonTheRegionController_BP_C, 0x0270);
		}

		// class ALighthouseLight_BP_C : public ANightTimeActivityBase_BP_C
		TEST_METHOD(BlueprintGeneratedClass__LighthouseLight_BP__LighthouseLight_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALighthouseLight_BP_C, UberGraphFrame, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALighthouseLight_BP_C, RotatingMovement, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALighthouseLight_BP_C, StaticMesh, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALighthouseLight_BP_C, SpotLight, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALighthouseLight_BP_C, FX_LightHouseCone01_MESH, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALighthouseLight_BP_C, Rotation, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALighthouseLight_BP_C, 0x0284);
		}

		// class ABP_Base_Canoe_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Canoe_Controller__BP_Base_Canoe_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Canoe_Controller_C, 0x07E8);
		}

		// class UFSH_AtlanticSpade_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__FSH_AtlanticSpade_ABP__FSH_AtlanticSpade_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFSH_AtlanticSpade_ABP_C, 0x5C8C);
		}

		// class ABP_Base_SkiBoat_Objective_C : public ABP_Base_SkiBoat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_SkiBoat_Objective__BP_Base_SkiBoat_Objective_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_SkiBoat_Objective_C, 0x0CD4);
		}

		// class URightHanded_Oar_C : public UME_PassengerAttachment
		TEST_METHOD(BlueprintGeneratedClass__RightHanded_Oar__RightHanded_Oar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URightHanded_Oar_C, 0x06E0);
		}

		// class UGA_M_Marlin_Thrash_BP_C : public UGA_M_ThrashBase_V2_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Marlin_Thrash_BP__GA_M_Marlin_Thrash_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Marlin_Thrash_BP_C, 0x0510);
		}

		// class UGA_M_Marlin_LandLunge_BP_C : public UGA_M_LandLunge_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Marlin_LandLunge_BP__GA_M_Marlin_LandLunge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Marlin_LandLunge_BP_C, 0x05E0);
		}

		// class UGA_M_Marlin_Bite_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Marlin_Bite_BP__GA_M_Marlin_Bite_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Marlin_Bite_BP_C, 0x0510);
		}

		// class UBP_DepthCharge_Pete3_C : public UBP_DepthCharge_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthCharge_Pete3__BP_DepthCharge_Pete3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DepthCharge_Pete3_C, 0x06E0);
		}

		// class ABP_WaterTrike_Fragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WaterTrike_Fragment7__BP_WaterTrike_Fragment7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WaterTrike_Fragment7_C, 0x0230);
		}

		// class ABP_WaterTrike_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WaterTrike_Fragment5__BP_WaterTrike_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WaterTrike_Fragment5_C, 0x0230);
		}

		// class ABP_WaterTrike_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WaterTrike_Fragment4__BP_WaterTrike_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WaterTrike_Fragment4_C, 0x0230);
		}

		// class ABP_FishingTrawler_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawler_Controller__BP_FishingTrawler_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawler_Controller_C, 0x07E8);
		}

		// class ABP_Base_Kayak_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Kayak_Controller__BP_Base_Kayak_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Kayak_Controller_C, 0x07E8);
		}

		// class UGE_SwordfishLungeDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SwordfishLungeDamage_BP__GE_SwordfishLungeDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SwordfishLungeDamage_BP_C, 0x0870);
		}

		// class UGA_M_Swordfish_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Swordfish_EvadeLeft_BP__GA_M_Swordfish_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Swordfish_EvadeLeft_BP_C, 0x05E0);
		}

		// class UGA_M_Swordfish_Bite_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Swordfish_Bite_BP__GA_M_Swordfish_Bite_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Swordfish_Bite_BP_C, 0x0510);
		}

		// class ABP_FishingTrawler_Objective_SB_C : public ABP_Base_FishingTrawler_Objective_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawler_Objective_SB__BP_FishingTrawler_Objective_SB_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawler_Objective_SB_C, 0x0CD4);
		}

		// class ABP_Base_FishingTrawler_Extended_C : public ABP_Base_FishingTrawler_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_FishingTrawler_Extended__BP_Base_FishingTrawler_Extended_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_FishingTrawler_Extended_C, 0x0CD4);
		}

		// class ABP_Base_FamilyPontoonBoat_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_FamilyPontoonBoat__BP_Base_FamilyPontoonBoat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_FamilyPontoonBoat_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_FamilyPontoonBoat_C, 0x0CD4);
		}

		// class ABP_Base_DepthFishingBoat_Objective_C : public ABP_Base_DepthFishingBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_DepthFishingBoat_Objective__BP_Base_DepthFishingBoat_Objective_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_DepthFishingBoat_Objective_C, 0x0CD4);
		}

		// class ABP_Base_SportFishingBoat__C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_SportFishingBoat___BP_Base_SportFishingBoat__C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_SportFishingBoat__C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_SportFishingBoat__C, 0x0CD4);
		}

		// class ABP_Small_FishingBoat_Objective_WC_C : public ABP_Base_Small_FishingBoat_Objective_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Small_FishingBoat_Objective_WC__BP_Small_FishingBoat_Objective_WC_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Small_FishingBoat_Objective_WC_C, 0x0CDC);
		}

		// class ABP_Base_Sailboat_Green_C : public ABP_Base_Sailboat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Sailboat_Green__BP_Base_Sailboat_Green_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Sailboat_Green_C, LastHitTime_1, 0x0CD4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Sailboat_Green_C, 0x0CD8);
		}

		// class ABP_Sailboat_Hatch_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Hatch__BP_Sailboat_Hatch_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Hatch_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment5__BP_Sailboat_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment5_C, 0x0230);
		}

		// class ABP_Sail_BoatBench_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sail_BoatBench__BP_Sail_BoatBench_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Sail_BoatBench_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sail_BoatBench_C, 0x0238);
		}

		// class ABP_Sailboat_Hatch_Green_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Hatch_Green__BP_Sailboat_Hatch_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Hatch_Green_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment7_Green_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment7_Green__BP_Sailboat_Fragment7_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment7_Green_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment5_Green_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment5_Green__BP_Sailboat_Fragment5_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment5_Green_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment4_Green_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment4_Green__BP_Sailboat_Fragment4_Green_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment4_Green_C, 0x0230);
		}

		// class ABP_Generic_WhippableExplosion_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Generic_WhippableExplosion__BP_Generic_WhippableExplosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Generic_WhippableExplosion_C, 0x02D0);
		}

		// class ABP_DispersalBubbles_Volume_EscapingSML_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_DispersalBubbles_Volume_EscapingSML_PS__BP_DispersalBubbles_Volume_EscapingSML_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DispersalBubbles_Volume_EscapingSML_PS_C, 0x0280);
		}

		// class ALG_Bollard_Light_Pole_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_Bollard_Light_Pole__LG_Bollard_Light_Pole_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Bollard_Light_Pole_C, 0x0238);
		}

		// class ALG_Bollard_Light_Angled_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_Bollard_Light_Angled__LG_Bollard_Light_Angled_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Bollard_Light_Angled_C, 0x0238);
		}

		// class ABP_Spire_Smoke_SML_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Spire_Smoke_SML__BP_Spire_Smoke_SML_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Spire_Smoke_SML_C, 0x0280);
		}

		// class ABP_Lake_Fishball_Sprite_Large_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Lake_Fishball_Sprite_Large_PS__BP_Lake_Fishball_Sprite_Large_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Lake_Fishball_Sprite_Large_PS_C, 0x0280);
		}

		// class ABP_KaijuGate_Side_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_KaijuGate_Side__BP_KaijuGate_Side_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_KaijuGate_Side_C, 0x0280);
		}

		// class ALG_DMI_Single_Pole_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_DMI_Single_Pole__LG_DMI_Single_Pole_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_DMI_Single_Pole_C, 0x0238);
		}

		// class ABP_ENV_Cave_Motes_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_ENV_Cave_Motes_PS__BP_ENV_Cave_Motes_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ENV_Cave_Motes_PS_C, 0x0280);
		}

		// class ALG_CaveSkylight_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_CaveSkylight__LG_CaveSkylight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_CaveSkylight_C, 0x0238);
		}

		// class AFSH_ExploreGrouper_Med_BP_C : public AFSH_Grouper_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_ExploreGrouper_Med_BP__FSH_ExploreGrouper_Med_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_ExploreGrouper_Med_BP_C, 0x1050);
		}

		// class APrologue_Sub_TutorialBlocking_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_TutorialBlocking__Prologue_Sub_TutorialBlocking_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_TutorialBlocking_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_TutorialBlocking_C, ObjectiveManager, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_TutorialBlocking_C, Tutorial_Objective, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_TutorialBlocking_C, ObjectiveState, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_TutorialBlocking_C, UnknownData_D5LF, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_TutorialBlocking_C, PRO_TerrorizeTrigger_ExecuteUbergraph_Prologue_Sub_TutorialBlocking_RefProperty, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_TutorialBlocking_C, 0x0260);
		}

		// class ABP_Dragonflying_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Dragonflying_PS__BP_Dragonflying_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Dragonflying_PS_C, 0x0280);
		}

		// class UAutomationUtilsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AutomationUtils__AutomationUtilsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationUtilsBlueprintLibrary, 0x0028);
		}

		// class UManeaterHUDViewController_BP_C : public UManeaterHUDViewController
		TEST_METHOD(WidgetBlueprintGeneratedClass__ManeaterHUDViewController_BP__ManeaterHUDViewController_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterHUDViewController_BP_C, SafeZone_1, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterHUDViewController_BP_C, 0x02D0);
		}

		// class UAM_StartThrashDown_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_StartThrashDown__AM_StartThrashDown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_StartThrashDown_C, 0x0620);
		}

		// class UAM_BiteRelease_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_BiteRelease__AM_BiteRelease_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_BiteRelease_C, 0x0620);
		}

		// class UGE_Wildlife_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Wildlife_Native__GE_Wildlife_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Wildlife_Native_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Lunge_ImpactVFX_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Lunge_ImpactVFX_T5__GE_Evo_Shadow_Body_Lunge_ImpactVFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Lunge_ImpactVFX_T5_C, 0x0870);
		}

		// class ASHK_HammerHead_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_HammerHead_BP__SHK_HammerHead_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASHK_HammerHead_BP_C, VoiceGroupComponent_BP1, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASHK_HammerHead_BP_C, VoiceGroupComponent_BP, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_HammerHead_BP_C, 0x1050);
		}

		// class USHK_HammerHead_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__SHK_HammerHead_ABP__SHK_HammerHead_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USHK_HammerHead_ABP_C, 0x5C8C);
		}

		// class UGE_Evo_FatDigestion5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_FatDigestion5__GE_Evo_FatDigestion5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_FatDigestion5_C, 0x0870);
		}

		// class ASHK_Mako_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_Mako_BP__SHK_Mako_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASHK_Mako_BP_C, VoiceGroupComponent_BP1, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASHK_Mako_BP_C, VoiceGroupComponent_BP, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_Mako_BP_C, 0x1050);
		}

		// class UGE_Tailwhip_Tags_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Tailwhip_Tags__GE_Tailwhip_Tags_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Tailwhip_Tags_C, 0x07B8);
		}

		// class UGCD_TailWhip_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GCD_TailWhip__GCD_TailWhip_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCD_TailWhip_C, 0x07B8);
		}

		// class UGCD_Submerge_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GCD_Submerge__GCD_Submerge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCD_Submerge_C, 0x07B8);
		}

		// class UComboTime_Lunge_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__ComboTime_Lunge_T1__ComboTime_Lunge_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboTime_Lunge_T1_C, 0x0870);
		}

		// class UGE_Lunge_Land_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Lunge_Land__GE_Lunge_Land_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Lunge_Land_C, 0x0870);
		}

		// class UGCD_General_0_25_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GCD_General_0_26__GCD_General_0_25_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCD_General_0_25_C, 0x07B8);
		}

		// class UGE_EvadeRight_Knifing_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EvadeRight_Knifing__GE_EvadeRight_Knifing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EvadeRight_Knifing_C, 0x0870);
		}

		// class UGE_EvadeRight_C : public UGE_Evade_C
		TEST_METHOD(BlueprintGeneratedClass__GE_EvadeRight__GE_EvadeRight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EvadeRight_C, 0x0870);
		}

		// class UGE_EvadeRight_Breaching_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EvadeRight_Breaching__GE_EvadeRight_Breaching_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EvadeRight_Breaching_C, 0x0870);
		}

		// class UGE_BiteFX_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_BiteFX__GE_BiteFX_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_BiteFX_C, 0x0870);
		}

		// class UGE_Shotgun_Damage_Tier6_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Shotgun_Damage_Tier6__GE_Shotgun_Damage_Tier6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Shotgun_Damage_Tier6_C, 0x0870);
		}

		// class ABP_NutrientChunk_C : public AME_GoreChunk
		TEST_METHOD(BlueprintGeneratedClass__BP_NutrientChunk__BP_NutrientChunk_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_NutrientChunk_C, 0x02E0);
		}

		// class UGE_AssaultRifle_Damage_Tier3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Damage_Tier3__GE_AssaultRifle_Damage_Tier3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Damage_Tier3_C, 0x0870);
		}

		// class UGE_Evo_Amphibious_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Amphibious_T5__GE_Evo_Amphibious_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Amphibious_T5_C, 0x0870);
		}

		// class UGE_Evo_Amphibious_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Amphibious_T2__GE_Evo_Amphibious_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Amphibious_T2_C, 0x0870);
		}

		// class UGE_Evo_AdvancedSonar1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_AdvancedSonar1__GE_Evo_AdvancedSonar1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_AdvancedSonar1_C, 0x0870);
		}

		// class UGE_HammerHeadThrashDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HammerHeadThrashDamage_BP__GE_HammerHeadThrashDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HammerHeadThrashDamage_BP_C, 0x0870);
		}

		// class UBP_APEX_MED_Thrash_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_APEX_MED_Thrash_IR__BP_APEX_MED_Thrash_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_APEX_MED_Thrash_IR_C, 0x0040);
		}

		// class UGA_M_SpermWhale_ShakeOff_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_SpermWhale_ShakeOff_BP__GA_M_SpermWhale_ShakeOff_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_SpermWhale_ShakeOff_BP_C, 0x0510);
		}

		// class UGA_M_SpermWhale_LandLunge_BP_C : public UGA_M_LandLunge_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_SpermWhale_LandLunge_BP__GA_M_SpermWhale_LandLunge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_SpermWhale_LandLunge_BP_C, 0x05E0);
		}

		// class UGE_Evo_Shadow_Body_PayResource_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_PayResource_T1__GE_Evo_Shadow_Body_PayResource_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_PayResource_T1_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Bonus_End_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Bonus_End_T4__GE_Evo_Shadow_Body_Bonus_End_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Bonus_End_T4_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Body_Lunge_ImpactVFX_T4_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_Lunge_ImpactVFX_T4__GA_Evo_Shadow_Body_Lunge_ImpactVFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_Lunge_ImpactVFX_T4_C, 0x05E0);
		}

		// class ABP_USCG_MediumSkiff_Debris_Roof_Boss_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_Roof_Boss__BP_USCG_MediumSkiff_Debris_Roof_Boss_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_Roof_Boss_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_RightDoor_Boss_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_RightDoor_Boss__BP_USCG_MediumSkiff_Debris_RightDoor_Boss_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_RightDoor_Boss_C, 0x0230);
		}

		// class ABP_HunterCaptain_ShannonSims_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterCaptain_ShannonSims__BP_HunterCaptain_ShannonSims_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HunterCaptain_ShannonSims_C, 0x0F50);
		}

		// class ABP_HunterCaptain_RobertBrunlett_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterCaptain_RobertBrunlett__BP_HunterCaptain_RobertBrunlett_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HunterCaptain_RobertBrunlett_C, 0x0F50);
		}

		// class UGE_AssaultRifle_Damage_Tier1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Damage_Tier1__GE_AssaultRifle_Damage_Tier1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Damage_Tier1_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Fins_Bonus_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Fins_Bonus_T1__GE_Evo_Shadow_Fins_Bonus_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Fins_Bonus_T1_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Fins_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Fins_T1__GA_Evo_Shadow_Fins_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Fins_T1_C, 0x0400);
		}

		// class ABP_Bumperboat_FragmentRightSeat_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bumperboat_FragmentRightSeat__BP_Bumperboat_FragmentRightSeat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bumperboat_FragmentRightSeat_C, 0x0230);
		}

		// class UENVQueryContext_RecentKillLoc_C : public UEnvQueryContext_BlueprintBase
		TEST_METHOD(BlueprintGeneratedClass__ENVQueryContext_RecentKillLoc__ENVQueryContext_RecentKillLoc_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UENVQueryContext_RecentKillLoc_C, 0x0030);
		}

		// class UGE_BoatCrew_Melee_Damge_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_BoatCrew_Melee_Damge__GE_BoatCrew_Melee_Damge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_BoatCrew_Melee_Damge_C, 0x0870);
		}

		// class UGE_Shotgun_Damage_Tier10_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Shotgun_Damage_Tier10__GE_Shotgun_Damage_Tier10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Shotgun_Damage_Tier10_C, 0x0870);
		}

		// class UBP_APEX_MED_Bite_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_APEX_MED_Bite_IR__BP_APEX_MED_Bite_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_APEX_MED_Bite_IR_C, 0x0040);
		}

		// class UGE_EVO_Shadow_TailFX_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Shadow_TailFX_T2__GE_EVO_Shadow_TailFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Shadow_TailFX_T2_C, 0x0870);
		}

		// class UGE_EVO_Shadow_TailFX_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Shadow_TailFX_T3__GE_EVO_Shadow_TailFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Shadow_TailFX_T3_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Stack_End_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack_End__GE_Evo_Shadow_Stack_End_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_End_C, 0x0870);
		}

		// class ABP_PetesBoat_V2_Winch_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Winch__BP_PetesBoat_V2_Winch_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Winch_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Railing_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Railing__BP_PetesBoat_V2_Railing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Railing_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Boat_Tire_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Boat_Tire__BP_PetesBoat_V2_Boat_Tire_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Boat_Tire_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Boat_Netting_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Boat_Netting__BP_PetesBoat_V2_Boat_Netting_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Boat_Netting_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Back_Corner_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Back_Corner__BP_PetesBoat_V2_Back_Corner_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Back_Corner_C, 0x0230);
		}

		// class ABP_PetePortAttackers_C : public AME_HumanPassenger
		TEST_METHOD(BlueprintGeneratedClass__BP_PetePortAttackers__BP_PetePortAttackers_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetePortAttackers_C, 0x0E60);
		}

		// class UAttributeItem_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__AttributeItem_BP__AttributeItem_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributeItem_BP_C, AttributeCurrent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributeItem_BP_C, AttributeDelta, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributeItem_BP_C, AttributeName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttributeItem_BP_C, BackgroundBar, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttributeItem_BP_C, 0x0250);
		}

		// class UGE_Shotgun_Damage_Tier9_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Shotgun_Damage_Tier9__GE_Shotgun_Damage_Tier9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Shotgun_Damage_Tier9_C, 0x0870);
		}

		// class UBP_APEX_LG_Tail_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_APEX_LG_Tail_IR__BP_APEX_LG_Tail_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_APEX_LG_Tail_IR_C, 0x0040);
		}

		// class AAIController_Hostile_Base_BP_C : public AME_AnimalAIController
		TEST_METHOD(BlueprintGeneratedClass__AIController_Hostile_Base_BP__AIController_Hostile_Base_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Hostile_Base_BP_C, 0x07C8);
		}

		// class UGA_M_EvadeLeft_Base_BP_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_M_EvadeLeft_Base_BP__GA_M_EvadeLeft_Base_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_EvadeLeft_Base_BP_C, 0x05E0);
		}

		// class ABP_Human_HunterSki_C : public ABP_Swimmer_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Human_HunterSki__BP_Human_HunterSki_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Human_HunterSki_C, 0x0F50);
		}

		// class ABP_Human_Pete3_Hunterboats_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Human_Pete3_Hunterboats__BP_Human_Pete3_Hunterboats_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Human_Pete3_Hunterboats_C, 0x0F50);
		}

		// class ABP_PT_Boat_Fragment01_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PT_Boat_Fragment01__BP_PT_Boat_Fragment01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PT_Boat_Fragment01_C, 0x0230);
		}

		// class ABP_SkiBoat_Debris_Fragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Debris_Fragment7__BP_SkiBoat_Debris_Fragment7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Debris_Fragment7_C, 0x0230);
		}

		// class ABP_SkiBoat_Debris_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Debris_Fragment6__BP_SkiBoat_Debris_Fragment6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Debris_Fragment6_C, 0x0230);
		}

		// class USHK_MenuElderShark_ABP_C : public USHK_MenuSharkBase_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__SHK_MenuElderShark_ABP__SHK_MenuElderShark_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USHK_MenuElderShark_ABP_C, 0x07A0);
		}

		// class UGA_M_Alligator_Recovery_BP_C : public UGA_M_Base_Recovery_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Alligator_Recovery_BP__GA_M_Alligator_Recovery_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Alligator_Recovery_BP_C, 0x05E0);
		}

		// class UGA_M_Alligator_LandLunge_BP_C : public UGA_M_LandLunge_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Alligator_LandLunge_BP__GA_M_Alligator_LandLunge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Alligator_LandLunge_BP_C, 0x05E0);
		}

		// class UGA_M_Apex_Alligator_Bite_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Apex_Alligator_Bite_BP__GA_M_Apex_Alligator_Bite_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Apex_Alligator_Bite_BP_C, 0x0510);
		}

		// class UEvolution_Tooltip_Stat_Category_BP_C : public UTwBaseWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Evolution_Tooltip_Stat_Category_BP__Evolution_Tooltip_Stat_Category_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_Stat_Category_BP_C, CategoryText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_Stat_Category_BP_C, StatWidgetContainer, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_Stat_Category_BP_C, NewStat, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolution_Tooltip_Stat_Category_BP_C, 0x0270);
		}

		// class UGE_Bio_Electric_Body_AddResource_Dam_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AddResource_Dam_T5__GE_Bio_Electric_Body_AddResource_Dam_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AddResource_Dam_T5_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_Bonus_NearEndFX_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_Bonus_NearEndFX_T5__GE_Bio_Electric_Body_Bonus_NearEndFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_Bonus_NearEndFX_T5_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_AddResource_Eat_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AddResource_Eat_T5__GE_Bio_Electric_Body_AddResource_Eat_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AddResource_Eat_T5_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_PayResource_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_PayResource_T5__GE_Bio_Electric_Body_PayResource_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_PayResource_T5_C, 0x0870);
		}

		// class UGE_Evo_Tiger_Body_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Tiger_Body_T1__GE_Evo_Tiger_Body_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Tiger_Body_T1_C, 0x0870);
		}

		// class ABP_Ocean_C : public AME_OceanManager
		TEST_METHOD(BlueprintGeneratedClass__BP_Ocean__BP_Ocean_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ocean_C, UberGraphFrame, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ocean_C, Chopiness, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Ocean_C, bSimulateTranslucency, 0x03EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Ocean_C, 0x03ED);
		}

		// class ALG_Submersible_Headlight_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_Submersible_Headlight__LG_Submersible_Headlight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Submersible_Headlight_C, 0x0238);
		}

		// class ABP_Catamaran_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Catamaran_Fragment4__BP_Catamaran_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Catamaran_Fragment4_C, 0x0230);
		}

		// class ABP_Catamaran_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Catamaran_Fragment3__BP_Catamaran_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Catamaran_Fragment3_C, 0x0230);
		}

		// class ABP_Catamaran_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Catamaran_Fragment2__BP_Catamaran_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Catamaran_Fragment2_C, 0x0230);
		}

		// class ABP_FamilyPontoonBoat_Fragment8_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FamilyPontoonBoat_Fragment8__BP_FamilyPontoonBoat_Fragment8_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FamilyPontoonBoat_Fragment8_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FamilyPontoonBoat_Fragment8_C, 0x0238);
		}

		// class ABP_FishingTrawlerFragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawlerFragment1__BP_FishingTrawlerFragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawlerFragment1_C, 0x0230);
		}

		// class ABP_SmallFishingBoat_Debris_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmallFishingBoat_Debris_Fragment4__BP_SmallFishingBoat_Debris_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmallFishingBoat_Debris_Fragment4_C, 0x0230);
		}

		// class ABP_TunnelTetras_Fishball_Sprite_Small_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_TunnelTetras_Fishball_Sprite_Small_PS__BP_TunnelTetras_Fishball_Sprite_Small_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TunnelTetras_Fishball_Sprite_Small_PS_C, 0x0280);
		}

		// class ABP_TunnelCurrent_Middle_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_TunnelCurrent_Middle__BP_TunnelCurrent_Middle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TunnelCurrent_Middle_C, 0x0280);
		}

		// class ABP_P_Ambient_Sand_Kickup_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_P_Ambient_Sand_Kickup__BP_P_Ambient_Sand_Kickup_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_P_Ambient_Sand_Kickup_C, 0x0280);
		}

		// class ABP_Lake_Fishball_Sprite_Small_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Lake_Fishball_Sprite_Small_PS__BP_Lake_Fishball_Sprite_Small_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Lake_Fishball_Sprite_Small_PS_C, 0x0280);
		}

		// class UGenericTooltip_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GenericTooltip_BP__GenericTooltip_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericTooltip_BP_C, DescriptionText, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericTooltip_BP_C, TitleText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericTooltip_BP_C, UnequipSubtext, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTooltip_BP_C, 0x0258);
		}

		// class ABP_USCG_SmallSkiff_Debris_Bow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SmallSkiff_Debris_Bow__BP_USCG_SmallSkiff_Debris_Bow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SmallSkiff_Debris_Bow_C, 0x0230);
		}

		// class ABP_PoisonBarrel_Aura_C : public AME_AuraDamageActor
		TEST_METHOD(BlueprintGeneratedClass__BP_PoisonBarrel_Aura__BP_PoisonBarrel_Aura_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PoisonBarrel_Aura_C, 0x0400);
		}

		// class UPlayerRegionPoisonDebuff_GE_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__PlayerRegionPoisonDebuff_GE__PlayerRegionPoisonDebuff_GE_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerRegionPoisonDebuff_GE_C, 0x0870);
		}

		// class ABP_PeteSupport_Battle3_AIController_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_PeteSupport_Battle3_AIController__BP_PeteSupport_Battle3_AIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PeteSupport_Battle3_AIController_C, 0x07E8);
		}

		// class AFXGenerator_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__FXGenerator_BP__FXGenerator_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFXGenerator_BP_C, Billboard, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFXGenerator_BP_C, MeshList, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFXGenerator_BP_C, ActorsInWorld, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFXGenerator_BP_C, StoredMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFXGenerator_BP_C, MeshToAddlightsTo, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFXGenerator_BP_C, SpawnedTag, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFXGenerator_BP_C, MeshExcludeList, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFXGenerator_BP_C, StoredActorsWithTag, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFXGenerator_BP_C, 0x0290);
		}

		// class AAkAcousticPortal : public AVolume
		TEST_METHOD(Class__AkAudio__AkAcousticPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, InitialState, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, UnknownData_KG14, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, ObstructionRefreshInterval, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, ObstructionCollisionChannel, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAcousticPortal, UnknownData_3F9N, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkAcousticPortal, 0x02E8);
		}

		// class UAkPortalComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkPortalComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPortalComponent, 0x01F0);
		}

		// class UAkAudioType : public UObject
		TEST_METHOD(Class__AkAudio__AkAudioType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioType, ShortID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioType, UnknownData_SUKT, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioType, UserData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioType, 0x0040);
		}

		// class UAkAcousticTexture : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkAcousticTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAcousticTexture, 0x0040);
		}

		// class AAkAmbientSound : public AActor
		TEST_METHOD(Class__AkAudio__AkAmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, AkAudioEvent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, AkComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, StopWhenOwnerIsDestroyed, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, AutoPost, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkAmbientSound, UnknownData_LMBS, 0x0232);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkAmbientSound, 0x0260);
		}

		// class UAkAndroidInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkAndroidInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAndroidInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAndroidInitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAndroidInitializationSettings, AdvancedSettings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAndroidInitializationSettings, 0x00F8);
		}

		// class UAkPlatformInfo : public UObject
		TEST_METHOD(Class__AkAudio__AkPlatformInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPlatformInfo, UnknownData_MEE0, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPlatformInfo, 0x0070);
		}

		// class UAkAndroidPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkAndroidPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAndroidPlatformInfo, 0x0070);
		}

		// class UAkAssetData : public UObject
		TEST_METHOD(Class__AkAudio__AkAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetData, UnknownData_2QDN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetData, 0x0068);
		}

		// class UAkAssetDataWithMedia : public UAkAssetData
		TEST_METHOD(Class__AkAudio__AkAssetDataWithMedia)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataWithMedia, MediaList, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataWithMedia, UnknownData_TIPQ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetDataWithMedia, 0x0088);
		}

		// class UAkAssetPlatformData : public UObject
		TEST_METHOD(Class__AkAudio__AkAssetPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetPlatformData, CurrentAssetData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetPlatformData, 0x0030);
		}

		// class UAkAssetBase : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetBase, PlatformAssetData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetBase, UnknownData_FJBP, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetBase, 0x0058);
		}

		// class UAkAudioBank : public UAkAssetBase
		TEST_METHOD(Class__AkAudio__AkAudioBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, AutoLoad, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, UnknownData_J3AE, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, LocalizedPlatformAssetDataMap, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, CurrentLocalizedPlatformAssetData, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, UnknownData_L8WH, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioBank, 0x00C8);
		}

		// class UAkAssetDataSwitchContainerData : public UObject
		TEST_METHOD(Class__AkAudio__AkAssetDataSwitchContainerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, GroupValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, DefaultGroupValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, MediaList, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, Children, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, UnknownData_HL4R, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetDataSwitchContainerData, 0x0088);
		}

		// class UAkAssetDataSwitchContainer : public UAkAssetDataWithMedia
		TEST_METHOD(Class__AkAudio__AkAssetDataSwitchContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainer, SwitchContainers, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainer, DefaultGroupValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainer, UnknownData_9DWS, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetDataSwitchContainer, 0x00B0);
		}

		// class UAkAudioEventData : public UAkAssetDataSwitchContainer
		TEST_METHOD(Class__AkAudio__AkAudioEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, MaxAttenuationRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, IsInfinite, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, UnknownData_TB4I, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, MinimumDuration, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, MaximumDuration, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, LocalizedMedia, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, PostedEvents, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, UserDefinedSends, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, PostedTriggers, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, GroupValues, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, UnknownData_OE4S, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioEventData, 0x0278);
		}

		// class UAkAudioEvent : public UAkAssetBase
		TEST_METHOD(Class__AkAudio__AkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, LocalizedPlatformAssetDataMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, RequiredBank, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, CurrentLocalizedPlatformData, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, MaxAttenuationRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, IsInfinite, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, UnknownData_Y0ZI, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, MinimumDuration, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, MaximumDuration, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, UnknownData_MZP3, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioEvent, 0x00D8);
		}

		// class UAkGameObject : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkGameObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGameObject, AkAudioEvent, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGameObject, EventName, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGameObject, UnknownData_452Z, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGameObject, 0x0210);
		}

		// class UAkComponent : public UAkGameObject
		TEST_METHOD(Class__AkAudio__AkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, bUseSpatialAudio, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_6BWD, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, OcclusionCollisionChannel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_K7CZ, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_SVZE, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionAuxBus, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionAuxBusName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionOrder, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionBusSendGain, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionMaxPathLength, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, roomReverbAuxBusGain, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, diffractionMaxEdges, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, diffractionMaxPaths, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, diffractionMaxPathLength, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_76TF, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, StopWhenOwnerDestroyed, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_UH0C, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, AttenuationScalingFactor, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, OcclusionRefreshInterval, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, bUseReverbVolumes, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_5FYQ, 0x0265);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkComponent, 0x03D0);
		}

		// class UAkAudioInputComponent : public UAkComponent
		TEST_METHOD(Class__AkAudio__AkAudioInputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioInputComponent, UnknownData_H72F, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioInputComponent, 0x03E0);
		}

		// class UAkAuxBus : public UAkAssetBase
		TEST_METHOD(Class__AkAudio__AkAuxBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAuxBus, RequiredBank, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAuxBus, 0x0060);
		}

		// class UAkCheckBox : public UContentWidget
		TEST_METHOD(Class__AkAudio__AkCheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_H59W, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, CheckedState, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_QKWX, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, CheckedStateDelegate, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_FV8H, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, WidgetStyle, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, HorizontalAlignment, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, IsFocusable, 0x0A49);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_5NMM, 0x0A4A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, ThePropertyToControl, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, ItemToControl, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, AkOnCheckStateChanged, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, OnItemDropped, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, OnPropertyDropped, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_H21Z, 0x0AD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkCheckBox, 0x0B20);
		}

		// class UAkChinookPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkChinookPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkChinookPlatformInfo, 0x0070);
		}

		// class UAkMPXPlatformInfo : public UAkChinookPlatformInfo
		TEST_METHOD(Class__AkAudio__AkMPXPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMPXPlatformInfo, 0x0070);
		}

		// class UAkXSXPlatformInfo : public UAkChinookPlatformInfo
		TEST_METHOD(Class__AkAudio__AkXSXPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXSXPlatformInfo, 0x0070);
		}

		// class UAkGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkGameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGameplayStatics, 0x0028);
		}

		// class UAkCallbackInfo : public UObject
		TEST_METHOD(Class__AkAudio__AkCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCallbackInfo, AkComponent, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkCallbackInfo, 0x0030);
		}

		// class UAkEventCallbackInfo : public UAkCallbackInfo
		TEST_METHOD(Class__AkAudio__AkEventCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkEventCallbackInfo, PlayingID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkEventCallbackInfo, EventID, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkEventCallbackInfo, 0x0038);
		}

		// class UAkDialogueArgumentValueNames : public UObject
		TEST_METHOD(Class__AkAudio__AkDialogueArgumentValueNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDialogueArgumentValueNames, ArgumentValueNames, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDialogueArgumentValueNames, UnknownData_ISJM, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkDialogueArgumentValueNames, 0x0048);
		}

		// class UAkMIDIEventCallbackInfo : public UAkEventCallbackInfo
		TEST_METHOD(Class__AkAudio__AkMIDIEventCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMIDIEventCallbackInfo, UnknownData_Q1LK, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMIDIEventCallbackInfo, 0x0040);
		}

		// class UAkMarkerCallbackInfo : public UAkEventCallbackInfo
		TEST_METHOD(Class__AkAudio__AkMarkerCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMarkerCallbackInfo, Identifier, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMarkerCallbackInfo, Position, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMarkerCallbackInfo, Label, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMarkerCallbackInfo, 0x0050);
		}

		// class UAkDurationCallbackInfo : public UAkEventCallbackInfo
		TEST_METHOD(Class__AkAudio__AkDurationCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, EstimatedDuration, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, AudioNodeID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, MediaID, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, bStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, UnknownData_NHV8, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkDurationCallbackInfo, 0x0050);
		}

		// class UAkMusicSyncCallbackInfo : public UAkCallbackInfo
		TEST_METHOD(Class__AkAudio__AkMusicSyncCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, PlayingID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, SegmentInfo, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, MusicSyncType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, UnknownData_SF1M, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, UserCueName, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMusicSyncCallbackInfo, 0x0070);
		}

		// class UAkGeometryComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkGeometryComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, MeshType, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, UnknownData_4SI9, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, LOD, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, StaticMeshSurfaceOverride, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, CollisionMeshSurfaceOverride, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, UnknownData_18XU, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, AssociatedRoom, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, UnknownData_XZ76, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, GeometryData, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, UnknownData_I0FS, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGeometryComponent, 0x0320);
		}

		// class UAkGroupValue : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkGroupValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGroupValue, GroupShortID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGroupValue, UnknownData_UEE9, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGroupValue, 0x0058);
		}

		// class UAkHololensInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkHololensInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkHololensInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkHololensInitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkHololensInitializationSettings, AdvancedSettings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkHololensInitializationSettings, 0x00F8);
		}

		// class UAkHololensPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkHololensPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkHololensPlatformInfo, 0x0070);
		}

		// class UAkInitBankAssetData : public UAkAssetDataWithMedia
		TEST_METHOD(Class__AkAudio__AkInitBankAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkInitBankAssetData, PluginInfos, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkInitBankAssetData, 0x0098);
		}

		// class UAkInitBank : public UAkAssetBase
		TEST_METHOD(Class__AkAudio__AkInitBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkInitBank, AvailableAudioCultures, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkInitBank, DefaultLanguage, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkInitBank, 0x0078);
		}

		// class UAkIOSInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkIOSInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, AudioSession, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, UnknownData_1YJN, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, CommunicationSettings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, AdvancedSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, UnknownData_OL6W, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkIOSInitializationSettings, 0x0100);
		}

		// class UAkIOSPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkIOSPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkIOSPlatformInfo, 0x0070);
		}

		// class UAkItemBoolPropertiesConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkItemBoolPropertiesConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemBoolPropertiesConv, 0x0028);
		}

		// class UAkItemBoolProperties : public UWidget
		TEST_METHOD(Class__AkAudio__AkItemBoolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemBoolProperties, OnSelectionChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemBoolProperties, OnPropertyDragged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemBoolProperties, UnknownData_QWKD, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemBoolProperties, 0x0148);
		}

		// class UAkItemPropertiesConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkItemPropertiesConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemPropertiesConv, 0x0028);
		}

		// class UAkItemProperties : public UWidget
		TEST_METHOD(Class__AkAudio__AkItemProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemProperties, OnSelectionChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemProperties, OnPropertyDragged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemProperties, UnknownData_JNYO, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemProperties, 0x0148);
		}

		// class UAkLateReverbComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkLateReverbComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_KPNO, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, AuxBus, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, AuxBusName, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, SendLevel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, FadeRate, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, Priority, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_EUNS, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, NextLowerPriorityComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_A7U7, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLateReverbComponent, 0x0230);
		}

		// class UAkLinuxInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkLinuxInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLinuxInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLinuxInitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLinuxInitializationSettings, AdvancedSettings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLinuxInitializationSettings, 0x00F0);
		}

		// class UAkLinuxPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkLinuxPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLinuxPlatformInfo, 0x0070);
		}

		// class UAkLuminInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkLuminInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLuminInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLuminInitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLuminInitializationSettings, AdvancedSettings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLuminInitializationSettings, 0x00F0);
		}

		// class UAkLuminPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkLuminPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLuminPlatformInfo, 0x0070);
		}

		// class UAkMacInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkMacInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMacInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMacInitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMacInitializationSettings, AdvancedSettings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMacInitializationSettings, 0x00F0);
		}

		// class UAkMacPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkMacPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMacPlatformInfo, 0x0070);
		}

		// class UAkMediaAssetData : public UObject
		TEST_METHOD(Class__AkAudio__AkMediaAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAssetData, IsStreamed, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAssetData, UseDeviceMemory, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAssetData, UnknownData_GYPH, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMediaAssetData, 0x0040);
		}

		// class UAkMediaAsset : public UObject
		TEST_METHOD(Class__AkAudio__AkMediaAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, ID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, UnknownData_3U6F, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, UserData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, CurrentMediaAssetData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, UnknownData_7Z0L, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMediaAsset, 0x0058);
		}

		// class UAkLocalizedMediaAsset : public UAkMediaAsset
		TEST_METHOD(Class__AkAudio__AkLocalizedMediaAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLocalizedMediaAsset, 0x0058);
		}

		// class UAkExternalMediaAsset : public UAkMediaAsset
		TEST_METHOD(Class__AkAudio__AkExternalMediaAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkExternalMediaAsset, UnknownData_K4J4, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkExternalMediaAsset, 0x0060);
		}

		// class UAkPellegrinoPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkPellegrinoPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPellegrinoPlatformInfo, 0x0070);
		}

		// class UAkDPXPlatformInfo : public UAkPellegrinoPlatformInfo
		TEST_METHOD(Class__AkAudio__AkDPXPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkDPXPlatformInfo, 0x0070);
		}

		// class UAkPS5PlatformInfo : public UAkPellegrinoPlatformInfo
		TEST_METHOD(Class__AkAudio__AkPS5PlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPS5PlatformInfo, 0x0070);
		}

		// class UAkPlaylist : public UObject
		TEST_METHOD(Class__AkAudio__AkPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPlaylist, UnknownData_7NVT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPlaylist, 0x0030);
		}

		// class UAkPS4InitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkPS4InitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS4InitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS4InitializationSettings, CommunicationSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS4InitializationSettings, AdvancedSettings, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPS4InitializationSettings, 0x00F0);
		}

		// class UAkPS4PlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkPS4PlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPS4PlatformInfo, 0x0070);
		}

		// class UAkPS5InitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkPS5InitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, CommunicationSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, AdvancedSettings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, UnknownData_56OU, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPS5InitializationSettings, 0x00F0);
		}

		// class UAkDPXInitializationSettings : public UAkPS5InitializationSettings
		TEST_METHOD(Class__AkAudio__AkDPXInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkDPXInitializationSettings, 0x00F0);
		}

		// class AAkReverbVolume : public AVolume
		TEST_METHOD(Class__AkAudio__AkReverbVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, UnknownData_K5YQ, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, AuxBus, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, AuxBusName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, SendLevel, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, FadeRate, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, Priority, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, UnknownData_AP9L, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkReverbVolume, LateReverbComponent, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkReverbVolume, 0x0290);
		}

		// class UAkRoomComponent : public UAkGameObject
		TEST_METHOD(Class__AkAudio__AkRoomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, UnknownData_I52L, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, NextLowerPriorityComponent, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, Priority, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, WallOcclusion, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, AuxSendLevel, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, AutoPost, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, UnknownData_OUJY, 0x022D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkRoomComponent, 0x0240);
		}

		// class UAkRtpc : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkRtpc)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkRtpc, 0x0040);
		}

		// class UAkSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, MaxSimultaneousReverbVolumes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_YFSV, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseProjectPath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseSoundDataFolder, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, bAutoConnectToWAAPI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, DefaultOcclusionCollisionChannel, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_N0Q0, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, DefaultOcclusionRefreshInterval, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, AkGeometryMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, SplitSwitchContainerMedia, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UseEventBasedPackaging, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, EnableAutomaticAssetSynchronization, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_ORGN, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, CommandletCommitMessage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnrealCultureToWwiseCulture, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, AskedToUseNewAssetManagement, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, bEnableMultiCoreRendering, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, MigratedEnableMultiCoreRendering, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, FixupRedirectorsDuringMigration, 0x0113);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_HYK4, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseWindowsInstallationPath, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseMacInstallationPath, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_Q1DZ, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSettings, 0x0158);
		}

		// class UAkSettingsPerUser : public UObject
		TEST_METHOD(Class__AkAudio__AkSettingsPerUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WwiseWindowsInstallationPath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WwiseMacInstallationPath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WaapiIPAddress, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WaapiPort, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, AutoSyncSelection, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, SuppressWwiseProjectPathWarnings, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, SoundDataGenerationSkipLanguage, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, UnknownData_8CZZ, 0x005F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSettingsPerUser, 0x0060);
		}

		// class UAkSlider : public UWidget
		TEST_METHOD(Class__AkAudio__AkSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, ValueDelegate, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_DNWZ, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, WidgetStyle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, Orientation, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_QP8Z, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, SliderBarColor, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, SliderHandleColor, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, IndentHandle, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, Locked, 0x0485);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_5HWY, 0x0486);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, StepSize, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, IsFocusable, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_RI8Y, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, ThePropertyToControl, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, ItemToControl, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, OnValueChanged, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, OnItemDropped, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, OnPropertyDropped, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_KKFH, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSlider, 0x0530);
		}

		// class AAkSpatialAudioVolume : public AVolume
		TEST_METHOD(Class__AkAudio__AkSpatialAudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpatialAudioVolume, SurfaceReflectorSet, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpatialAudioVolume, LateReverb, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpatialAudioVolume, Room, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkSpatialAudioVolume, 0x0270);
		}

		// class AAkSpotReflector : public AActor
		TEST_METHOD(Class__AkAudio__AkSpotReflector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, EarlyReflectionAuxBus, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, EarlyReflectionAuxBusName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, AcousticTexture, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, DistanceScalingFactor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAkSpotReflector, Level, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAkSpotReflector, 0x0248);
		}

		// class UAkStateValue : public UAkGroupValue
		TEST_METHOD(Class__AkAudio__AkStateValue)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkStateValue, 0x0058);
		}

		// class UAkSurfaceReflectorSetComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkSurfaceReflectorSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, UnknownData_WWGD, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, AcousticPolys, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, UnknownData_O56W, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, AssociatedRoom, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, UnknownData_357C, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSurfaceReflectorSetComponent, 0x0230);
		}

		// class UAkSwitchInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkSwitchInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSwitchInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSwitchInitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSwitchInitializationSettings, AdvancedSettings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSwitchInitializationSettings, 0x00F0);
		}

		// class UAkSwitchPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkSwitchPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSwitchPlatformInfo, 0x0070);
		}

		// class UAkSwitchValue : public UAkGroupValue
		TEST_METHOD(Class__AkAudio__AkSwitchValue)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSwitchValue, 0x0058);
		}

		// class UAkTrigger : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkTrigger)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkTrigger, 0x0040);
		}

		// class UAkTVOSInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkTVOSInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, AudioSession, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, UnknownData_MNTF, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, CommunicationSettings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, AdvancedSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, UnknownData_B770, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkTVOSInitializationSettings, 0x0100);
		}

		// class UAkTVOSPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkTVOSPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkTVOSPlatformInfo, 0x0070);
		}

		// class UAkWaapiCalls : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkWaapiCalls)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWaapiCalls, 0x0028);
		}

		// class USAkWaapiFieldNamesConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__SAkWaapiFieldNamesConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USAkWaapiFieldNamesConv, 0x0028);
		}

		// class UAkWaapiJsonManager : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkWaapiJsonManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWaapiJsonManager, 0x0028);
		}

		// class UAkWaapiUriConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkWaapiUriConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWaapiUriConv, 0x0028);
		}

		// class UAkWindowsInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkWindowsInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWindowsInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWindowsInitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWindowsInitializationSettings, AdvancedSettings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWindowsInitializationSettings, 0x00F8);
		}

		// class UAkWin32PlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkWin32PlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWin32PlatformInfo, 0x0070);
		}

		// class UAkWin64PlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkWin64PlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWin64PlatformInfo, 0x0070);
		}

		// class UAkWindowsPlatformInfo : public UAkWin64PlatformInfo
		TEST_METHOD(Class__AkAudio__AkWindowsPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWindowsPlatformInfo, 0x0070);
		}

		// class UAkWinGDKInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkWinGDKInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWinGDKInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWinGDKInitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWinGDKInitializationSettings, AdvancedSettings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWinGDKInitializationSettings, 0x00F8);
		}

		// class UAkWinAnvilInitializationSettings : public UAkWinGDKInitializationSettings
		TEST_METHOD(Class__AkAudio__AkWinAnvilInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWinAnvilInitializationSettings, 0x00F8);
		}

		// class UAkWinGDKPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkWinGDKPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWinGDKPlatformInfo, 0x0070);
		}

		// class UAkWinAnvilPlatformInfo : public UAkWinGDKPlatformInfo
		TEST_METHOD(Class__AkAudio__AkWinAnvilPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWinAnvilPlatformInfo, 0x0070);
		}

		// class UAkWwiseTree : public UWidget
		TEST_METHOD(Class__AkAudio__AkWwiseTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTree, OnSelectionChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTree, OnItemDragged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTree, UnknownData_HT6P, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWwiseTree, 0x0148);
		}

		// class UAkWwiseTreeSelector : public UWidget
		TEST_METHOD(Class__AkAudio__AkWwiseTreeSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTreeSelector, OnSelectionChanged, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTreeSelector, OnItemDragged, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTreeSelector, UnknownData_ZPXC, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWwiseTreeSelector, 0x0168);
		}

		// class UAkXboxOneGDKInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkXboxOneGDKInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, ApuHeapSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, AdvancedSettings, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, UnknownData_4NQE, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneGDKInitializationSettings, 0x00F8);
		}

		// class UAkXboxOneAnvilInitializationSettings : public UAkXboxOneGDKInitializationSettings
		TEST_METHOD(Class__AkAudio__AkXboxOneAnvilInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneAnvilInitializationSettings, 0x00F8);
		}

		// class UAkXboxOneGDKPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkXboxOneGDKPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneGDKPlatformInfo, 0x0070);
		}

		// class UAkXboxOneAnvilPlatformInfo : public UAkXboxOneGDKPlatformInfo
		TEST_METHOD(Class__AkAudio__AkXboxOneAnvilPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneAnvilPlatformInfo, 0x0070);
		}

		// class UAkXboxOneInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkXboxOneInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, ApuHeapSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, AdvancedSettings, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, UnknownData_E3UH, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneInitializationSettings, 0x00F8);
		}

		// class UAkXboxOnePlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkXboxOnePlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOnePlatformInfo, 0x0070);
		}

		// class UAkXSXInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkXSXInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, CommonSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, ApuHeapSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, AdvancedSettings, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, UnknownData_2N8D, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXSXInitializationSettings, 0x00F8);
		}

		// class UAkMPXInitializationSettings : public UAkXSXInitializationSettings
		TEST_METHOD(Class__AkAudio__AkMPXInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMPXInitializationSettings, 0x00F8);
		}

		// class UInterpTrackAkAudioEvent : public UInterpTrackVectorBase
		TEST_METHOD(Class__AkAudio__InterpTrackAkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioEvent, Events, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioEvent, UnknownData_FVLL, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAkAudioEvent, 0x00A8);
		}

		// class UInterpTrackAkAudioRTPC : public UInterpTrackFloatBase
		TEST_METHOD(Class__AkAudio__InterpTrackAkAudioRTPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioRTPC, Param, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioRTPC, UnknownData_Y8LW, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAkAudioRTPC, 0x00A8);
		}

		// class UInterpTrackInstAkAudioEvent : public UInterpTrackInst
		TEST_METHOD(Class__AkAudio__InterpTrackInstAkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioEvent, UnknownData_S4JD, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAkAudioEvent, 0x0030);
		}

		// class UInterpTrackInstAkAudioRTPC : public UInterpTrackInst
		TEST_METHOD(Class__AkAudio__InterpTrackInstAkAudioRTPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioRTPC, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioRTPC, UnknownData_OK5X, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAkAudioRTPC, 0x0030);
		}

		// class UMovieSceneAkAudioEventSection : public UMovieSceneSection
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_DETU, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, PlayThroughTwDialogueSystem, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_S81H, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, Event, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, RetriggerEvent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_ZZXB, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, ScrubTailLengthMs, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, StopAtSectionEnd, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_E45R, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, EventName, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_LG6T, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, MaxSourceDuration, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_LHB8, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, MaxDurationSourceID, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_6IRR, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioEventSection, 0x01C8);
		}

		// class UMovieSceneAkTrack : public UMovieSceneTrack
		TEST_METHOD(Class__AkAudio__MovieSceneAkTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkTrack, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkTrack, UnknownData_DUU6, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkTrack, 0x0070);
		}

		// class UMovieSceneAkAudioEventTrack : public UMovieSceneAkTrack
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioEventTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioEventTrack, 0x0070);
		}

		// class UMovieSceneAkAudioRTPCSection : public UMovieSceneSection
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioRTPCSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, RTPC, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, Name, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, FloatCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, FloatChannelSerializationHelper, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, RTPCChannel, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioRTPCSection, 0x0248);
		}

		// class UMovieSceneAkAudioRTPCTrack : public UMovieSceneAkTrack
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioRTPCTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioRTPCTrack, 0x0070);
		}

		// class UPostEventAsync : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AkAudio__PostEventAsync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostEventAsync, Completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostEventAsync, UnknownData_9Q2U, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostEventAsync, 0x00A0);
		}

		// class UPostEventAtLocationAsync : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AkAudio__PostEventAtLocationAsync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostEventAtLocationAsync, Completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostEventAtLocationAsync, UnknownData_SW4T, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostEventAtLocationAsync, 0x0080);
		}

		// class AActor : public UObject
		TEST_METHOD(Class__Engine__Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, PrimaryActorTick, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UpdateOverlapsMethodDuringLevelStreaming, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, DefaultUpdateOverlapsMethodDuringLevelStreaming, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RemoteRole, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ReplicatedMovement, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InitialLifeSpan, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, CustomTimeDilation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_BP1C, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AttachmentReplication, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Owner, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDriverName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Role, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetDormancy, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, SpawnCollisionHandlingMethod, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, AutoReceiveInput, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputPriority, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InputComponent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetCullDistanceSquared, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetTag, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetUpdateFrequency, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, MinNetUpdateFrequency, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, NetPriority, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_XE9E, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Instigator, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Children, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, RootComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ControllingMatineeActors, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_X9K8, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Layers, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, ParentComponent, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_BMLQ, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, Tags, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeAnyDamage, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakePointDamage, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnTakeRadialDamage, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorBeginOverlap, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorEndOverlap, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnBeginCursorOver, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndCursorOver, 0x0186);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnClicked, 0x0187);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnReleased, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchBegin, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnd, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchEnter, 0x018B);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnInputTouchLeave, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnActorHit, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnDestroyed, 0x018E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, OnEndPlay, 0x018F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_9ZIX, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, InstanceComponents, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, BlueprintCreatedComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::AActor, UnknownData_F0XR, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AActor, 0x0220);
		}

		// class ABrush : public AActor
		TEST_METHOD(Class__Engine__Brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_WP9D, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, PolyFlags, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_IR3B, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, Brush, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, BrushComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, UnknownData_CAGR, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABrush, SavedSelections, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrush, 0x0258);
		}

		// class AVolume : public ABrush
		TEST_METHOD(Class__Engine__Volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolume, 0x0258);
		}

		// class UActorComponent : public UObject
		TEST_METHOD(Class__Engine__ActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_V36M, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, PrimaryComponentTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, ComponentTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_DP0N, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSSerializationIndex, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_QE3L, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, CreationMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentActivated, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, OnComponentDeactivated, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_TL0X, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UCSModifiedProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorComponent, UnknownData_2ER1, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponent, 0x00B0);
		}

		// class USceneComponent : public UActorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_PQUG, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_FPW3, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_H8XW, 0x014E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x014F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_DC6A, 0x0152);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x01F0);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0028);
		}

		// class UWorld : public UObject
		TEST_METHOD(Class__Engine__World)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_4QG8, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LineBatcher, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PersistentLineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ForegroundLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NetworkManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PhysicsCollisionHandler, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ExtraReferencedObjects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PerModuleDataObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelSequenceActors, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevels, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsToConsider, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, StreamingLevelsPrefix, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingVisibility, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CurrentLevelPendingInvisibility, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DemoNetDriver, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, MyParticleEventManager, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, DefaultPhysicsVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_8VAO, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_SV1I, 0x011F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, NavigationSystem, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AuthorityGameMode, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, GameState, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AISystem, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, AvoidanceManager, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, Levels, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, LevelCollections, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_MRZ8, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, OwningGameInstance, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ParameterCollectionInstances, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForRenderingToTarget, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, CanvasForDrawMaterialToRenderTarget, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_937P, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_5YIB, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, WorldComposition, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_F1VJ, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, PSCPool, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorld, UnknownData_553Q, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorld, 0x0730);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_VC9W, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_RZX2, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_6YU4, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0070);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_W65O, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0090);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_DXOI, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0090);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0028);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_0KM9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0030);
		}

		// class UPrimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PrimitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_LUJ6, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MinDrawDistance, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LDMaxDrawDistance, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CachedMaxDrawDistance, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DepthPriorityGroup, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, ViewOwnerDepthPriorityGroup, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, IndirectLightingCacheQuality, 0x0206);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightmapType, 0x0207);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, DynamicShadowDetailMode, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_0PO8, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, bHasCustomNavigableGeometry, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_UKZ6, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CanCharacterStepUpOn, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LightingChannels, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilWriteMask, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_OJGA, 0x0217);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomDepthStencilValue, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_OGKA, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, CustomPrimitiveDataInternal, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_D8YJ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, TranslucencySortPriority, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VisibilityId, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, RuntimeVirtualTextures, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureLodBias, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureCullMips, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureMinCoverage, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, VirtualTextureRenderPassType, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_K2AN, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LpvBiasMultiplier, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_SAF0, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BoundsScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_6O7G, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreActors, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, MoveIgnoreComponents, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_O4NL, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, BodyInstance, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentHit, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentBeginOverlap, 0x03D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentEndOverlap, 0x03DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentWake, 0x03DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnComponentSleep, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_7T07, 0x03DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnBeginCursorOver, 0x03DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnEndCursorOver, 0x03DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnClicked, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnReleased, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchBegin, 0x03E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnd, 0x03E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchEnter, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, OnInputTouchLeave, 0x03E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_K5IL, 0x03E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, LODParentPrimitive, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, FOV, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveComponent, UnknownData_HOHU, 0x040C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveComponent, 0x0410);
		}

		// class UMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_UAJ4, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_SS9Y, 0x0431);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0438);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkinCacheUsage, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_NTO1, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_1MYE, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_LR1O, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_6J3W, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_95OO, 0x05AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_0SKJ, 0x05B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_D43G, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldSpaceBounds, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_0WO3, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldToLocalTransform, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_SWPJ, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x0650);
		}

		// class UStreamableRenderAsset : public UObject
		TEST_METHOD(Class__Engine__StreamableRenderAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, ForceMipLevelsToBeResidentTimestamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, NumCinematicMipLevels, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, StreamingIndex, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedCombinedLODBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedNumResidentLODs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_BVLW, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamableRenderAsset, 0x0040);
		}

		// class USkeletalMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_7MOE, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_6W1R, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLOD, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, DisableBelowMinLodStripping, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x013D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x013E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_PEYU, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_HJ94, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_8SMS, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkinWeightProfiles, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x0380);
		}

		// class USplineComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__SplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineCurves, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineInfo, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineRotInfo, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineScaleInfo, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, SplineReparamTable, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bAllowSplineEditingPerInstance, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_ILF7, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, ReparamStepsPerSegment, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, Duration, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bStationaryEndpoints, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bSplineHasBeenEdited, 0x04E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bModifiedByConstructionScript, 0x04E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bInputSplinePointsToConstructionScript, 0x04E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bDrawDebug, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bClosedLoop, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, bLoopPositionOverride, 0x04EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_JXIW, 0x04EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, LoopPosition, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, DefaultUpVector, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineComponent, UnknownData_HPXJ, 0x04FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineComponent, 0x0500);
		}

		// class ATriggerBase : public AActor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATriggerBase, CollisionComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBase, 0x0228);
		}

		// class ATriggerSphere : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerSphere, 0x0228);
		}

		// class UAnimNotify : public UObject
		TEST_METHOD(Class__Engine__AnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify, UnknownData_YZ8V, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify, 0x0038);
		}

		// class UMovementComponent : public UActorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_ODIS, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_NW1K, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_E3PM, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x00F0);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_LHBS, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0130);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0138);
		}

		// class AHUD : public AActor
		TEST_METHOD(Class__Engine__HUD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PlayerOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_AOMA, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, CurrentTargetIndex, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_R8SA, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, PostRenderedActors, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_JXFR, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugDisplay, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ToggledDebugCategories, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, Canvas, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugCanvas, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, DebugTextList, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetDesiredClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, ShowDebugTargetActor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AHUD, UnknownData_06WP, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AHUD, 0x0310);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__Engine__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_RH1T, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0038);
		}

		// class APawn : public AActor
		TEST_METHOD(Class__Engine__Pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_U2VB, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_HQ7C, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, BaseEyeHeight, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessPlayer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AutoPossessAI, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, RemoteViewPitch, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_RPOR, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, AIControllerClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, PlayerState, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_8OIB, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastHitBy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, Controller, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_R1HU, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, ControlInputVector, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, LastControlInputVector, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APawn, UnknownData_PFCD, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APawn, 0x0280);
		}

		// class ADefaultPawn : public APawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseTurnRate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, BaseLookUpRate, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MovementComponent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, CollisionComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, MeshComponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADefaultPawn, UnknownData_LAYI, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPawn, 0x02A8);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_ZCSP, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_GGXA, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0050);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_DOBG, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentClassOverrides, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00A0);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0030);
		}

		// class USkeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__SkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimBlueprintGeneratedClass, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimClass, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimScriptInstance, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PostProcessAnimInstance, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationData, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_I1W0, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, RootBoneTranslation, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LineCheckBoundsScale, 0x06A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_EZ7H, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LinkedInstances, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedBoneSpaceTransforms, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedComponentSpaceTransforms, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_1BV9, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, GlobalAnimRateScale, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, KinematicBonesUpdateType, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, PhysicsTransformUpdateMode, 0x0725);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_1Y8I, 0x0726);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AnimationMode, 0x0727);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_FK9U, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_JT7V, 0x072F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, CachedAnimCurveUidVersion, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MassMode, 0x0732);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_Q18A, 0x0733);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UniformMass, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TotalMass, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, Density, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, MinPerParticleMass, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothBlendWeight, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, EdgeStiffness, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BendingStiffness, 0x074C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, AreaStiffness, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, VolumeStiffness, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, StrainLimitingStiffness, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ShapeTargetStiffness, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, DisallowedAnimCurves, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, BodySetup, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_G15L, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnConstraintBroken, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingSimulationFactory, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_95XD, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportDistanceThreshold, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, TeleportRotationThreshold, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_66XF, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, LastPoseTickFrame, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_XHUM, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, ClothingInteractor, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_5FWS, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, OnAnimInitialized, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponent, UnknownData_EPV3, 0x09B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponent, 0x0AE0);
		}

		// class UAnimInstance : public UObject
		TEST_METHOD(Class__Engine__AnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, CurrentSkeleton, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, RootMotionMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_J99X, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageBlendingOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageStarted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnMontageEnded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, OnAllMontageInstancesEnded, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_NLZ5, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, NotifyQueue, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, ActiveAnimNotifyState, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimInstance, UnknownData_VRX2, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstance, 0x0268);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_K935, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Priority, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_VAY9, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SourceEffectChain, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_J4R6, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySet, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_Y8P3, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x066D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x066E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_3IRM, 0x066F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_PZTH, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_63GW, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_RXQF, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_F63K, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Modulation, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_4ZQB, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x07D0);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0028);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0028);
		}

		// class UFXSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__FXSystemComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemComponent, 0x0410);
		}

		// class UFXSystemAsset : public UObject
		TEST_METHOD(Class__Engine__FXSystemAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, MaxPoolSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, UnknownData_EU6N, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemAsset, 0x0030);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_D9FS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0030);
		}

		// class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0030);
		}

		// class UPlayer : public UObject
		TEST_METHOD(Class__Engine__Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_LQBE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, PlayerController, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, CurrentNetSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredInternetSpeed, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, ConfiguredLanSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayer, UnknownData_0CFG, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayer, 0x0048);
		}

		// class UNetConnection : public UPlayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_9YXS, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PlayerId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_IYH1, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_3D2I, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x1510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_B5KI, 0x1520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1A30);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_263Y, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_58OD, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxNetTickRate, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNeverApplyNetworkEmulationSettings, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_3P52, 0x0086);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_XATY, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RecentlyDisconnectedTrackingTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_CP52, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, World, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_S46Z, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_QI99, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitions, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitionMap, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_VQLO, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, Time, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_1GNL, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_LMRN, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0748);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0028);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0028);
		}

		// class ACharacter : public APawn
		TEST_METHOD(Class__Engine__Character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, Mesh, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CharacterMovement, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CapsuleComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BasedMovement, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedBasedMovement, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, AnimRootMotionTranslationScale, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseTranslationOffset, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_CYRR, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, BaseRotationOffset, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplayLastTransformUpdateTimeStamp, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ReplicatedMovementMode, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, bInBaseReplication, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_EZPS, 0x032A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, CrouchedEyeHeight, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_G1GP, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpKeyHoldTime, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpForceTimeRemaining, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ProxyJumpForceStartedTime, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxHoldTime, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpMaxCount, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, JumpCurrentCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_3UZ9, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnReachedJumpApex, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_K508, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, MovementModeChangedDelegate, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, OnCharacterMovementUpdated, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, SavedRootMotion, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, UnknownData_JG7F, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, ClientRootMotionParams, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RootMotionRepMoves, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACharacter, RepRootMotion, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACharacter, 0x04B8);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_SZKW, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_39GT, 0x016B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_ZDDZ, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeed, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingSubStepTime, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_BHJV, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_8WMG, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_LROF, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxJumpApexAttemptsPerSimulation, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x0386);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_ZVXE, 0x038B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_B20Z, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_ZW94, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_477Z, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_OASN, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_KXFI, 0x05EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0610);
		}

		// class USubsystem : public UObject
		TEST_METHOD(Class__Engine__Subsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsystem, UnknownData_XVA8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystem, 0x0030);
		}

		// class UDynamicSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__DynamicSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicSubsystem, 0x0030);
		}

		// class UEngineSubsystem : public UDynamicSubsystem
		TEST_METHOD(Class__Engine__EngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineSubsystem, 0x0030);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_SK98, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0040);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0040);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0040);
		}

		// class AInfo : public AActor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInfo, 0x0220);
		}

		// class AGameModeBase : public AInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, OptionsString, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSessionClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameStateClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerControllerClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, PlayerStateClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, HUDClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPawnClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, SpectatorClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicatorClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameSession, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, GameState, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, ServerStatReplicator, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, DefaultPlayerName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameModeBase, UnknownData_POA4, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameModeBase, 0x02C0);
		}

		// class AController : public AActor
		TEST_METHOD(Class__Engine__Controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_0NUS, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, PlayerState, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_GQ9L, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, OnInstigatedAnyDamage, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, StateName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Pawn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_9H4Z, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, Character, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, TransformComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_U1Y0, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, ControlRotation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AController, UnknownData_DGMA, 0x0295);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AController, 0x0298);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_9XFN, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLOD, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_RJCB, 0x0456);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LODData, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x04A0);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalMaterial, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_QF7Y, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, DecalSize, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_UI9E, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0230);
		}

		// class AStaticMeshActor : public AActor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, bStaticMeshReplicateMovement, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, NavigationGeometryGatheringMode, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AStaticMeshActor, UnknownData_O4JZ, 0x022A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AStaticMeshActor, 0x0230);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_Z3EY, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlayRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_P3NB, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_6JVW, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0110);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, FieldOfView, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_BVCB, 0x0206);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_OVTP, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x07B0);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetArmLength, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_DAI5, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_3YEP, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_MA3S, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x0280);
		}

		// class UShapeComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_BJBD, 0x0425);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0428);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_R08G, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x042C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0430);
		}

		// class APlayerController : public AController
		TEST_METHOD(Class__Engine__PlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, Player, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, AcknowledgedPawn, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ControllingDirTrackInst, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, MyHUD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManager, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerCameraManagerClass, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bAutoManageActiveCameraTarget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_P0SU, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, TargetViewRotation, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_KYOC, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SmoothTargetViewRotationSpeed, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_O7PZ, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenActors, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HiddenPrimitiveComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_DO8G, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorStateSynchTime, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncLocation, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastSpectatorSyncRotation, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClientCap, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_C5K2, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatManager, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CheatClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PlayerInput, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ActiveForceFeedbackEffects, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_2YD2, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_S4UY, 0x03D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetPlayerIndex, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_3Q5D, 0x03D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, PendingSwapConnection, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, NetConnection, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_MNXH, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputYawScale, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputPitchScale, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InputRollScale, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_M7OK, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ForceFeedbackScale, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, ClickEventKeys, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultMouseCursor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentMouseCursor, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, DefaultClickTraceChannel, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentClickTraceChannel, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, HitResultTraceDistance, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SeamlessTravelCount, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, LastCompletedSeamlessTravelCount, 0x045A);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_ARLQ, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, InactiveStateInputComponent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_7D5H, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_KFYA, 0x04E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, CurrentTouchInterface, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_0WK0, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpectatorPawn, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_TAH2, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, bIsLocalPlayerController, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_8W83, 0x055D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, SpawnLocation, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerController, UnknownData_TEC4, 0x056C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerController, 0x0578);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_I8A3, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0078);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_60SE, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0150);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_QCPO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_IFOE, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0040);
		}

		// class ADebugCameraController : public APlayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_E4HU, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, DrawFrustum, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedActor, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedComponent, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SelectedHitPoint, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalControllerRef, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, OriginalPlayer, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, SpeedScale, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialMaxSpeed, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialAccel, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, InitialDecel, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADebugCameraController, UnknownData_4UPR, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraController, 0x0678);
		}

		// class ATriggerVolume : public AVolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerVolume, 0x0258);
		}

		// class UEngine : public UObject
		TEST_METHOD(Class__Engine__Engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_VFRM, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFont, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TinyFontName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFont, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmallFontName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFont, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MediumFontName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFont, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LargeFontName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubtitleFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFonts, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SGU7, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AdditionalFontNames, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConsoleClassName, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewportClientClassName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LocalPlayerClassName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WorldSettingsClassName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClassName, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClassName, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NavigationSystemConfigClass, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClassName, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AvoidanceManagerClass, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClass, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PhysicsCollisionHandlerClassName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClassName, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettingsClass, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AIControllerClassName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameUserSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelScriptActorClassName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBlueprintBaseClassName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingletonClassName, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameSingleton, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManagerClassName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, AssetManager, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTexture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultTextureName, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTexture, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultDiffuseTextureName, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTexture, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBSPVertexTextureName, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTexture, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HighFrequencyNoiseTextureName, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTexture, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBokehTextureName, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultBloomKernelTextureName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterial, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WireframeMaterialName, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterial, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugMeshMaterialName, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterial, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, EmissiveMeshMaterialName, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterial, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationLitMaterialName, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterial, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LevelColorationUnlitMaterialName, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityMaterial, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingTexelDensityName, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterial, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationLitMaterialName, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterial, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShadedLevelColorationUnlitMaterialName, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RemoveSurfaceMaterialName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterial, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorMaterialName, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_ColorOnly, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_ColorOnly, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_AlphaAsColor, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_RedOnly, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_RedOnly, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_GreenOnly, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_GreenOnly, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterial_BlueOnly, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, VertexColorViewModeMaterialName_BlueOnly, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DebugEditorMaterialName, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterial, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialX, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialXAxis, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialY, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialYAxis, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZ, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialZAxis, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ConstraintLimitMaterialPrismatic, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterial, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, InvalidLightmapSettingsMaterialName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterial, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreviewShadowsIndicatorMaterialName, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterial, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialYellow, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ArrowMaterialName, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightingOnlyBrightness, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ShaderComplexityColors, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, QuadComplexityColors, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightComplexityColors, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StationaryLightOverlapColors, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LODColorationColors, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, HLODColorationColors, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingAccuracyColors, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxPixelShaderAdditiveComplexityCount, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxES3PixelShaderAdditiveComplexityCount, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinLightMapDensity, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, IdealLightMapDensity, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxLightMapDensity, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_UZI7, 0x0645);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityGrayscaleScale, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RenderLightMapDensityColorScale, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityVertexMappedColor, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensitySelectedColor, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StatColorMappings, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterial, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultPhysMaterialName, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveGameNameRedirects, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveClassRedirects, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActivePluginRedirects, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ActiveStructRedirects, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTexture, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PreIntegratedSkinBRDFTextureName, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTexture, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BlueNoiseTextureName, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTexture, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MiniFontTextureName, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTexture, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, WeightMapPlaceholderTextureName, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTexture, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, LightMapDensityTextureName, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_PGT6, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameViewport, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DeferredCommands, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TickCycles, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameCycles, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ClientCycles, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NearClipPlane, 0x07AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_WTSZ, 0x07B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaximumLoopIterationCount, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SB2B, 0x07B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, FixedFrameRate, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SmoothedFrameRateRange, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStep, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_25GV, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CustomTimeStepClassName, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProvider, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_GEPP, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TimecodeProviderClassName, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bGenerateDefaultTimecode, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ZK92, 0x0851);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameRate, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GenerateDefaultTimecodeFrameDelay, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_OJDZ, 0x0861);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NumPawnsAllowedToBeSpawnedInAFrame, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_UGZO, 0x0869);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WorldBox, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushWire, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_AddWire, 0x0874);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SubtractWire, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_SemiSolidWire, 0x087C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_NonSolidWire, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_WireBackground, 0x0884);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_ScaleBoxHi, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_VolumeCollision, 0x088C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BSPCollision, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_OrthoBackground, 0x0894);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_Volume, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, C_BrushShape, 0x089C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, StreamingDistanceFactor, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_WV08, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, GameScreenshotSaveDirectory, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionType, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_Y5WG, 0x08B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionDescription, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, TransitionGameMode, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MeshLODRange, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_ME2T, 0x08E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraRotationThreshold, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, CameraTranslationThreshold, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PrimitiveProbablyVisibleTime, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxOcclusionPixelsFraction, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_7HES, 0x08F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResize, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MaxParticleResizeWarn, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_BZCK, 0x0904);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, PendingDroppedNotes, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetClientTicksPerSecond, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DisplayGamma, 0x091C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, MinDesiredFrameRate, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, DefaultSelectedMaterialColor, 0x0924);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColor, 0x0934);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionOutlineColor, 0x0944);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SubduedSelectionOutlineColor, 0x0954);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectedMaterialColorOverride, 0x0964);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bIsOverridingSelectedColor, 0x0974);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_1DHL, 0x0975);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_UZLB, 0x0979);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, bEnableVisualLogRecordingOnStart, 0x097C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_UC7M, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ScreenSaverInhibitorSemaphore, 0x0984);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_MNOH, 0x0989);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ParticleEventManagerClassPath, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensity, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, BSPSelectionHighlightIntensity, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, SelectionHighlightIntensityBillboards, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_FH7L, 0x09AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetDriverDefinitions, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, ServerActors, 0x0C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, RuntimeServerActors, 0x0C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NetErrorLogInterval, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SIDU, 0x0C2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, NextWorldContextHandle, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngine, UnknownData_SQ5H, 0x0C4C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngine, 0x0DE0);
		}

		// class UGameEngine : public UEngine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0DE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, GameInstance, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_FUX5, 0x0DF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0E30);
		}

		// class UGameInstance : public UObject
		TEST_METHOD(Class__Engine__GameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_DPXS, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, LocalPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, OnlineSession, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, ReferencedObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameInstance, UnknownData_NOO8, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstance, 0x0198);
		}

		// class AGameMode : public AGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MatchState, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_HQHT, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumSpectators, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumPlayers, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumBots, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MinRespawnDelay, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, NumTravellingPlayers, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, EngineMessageClass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerArray, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, InactivePlayerStateLifeSpan, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, MaxInactivePlayers, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, bHandleDedicatedServerReplays, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameMode, UnknownData_26N3, 0x0301);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameMode, 0x0308);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_211S, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, Version, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_AW3D, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_4D59, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_OBI7, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_0640, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_3807, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0120);
		}

		// class UInputComponent : public UActorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_VKDQ, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_ZW5F, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0138);
		}

		// class UNavigationSystemBase : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0028);
		}

		// class APhysicsVolume : public AVolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, TerminalVelocity, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, Priority, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, FluidFriction, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsVolume, UnknownData_HK26, 0x0265);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsVolume, 0x0268);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_CW93, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Settings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, Priority, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_A36H, 0x074D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0750);
		}

		// class AEmitter : public AActor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, ParticleSystemComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, UnknownData_ZW2T, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleSpawn, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleBurst, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleDeath, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitter, OnParticleCollide, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitter, 0x0270);
		}

		// class UParticleSystemComponent : public UFXSystemComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_TEFU, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_9R7V, 0x043B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x0445);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x0446);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_TTYW, 0x0447);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, bOldPositionValid, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_109N, 0x0499);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AsyncInactiveHelperIndex, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_5YGG, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_EJMA, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_IBED, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_NS19, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_PS6S, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x0572);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_4ORW, 0x0573);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_DAMQ, 0x05B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x067C);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumCustomDataFloats, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_CI2H, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMCustomData, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_XKPB, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_AHX2, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_EKIS, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x0550);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_Z9BA, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_UDJM, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_G2F7, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CurrentDensityScaling, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_6O5H, 0x05E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x05EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_PS3V, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0640);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_I33Z, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0030);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0030);
		}

		// class UPhysicalMaterial : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, FrictionCombineMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideFrictionCombineMode, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_FP10, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RestitutionCombineMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, bOverrideRestitutionCombineMode, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_JTDK, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, Density, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, RaiseMassToPower, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, DestructibleDamageThresholdScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_LFBH, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, PhysicalMaterialProperty, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, SurfaceType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_8B0E, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, TireFrictionScales, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterial, UnknownData_2KGL, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterial, 0x0080);
		}

		// class APlayerCameraManager : public AActor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PCOwner, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_KXAS, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultFOV, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_ZZYR, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultOrthoWidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_4LQD, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultAspectRatio, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_I0KB, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCache, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCache, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTarget, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PendingViewTarget, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_FRMT, 0x1A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraCachePrivate, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, LastFrameCameraCachePrivate, 0x2040);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ModifierList, 0x2620);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, DefaultModifiers, 0x2630);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamDistance, 0x2640);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeCamOffset, 0x2644);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewTargetOffset, 0x2650);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_DIEN, 0x265C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CameraLensEffects, 0x2670);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, CachedCameraShakeMod, 0x2680);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimInstPool, 0x2688);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, PostProcessBlendCache, 0x26C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_61GS, 0x26D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ActiveAnims, 0x26E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, FreeAnims, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, AnimCameraActor, 0x2708);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_LRHG, 0x2712);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMin, 0x2714);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewPitchMax, 0x2718);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMin, 0x271C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewYawMax, 0x2720);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMin, 0x2724);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ViewRollMax, 0x2728);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_OPTI, 0x272C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, ServerUpdateCameraTimeout, 0x2730);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerCameraManager, UnknownData_A5K6, 0x2734);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerCameraManager, 0x2740);
		}

		// class APlayerState : public AInfo
		TEST_METHOD(Class__Engine__PlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Score, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerId, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, Ping, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_9C4L, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_MNDV, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, StartTime, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, EngineMessageClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_212H, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, SavedNetworkAddress, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UniqueId, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_FRRP, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PawnPrivate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_HPOI, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, PlayerNamePrivate, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerState, UnknownData_8300, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerState, 0x0320);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_LV7R, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_Y2IF, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_50PC, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01D0);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0028);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, PrimitiveRenderMode, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSource, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bAlwaysPersistRenderingState, 0x01F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_0MLB, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bUseRayTracingIfEnabled, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_9YLO, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_JEXD, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_2NBB, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x0288);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_356W, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_VDN2, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_OBJI, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_1N9I, 0x07F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomNearClippingPlane, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x07FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_CWQE, 0x07FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_IXLX, 0x0841);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0844);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_DJC7, 0x085D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bDisableFlipCopyGLES, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_Z30V, 0x0861);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x0880);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_AY24, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0038);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_7XMQ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_YHOV, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, MaxSplitscreenPlayers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_3BZL, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, World, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, GameInstance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_BPCU, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0330);
		}

		// class AWorldSettings : public AInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_HBU5, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityCellSize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, VisibilityAggressiveness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_I1JB, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, NavigationSystemConfigOverride, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldToMeters, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZ, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, KillZDamageType, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, WorldGravityZ, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalGravityZ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultPhysicsVolumeClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PhysicsCollisionHandlerClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultGameMode, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GameNetworkManagerClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PackedLightAndShadowMapTextureSize, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultColorScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, GlobalDistanceFieldViewDistance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_AGYY, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultReverbSettings, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultAmbientZoneSettings, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MonoCullingDistance, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBaseSoundMix, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, TimeDilation, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MatineeTimeDilation, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DemoPlayTimeDilation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinGlobalTimeDilation, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxGlobalTimeDilation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MinUndilatedFrameTime, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxUndilatedFrameTime, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BroadphaseSettings, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_R1RO, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, Pauser, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, ReplicationViewers, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, AssetUserData, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, PauserPlayerState, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, MaxNumberOfBookmarks, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, UnknownData_NX1J, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, DefaultBookmarkClass, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, BookmarkArray, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldSettings, LastBookmarkClass, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldSettings, 0x03A0);
		}

		// class UNavAreaBase : public UObject
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_UWT4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0030);
		}

		// class AGameStateBase : public AInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, GameModeClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, AuthorityGameMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, SpectatorClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, PlayerArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, bReplicatedHasBegunPlay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_F25N, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ReplicatedWorldTimeSeconds, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsDelta, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameStateBase, UnknownData_P4LD, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameStateBase, 0x0270);
		}

		// class AGameState : public AGameStateBase
		TEST_METHOD(Class__Engine__GameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, MatchState, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, PreviousMatchState, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, ElapsedTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameState, UnknownData_RVXI, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameState, 0x0290);
		}

		// class ASkyLight : public AInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyLight, UnknownData_NFZ4, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyLight, 0x0230);
		}

		// class UTexture : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__Texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_DWWD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LightingGuid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, CompressionSettings, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, Filter, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, MipLoadOptions, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, LODGroup, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_YGVS, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, AssetUserData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture, UnknownData_2135, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture, 0x00B8);
		}

		// class UTextureCube : public UTexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_9J5X, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0110);
		}

		// class UMaterialInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_1RHU, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, SubsurfaceProfile, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_WFB8, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, LightmassSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, TextureStreamingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInterface, UnknownData_DASJ, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInterface, 0x0088);
		}

		// class UMaterialInstance : public UMaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysicalMaterialMap, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_S6MS, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, RuntimeVirtualTextureParameterValues, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_VZ4Z, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedLayerParameters, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedReferencedTextures, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_W55V, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x0408);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceConstant, PhysMaterialMask, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x0410);
		}

		// class UWorldSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__WorldSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldSubsystem, 0x0030);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Material, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_3B2H, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0040);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0040);
		}

		// class UEngineCustomTimeStep : public UObject
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0028);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0028);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_6FZ3, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentClassOverrides, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFramePointerProperty, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_EP7Z, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_8PM9, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x0328);
		}

		// class ACameraActor : public AActor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AutoActivateForPlayer, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_1Q2X, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, CameraComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, SceneComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_6OF5, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, UnknownData_199T, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, AspectRatio, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, FOVAngle, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessBlendWeight, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraActor, PostProcessSettings, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraActor, 0x0790);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, VirtualizationMode, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_6R7Q, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencySet, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Duration, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Priority, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Modulation, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x0160);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_P83X, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LoadingBehavior, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_13HO, 0x016F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, FrequenciesToAnalyze, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedSpectralTimeData, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedEnvelopeTimeData, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InitialChunkSize, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_5IRV, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Volume, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_WJ42, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_K436, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0310);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_QIPT, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x0360);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_GOX8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x0258);
		}

		// class UChannel : public UObject
		TEST_METHOD(Class__Engine__Channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, Connection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChannel, UnknownData_E39K, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChannel, 0x0070);
		}

		// class UActorChannel : public UChannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, Actor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_EYKH, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_OWLV, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x0298);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_OC4C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_V0BL, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, MetaData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0080);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_MJ3X, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_KK9D, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_7WTB, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_E7MA, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0148);
		}

		// class UBlendSpace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, AxisToScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace, UnknownData_W9WV, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace, 0x0150);
		}

		// class UAimOffsetBlendSpace : public UBlendSpace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0150);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_KRDB, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0150);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0150);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_I0YF, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_413W, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0058);
		}

		// class AAmbientSound : public AActor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAmbientSound, AudioComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAmbientSound, 0x0228);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_Q3D1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bOnlyCheckForMissingSkeletalMeshes, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x0057);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x0058);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_HGWA, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_MXJ5, 0x00C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x00C8);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_GJ7Z, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndicesMap, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_YZB1, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphAssetPlayerInformation, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphBlendOptions, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x04E8);
		}

		// class UAnimBoneCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionCodec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionCodec, Description, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionCodec, 0x0038);
		}

		// class UAnimBoneCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionSettings, Codecs, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionSettings, 0x0038);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_JGVX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndicesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctionData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_VTQN, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimGraphNodeProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_3FOJ, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimLayerNodeProperties, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_V17Z, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PreUpdateNodeProperties, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_K89S, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, DynamicResetNodeProperties, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_598I, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, StateMachineNodeProperties, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_K42G, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, InitializationNodeProperties, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_TCYO, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphNameAssetPlayers, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, EvaluateGraphExposedInputs, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphBlendOptions, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0268);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0028);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00A8);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00A8);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00B8);
		}

		// class UAnimCompress : public UAnimBoneCompressionCodec
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_ALHC, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_U6S5, 0x003F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0040);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0040);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0040);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_1E4T, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0060);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_AMRI, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_0EV4, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_W938, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_O6XQ, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00D8);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_COT1, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0048);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_EF5K, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0050);
		}

		// class UAnimCurveCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec, 0x0028);
		}

		// class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_CompressedRichCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_CompressedRichCurve, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformIndexable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformIndexable, 0x0028);
		}

		// class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformlySampled)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformlySampled, 0x0028);
		}

		// class UAnimCurveCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCurveCompressionSettings, Codec, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionSettings, 0x0030);
		}

		// class UAnimLayerInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimLayerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimLayerInterface, 0x0028);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0028);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_4XB1, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_YJH2, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x017B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_LG01, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01D0);
		}

		// class UAnimNotify_PauseClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0038);
		}

		// class UAnimNotify_PlayParticleEffect : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_NLAQ, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_QD19, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_TW9E, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAnimNotify_PlaySound : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_T6L4, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_E7D4, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0058);
		}

		// class UAnimNotify_ResetClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0038);
		}

		// class UAnimNotify_ResetDynamics : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0038);
		}

		// class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0038);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0030);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_AXGH, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0060);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_9DW0, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_5DG8, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0058);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_6U9P, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_AIIP, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BoneCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CurveCompressionSettings, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_ZMWF, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_3IHV, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x016E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x016F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_7KJD, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_POIW, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01A0);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_TK8C, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_LYHO, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x00F0);
		}

		// class UAnimSingleNodeInstance : public UAnimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x0280);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0028);
		}

		// class UAnimStreamable : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, NumFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, Interpolation, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_Z2DW, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RetargetSource, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_0SV4, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, BoneCompressionSettings, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, CurveCompressionSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bEnableRootMotion, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RootMotionRootLock, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bForceRootLock, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bUseNormalizedRootMotionScale, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_XHOS, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStreamable, 0x00E0);
		}

		// class UApplicationLifecycleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0140);
		}

		// class UArrowComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowColor, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_4MNS, 0x041D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0420);
		}

		// class UAssetExportTask : public UObject
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_MNA2, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0078);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_VIF4, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x02D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x02D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x02D7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_GRWS, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_JFJJ, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x0438);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, CustomPrimaryAssetRules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_MIQE, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x0100);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0038);
		}

		// class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionHandleSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, Completed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, UnknownData_GW1T, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, SaveGameObject, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionHandleSaveGame, 0x0068);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_M8YI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0078);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0088);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0088);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0088);
		}

		// class AAtmosphericFog : public AInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAtmosphericFog, AtmosphericFogComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAtmosphericFog, 0x0228);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunMultiplier, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_P3V0, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_7OWR, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0300);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MasterSubmix, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, ReverbSubmix, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, EQSubmix, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_BTNO, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMinPitchScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMaxPitchScale, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_PTEP, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_6IRA, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_631B, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_WRY4, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x0148);
		}

		// class AAudioVolume : public AVolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Priority, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_2DQN, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, AmbientZoneSettings, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioVolume, UnknownData_SS5F, 0x02A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioVolume, 0x02A8);
		}

		// class UAutoDestroySubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__AutoDestroySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, UnknownData_86NL, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, ActorsToPoll, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoDestroySubsystem, 0x0048);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0328);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_RQDK, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_VD65, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E0);
		}

		// class ABandwidthTestActor : public AActor
		TEST_METHOD(Class__Engine__BandwidthTestActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABandwidthTestActor, BandwidthGenerator, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABandwidthTestActor, 0x0240);
		}

		// class UBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_DNVG, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x042C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0430);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0028);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_2MC3, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_4XL6, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_12IV, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_JB97, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_6Z3E, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0368);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_SV7B, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0048);
		}

		// class ABlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABlockingVolume, 0x0258);
		}

		// class UBlueprintExtension : public UObject
		TEST_METHOD(Class__Engine__BlueprintExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintExtension, 0x0028);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0028);
		}

		// class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPathsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPathsLibrary, 0x0028);
		}

		// class UPlatformGameInstance : public UGameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x0268);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0028);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0028);
		}

		// class UBodySetup : public UObject
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BoneName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysicsType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_YWTF, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionReponse, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionTraceFlag, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_3WD7, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_YCWH, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_PBAU, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_VRT7, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x0250);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0038);
		}

		// class UBookmarkBase : public UObject
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0028);
		}

		// class UBookMark : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Location, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, Rotation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0050);
		}

		// class UBookMark2D : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Location, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_XLQX, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0038);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, UnknownData_L7OP, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0440);
		}

		// class AReflectionCapture : public AActor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AReflectionCapture, CaptureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AReflectionCapture, 0x0228);
		}

		// class ABoxReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABoxReflectionCapture, 0x0228);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_2D17, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Brightness, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_YO9R, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x026C);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_07VN, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x0280);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_07A0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_ZHIC, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0040);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Tooltip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_6C7O, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_U2F6, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0080);
		}

		// class UBrushComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, Brush, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0420);
		}

		// class ABrushShape : public ABrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABrushShape, 0x0258);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02A0);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_NKGM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_0G7H, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_2WAS, 0x05A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x05B0);
		}

		// class ACameraBlockingVolume : public AVolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraBlockingVolume, 0x0258);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_OQ0D, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Priority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_39RJ, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_61LC, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0048);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ExpiredPooledShakesMap, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_OBF8, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x00B0);
		}

		// class UCameraShake : public UObject
		TEST_METHOD(Class__Engine__CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_G86V, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationDuration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendInTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendOutTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RotOscillation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, LocOscillation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, FOVOscillation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimPlayRate, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendInTime, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendOutTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RandomAnimSegmentDuration, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, Anim, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_HMUS, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, CameraOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_BSNI, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, ShakeScale, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillatorTimeRemaining, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimInst, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_3HUF, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake, 0x0160);
		}

		// class ACameraShakeSourceActor : public AActor
		TEST_METHOD(Class__Engine__CameraShakeSourceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraShakeSourceActor, CameraShakeSourceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraShakeSourceActor, 0x0228);
		}

		// class UCameraShakeSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraShakeSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, Attenuation, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_ZGKO, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, InnerAttenuationRadius, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, OuterAttenuationRadius, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_P4L3, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, CameraShake, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, bAutoPlay, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_H7A7, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeSourceComponent, 0x0210);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_3SRS, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_9PZU, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_FD7R, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02C0);
		}

		// class UTextureRenderTarget : public UTexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_607W, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00C0);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeX, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, SizeY, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsSamplerFilter, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressU, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressV, 0x00DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_J3AF, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x00E8);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, World, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_OPCH, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0108);
		}

		// class UChaosPhysicalMaterial : public UObject
		TEST_METHOD(Class__Engine__ChaosPhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Friction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, StaticFriction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Restitution, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, LinearEtherDrag, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, AngularEtherDrag, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingLinearVelocityThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingAngularVelocityThreshold, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, UnknownData_YDBW, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosPhysicalMaterial, 0x0048);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x05A8);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_P7XQ, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0220);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1A30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1A38);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0038);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_FWKB, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0050);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_PWQ7, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0158);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_VHEH, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0080);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0038);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_K4JO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x00A0);
		}

		// class UCompositeCurveTable : public UCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, UnknownData_B5RW, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00C8);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_GZLZ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_G2ZE, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, ImportKeyField, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_IJVX, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00C8);
		}

		// class UCompositeDataTable : public UDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_YUCW, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00F0);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_KX3M, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_6LBG, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_Y3FW, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0130);
		}

		// class UControlChannel : public UChannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_JUZJ, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0088);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_L012, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_SA9Y, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_LEW0, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0070);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_1WEO, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0058);
		}

		// class ACullDistanceVolume : public AVolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, CullDistances, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACullDistanceVolume, UnknownData_BF05, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACullDistanceVolume, 0x0270);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_YEBM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0030);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0028);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_TMD1, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00B8);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_2NKT, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0250);
		}

		// class UTexture2D : public UTexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_5B36, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_MM5T, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x00E8);
		}

		// class UCurveLinearColorAtlas : public UTexture2D
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, UnknownData_GO5X, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0100);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0028);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x01B0);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0030);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0028);
		}

		// class UDebugCameraControllerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__DebugCameraControllerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraControllerSettings, CycleViewModes, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugCameraControllerSettings, 0x0048);
		}

		// class ADebugCameraHUD : public AHUD
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADebugCameraHUD, 0x0310);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0028);
		}

		// class ADecalActor : public AActor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADecalActor, Decal, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADecalActor, 0x0228);
		}

		// class ADefaultPhysicsVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADefaultPhysicsVolume, 0x0268);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_LUSA, 0x1A30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1AA0);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_I6SL, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_QRL5, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x0C54);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_2GCM, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, MulticastRecordOptions, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_OY8H, 0x0C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_I6I8, 0x0CE9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, SpectatorControllers, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_E54M, 0x0D00);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x1120);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_LBAI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_DRDL, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C0);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C0);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0028);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0038);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_CG9P, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_QCF1, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x0098);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_CEI6, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00B0);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_VXHN, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x0178);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_FSB3, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_P6ZD, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0040);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_V1I3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0070);
		}

		// class ALight : public AActor
		TEST_METHOD(Class__Engine__Light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, LightComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALight, UnknownData_5MJ3, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALight, 0x0230);
		}

		// class ADirectionalLight : public ALight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADirectionalLight, 0x0230);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Brightness, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, Intensity, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_9VDS, 0x020E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, SamplesPerPixel, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_P53W, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x0220);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, Temperature, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_0C6G, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_Q66E, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSlopeBias, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_9D96, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightingChannels, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_K7L4, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_OOS2, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_JIY0, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_AHD6, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomMaxBrightness, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_MHUT, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_4CM8, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x0320);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowCascadeBiasDistribution, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_395O, 0x0325);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_PDUD, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_N19M, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowAmount, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_BUNE, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunLightIndex, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_OXBB, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x03A0);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_ACWA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0030);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_4BGY, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0038);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_5DFP, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0040);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0050);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_JQWV, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0060);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0060);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0040);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0050);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_PDXS, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0038);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_J193, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_WIE0, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0050);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_EEJ0, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_N563, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0058);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_VJJL, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0090);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0090);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Max, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, Min, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_VKQ7, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_O848, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0060);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_APW6, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_OD00, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_WYYW, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0060);
		}

		// class ADocumentationActor : public AActor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADocumentationActor, UnknownData_7QU1, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADocumentationActor, 0x0228);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0028);
		}

		// class UDrawFrustumComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumColor, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_4OBO, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, Texture, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0430);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_RZ5U, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0430);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0430);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_4M79, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0060);
		}

		// class UGraphNodeContextMenuContext : public UObject
		TEST_METHOD(Class__Engine__GraphNodeContextMenuContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Blueprint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Graph, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Node, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_LCOY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, bIsDebugging, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_NGZY, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraphNodeContextMenuContext, 0x0050);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_SMLJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_EGH7, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_PQCC, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_G1PU, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x0098);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00B8);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, Direction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_J9J1, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0118);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0028);
		}

		// class AEmitterCameraLensEffectBase : public AEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffect, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseCamera, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_D1KN, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, RelativeTransform, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, BaseFOV, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_VDUH, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, DistFromCamera, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEmitterCameraLensEffectBase, UnknownData_81IV, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEmitterCameraLensEffectBase, 0x02E0);
		}

		// class UViewModeUtils : public UObject
		TEST_METHOD(Class__Engine__ViewModeUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewModeUtils, 0x0028);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0028);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0028);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0028);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00A8);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0028);
		}

		// class AExponentialHeightFog : public AInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, Component, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AExponentialHeightFog, UnknownData_9O16, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AExponentialHeightFog, 0x0230);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogDensity, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, SecondFogData, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_1QJC, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_KIDM, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_1XXV, 0x0289);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x0290);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_NXO4, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_QU7F, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0078);
		}

		// class UHDRUtility : public UObject
		TEST_METHOD(Class__Engine__HDRUtility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHDRUtility, 0x0028);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_EY47, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_C2MB, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Characters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_XEHK, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_MDRI, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01D0);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_A3AD, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_YGNW, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0058);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, Data, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00D8);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00D8);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_CY6X, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_X3XJ, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x02D0);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, Duration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_ALOK, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0040);
		}

		// class UGameInstanceSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__GameInstanceSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstanceSubsystem, 0x0030);
		}

		// class AGameNetworkManager : public AInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPacketLossThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePacketLossThreshold, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, BadPingThreshold, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, SeverePingThreshold, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, AdjustedNetSpeed, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, LastNetSpeedUpdateTime, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, TotalNetBandwidth, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MinDynamicBandwidth, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxDynamicBandwidth, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_2JIH, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyRxCheatTime, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, StandbyTxCheatTime, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForRxStandby, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentMissingForTxStandby, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, PercentForBadPing, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, JoinInProgressStandbyWaitTime, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MoveRepSize, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientForcedUpdateDuration, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchThreshold, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ServerForcedUpdateHitchCooldown, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxMoveDeltaTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MaxClientSmoothingDeltaTime, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientAuthorativePosition, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_G163, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientErrorUpdateRateLimit, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdateDeltaTime, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, ClientNetCamUpdatePositionLimit, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_E9SD, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, bUseDistanceBasedRelevancy, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameNetworkManager, UnknownData_7KZY, 0x02C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameNetworkManager, 0x02D0);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0028);
		}

		// class AGameSession : public AInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSpectators, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPlayers, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxPartySize, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, MaxSplitscreensPerConnection, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, bRequiresPushToTalk, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, UnknownData_AK47, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::AGameSession, SessionName, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGameSession, 0x0238);
		}

		// class ASpotLight : public ALight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpotLight, SpotLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpotLight, 0x0238);
		}

		// class AGeneratedMeshAreaLight : public ASpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGeneratedMeshAreaLight, 0x0238);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0028);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_GHJW, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0068);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0138);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_I40A, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0060);
		}

		// class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0028);
		}

		// class UHLODProxy : public UObject
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0038);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0028);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0028);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_NG0X, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0060);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0048);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0028);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0038);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0038);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0038);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0038);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_R8K5, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_PEWU, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_VYG6, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, SpeechMappings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x00F0);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0038);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0038);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0028);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0028);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0028);
		}

		// class UInterface_PreviewMeshProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0028);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_CII1, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0040);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_31W5, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0070);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0038);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0038);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0038);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_8ZT1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_1UEO, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0050);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_81AT, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0060);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0050);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0048);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0048);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0048);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, Duration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_CLTP, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bSweep, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, TeleportType, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bCheckIfStillInWorld, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_YYN3, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_L7R1, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x0190);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_X0A1, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00B0);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0090);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, PropertyName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0088);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x0098);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0090);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_NGIG, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0088);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_CZCA, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0088);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_T518, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_XW01, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00A8);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_TN39, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B0);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00A8);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x0098);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x0098);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_6XRO, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0030);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0028);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0050);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_DRYU, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_3VO7, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0068);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_GAP2, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_PKAI, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0060);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0028);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0030);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_WY6E, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0030);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0028);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_71X0, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0040);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0060);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_QQW5, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0030);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_7UEY, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_3ZAU, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0060);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_ASG7, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0068);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0040);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_R42X, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0030);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_G8MJ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0030);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_NUNH, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0038);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_0MRL, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_48DM, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0038);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0060);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_9T9V, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_518Z, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0068);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_JPID, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0030);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_R9XC, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0090);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x0098);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_9AUS, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_EMRN, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00C8);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_H68R, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00A8);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0080);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0090);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_O488, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00A8);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_9W97, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0088);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00A8);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, PropertyName, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x0098);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_ZOM4, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0088);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_NVIW, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_BVO8, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_3RRV, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_ZGZX, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0050);
		}

		// class AKillZVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AKillZVolume, 0x0268);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0028);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0028);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0028);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0028);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0028);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0028);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0028);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0028);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0028);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0028);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0028);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0028);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_DZAZ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0048);
		}

		// class ULevelPartitionInterface : public UInterface
		TEST_METHOD(Class__Engine__LevelPartitionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelPartitionInterface, 0x0028);
		}

		// class ULevel : public UObject
		TEST_METHOD(Class__Engine__Level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_U0SI, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, OwningWorld, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, Model, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ModelComponents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ActorCluster, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingUnbuiltComponents, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NumTextureStreamingDirtyResources, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelScriptActor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListStart, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavListEnd, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, NavDataChunks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightmapTotalSize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, ShadowmapTotalSize, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StaticNavigableGeometry, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, StreamingTextureGuids, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_GZJO, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LevelBuildDataId, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, MapBuildData, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, LightBuildLevelOffset, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_42NY, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, WorldSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_C6MS, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, AssetUserData, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_L9ZV, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, DestroyedReplicatedStaticActors, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevel, UnknownData_33UX, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevel, 0x0290);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, Actors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0038);
		}

		// class ALevelBounds : public AActor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, BoxComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, bAutoUpdateBounds, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelBounds, UnknownData_PS5M, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelBounds, 0x0230);
		}

		// class ALevelScriptActor : public AActor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelScriptActor, UnknownData_B42E, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelScriptActor, 0x0228);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00A0);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_QJQA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, StreamingPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_F9YL, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_OA6M, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_6PJN, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_8ZSR, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0148);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingAlwaysLoaded, UnknownData_16DO, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0150);
		}

		// class ULevelStreamingDynamic : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingDynamic, UnknownData_WZ6K, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0150);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingPersistent, UnknownData_6BD5, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0150);
		}

		// class ULevelStreamingTwDistance : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingTwDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingTwDistance, BoundingBox, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingTwDistance, bStreamOutWhenClose, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingTwDistance, bUseCustomStreamDistance, 0x0165);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingTwDistance, StreamingDistancePreset, 0x0166);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingTwDistance, UnknownData_9JAT, 0x0167);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingTwDistance, DistanceToStream, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingTwDistance, UnknownData_QACC, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingTwDistance, DistancePresetValues, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingTwDistance, UnknownData_TZP4, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingTwDistance, 0x0190);
		}

		// class ALevelStreamingVolume : public AVolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingLevelNames, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_EJLD, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, StreamingUsage, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelStreamingVolume, UnknownData_4H8A, 0x026D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelStreamingVolume, 0x0270);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0040);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_7QII, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x00F0);
		}

		// class ALightmassCharacterIndirectDetailVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassCharacterIndirectDetailVolume, 0x0258);
		}

		// class ALightmassImportanceVolume : public AVolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassImportanceVolume, 0x0258);
		}

		// class ALightmassPortal : public AActor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightmassPortal, PortalComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightmassPortal, 0x0228);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, UnknownData_JODU, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0200);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0040);
		}

		// class ULineBatchComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_1XMC, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x0450);
		}

		// class ULocalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, IntensityUnits, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_KEHN, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, Radius, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, UnknownData_BFNA, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x033C);
		}

		// class ULocalPlayer : public UPlayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_J6GY, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_XHDS, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_B1KM, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_4I3F, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_V5DQ, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x0258);
		}

		// class ULocalPlayerSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__LocalPlayerSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerSubsystem, 0x0030);
		}

		// class ALODActor : public AActor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, StaticMeshComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, ImpostersStaticMeshComponents, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Proxy, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, Key, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODDrawDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, LODLevel, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, SubActors, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, CachedNumHLODLevels, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALODActor, UnknownData_7J20, 0x02A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALODActor, 0x02A8);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_9UCD, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x0238);
		}

		// class UMaterial : public UMaterialInterface
		TEST_METHOD(Class__Engine__Material)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterial, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysMaterialMask, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PhysicalMaterialMap, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Metallic, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_XQ7F, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Specular, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_8T6D, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Anisotropy, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_HJ7F, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Normal, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_BMCA, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Tangent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_PERD, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, EmissiveColor, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_LTJ1, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDomain, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendMode, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, DecalBlendMode, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialDecalResponse, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModel, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModels, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpacityMaskClipValue, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, WorldPositionOffset, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_04OU, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, Refraction, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_8BAL, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaterialAttributes, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_N9CU, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, PixelDepthOffset, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_0PG2, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingModelFromMaterialExpression, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_5534, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, OpaqueForwardLightingMode, 0x01C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyLightingMode, 0x01C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_STB1, 0x01C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, NumCustomizedUVs, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucencyDirectionalLightingIntensity, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowDensityScale, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowDensityScale, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondDensityScale, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentSelfShadowSecondOpacity, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentBackscatteringExponent, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentMultipleScatteringExtinction, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, TranslucentShadowStartOffset, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_73UO, 0x01FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_9OID, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_GFPE, 0x0205);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_ELEF, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, D3D11TessellationMode, 0x020D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, ShadingRate, 0x020F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendableLocation, 0x0212);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilCompare, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StencilRefValue, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionMode, 0x0216);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_IV1B, 0x0217);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, BlendablePriority, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_KRK9, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UsageFlagWarnings, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, RefractionDepthBias, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, StateId, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, MaxDisplacement, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, UnknownData_8ZHQ, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterial, CachedExpressionData, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterial, 0x04F0);
		}

		// class UMaterialBillboardComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0420);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_2XWF, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0058);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0040);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_RVL8, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_08OU, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0070);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, SamplerType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_ABXU, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0050);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_SVQK, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, TextureObject, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_H2N0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_6ILR, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDX, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_Y9YW, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDY, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_J3LL, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, AutomaticViewMipBiasValue, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_D096, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValueMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, SamplerSource, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstCoordinate, 0x00CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstMipValue, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x00D0);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ParameterName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x00F0);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x00F0);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Threshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, Channel, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_BX0D, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x00F8);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_4MO3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_FGX5, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0068);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_FB18, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0058);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_VXX1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0058);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_0G51, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0058);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_88W8, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0058);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_YFM1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0058);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_WUJT, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_BJ6T, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0068);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_4RMR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, X, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_M3RI, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0068);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_CMZP, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0058);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_CHF5, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0058);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0040);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0040);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_19F5, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_ZQE9, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0058);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_45JU, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_2H6M, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_1D7J, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_4NPF, 0x0086);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x0088);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_QO6L, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0058);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_P7ZO, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_PN1C, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_EA4N, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x0088);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0040);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0040);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_MMXQ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0058);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0058);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, bUseCustomPrimitiveData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, PrimitiveDataIndex, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, UnknownData_T7Q4, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0070);
		}

		// class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_PNX8, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, Input, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_K6BO, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x0088);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_UAOL, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Min, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_U2T7, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, Max, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_G5FO, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_P3I0, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x0088);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_JT6R, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0058);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, Collection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0060);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, SizeY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, Text, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_08VT, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0070);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_7B6C, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_J0ET, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0058);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_MNSE, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0048);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0048);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0050);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0050);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_WT3T, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_2ZKY, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0060);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_2CPW, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0058);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_F7Z0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_9TXV, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0068);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, bUseCustomPrimitiveData, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, PrimitiveDataIndex, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_O5NT, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0060);
		}

		// class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Curve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_6RYP, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x0088);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_1VBB, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalDefines, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, IncludeFilePaths, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x0098);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_LEE0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0058);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_0MYA, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0058);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0040);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0040);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_X715, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_VK6L, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0060);
		}

		// class UMaterialExpressionDeltaTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeltaTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeltaTime, 0x0040);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_BNT3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_Z6Z0, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, bUseRefractedDepth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_B47G, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0078);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_ANKB, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_38AX, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0058);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_5X7Q, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0058);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_ER7W, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_UMON, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0078);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_CILO, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_ONUQ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0068);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0040);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_ZM83, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0058);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_AV4H, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0058);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_94SC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_N67C, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0070);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_8IWY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_MA0Z, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0068);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_C6XP, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0068);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0040);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_OT7S, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_YEQS, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x00A8);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_W0XZ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0058);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_4LAG, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_KIPF, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0068);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_06EZ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0050);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0070);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_WJMQ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0058);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_8PO4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_1DBV, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Normal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_MA4E, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x0088);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_T7S3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_QRYS, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, ID, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_PI6O, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_29BU, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_VUS1, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00C0);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_XGH4, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_4VNW, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, ID, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_4SMV, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x0088);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_OI7U, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0068);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_TLW0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_OGO0, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_T9B2, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x0080);
		}

		// class UMaterialExpressionHairAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairAttributes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairAttributes, 0x0040);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_CQA2, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_SDQM, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_ZX85, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_DCX6, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_6K9T, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00B0);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0040);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_CRBJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_81MR, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0068);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0040);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_1RL4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_TVUO, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_SUDK, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x0088);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_1U46, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0058);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_N1WL, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0058);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_TS4I, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ASZV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_P140, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_19VI, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Anisotropy, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_MDLR, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_SJOM, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Opacity, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_HY2R, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_WE5H, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Normal, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_EA8J, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Tangent, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_XC4B, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_6880, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ZMT2, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_9WTJ, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_PF3J, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ESBL, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ZH8K, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_5XV0, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_AMUJ, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_JKVT, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_KXW5, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ShadingModel, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_FASA, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0270);
		}

		// class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMapARPassthroughCameraUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, UnknownData_UW19, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMapARPassthroughCameraUV, 0x0058);
		}

		// class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ParameterName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_GYEF, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_AX5C, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_031X, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x00E8);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0058);
		}

		// class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x0088);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_BKAF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_TK9Q, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0068);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_5GGZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_Z7ZI, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0070);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_5VTM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_HPIZ, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0070);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_87TW, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_1TEL, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0070);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_I59K, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_WVQ6, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Scale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_ZXJ4, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_NV9C, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_7WGF, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x0090);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_JPPV, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0058);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0040);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0040);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0040);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0040);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_BKHW, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0058);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_0MYM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_C4R3, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Speed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_8PWJ, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_GNMN, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x0090);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0040);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0040);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0040);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0040);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0040);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0040);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0040);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0040);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0040);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0040);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_7RZF, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x00D8);
		}

		// class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUVProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUVProperties, 0x0040);
		}

		// class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceCustomData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DefaultValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_M9B3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, ConstDefaultValue, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DataIndex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_PNJM, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceCustomData, 0x0060);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0040);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0040);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0040);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0040);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_O3FM, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_962T, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_EFDS, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0070);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedLocalBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedLocalBounds, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0040);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0040);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_A69X, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_16PX, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0068);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_84YJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_XT9C, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x0090);
		}

		// class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRayTracingQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, Normal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_2XOV, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, RayTraced, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_GK5L, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRayTracingQualitySwitch, 0x0068);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_RKUJ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_U2I1, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0058);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_NGEP, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0058);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_9OBS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_7VOU, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_F6ZP, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Position, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_701Q, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_1SM0, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x0098);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_BYGR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Time, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_MGDF, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Speed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0078);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_V75Q, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0058);
		}

		// class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, BaseColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_PTDN, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Specular, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_W5XV, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Roughness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_5KGU, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Normal, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_VEM4, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_B295, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Opacity, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_4ONL, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Mask, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_IUG1, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureOutput, 0x00D0);
		}

		// class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_SI9I, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, VirtualTextureOutput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_AIAN, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureReplace, 0x0068);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_WN46, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, WorldPosition, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_4141, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_RV6H, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, VirtualTexture, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MaterialType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bSinglePhysicalSpace, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValueMode, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_3ID3, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSample, 0x0090);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ParameterName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ExpressionGUID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, Group, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, 0x00B0);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_G2EB, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0058);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_Z5CX, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_K8UM, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_E8IY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_7DAC, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0078);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_TW3X, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Input, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_Y87J, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_FGK9, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_V9H4, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0078);
		}

		// class UMaterialExpressionRefractedSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRefractedSceneDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRefractedSceneDepth, 0x0040);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0040);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_I2H9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_YHQT, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0058);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0040);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0060);
		}

		// class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShaderStageSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, PixelShader, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_ATC4, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, VertexShader, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_9P53, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShaderStageSwitch, 0x0068);
		}

		// class UMaterialExpressionShadingModel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, ShadingModel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, UnknownData_9TRT, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingModel, 0x0048);
		}

		// class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_8RN0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_72RE, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x0090);
		}

		// class UMaterialExpressionShadowReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadowReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Default, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_XU1F, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Shadow, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_1NPE, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadowReplace, 0x0068);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_6BOM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0058);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_FKWF, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0058);
		}

		// class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionSingleLayerWaterMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ScatteringCoefficients, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_5CJ0, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, AbsorptionCoefficients, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_KRAB, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, PhaseG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_RX61, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, 0x0080);
		}

		// class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, UnknownData_PQB5, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDirection, 0x0048);
		}

		// class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightIlluminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, WorldPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, UnknownData_ZM5P, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDiskLuminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, LightIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, UnknownData_17DW, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, 0x0048);
		}

		// class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereAerialPerspective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, WorldPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, UnknownData_9067, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, 0x0058);
		}

		// class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance, 0x0040);
		}

		// class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereViewLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereViewLuminance, 0x0040);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_FFNY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Index, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_4I54, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Seed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_S13G, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x0088);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_RYZQ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_ASW3, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_OHN7, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_9X0U, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_UC6M, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_JH6G, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00A0);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_UGM7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_SZ4C, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Radius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_K8EL, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_BQ7W, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x0098);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_SUJX, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0058);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_5755, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0058);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_BJVR, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0048);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_2K5J, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0060);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, Input, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_1S53, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_GYLY, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0070);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_MKXA, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_FJ4Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_8JLX, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_ENJ9, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x0080);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, A, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_JVKU, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, B, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_J4MW, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x0088);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_0RMS, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_PFLS, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0070);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_GISY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0058);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_2CU9, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0058);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Index, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_BY7Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, Seed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_4ATC, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_3BQM, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0078);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_91NR, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0050);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0050);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x00F0);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_EJSW, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_B0T7, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0058);
		}

		// class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2DArray)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2DArray, 0x00F0);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x00F0);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_TBLM, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x00F8);
		}

		// class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x00F0);
		}

		// class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionThinTranslucentMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, TransmittanceColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, UnknownData_V1AH, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionThinTranslucentMaterialOutput, 0x0058);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_6Y20, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0048);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_Z8SP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_5BTT, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0058);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_T78K, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_E9F2, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0058);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_YHQC, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0058);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0040);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_AIMY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_H2UQ, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_R2Y1, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_BFIU, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0068);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0040);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, Input, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_S6QU, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0060);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0040);
		}

		// class UMaterialExpressionVertexTangentWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexTangentWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexTangentWS, 0x0040);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_HRXD, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0048);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0040);
		}

		// class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVirtualTextureFeatureSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, No, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_MJQ7, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, Yes, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_T9B1, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVirtualTextureFeatureSwitch, 0x0068);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_3WOQ, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0048);
		}

		// class UMaterialFunctionInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_W4HD, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0040);
		}

		// class UMaterialFunction : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, Description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_064S, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0058);
		}

		// class UMaterialFunctionInstance : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, RuntimeVirtualTextureParameterValues, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayer : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0058);
		}

		// class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00C0);
		}

		// class AMaterialInstanceActor : public AActor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMaterialInstanceActor, TargetActors, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMaterialInstanceActor, 0x0230);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_LW7R, 0x0408);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x0458);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_117Y, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0078);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_YNDE, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, Collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_P63F, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x00F0);
		}

		// class AMatineeActor : public AActor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeData, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, MatineeControllerName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PlayRate, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_TJ24, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ForceStartPosition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_FUAM, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, PreferredSplitScreenNum, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_I4HA, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupActorInfos, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_XVEM, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, GroupInst, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, CameraCuts, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_30CZ, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, InterpPosition, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_PF83, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, ReplicationForceIsPlaying, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_Q91R, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPlay, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnStop, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, OnPause, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActor, UnknownData_6BW5, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActor, 0x02C8);
		}

		// class AMatineeActorCameraAnim : public AMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AMatineeActorCameraAnim, CameraAnim, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMatineeActorCameraAnim, 0x02D0);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0028);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0028);
		}

		// class AMeshMergeCullingVolume : public AVolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AMeshMergeCullingVolume, 0x0258);
		}

		// class UMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0040);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0028);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0068);
		}

		// class UModelComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_5R7G, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_JGLE, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x0450);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_EXDB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0040);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0028);
		}

		// class UNavCollisionBase : public UObject
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_2G7N, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0070);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0028);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0030);
		}

		// class UNavigationDataInterface : public UInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0028);
		}

		// class ANavigationObjectBase : public AActor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_K8OG, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, CapsuleComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, GoodSprite, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, BadSprite, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavigationObjectBase, UnknownData_2TPG, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavigationObjectBase, 0x0248);
		}

		// class UNavigationSystemConfig : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, SupportedAgentsMask, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, DefaultAgentName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_HMEC, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0050);
		}

		// class UNullNavSysConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0050);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_QZ1U, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0050);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0028);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0028);
		}

		// class USimulatedClientNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1A30);
		}

		// class UNetPushModelHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__NetPushModelHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetPushModelHelpers, 0x0028);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0028);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_I2TJ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_YXMI, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, NetworkEmulationProfiles, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0058);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0168);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0028);
		}

		// class ANote : public AActor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANote, 0x0220);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_52DL, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_C087, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00A8);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0038);
		}

		// class UObjectTraceWorldSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ObjectTraceWorldSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectTraceWorldSubsystem, UnknownData_CIYP, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectTraceWorldSubsystem, 0x0038);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_6SJV, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x03F8);
		}

		// class APainCausingVolume : public APhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_M9ES, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamagePerSec, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageType, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, PainInterval, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_PERE, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, DamageInstigator, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::APainCausingVolume, UnknownData_HHHV, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APainCausingVolume, 0x0290);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_JOPY, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_DS5R, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_3VHP, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x01B8);
		}

		// class AParticleEventManager : public AActor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AParticleEventManager, 0x0220);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Level, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_96LP, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_MQNW, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00B8);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_XVH0, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0038);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_K8E4, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0088);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_2941, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0048);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0070);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0070);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0080);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0030);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00A8);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Range, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_6BFK, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_51J2, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_A3B9, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_78ZF, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00B0);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Range, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_OB9Q, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00E0);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Position, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Radius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0078);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0030);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_CUWC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_8TSA, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_6N4I, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0108);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_D6W9, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_8445, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_UMPC, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_XI6M, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_OFHL, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_FH3Q, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_KBCU, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_DQMU, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x0190);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_BIMA, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_7YBI, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, Source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_00RV, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_EPMX, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_QS4X, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_VYU6, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0118);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_DFZ7, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_2J2D, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_A4BP, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_66OZ, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_E9VO, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_ZHM4, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_YODU, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0120);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0030);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_WZ9N, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_XQ71, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0068);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0030);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_9DQQ, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_8OVJ, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_O71U, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_EESV, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_DGG5, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_34IN, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x0190);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_GHRK, 0x00A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00A8);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_5X1P, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00B0);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00D0);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_TEQL, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00B0);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_VCP1, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00B0);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0030);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0040);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_WTQS, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_GNKR, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0040);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_JB8E, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0048);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_5CJ1, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_6KO1, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00D8);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0028);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0030);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_FMUR, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00C8);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_NSC8, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0068);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0030);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, LifeTime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0060);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0080);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0030);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_Z5J0, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightingChannels, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_PQ0X, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_08ER, 0x011A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0120);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0140);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0030);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0080);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A0);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_XVEQ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_5YOK, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_XXWK, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_88EX, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0070);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, ScaleFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, Direction, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0150);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_LM1O, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_1IZP, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_MWA8, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_G7O5, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0050);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0038);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_GW31, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00B0);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_NVDB, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_Q8C1, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0120);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0140);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00E0);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0100);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Angle, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0108);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_4PY1, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_4QFA, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_S0GP, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_6ZEI, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x0090);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0080);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A0);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0030);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0040);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0030);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_XQE0, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0080);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A0);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0030);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0078);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x0098);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0078);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_J082, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0080);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_F7V6, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0038);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_QN5Y, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_Q4NA, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_4MSD, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_LMWR, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0130);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0030);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_GO11, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0038);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0030);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_2NK8, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0048);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0068);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0038);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, Material, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_MO84, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_NZ51, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_RVKO, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0140);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0060);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0080);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_M773, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0068);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0060);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0080);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0060);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0030);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0078);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x0098);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_WWTN, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0080);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_XVWC, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0080);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0040);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0078);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_S9XQ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0038);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, Rate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_OY0W, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_Q59V, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x00E8);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_EMP4, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0078);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0030);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, Animation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_PQTX, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0070);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_X01Z, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_4UG1, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00B0);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0030);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_C3XV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_KRP1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_19D1, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_X8IL, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_G1WX, 0x008D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0090);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0030);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_N6U2, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_H8V3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0048);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_R8TX, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Speed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_HOTC, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_QBU8, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Distance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_B25Y, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_W9C6, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0150);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_L5VL, 0x0415);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0420);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, Mesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_PQUJ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_OG5E, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_GXWU, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x0098);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_A6FH, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_5YRV, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_NIPH, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_GOVM, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0060);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0030);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_5IBP, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_SDIF, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0040);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Intensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_P3RF, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0068);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0048);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_AQET, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0040);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0068);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0068);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_OXDU, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0038);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00B0);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00D0);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Angle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Direction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_88QH, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00A8);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, Scale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0080);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_EYOH, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0088);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x01B8);
		}

		// class UParticleSystem : public UFXSystemAsset
		TEST_METHOD(Class__Engine__ParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_FPS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UpdateTime_Delta, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, WarmupTickRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Emitters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, PreviewComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CurveEdSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistanceCheckTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVRadius, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODDistances, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODSettings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, FixedRelativeBoundingBox, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SecondsBeforeInactive, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, Delay, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, DelayLow, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SystemUpdateMode, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, LODMethod, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificantReaction, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, OcclusionBoundsMethod, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_VSJ8, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MaxSignificanceLevel, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MinTimeBetweenTicks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, InsignificanceDelay, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, MacroUVPosition, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, CustomOcclusionBounds, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, SoloTracking, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, NamedMaterialSlots, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, UnknownData_WHC7, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, bOverrideSortPriority, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystem, TranslucencySortOverrideValue, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystem, 0x0110);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_Y92C, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0040);
		}

		// class UPathFollowingAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0028);
		}

		// class UPawnNoiseEmitterComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_HLV7, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_D63S, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x00D8);
		}

		// class UPhysicalAnimationComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_KAO7, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, SkeletalMeshComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_24K3, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x00F0);
		}

		// class UPhysicalMaterialMask : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UVChannelIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressX, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressY, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UnknownData_ZAEC, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialMask, 0x0030);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0028);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_0RUR, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SolverIterations, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_GF7H, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0138);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_UG68, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x0268);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_FNA3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0040);
		}

		// class ARigidBodyBase : public AActor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARigidBodyBase, 0x0220);
		}

		// class APhysicsConstraintActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, ConstraintActor2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsConstraintActor, UnknownData_CQDF, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsConstraintActor, 0x0240);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_UTZU, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x03F0);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_EMF1, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x02F8);
		}

		// class UPhysicsHandleComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_6JIX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_1E07, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_8W8E, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_DP1O, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x0160);
		}

		// class UPhysicsSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultGravityZ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultTerminalVelocity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultFluidFriction, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SimulateScratchMemorySize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RagdollAggregateThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, TriangleMeshTriangleMinAreaThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableShapeSharing, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnablePCM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableStabilization, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bWarnMissingLocks, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnable2DPhysics, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_69SG, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_29M4, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, BounceThresholdVelocity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, FrictionCombineMode, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RestitutionCombineMode, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_AGKL, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxAngularVelocity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxDepenetrationVelocity, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ContactOffsetMultiplier, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinContactOffset, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxContactOffset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateSkeletalMeshOnDedicatedServer, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultShapeComplexity, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDefaultHasComplexCollision, 0x00AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x00AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_8JDP, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AnimPhysicsMinDeltaTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateAnimPhysicsAfterReset, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_BKB8, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_ZGG8, 0x00C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_VUQY, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ChaosSettings, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_U06P, 0x0133);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x0138);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringStiffness, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_R905, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_IF71, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0220);
		}

		// class APhysicsThruster : public ARigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APhysicsThruster, ThrusterComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APhysicsThruster, 0x0228);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, ThrustStrength, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_LXF4, 0x01F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0200);
		}

		// class ASceneCapture : public AActor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, MeshComp, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture, SceneComponent, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture, 0x0230);
		}

		// class APlanarReflection : public ASceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, PlanarReflectionComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, bShowPreviewPlane, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::APlanarReflection, UnknownData_MMNU, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlanarReflection, 0x0240);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bShowPreviewPlane, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_P3S0, 0x02BE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x0370);
		}

		// class APlaneReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlaneReflectionCapture, 0x0228);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_W942, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x0280);
		}

		// class UPlatformEventsComponent : public UActorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x00D0);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, Tag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_TYKJ, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B0);
		}

		// class UPlayerInput : public UObject
		TEST_METHOD(Class__Engine__PlayerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_J438, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, DebugExecBindings, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_SIH5, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, InvertedAxis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInput, UnknownData_MKG3, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInput, 0x03A8);
		}

		// class APlayerStart : public ANavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APlayerStart, PlayerStartTag, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStart, 0x0250);
		}

		// class APlayerStartPIE : public APlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APlayerStartPIE, 0x0250);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_IOW7, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A0);
		}

		// class APointLight : public ALight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APointLight, PointLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APointLight, 0x0238);
		}

		// class UPointLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_OWMH, 0x034C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x0350);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_NMAY, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0038);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_U0ID, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x07B0);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_VYTR, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0120);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_4GLD, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0038);
		}

		// class APostProcessVolume : public AVolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_FSIE, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Settings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, Priority, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendRadius, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, BlendWeight, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::APostProcessVolume, UnknownData_WYSO, 0x07AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APostProcessVolume, 0x07B0);
		}

		// class APrecomputedVisibilityOverrideVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityOverrideVolume, 0x0288);
		}

		// class APrecomputedVisibilityVolume : public AVolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrecomputedVisibilityVolume, 0x0258);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0028);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_7X26, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0050);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_MC67, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0068);
		}

		// class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0040);
		}

		// class ARadialForceActor : public ARigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARadialForceActor, ForceComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARadialForceActor, 0x0228);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, Radius, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, Falloff, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_4ERS, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_GSKW, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_CDHT, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0220);
		}

		// class ARectLight : public ALight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARectLight, RectLightComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARectLight, 0x0238);
		}

		// class URectLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorAngle, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorLength, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_5FDH, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x0360);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_2WW0, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Z37W, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_IWBT, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Q8T2, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileBorderSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureFeedbackFactor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_TUWD, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_BYBS, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_2MY1, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MY1J, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_SNSR, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_KQWS, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_4TLS, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ZXU0, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_3XYA, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposureBias, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_1P45, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_7KG2, 0x00A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_GKJG, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_BE3T, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_PKES, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_NSO4, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_8KCY, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_EBQ4, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ZSZ5, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_W0UU, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_MTL2, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultSkinCacheBehavior, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_YHLU, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_4AKS, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_TFXI, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x00F0);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_A96X, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0040);
		}

		// class UReplicationDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0028);
		}

		// class UReplicationConnectionDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0028);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_HSYF, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0030);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_4PRT, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00A8);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0058);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_HWG1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0050);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_8R4D, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, InitialRotation, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0118);
		}

		// class URuntimeOptionsBase : public UObject
		TEST_METHOD(Class__Engine__RuntimeOptionsBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeOptionsBase, UnknownData_07LT, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeOptionsBase, 0x0038);
		}

		// class URuntimeVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__RuntimeVirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, MaterialType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bCompressTextures, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bEnable, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bClearTextures, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bSinglePhysicalSpace, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bPrivateSpace, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bEnableScalability, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_4R4W, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, Size, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileBorderSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamLowMips, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_46M4, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamingTexture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bEnableCompressCrunch, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_4G8I, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, RemoveLowMips, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_01F6, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTexture, 0x00A0);
		}

		// class URuntimeVirtualTextureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, VirtualTexture, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bUseStreamingLowMipsInEditor, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_DW19, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, BoundsSourceActor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_93BO, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureComponent, 0x0210);
		}

		// class URuntimeVirtualTextureStreamingProxy : public UTexture2D
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, Settings, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, bSinglePhysicalSpace, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, UnknownData_HL9A, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, BuildHash, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, UnknownData_X7AG, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureStreamingProxy, 0x0100);
		}

		// class ARuntimeVirtualTextureVolume : public AActor
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ARuntimeVirtualTextureVolume, VirtualTextureComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ARuntimeVirtualTextureVolume, 0x0228);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0028);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0028);
		}

		// class ASceneCapture2D : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCapture2D, CaptureComponent2D, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCapture2D, 0x0238);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, bCaptureRotation, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_M79D, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_GMTB, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x02C0);
		}

		// class ASceneCaptureCube : public ASceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASceneCaptureCube, CaptureComponentCube, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASceneCaptureCube, 0x0238);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_PQ2Y, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00D8);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_IWGJ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A0);
		}

		// class AServerStatReplicator : public AInfo
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bUpdateStatNet, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, bOverwriteClientStats, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_1BF3, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, Channels, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRate, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRate, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_261X, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, MaxPacketOverhead, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMax, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientMin, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InRateClientAvg, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMax, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientMin, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPacketsClientAvg, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMax, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientMin, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutRateClientAvg, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMax, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientMin, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPacketsClientAvg, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetNumClients, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InPackets, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutPackets, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InBunches, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutBunches, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, OutLoss, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, InLoss, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesSent, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoiceBytesRecv, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsSent, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, VoicePacketsRecv, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentInVoice, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PercentOutVoice, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActorChannels, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumConsideredActors, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, PrioritizedActors, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumRelevantDeletedActors, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActorAttempts, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumReplicatedActors, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumActors, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetActors, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumDormantActors, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumInitiallyDormantActors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsAckd, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsPending, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NumNetGUIDsUnAckd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, ObjPathBytes, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDOutRate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetGUIDInRate, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, NetSaturated, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AServerStatReplicator, UnknownData_3A06, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AServerStatReplicator, 0x02E8);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_FRN0, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x00F0);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_NXRW, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A0);
		}

		// class ASkeletalMeshActor : public AActor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_SFWV, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_FZIW, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, SkeletalMeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMesh, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedPhysAsset, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial0, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, ReplicatedMaterial1, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkeletalMeshActor, UnknownData_1HDE, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkeletalMeshActor, 0x02A8);
		}

		// class USkeletalMeshEditorData : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshEditorData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshEditorData, 0x0028);
		}

		// class USkeletalMeshLODSettings : public UDataAsset
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLOD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, DisableBelowMinLodStripping, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bSupportLODStreaming, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_EGLJ, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumStreamedLODs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumOptionalLODs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0050);
		}

		// class USkeletalMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__SkeletalMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimplificationSettings, 0x0040);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_V5HO, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0060);
		}

		// class USkyAtmosphereComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SkyAtmosphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransformMode, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_IQYQ, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, BottomRadius, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, GroundAlbedo, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AtmosphereHeight, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MultiScatteringFactor, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScatteringScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScattering, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighExponentialDistribution, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScatteringScale, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScattering, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorptionScale, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorption, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAnisotropy, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieExponentialDistribution, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorptionScale, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorption, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherTentDistribution, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, SkyLuminanceFactor, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPespectiveViewDistanceScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, HeightFogContribution, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransmittanceMinLightElevationAngle, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_LOPP, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, bStaticLightingBuiltGUID, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_ZGKX, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyAtmosphereComponent, 0x02C0);
		}

		// class ASkyAtmosphere : public AInfo
		TEST_METHOD(Class__Engine__SkyAtmosphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASkyAtmosphere, SkyAtmosphereComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASkyAtmosphere, 0x0228);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_KFSE, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_2DE7, 0x023E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Contrast, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_NJVO, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapCache, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_PD6W, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_V5NZ, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0400);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, Brush, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00B0);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0028);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0080);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x03C8);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Modulation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x00B8);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0048);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_1YO7, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_6Y9P, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_NDWW, 0x0521);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, CookedQualityIndex, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_0VM8, 0x0529);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0538);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, Chain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_4JQ4, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0040);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_I79W, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0088);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_KXBO, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, Duration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0090);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, UnknownData_12C9, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0048);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0048);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_21GZ, 0x03F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x03F8);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0050);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0058);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0050);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_4XSL, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0070);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0058);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, bUseSmoothing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_QZDM, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, SmoothingInterpSpeed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_QJ59, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0058);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_TO42, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0190);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0058);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_LQF3, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0050);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0048);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0058);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0058);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0088);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_WUXU, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_BX49, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0070);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0060);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0048);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_PWEG, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0078);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, UnknownData_0FNS, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0058);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0050);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0050);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_2B5N, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0080);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_7KXM, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_WMBC, 0x0319);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0328);
		}

		// class USoundSubmixBase : public UObject
		TEST_METHOD(Class__Engine__SoundSubmixBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixBase, ChildSubmixes, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixBase, 0x0038);
		}

		// class USoundSubmixWithParentBase : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundSubmixWithParentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixWithParentBase, ParentSubmix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixWithParentBase, 0x0040);
		}

		// class USoundSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_CTK3, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OutputVolume, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_P6T6, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_KYBF, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0088);
		}

		// class USoundfieldSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundfieldSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEncodingFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEffectChain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettingsClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldSubmix, 0x0068);
		}

		// class UEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__EndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettings, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndpointSubmix, 0x0050);
		}

		// class USoundfieldEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundfieldEndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEndpointType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettingsClass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettingsClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEffectChain, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSubmix, 0x0070);
		}

		// class ASpectatorPawn : public ADefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpectatorPawn, 0x02A8);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_VVPU, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0158);
		}

		// class ASphereReflectionCapture : public AReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASphereReflectionCapture, DrawCaptureRadius, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASphereReflectionCapture, 0x0230);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, UnknownData_ZKX0, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x0280);
		}

		// class USplineMetadata : public UObject
		TEST_METHOD(Class__Engine__SplineMetadata)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMetadata, 0x0028);
		}

		// class ASplineMeshActor : public AActor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASplineMeshActor, SplineMeshComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASplineMeshActor, 0x0228);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_9SND, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x052D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_RRQK, 0x052E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_MNV6, 0x0534);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0540);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, InnerConeAngle, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, LightShaftConeAngle, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, UnknownData_R8DJ, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x0360);
		}

		// class UStaticMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_MBQP, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLOD, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_5T37, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_SQLI, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_SVYU, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x0138);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, UnknownData_GZXI, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, Tag, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0068);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_V0VN, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Texture, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_LYO3, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, EquirectProps, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_TYNB, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Shape, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Priority, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_W50X, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x02E0);
		}

		// class UStereoLayerShape : public UObject
		TEST_METHOD(Class__Engine__StereoLayerShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShape, 0x0028);
		}

		// class UStereoLayerShapeQuad : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeQuad)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeQuad, 0x0028);
		}

		// class UStereoLayerShapeCylinder : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, OverlayArc, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Height, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, UnknownData_NHPK, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCylinder, 0x0038);
		}

		// class UStereoLayerShapeCubemap : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCubemap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCubemap, 0x0028);
		}

		// class UStereoLayerShapeEquirect : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeEquirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftUVRect, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightUVRect, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightBias, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeEquirect, 0x0070);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0028);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_BMYE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0040);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, Settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, UnknownData_K4ZL, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x00B8);
		}

		// class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__SubsystemBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystemBlueprintLibrary, 0x0028);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_GBFM, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_W5YT, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0068);
		}

		// class UTimecodeProvider : public UObject
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, FrameDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, UnknownData_VFFO, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0030);
		}

		// class USystemTimeTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bGenerateFullFrame, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bUseHighPerformanceClock, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_KKN6, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0040);
		}

		// class ATargetPoint : public AActor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATargetPoint, 0x0220);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0070);
		}

		// class ATextRenderActor : public AActor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATextRenderActor, TextRender, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATextRenderActor, 0x0228);
		}

		// class UTextRenderComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Text, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_E61H, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_9JN4, 0x0459);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x0460);
		}

		// class UTexture2DArray : public UTexture
		TEST_METHOD(Class__Engine__Texture2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_I8XS, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DArray, 0x0110);
		}

		// class UTexture2DDynamic : public UTexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_PLMT, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_SDE9, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00D0);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, Brightness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x00F0);
		}

		// class UTextureMipDataProviderFactory : public UAssetUserData
		TEST_METHOD(Class__Engine__TextureMipDataProviderFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureMipDataProviderFactory, 0x0028);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, SizeX, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_JI5G, 0x00D6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00D8);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0028);
		}

		// class UTimelineComponent : public UActorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_87QA, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0150);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_BJ0A, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VariableName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, DirectionPropertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UpdateFunctionName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FinishedFunctionName, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x00B0);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_MKSS, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0038);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_8RG4, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_DDGK, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0058);
		}

		// class ATriggerBox : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerBox, 0x0228);
		}

		// class ATriggerCapsule : public ATriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATriggerCapsule, 0x0228);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0038);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B0);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_VBL5, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Guid, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_F5O8, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x0108);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_XB2Q, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, ApplicationScale, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_DHXG, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_PBLQ, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_U9BK, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x0268);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Intensity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0048);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, Texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_BQ4A, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_AX69, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0088);
		}

		// class UVectorFieldComponent : public UPrimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Intensity, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_5UPB, 0x0421);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0440);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, bAllowCPUAccess, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_ZU46, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, CPUData, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x0098);
		}

		// class AVectorFieldVolume : public AActor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVectorFieldVolume, VectorFieldComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVectorFieldVolume, 0x0228);
		}

		// class UVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0028);
		}

		// class ULightMapVirtualTexture : public UVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0028);
		}

		// class ULightMapVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapVirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, TypeToLayer, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture2D, 0x00F8);
		}

		// class UVirtualTexturePoolConfig : public UObject
		TEST_METHOD(Class__Engine__VirtualTexturePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, DefaultSizeInMegabyte, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, UnknownData_YZ15, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, Pools, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexturePoolConfig, 0x0040);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0028);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0028);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0028);
		}

		// class UVoiceChannel : public UChannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_Q94T, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0080);
		}

		// class UVOIPTalker : public UActorComponent
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, Settings, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_04KF, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x00E8);
		}

		// class UVOIPStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0028);
		}

		// class UVolumeTexture : public UTexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_3E7W, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0110);
		}

		// class AVolumetricLightmapDensityVolume : public AVolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AVolumetricLightmapDensityVolume, 0x0260);
		}

		// class AWindDirectionalSource : public AInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWindDirectionalSource, Component, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWindDirectionalSource, 0x0228);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Strength, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Speed, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Radius, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_4029, 0x0205);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0210);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_MGL5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_WK19, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0068);
		}

		// class UHierarchicalLODSetup : public UObject
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0060);
		}

		// class UBTNode : public UObject
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_Y8GB, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_6M3B, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0058);
		}

		// class UBTCompositeNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_651D, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_1DNL, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0090);
		}

		// class UBTAuxiliaryNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_DZL3, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0060);
		}

		// class UBTDecorator : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_NML0, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_QN8U, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0068);
		}

		// class UBTDecorator_BlackboardBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x0090);
		}

		// class UBTService : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_WNWF, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0070);
		}

		// class UBTService_BlackboardBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x0098);
		}

		// class UBTService_DefaultFocus : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_67XL, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00A0);
		}

		// class UAIDataProvider : public UObject
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0028);
		}

		// class UEnvQueryContext : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0028);
		}

		// class UEnvQueryNode : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_YUJS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0030);
		}

		// class UEnvQueryGenerator : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, ItemType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_6HZU, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0050);
		}

		// class UEnvQueryGenerator_ProjectedPoints : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0080);
		}

		// class UEnvQueryGenerator_Cone : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, Range, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_3COM, 0x0169);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0170);
		}

		// class UEnvQueryGenerator_SimpleGrid : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x00F8);
		}

		// class UBTTaskNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_293R, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0070);
		}

		// class UBTTask_BlackboardBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x0098);
		}

		// class UEnvQueryTest : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_8M18, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_UCMD, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_5QTL, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_AFJQ, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_9WLB, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_XVFC, 0x01F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x01F8);
		}

		// class UAITask : public UGameplayTask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0070);
		}

		// class AAIController : public AController
		TEST_METHOD(Class__AIModule__AIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_50FD, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_897B, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PathFollowingComponent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, BrainComponent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, PerceptionComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ActionsComp, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, Blackboard, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, CachedGameplayTasksComponent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, DefaultNavigationFilterClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, ReceiveMoveCompleted, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController, UnknownData_940D, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController, 0x0328);
		}

		// class UPathFollowingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_9DLP, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_N3BN, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_TDLW, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x0258);
		}

		// class UAIDataProvider_QueryParams : public UAIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_0MRO, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0040);
		}

		// class UBTDecorator_CheckGameplayTagsOnActor : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_67CM, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00C8);
		}

		// class UEnvQueryItemType : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_HZD3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0030);
		}

		// class UEnvQueryItemType_VectorBase : public UEnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0030);
		}

		// class AEQSTestingPawn : public ACharacter
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_ADCX, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryTemplate, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryParams, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryConfig, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, TimeLimitPerStep, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, StepToDebugDraw, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, HighlightMode, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_PFR6, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_K5X4, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, QueryingMode, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_U1T1, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, NavAgentProperties, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::AEQSTestingPawn, UnknownData_PTNW, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEQSTestingPawn, 0x0550);
		}

		// class UAIAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnSuccess, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_RTEC, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0068);
		}

		// class UAIBlueprintHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0028);
		}

		// class UAIDataProvider_Random : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, Max, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_2N6J, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0050);
		}

		// class UAIHotSpotManager : public UObject
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0028);
		}

		// class UAIPerceptionComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_9RSE, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_YE4A, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x0180);
		}

		// class UAIPerceptionListenerInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0028);
		}

		// class UAIPerceptionStimuliSourceComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_2FHU, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x00C8);
		}

		// class UAISubsystem : public UObject
		TEST_METHOD(Class__AIModule__AISubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, UnknownData_4VDA, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, AISystem, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISubsystem, 0x0038);
		}

		// class UAIPerceptionSystem : public UAISubsystem
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_JI1P, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_GMON, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0138);
		}

		// class UAIResourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0028);
		}

		// class UAIResource_Movement : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0038);
		}

		// class UAIResource_Logic : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0038);
		}

		// class UAISense : public UObject
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, NotifyType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_6SO8, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_NINC, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_JI62, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0080);
		}

		// class UAISense_Blueprint : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x00A8);
		}

		// class UAISense_Damage : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x0090);
		}

		// class UAISense_Hearing : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_VQDX, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x00E8);
		}

		// class UAISense_Prediction : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x0090);
		}

		// class UAISense_Sight : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_ZKX0, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_CLSY, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_NEAD, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0170);
		}

		// class UAISense_Team : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x0090);
		}

		// class UAISense_Touch : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x0090);
		}

		// class UAISenseBlueprintListener : public UUserDefinedStruct
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x0108);
		}

		// class UAISenseConfig : public UObject
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_K90B, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0048);
		}

		// class UAISenseConfig_Blueprint : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0050);
		}

		// class UAISenseConfig_Damage : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0050);
		}

		// class UAISenseConfig_Hearing : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_4PSH, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0060);
		}

		// class UAISenseConfig_Prediction : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0048);
		}

		// class UAISenseConfig_Sight : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_PCRJ, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0068);
		}

		// class UAISenseConfig_Team : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0048);
		}

		// class UAISenseConfig_Touch : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0048);
		}

		// class UAISenseEvent : public UObject
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0028);
		}

		// class UAISenseEvent_Damage : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0058);
		}

		// class UAISenseEvent_Hearing : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, Event, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0058);
		}

		// class UAISightTargetInterface : public UInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0028);
		}

		// class UAISystem : public UAISystemBase
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AcceptanceRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bForgetStaleActors, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_8PK9, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_EEPG, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0130);
		}

		// class UAITask_LockLogic : public UAITask
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0070);
		}

		// class UAITask_MoveTo : public UAITask
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_VQPD, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0110);
		}

		// class UAITask_RunEQS : public UAITask
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_VQ38, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x00E8);
		}

		// class UBehaviorTree : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_V3VV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_NM4M, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0068);
		}

		// class UBrainComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_MG4Z, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_8ZCG, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0110);
		}

		// class UBehaviorTreeComponent : public UBrainComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_UUYR, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_KTS9, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, DefaultBehaviorTreeAsset, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x0270);
		}

		// class UBehaviorTreeManager : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_XOYS, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0050);
		}

		// class UBehaviorTreeTypes : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0028);
		}

		// class UBlackboardAssetProvider : public UInterface
		TEST_METHOD(Class__AIModule__BlackboardAssetProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardAssetProvider, 0x0028);
		}

		// class UBlackboardComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, DefaultBlackboardAsset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_VLNL, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_S33A, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01B0);
		}

		// class UBlackboardData : public UDataAsset
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_X1S6, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0050);
		}

		// class UBlackboardKeyType : public UObject
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_OJSB, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0030);
		}

		// class UBlackboardKeyType_Bool : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0030);
		}

		// class UBlackboardKeyType_Class : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0038);
		}

		// class UBlackboardKeyType_Enum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_2LXC, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0050);
		}

		// class UBlackboardKeyType_Float : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0030);
		}

		// class UBlackboardKeyType_Int : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0030);
		}

		// class UBlackboardKeyType_Name : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0030);
		}

		// class UBlackboardKeyType_NativeEnum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0048);
		}

		// class UBlackboardKeyType_Object : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0038);
		}

		// class UBlackboardKeyType_Rotator : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0030);
		}

		// class UBlackboardKeyType_String : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0040);
		}

		// class UBlackboardKeyType_Vector : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0030);
		}

		// class UBTComposite_Selector : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0090);
		}

		// class UBTComposite_Sequence : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0090);
		}

		// class UBTComposite_SimpleParallel : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_LV8Y, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x0098);
		}

		// class UBTDecorator_Blackboard : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_35Z7, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00C0);
		}

		// class UBTDecorator_BlueprintBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_RMDW, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_M1X1, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A0);
		}

		// class UBTDecorator_CompareBBEntries : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_0X8S, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00C0);
		}

		// class UBTDecorator_ConditionalLoop : public UBTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00C0);
		}

		// class UBTDecorator_ConeCheck : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_GXUO, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_5X0K, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x00F0);
		}

		// class UBTDecorator_Cooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_YLA7, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0070);
		}

		// class UBTDecorator_DoesPathExist : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_5FHX, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_CYAL, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, FilterClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00C8);
		}

		// class UBTDecorator_ForceSuccess : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0068);
		}

		// class UBTDecorator_IsAtLocation : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_X6TX, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_V1KE, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_NEEK, 0x00D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00D8);
		}

		// class UBTDecorator_IsBBEntryOfClass : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x0098);
		}

		// class UBTDecorator_KeepInCone : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_JCRF, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_KLC4, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00C8);
		}

		// class UBTDecorator_Loop : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_W38A, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_006V, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0078);
		}

		// class UBTDecorator_ReachedMoveGoal : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0068);
		}

		// class UBTDecorator_SetTagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_QLQJ, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0078);
		}

		// class UBTDecorator_TagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_D72E, 0x0076);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0078);
		}

		// class UBTDecorator_TimeLimit : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_MV7T, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0070);
		}

		// class UBTFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0028);
		}

		// class UBTService_BlueprintBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_X5JI, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_4HCN, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x0098);
		}

		// class UBTService_RunEQS : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_DD8O, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x00F0);
		}

		// class UBTTask_BlueprintBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, TickInterval, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_80W4, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_LNLU, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00A8);
		}

		// class UBTTask_FinishWithResult : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_FinishWithResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, Result, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, UnknownData_B7JX, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FinishWithResult, 0x0078);
		}

		// class UBTTask_GameplayTaskBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_755L, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0078);
		}

		// class UBTTask_MakeNoise : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_QO8P, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0078);
		}

		// class UBTTask_MoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_99HY, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, FilterClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_YY7U, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00B0);
		}

		// class UBTTask_MoveDirectlyToward : public UBTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_0JD7, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00B8);
		}

		// class UBTTask_PawnActionBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0070);
		}

		// class UBTTask_PlayAnimation : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_IO6R, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_6RMV, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00B0);
		}

		// class UBTTask_PlaySound : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0078);
		}

		// class UBTTask_PushPawnAction : public UBTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, Action, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0078);
		}

		// class UBTTask_RotateToFaceBBEntry : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_X3CB, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00A0);
		}

		// class UBTTask_RunBehavior : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0078);
		}

		// class UBTTask_RunBehaviorDynamic : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0088);
		}

		// class UBTTask_RunEQSQuery : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_SSVY, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_FSP8, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_S8GX, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0150);
		}

		// class UBTTask_SetTagCooldown : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_P15F, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0080);
		}

		// class UBTTask_Wait : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0078);
		}

		// class UBTTask_WaitBlackboardTime : public UBTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00A0);
		}

		// class UCrowdAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0028);
		}

		// class UCrowdFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_FS7Y, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CharacterMovement, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_18DB, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x0298);
		}

		// class UCrowdManager : public UCrowdManagerBase
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_XVB4, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F0);
		}

		// class ADetourCrowdAIController : public AAIController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADetourCrowdAIController, 0x0328);
		}

		// class UEnvQuery : public UDataAsset
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0048);
		}

		// class UEnvQueryContext_BlueprintBase : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_W6BG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0030);
		}

		// class UEnvQueryContext_Item : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0028);
		}

		// class UEnvQueryContext_Querier : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0028);
		}

		// class UEnvQueryDebugHelpers : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0028);
		}

		// class UEnvQueryGenerator_ActorsOfClass : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00D0);
		}

		// class UEnvQueryGenerator_BlueprintBase : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_3FPK, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0080);
		}

		// class UEnvQueryGenerator_Composite : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_IJBE, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0070);
		}

		// class UEnvQueryGenerator_CurrentLocation : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0058);
		}

		// class UEnvQueryGenerator_Donut : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_WGQF, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, Center, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_6NJU, 0x01C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x01D0);
		}

		// class UEnvQueryGenerator_OnCircle : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleRadius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_OTFY, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_87L6, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_6MBS, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_ZY5B, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x0210);
		}

		// class UEnvQueryGenerator_PathingGrid : public UEnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0170);
		}

		// class UEnvQueryInstanceBlueprintWrapper : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_6Y5W, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_S23J, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, ItemType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_OP5R, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0078);
		}

		// class UEnvQueryItemType_ActorBase : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0030);
		}

		// class UEnvQueryItemType_Actor : public UEnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0030);
		}

		// class UEnvQueryItemType_Direction : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0030);
		}

		// class UEnvQueryItemType_Point : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0030);
		}

		// class UEnvQueryManager : public UAISubsystem
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_XR10, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_77J6, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_4SN5, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0140);
		}

		// class UEnvQueryOption : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0040);
		}

		// class UEnvQueryTest_Distance : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_ITO7, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x0208);
		}

		// class UEnvQueryTest_Dot : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_KOIH, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0240);
		}

		// class UEnvQueryTest_GameplayTags : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_SXBW, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x0268);
		}

		// class UEnvQueryTest_Overlap : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x0218);
		}

		// class UEnvQueryTest_Pathfinding : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_06JT, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, FilterClass, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x0280);
		}

		// class UEnvQueryTest_PathfindingBatch : public UEnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x02B8);
		}

		// class UEnvQueryTest_Project : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x0228);
		}

		// class UEnvQueryTest_Random : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x01F8);
		}

		// class UEnvQueryTest_Trace : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x02D8);
		}

		// class UEnvQueryTest_Volume : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Volume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeContext, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeClass, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, UnknownData_B40A, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Volume, 0x0210);
		}

		// class UEnvQueryTypes : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0028);
		}

		// class UEQSQueryResultSourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0028);
		}

		// class UEQSRenderingComponent : public UPrimitiveComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_O25I, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0450);
		}

		// class UGenericTeamAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0028);
		}

		// class AGridPathAIController : public AAIController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AGridPathAIController, 0x0328);
		}

		// class UGridPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_6FD9, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x0288);
		}

		// class UNavFilter_AIControllerDefault : public UNavigationQueryFilter
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0048);
		}

		// class ANavLinkProxy : public AActor
		TEST_METHOD(Class__AIModule__NavLinkProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_P829, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, PointLinks, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SegmentLinks, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, SmartLinkComp, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, bSmartLinkIsRelevant, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, UnknownData_P7B5, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANavLinkProxy, OnSmartLinkReached, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANavLinkProxy, 0x0270);
		}

		// class UNavLocalGridManager : public UObject
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_A8G1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0058);
		}

		// class UPathFollowingManager : public UObject
		TEST_METHOD(Class__AIModule__PathFollowingManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingManager, 0x0028);
		}

		// class UPawnAction : public UObject
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, Instigator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_XZZ9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_QF9B, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x0098);
		}

		// class UPawnAction_BlueprintBase : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x0098);
		}

		// class UPawnAction_Move : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalActor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, FilterClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_XZ49, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00E8);
		}

		// class UPawnAction_Repeat : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_2MQP, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00B8);
		}

		// class UPawnAction_Sequence : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_YGBF, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_KJ2T, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00C0);
		}

		// class UPawnAction_Wait : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_5BG3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00A8);
		}

		// class UPawnActionsComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_5OSD, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x00E8);
		}

		// class UPawnSensingComponent : public UActorComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_X9NY, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x00F8);
		}

		// class UVisualLoggerExtension : public UObject
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0028);
		}

		// class ATwAkAmbientVolume : public AVolume
		TEST_METHOD(Class__TwAudio__TwAkAmbientVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAkAmbientVolume, AkEvents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAkAmbientVolume, MinInterval, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAkAmbientVolume, MaxInterval, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAkAmbientVolume, TimerHandle, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATwAkAmbientVolume, 0x0278);
		}

		// class ATwAkEmitterArrayActor : public AActor
		TEST_METHOD(Class__TwAudio__TwAkEmitterArrayActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAkEmitterArrayActor, UnknownData_C510, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATwAkEmitterArrayActor, 0x0228);
		}

		// class UTwAkEmitterArrayComponent : public UActorComponent
		TEST_METHOD(Class__TwAudio__TwAkEmitterArrayComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkEmitterArrayComponent, VoiceGroup, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkEmitterArrayComponent, NumberOfVoices, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkEmitterArrayComponent, ActiveVoiceCount, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkEmitterArrayComponent, UpdateRateSeconds, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkEmitterArrayComponent, UnknownData_FCMZ, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkEmitterArrayComponent, EventOnStartup, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkEmitterArrayComponent, IsMovingTolerance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkEmitterArrayComponent, UnknownData_E2HC, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkEmitterArrayComponent, VoiceEmitterActors, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkEmitterArrayComponent, VoiceEnabled, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkEmitterArrayComponent, UnknownData_QVH4, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAkEmitterArrayComponent, 0x0130);
		}

		// class ATwAkReverbVolume : public AVolume
		TEST_METHOD(Class__TwAudio__TwAkReverbVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAkReverbVolume, LateReverbComponent, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATwAkReverbVolume, 0x0260);
		}

		// class ATwRTPCTrigger : public ATriggerSphere
		TEST_METHOD(Class__TwAudio__TwRTPCTrigger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwRTPCTrigger, RTPCName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwRTPCTrigger, MinValue, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwRTPCTrigger, MaxValue, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwRTPCTrigger, InterpolationTimeMs, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwRTPCTrigger, PlayerCollisionChannel, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwRTPCTrigger, UnknownData_7AQO, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwRTPCTrigger, OverlappingPlayers, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwRTPCTrigger, SphereRadius, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwRTPCTrigger, UnknownData_6GEO, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATwRTPCTrigger, 0x0258);
		}

		// class UTwAkSplineProximityEffectsComponent : public UAkLateReverbComponent
		TEST_METHOD(Class__TwAudio__TwAkSplineProximityEffectsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkSplineProximityEffectsComponent, StateGroupName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkSplineProximityEffectsComponent, StateName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkSplineProximityEffectsComponent, ActivationDistance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkSplineProximityEffectsComponent, UnknownData_9GFI, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkSplineProximityEffectsComponent, EventOnEntry, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkSplineProximityEffectsComponent, EventOnExit, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkSplineProximityEffectsComponent, PlayEventOn, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkSplineProximityEffectsComponent, CollideWithPlayerCapsules, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAkSplineProximityEffectsComponent, UnknownData_H0M2, 0x0261);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAkSplineProximityEffectsComponent, 0x0280);
		}

		// class ATwAmbienceMap : public AActor
		TEST_METHOD(Class__TwAudio__TwAmbienceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, DefaultAudioEvent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, RedAudioEvent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, GreenAudioEvent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, BlueAudioEvent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, FireDefaultOnceOnEntry, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, FireRedOnceOnEntry, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, FireGreenOnceOnEntry, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, FireBlueOnceOnEntry, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, UpdateRateSeconds, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, SecondsToMoveToNewPosition, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, SpiralCheckScales, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, DrawHeatmapVisualization, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, UnknownData_1M19, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, AmbienceHeatmap, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, WorldBoundsTag, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, VisualizerMaterial, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, DebugOverlayDecal, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, DebugDecalMID, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, UnknownData_6DSN, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, Emitters, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwAmbienceMap, UnknownData_QOCY, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATwAmbienceMap, 0x03F0);
		}

		// class UTwAnimNotify_PostAkEvent : public UAnimNotify
		TEST_METHOD(Class__TwAudio__TwAnimNotify_PostAkEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimNotify_PostAkEvent, AkEvent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimNotify_PostAkEvent, UnknownData_OK9I, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimNotify_PostAkEvent, AttachName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimNotify_PostAkEvent, UnknownData_6DPD, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimNotify_PostAkEvent, AINoiseStrength, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimNotify_PostAkEvent, AINoiseRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimNotify_PostAkEvent, AINoiseType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwAnimNotify_PostAkEvent, UnknownData_3DMK, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwAnimNotify_PostAkEvent, 0x0060);
		}

		// class UTwSoundShapeLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TwAudio__TwSoundShapeLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwSoundShapeLibrary, 0x0028);
		}

		// class ATwSplineEmitterBase : public AActor
		TEST_METHOD(Class__TwAudio__TwSplineEmitterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwSplineEmitterBase, VoiceGroup, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwSplineEmitterBase, NumberOfVoices, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwSplineEmitterBase, UpdateRateSeconds, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwSplineEmitterBase, EventOnStartup, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwSplineEmitterBase, UnknownData_S816, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwSplineEmitterBase, VoiceEmitterActors, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATwSplineEmitterBase, 0x0260);
		}

		// class UAnselFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Ansel__AnselFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnselFunctionLibrary, 0x0028);
		}

		// class UDatasmithObjectTemplate : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithObjectTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithObjectTemplate, UnknownData_AHR3, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithObjectTemplate, 0x0030);
		}

		// class UDatasmithActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Layers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Tags, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithActorTemplate, 0x00D0);
		}

		// class UDatasmithAdditionalData : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithAdditionalData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAdditionalData, 0x0028);
		}

		// class ADatasmithAreaLightActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, LightShape, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_35BT, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Dimensions, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Intensity, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IntensityUnits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_UZKB, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Color, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Temperature, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESTexture, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, bUseIESBrightness, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, UnknownData_9PBB, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, IESBrightnessScale, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, Rotation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceRadius, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SourceLength, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, AttenuationRadius, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightInnerAngle, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithAreaLightActor, SpotlightOuterAngle, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithAreaLightActor, 0x0278);
		}

		// class UDatasmithAreaLightActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightShape, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_SAL3, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Dimensions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Color, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Intensity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IntensityUnits, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_UBXP, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Temperature, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, bUseIESBrightness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_BXA2, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESBrightnessScale, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Rotation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceRadius, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceLength, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, AttenuationRadius, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActorTemplate, 0x00A0);
		}

		// class UDatasmithAssetImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetImportData, 0x0028);
		}

		// class UDatasmithStaticMeshImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshImportData, 0x0028);
		}

		// class UDatasmithStaticMeshCADImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshCADImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshCADImportData, 0x0028);
		}

		// class UDatasmithSceneImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneImportData, 0x0028);
		}

		// class UDatasmithTranslatedSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithTranslatedSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithTranslatedSceneImportData, 0x0028);
		}

		// class UDatasmithCADImportSceneData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithCADImportSceneData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCADImportSceneData, 0x0028);
		}

		// class UDatasmithMDLSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithMDLSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMDLSceneImportData, 0x0028);
		}

		// class UDatasmithGLTFSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithGLTFSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Generator, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Version, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, UnknownData_HTWK, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Author, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, License, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Source, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithGLTFSceneImportData, 0x0070);
		}

		// class UDatasmithStaticMeshGLTFImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshGLTFImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshGLTFImportData, SourceMeshName, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshGLTFImportData, 0x0038);
		}

		// class UDatasmithFBXSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithFBXSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bGenerateLightmapUVs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_Q8F0, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, TexturesDir, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, IntermediateSerialization, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bColorizeMaterials, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_26FB, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithFBXSceneImportData, 0x0048);
		}

		// class UDatasmithDeltaGenAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenAssetImportData, 0x0028);
		}

		// class UDatasmithDeltaGenSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bRemoveInvisibleNodes, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bSimplifyNodeHierarchy, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportVar, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_B930, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, VarPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportPos, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_EBY3, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, PosPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportTml, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_NOD9, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, TmlPath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenSceneImportData, 0x0090);
		}

		// class UDatasmithVREDAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDAssetImportData, 0x0028);
		}

		// class UDatasmithVREDSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bMergeNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bOptimizeDuplicatedNodes, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportMats, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_6YIZ, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, MatsPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportVar, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bCleanVar, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_NF4G, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, VarPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportLightInfo, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_4JLA, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, LightInfoPath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportClipInfo, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_C9UB, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, ClipInfoPath, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDSceneImportData, 0x00A8);
		}

		// class UDatasmithIFCSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithIFCSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithIFCSceneImportData, 0x0028);
		}

		// class UDatasmithStaticMeshIFCImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshIFCImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshIFCImportData, SourceGlobalId, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshIFCImportData, 0x0038);
		}

		// class UDatasmithAssetUserData : public UAssetUserData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAssetUserData, MetaData, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetUserData, 0x0078);
		}

		// class UDatasmithCineCameraActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraActorTemplate, LookatTrackingSettings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraActorTemplate, 0x0060);
		}

		// class UDatasmithCineCameraComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FilmbackSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, LensSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FocusSettings, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentFocalLength, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentAperture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, UnknownData_YLX9, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, PostProcessSettings, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraComponentTemplate, 0x0090);
		}

		// class UDatasmithContentBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DatasmithContent__DatasmithContentBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithContentBlueprintLibrary, 0x0028);
		}

		// class UDatasmithCustomActionBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithCustomActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCustomActionBase, UnknownData_841G, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCustomActionBase, 0x0030);
		}

		// class ADatasmithImportedSequencesActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithImportedSequencesActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithImportedSequencesActor, ImportedSequences, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithImportedSequencesActor, 0x0230);
		}

		// class UDatasmithOptionsBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithOptionsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithOptionsBase, 0x0028);
		}

		// class UDatasmithCommonTessellationOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithCommonTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCommonTessellationOptions, Options, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCommonTessellationOptions, 0x0038);
		}

		// class UDatasmithImportOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, SearchPackagePolicy, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialConflictPolicy, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TextureConflictPolicy, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, StaticMeshActorImportPolicy, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, LightImportPolicy, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, CameraImportPolicy, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, OtherActorImportPolicy, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialQuality, 0x002F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_8HO2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, BaseOptions, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, ReimportOptions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_QWO1, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, Filename, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, FilePath, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_ZPMW, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportOptions, 0x0078);
		}

		// class UDatasmithLandscapeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLandscapeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, LandscapeMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, StaticLightingLOD, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, UnknownData_B9G2, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLandscapeTemplate, 0x0040);
		}

		// class UDatasmithLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_Y2YF, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_RXSC, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Intensity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Temperature, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESBrightnessScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_FQEV, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightFunctionMaterial, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESTexture, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLightComponentTemplate, 0x0068);
		}

		// class UDatasmithMaterialInstanceTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithMaterialInstanceTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ParentMaterial, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ScalarParameterValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, VectorParameterValues, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, TextureParameterValues, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, StaticParameters, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMaterialInstanceTemplate, 0x0198);
		}

		// class UDatasmithPointLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPointLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, IntensityUnits, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, UnknownData_7XRR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceLength, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, AttenuationRadius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPointLightComponentTemplate, 0x0040);
		}

		// class UDatasmithPostProcessVolumeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPostProcessVolumeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, Settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, UnknownData_44HW, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPostProcessVolumeTemplate, 0x0080);
		}

		// class UDatasmithScene : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithScene, UnknownData_5SUQ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithScene, 0x0030);
		}

		// class ADatasmithSceneActor : public AActor
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, Scene, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADatasmithSceneActor, RelatedActors, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADatasmithSceneActor, 0x0278);
		}

		// class UDatasmithSceneComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, RelativeTransform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Mobility, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_HFSL, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, AttachParent, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Tags, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneComponentTemplate, 0x00E0);
		}

		// class UDatasmithSkyLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSkyLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, SourceType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, UnknownData_S34C, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, CubemapResolution, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, Cubemap, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSkyLightComponentTemplate, 0x0040);
		}

		// class UDatasmithSpotLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSpotLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, InnerConeAngle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, OuterConeAngle, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSpotLightComponentTemplate, 0x0038);
		}

		// class UDatasmithStaticMeshComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, StaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, OverrideMaterials, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshComponentTemplate, 0x0048);
		}

		// class UDatasmithStaticMeshTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, SectionInfoMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapCoordinateIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapResolution, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, BuildSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, StaticMaterials, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshTemplate, 0x00A8);
		}

		// class ULevelVariantSets : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, DirectorClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, VariantSets, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, UnknownData_IIVY, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSets, 0x0090);
		}

		// class ALevelVariantSetsActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALevelVariantSetsActor, LevelVariantSets, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALevelVariantSetsActor, 0x0238);
		}

		// class ULevelVariantSetsFunctionDirector : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsFunctionDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSetsFunctionDirector, UnknownData_KYDS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSetsFunctionDirector, 0x0040);
		}

		// class UPropertyValue : public UObject
		TEST_METHOD(Class__VariantManagerContent__PropertyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_M57T, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, Properties, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertyIndices, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, CapturedPropSegments, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, FullDisplayString, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterParameterDefaults, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bHasRecordedData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_5U70, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, LeafPropertyClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_8K5E, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, ValueBytes, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropCategory, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_4OEU, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValue, 0x01B8);
		}

		// class UPropertyValueTransform : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueTransform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueTransform, 0x01B8);
		}

		// class UPropertyValueVisibility : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueVisibility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueVisibility, 0x01B8);
		}

		// class UPropertyValueColor : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueColor, 0x01B8);
		}

		// class UPropertyValueMaterial : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueMaterial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueMaterial, 0x01B8);
		}

		// class UPropertyValueOption : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueOption)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueOption, 0x01B8);
		}

		// class UPropertyValueSoftObject : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueSoftObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueSoftObject, 0x01B8);
		}

		// class ASwitchActor : public AActor
		TEST_METHOD(Class__VariantManagerContent__SwitchActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_HEDK, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, SceneComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, LastSelectedOption, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ASwitchActor, UnknownData_UC45, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASwitchActor, 0x0248);
		}

		// class UVariant : public UObject
		TEST_METHOD(Class__VariantManagerContent__Variant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, UnknownData_29YR, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, ObjectBindings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Thumbnail, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariant, 0x0070);
		}

		// class UVariantObjectBinding : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantObjectBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CachedActorLabel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, ObjectPtr, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, LazyObjectPtr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, UnknownData_7AU2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CapturedProperties, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, FunctionCallers, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantObjectBinding, 0x0090);
		}

		// class UVariantSet : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, DisplayText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_UI9Y, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, bExpanded, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_SSZZ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Variants, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantSet, 0x0070);
		}

		// class UMovieSceneNiagaraTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraTrack, Sections, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraTrack, 0x0068);
		}

		// class UMovieSceneNiagaraParameterTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraParameterTrack, Parameter, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraBoolParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraBoolParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraBoolParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraColorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraColorParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraColorParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraFloatParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraFloatParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraFloatParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraIntegerParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraIntegerParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraIntegerParameterTrack, 0x0090);
		}

		// class UMovieSceneNiagaraSystemSpawnSection : public UMovieSceneSection
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionStartBehavior, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_QWD2, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEvaluateBehavior, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_P574, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEndBehavior, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_6IPN, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, AgeUpdateMode, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_VPO4, 0x00ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemSpawnSection, 0x00F0);
		}

		// class UMovieSceneNiagaraSystemTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemTrack, 0x0068);
		}

		// class UMovieSceneNiagaraVectorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraVectorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, ChannelsUsed, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_ZEL4, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraVectorParameterTrack, 0x0098);
		}

		// class ANiagaraActor : public AActor
		TEST_METHOD(Class__Niagara__NiagaraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, NiagaraComponent, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraActor, UnknownData_Q6ES, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraActor, 0x0230);
		}

		// class UNiagaraComponent : public UFXSystemComponent
		TEST_METHOD(Class__Niagara__NiagaraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, Asset, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, TickBehavior, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_MOTN, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OverrideParameters, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_VNLB, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_N02A, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, MaxTimeBeforeForceUpdateTransform, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_5Y9M, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OnSystemFinished, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachParent, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachSocketName, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachLocationRule, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachRotationRule, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachScaleRule, 0x0582);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_WYTA, 0x0583);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponent, 0x05C0);
		}

		// class UNiagaraComponentPool : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, WorldParticleSystemPools, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, UnknownData_HFMN, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentPool, 0x0080);
		}

		// class UNiagaraConvertInPlaceUtilityBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraConvertInPlaceUtilityBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraConvertInPlaceUtilityBase, 0x0028);
		}

		// class UNiagaraDataInterface : public UNiagaraDataInterfaceBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface, UnknownData_J92Q, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface, 0x0030);
		}

		// class UNiagaraDataInterfaceAudioSubmix : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSubmix, Submix, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSubmix, 0x0038);
		}

		// class UNiagaraDataInterfaceAudioOscilloscope : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioOscilloscope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Submix, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Resolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, ScopeInMilliseconds, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioOscilloscope, 0x0040);
		}

		// class UNiagaraDataInterfaceAudioSpectrum : public UNiagaraDataInterfaceAudioSubmix
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSpectrum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, Resolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MinimumFrequency, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MaximumFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, NoiseFloorDb, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSpectrum, 0x0048);
		}

		// class UNiagaraDataInterfaceCamera : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, PlayerControllerIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, UnknownData_DK30, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCamera, 0x0038);
		}

		// class UNiagaraDataInterfaceCollisionQuery : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCollisionQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCollisionQuery, UnknownData_EM53, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCollisionQuery, 0x0040);
		}

		// class UNiagaraDataInterfaceCurveBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ShaderLUT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMinTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMaxTime, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTInvTimeRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTNumSamplesMinusOne, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_R6LI, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurveBase, 0x0058);
		}

		// class UNiagaraDataInterfaceColorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceColorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, RedCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, GreenCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, BlueCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, AlphaCurve, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceColorCurve, 0x0258);
		}

		// class UNiagaraDataInterfaceCurlNoise : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurlNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, Seed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, UnknownData_F6XG, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurlNoise, 0x0040);
		}

		// class UNiagaraDataInterfaceCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurve, Curve, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurve, 0x00D8);
		}

		// class UNiagaraParticleCallbackHandler : public UInterface
		TEST_METHOD(Class__Niagara__NiagaraParticleCallbackHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParticleCallbackHandler, 0x0028);
		}

		// class UNiagaraDataInterfaceExport : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, CallbackHandlerParameter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceExport, 0x0058);
		}

		// class UNiagaraDataInterfaceRWBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRWBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, OutputShaderStages, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, IterationShaderStages, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRWBase, 0x00D0);
		}

		// class UNiagaraDataInterfaceGrid2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsY, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsMaxAxis, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumAttributes, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, SetGridFromMaxAxis, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_99IA, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, WorldBBoxSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_033B, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2D, 0x00F0);
		}

		// class UNiagaraDataInterfaceGrid2DCollection : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, UnknownData_VCTC, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollection, 0x0140);
		}

		// class UNiagaraDataInterfaceGrid3D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumVoxels, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, VoxelSize, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, SetGridFromVoxelSize, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_0S0J, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, WorldBBoxSize, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3D, 0x00F0);
		}

		// class UNiagaraDataInterfaceNeighborGrid3D : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceNeighborGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, MaxNeighborsPerVoxel, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, UnknownData_E3CA, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceNeighborGrid3D, 0x00F8);
		}

		// class UNiagaraDataInterfaceOcclusion : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceOcclusion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceOcclusion, 0x0030);
		}

		// class UNiagaraDataInterfaceParticleRead : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceParticleRead)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceParticleRead, EmitterName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceParticleRead, 0x0040);
		}

		// class UNiagaraDataInterfaceSimpleCounter : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSimpleCounter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSimpleCounter, 0x0030);
		}

		// class UNiagaraDataInterfaceSkeletalMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, Source, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, MeshUserParameter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceComponent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SkinningMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_JPRK, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SamplingRegions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, WholeMeshLOD, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_RGX9, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredBones, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredSockets, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, ExcludeBoneName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_CH8N, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSkeletalMesh, 0x00B8);
		}

		// class UNiagaraDataInterfaceSpline : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSpline, Source, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSpline, 0x0038);
		}

		// class UNiagaraDataInterfaceStaticMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, DefaultMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, Source, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceComponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SectionFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_GH0E, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceStaticMesh, 0x0060);
		}

		// class UNiagaraDataInterfaceTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceTexture, Texture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceTexture, 0x0038);
		}

		// class UNiagaraDataInterfaceVector2DCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector2DCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, XCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, YCurve, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector2DCurve, 0x0158);
		}

		// class UNiagaraDataInterfaceVector4Curve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector4Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, XCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, YCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, ZCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, WCurve, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector4Curve, 0x0258);
		}

		// class UNiagaraDataInterfaceVectorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, XCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, YCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, ZCurve, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorCurve, 0x01D8);
		}

		// class UNiagaraDataInterfaceVectorField : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, Field, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileY, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileZ, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, UnknownData_D5DX, 0x003B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorField, 0x0040);
		}

		// class UNiagaraDataInterfaceVolumeTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVolumeTexture, Texture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVolumeTexture, 0x0038);
		}

		// class UNiagaraEditorDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEditorDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEditorDataBase, 0x0028);
		}

		// class UNiagaraEffectType : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEffectType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UpdateFrequency, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_LJ9H, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, CullReaction, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_Z7Q7, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, DetailLevelScalabilitySettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SystemScalabilitySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, EmitterScalabilitySettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_RG7K, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEffectType, 0x0100);
		}

		// class UNiagaraEmitter : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bLocalSpace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bDeterminism, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_K57R, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RandomSeed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, AllocationMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_JZNR, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, PreAllocationCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UpdateScriptProps, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnScriptProps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EmitterSpawnScriptProps, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EmitterUpdateScriptProps, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimTarget, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_ZJZK, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, FixedBounds, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MinDetailLevel, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDetailLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GlobalSpawnCountScaleOverrides, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_N934, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, Platforms, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, ScalabilityOverrides, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_XARC, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDeltaTimePerTick, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, DefaultShaderStageIndex, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxUpdateIterations, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnStages, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_6EGS, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UniqueEmitterName, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RendererProperties, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EventHandlerScriptProps, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimulationStages, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GPUComputeScript, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SharedEventGeneratorIds, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_4FRG, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEmitter, 0x02B0);
		}

		// class UNiagaraEventReceiverEmitterAction : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction, 0x0028);
		}

		// class UNiagaraEventReceiverEmitterAction_SpawnParticles : public UNiagaraEventReceiverEmitterAction
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction_SpawnParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, NumParticles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, UnknownData_455J, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, 0x0030);
		}

		// class UNiagaraFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraFunctionLibrary, 0x0028);
		}

		// class UNiagaraRendererProperties : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, SortOrderHint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bIsEnabled, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bMotionBlurEnabled, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, UnknownData_BP2E, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRendererProperties, 0x0050);
		}

		// class UNiagaraLightRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraLightRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_15N0, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorAdd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_79EX, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightRenderingEnabledBinding, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightExponentBinding, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, PositionBinding, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorBinding, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusBinding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, VolumetricScatteringBinding, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraLightRendererProperties, 0x0338);
		}

		// class UNiagaraMeshRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraMeshRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ParticleMesh, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SortMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_YX9F, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_YOWD, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, OverrideMaterials, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_IGX4, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, FacingMode, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_OPKC, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_R1JH, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxis, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxisSpace, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_X3BQ, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PositionBinding, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ColorBinding, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, VelocityBinding, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MeshOrientationBinding, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ScaleBinding, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageIndexBinding, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterialBinding, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial1Binding, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial2Binding, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial3Binding, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaterialRandomBinding, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CustomSortingBinding, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, NormalizedAgeBinding, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CameraOffsetBinding, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMeshRendererProperties, 0x0728);
		}

		// class UNiagaraParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, Collection, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, OverridenParameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, ParameterStorage, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollectionInstance, 0x00F8);
		}

		// class UNiagaraParameterCollection : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Namespace, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Parameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, DefaultInstance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, CompileId, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollection, 0x0058);
		}

		// class UNiagaraPrecompileContainer : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPrecompileContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, Scripts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, System, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPrecompileContainer, 0x0040);
		}

		// class ANiagaraPreviewBase : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewBase, 0x0220);
		}

		// class UNiagaraPreviewAxis : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis, 0x0028);
		}

		// class UNiagaraPreviewAxis_InterpParamBase : public UNiagaraPreviewAxis
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Param, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Count, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, UnknownData_LMNH, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamBase, 0x0038);
		}

		// class UNiagaraPreviewAxis_InterpParamInt32 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamInt32, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamFloat : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, Max, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamFloat, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamVector2D : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, Max, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector2D, 0x0048);
		}

		// class UNiagaraPreviewAxis_InterpParamVector : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, Max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector, 0x0050);
		}

		// class UNiagaraPreviewAxis_InterpParamVector4 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, UnknownData_3IO4, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, Max, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector4, 0x0060);
		}

		// class UNiagaraPreviewAxis_InterpParamLinearColor : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Min, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, Max, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamLinearColor, 0x0058);
		}

		// class ANiagaraPreviewGrid : public AActor
		TEST_METHOD(Class__Niagara__NiagaraPreviewGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, System, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, ResetMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_280L, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisX, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewAxisY, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingX, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, SpacingY, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, NumY, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, PreviewComponents, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ANiagaraPreviewGrid, UnknownData_VLJF, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ANiagaraPreviewGrid, 0x0270);
		}

		// class UNiagaraRibbonRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraRibbonRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, Material, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialUserParamBinding, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, FacingMode, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_0694, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0TilingDistance, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Scale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Offset, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0AgeOffsetMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_VS4W, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1TilingDistance, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Scale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Offset, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1AgeOffsetMode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DrawDirection, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_WWMR, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, CurveTension, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_73CG, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationFactor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bUseConstantFactor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_370E, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationAngle, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bScreenSpaceTessellation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_OCOP, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, PositionBinding, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, ColorBinding, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, VelocityBinding, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, NormalizedAgeBinding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonTwistBinding, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonWidthBinding, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonFacingBinding, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonIdBinding, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonLinkOrderBinding, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialRandomBinding, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterialBinding, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial1Binding, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial2Binding, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial3Binding, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRibbonRendererProperties, 0x0760);
		}

		// class UNiagaraScript : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, Usage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_6779, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, RapidIterationParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionParamStore, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionBoundParameters, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVMId, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_VE1Y, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVM, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedParameterCollectionReferences, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedDefaultDataInterfaces, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScript, 0x0520);
		}

		// class UNiagaraScriptSourceBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScriptSourceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScriptSourceBase, UnknownData_RUOO, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptSourceBase, 0x0048);
		}

		// class UNiagaraSettings : public UDeveloperSettings
		TEST_METHOD(Class__Niagara__NiagaraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, AdditionalParameterTypes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, AdditionalPayloadTypes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, AdditionalParameterEnums, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, QualityLevels, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectTypePtr, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSettings, 0x0098);
		}

		// class UNiagaraSimulationStageBase : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, Script, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, SimulationStageName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageBase, 0x0038);
		}

		// class UNiagaraSimulationStageGeneric : public UNiagaraSimulationStageBase
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, IterationSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_F7VX, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, Iterations, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_RISR, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, DataInterface, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageGeneric, 0x0070);
		}

		// class UNiagaraSpriteRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraSpriteRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Material, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialUserParamBinding, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Alignment, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, FacingMode, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_704N, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PivotInUVSpace, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SortMode, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_MPNY, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_MN8B, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinFacingCameraBlendDistance, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxFacingCameraBlendDistance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_PM8A, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PositionBinding, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, ColorBinding, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, VelocityBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteRotationBinding, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteSizeBinding, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteFacingBinding, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteAlignmentBinding, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageIndexBinding, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterialBinding, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial1Binding, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial2Binding, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial3Binding, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CameraOffsetBinding, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UVScaleBinding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialRandomBinding, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CustomSortingBinding, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, NormalizedAgeBinding, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_SEGJ, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSpriteRendererProperties, 0x08B0);
		}

		// class UNiagaraSystem : public UFXSystemAsset
		TEST_METHOD(Class__Niagara__NiagaraSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_9TKR, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugSystemInfo, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugEmitterInfo, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_BVRK, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_3IZ2, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bOverrideScalabilitySettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_9UHF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ScalabilityOverrides, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemScalabilityOverrides, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EmitterHandles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ParameterCollectionOverrides, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemSpawnScript, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemUpdateScript, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_KRTG, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemCompiledData, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ExposedParameters, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, FixedBounds, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bAutoDeactivate, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_Q2ER, 0x0425);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTime, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickCount, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickDelta, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bHasSystemScriptDIsWithPerInstanceData, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_HG4I, 0x0435);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UserDINamesReadInSystemScripts, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_IEWQ, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSystem, 0x0478);
		}

		// class UAndroidPermissionCallbackProxy : public UObject
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_J3B6, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0048);
		}

		// class UAndroidPermissionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0028);
		}

		// class UAppleImageUtilsBaseAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AppleImageUtils__AppleImageUtilsBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_CQ8M, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_W95P, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, ConversionResult, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_00Y8, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, 0x0088);
		}

		// class UAppleImageInterface : public UInterface
		TEST_METHOD(Class__AppleImageUtils__AppleImageInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageInterface, 0x0028);
		}

		// class AArchVisCharacter : public ACharacter
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAxisName, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, LookUpAtRateAxisName, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAxisName, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, TurnAtRateAxisName, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveForwardAxisName, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MoveRightAxisName, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Pitch, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::AArchVisCharacter, MouseSensitivityScale_Yaw, 0x051C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AArchVisCharacter, 0x0520);
		}

		// class UArchVisCharMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__ArchVisCharacter__ArchVisCharMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalAcceleration, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, RotationalDeceleration, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxRotationalVelocity, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MinPitch, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, MaxPitch, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingFriction, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingSpeed, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, WalkingAcceleration, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchVisCharMovementComponent, UnknownData_6B8U, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchVisCharMovementComponent, 0x0660);
		}

		// class UModularSynthPresetBank : public UObject
		TEST_METHOD(Class__Synthesis__ModularSynthPresetBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthPresetBank, Presets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthPresetBank, 0x0038);
		}

		// class UModularSynthLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__ModularSynthLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthLibrary, 0x0028);
		}

		// class UModularSynthComponent : public USynthComponent
		TEST_METHOD(Class__Synthesis__ModularSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, VoiceCount, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, UnknownData_5II8, 0x06D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthComponent, 0x0D70);
		}

		// class USourceEffectBitCrusherPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectBitCrusherPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, UnknownData_B778, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, Settings, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectBitCrusherPreset, 0x0078);
		}

		// class USourceEffectChorusPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectChorusPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, UnknownData_T1IM, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, Settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectChorusPreset, 0x0098);
		}

		// class USourceEffectDynamicsProcessorPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, UnknownData_0YPC, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, Settings, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectDynamicsProcessorPreset, 0x00B8);
		}

		// class UEnvelopeFollowerListener : public UActorComponent
		TEST_METHOD(Class__Synthesis__EnvelopeFollowerListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, OnEnvelopeFollowerUpdate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, UnknownData_YKLB, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvelopeFollowerListener, 0x00D0);
		}

		// class USourceEffectEnvelopeFollowerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEnvelopeFollowerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, UnknownData_U01G, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEnvelopeFollowerPreset, 0x0080);
		}

		// class USourceEffectEQPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, UnknownData_PVSH, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEQPreset, 0x0088);
		}

		// class USourceEffectFilterPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, UnknownData_XV43, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFilterPreset, 0x0080);
		}

		// class USourceEffectFoldbackDistortionPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFoldbackDistortionPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, UnknownData_UPPH, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFoldbackDistortionPreset, 0x0080);
		}

		// class USourceEffectMidSideSpreaderPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectMidSideSpreaderPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, UnknownData_WQQI, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectMidSideSpreaderPreset, 0x0080);
		}

		// class USourceEffectPannerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPannerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, UnknownData_1QAU, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, Settings, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPannerPreset, 0x0078);
		}

		// class USourceEffectPhaserPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPhaserPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, UnknownData_7HNZ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPhaserPreset, 0x0088);
		}

		// class USourceEffectRingModulationPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectRingModulationPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, UnknownData_6O1L, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, Settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectRingModulationPreset, 0x0090);
		}

		// class USourceEffectSimpleDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectSimpleDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, UnknownData_4D2T, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, Settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectSimpleDelayPreset, 0x0098);
		}

		// class USourceEffectStereoDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, UnknownData_UYWD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, Settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectStereoDelayPreset, 0x0090);
		}

		// class USourceEffectWaveShaperPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectWaveShaperPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, UnknownData_UJ6N, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, Settings, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectWaveShaperPreset, 0x0078);
		}

		// class UAudioImpulseResponse : public UObject
		TEST_METHOD(Class__Synthesis__AudioImpulseResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, ImpulseResponse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NumChannels, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, SampleRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NormalizationVolumeDb, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, UnknownData_BZIV, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, IRData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioImpulseResponse, 0x0058);
		}

		// class USubmixEffectConvolutionReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectConvolutionReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, Settings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, ImpulseResponse, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, BlockSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, bEnableHardwareAcceleration, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, UnknownData_VNZT, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectConvolutionReverbPreset, 0x00B8);
		}

		// class USubmixEffectDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_A203, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, Settings, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, DynamicSettings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_P4FK, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDelayPreset, 0x0090);
		}

		// class USubmixEffectFilterPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, UnknownData_OSU5, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, Settings, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFilterPreset, 0x0080);
		}

		// class USubmixEffectFlexiverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFlexiverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, UnknownData_SOKT, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, Settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFlexiverbPreset, 0x0088);
		}

		// class USubmixEffectTapDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectTapDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_95M3, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, Settings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_JK3M, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectTapDelayPreset, 0x00B0);
		}

		// class USynth2DSlider : public UWidget
		TEST_METHOD(Class__Synthesis__Synth2DSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueX, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueY, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueXDelegate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueYDelegate, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, WidgetStyle, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, SliderHandleColor, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IndentHandle, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, Locked, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_U8GM, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, StepSize, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IsFocusable, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_Q7HU, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureBegin, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureEnd, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureBegin, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureEnd, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedY, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_4TWG, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynth2DSlider, 0x0478);
		}

		// class UGranularSynth : public USynthComponent
		TEST_METHOD(Class__Synthesis__GranularSynth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, GranulatedSoundWave, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, UnknownData_DFTE, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGranularSynth, 0x0A90);
		}

		// class UMonoWaveTableSynthPreset : public UObject
		TEST_METHOD(Class__Synthesis__MonoWaveTableSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, PresetName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_A217, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, LockKeyframesToGrid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTableResolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_ACBO, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_8VDQ, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonoWaveTableSynthPreset, 0x0170);
		}

		// class USynthComponentMonoWaveTable : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthComponentMonoWaveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnTableAltered, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnNumTablesChanged, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, CurrentPreset, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, UnknownData_QD8B, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMonoWaveTable, 0x0E10);
		}

		// class USynthSamplePlayer : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthSamplePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, SoundWave, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSampleLoaded, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSamplePlaybackProgress, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, UnknownData_Z9NM, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSamplePlayer, 0x0800);
		}

		// class USynthKnob : public UWidget
		TEST_METHOD(Class__Synthesis__SynthKnob)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Value, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, StepSize, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseSpeed, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseFineTuneSpeed, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_CIR9, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterUnits, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ValueDelegate, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, WidgetStyle, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Locked, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, IsFocusable, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_4LOY, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureBegin, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureEnd, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureBegin, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureEnd, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnValueChanged, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_NBLW, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthKnob, 0x0400);
		}

		// class ATwGameplayProfilerActor : public AActor
		TEST_METHOD(Class__TwBenchmark__TwGameplayProfilerActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwGameplayProfilerActor, StartupDelayTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwGameplayProfilerActor, UnknownData_S2F1, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwGameplayProfilerActor, RecordDuration, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwGameplayProfilerActor, UnknownData_GIMN, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwGameplayProfilerActor, bRecordFPSChart, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwGameplayProfilerActor, bTimerExpired, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwGameplayProfilerActor, UnknownData_62WJ, 0x0242);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATwGameplayProfilerActor, 0x0248);
		}

		// class ATwBenchmarkGameMode : public AGameModeBase
		TEST_METHOD(Class__TwBenchmark__TwBenchmarkGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwBenchmarkGameMode, CamerasLeft, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwBenchmarkGameMode, TimeSpentAtEachCamera, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwBenchmarkGameMode, UnknownData_QG0A, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwBenchmarkGameMode, StartupDelayTime, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwBenchmarkGameMode, UnknownData_HSPQ, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwBenchmarkGameMode, BenchmarkLevelName, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwBenchmarkGameMode, CameraTag, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwBenchmarkGameMode, bRecordCameraCSV, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwBenchmarkGameMode, bRecordFPSChart, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwBenchmarkGameMode, bRecordHealthSnapshot, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::ATwBenchmarkGameMode, UnknownData_THC1, 0x0303);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATwBenchmarkGameMode, 0x0360);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInAR, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bSupportAR, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_L2DY, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0118);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_XNB7, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0040);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_7H4Q, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bDisplayHelpInAutoComplete, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_X9PJ, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_WISX, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0070);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_VOR4, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x00F0);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_V5DK, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_0OQO, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0058);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_EX0T, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0038);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0028);
		}

		// class UAnimNotify_PlayMontageNotify : public UAnimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, NotifyName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0040);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, NotifyName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0038);
		}

		// class UAnimSequencerInstance : public UAnimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequencerInstance, UnknownData_F1N5, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x0270);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0028);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_9ZM2, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00A8);
		}

		// class USequencerAnimationSupport : public UInterface
		TEST_METHOD(Class__AnimGraphRuntime__SequencerAnimationSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequencerAnimationSupport, 0x0028);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0028);
		}

		// class UMockDataMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MRMesh__MockDataMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, OnMeshTrackerUpdated, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, ScanWorld, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestNormals, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestVertexConfidence, 0x0202);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorMode, 0x0203);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_ZEA8, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, BlockVertexColors, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UpdateInterval, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_6P9Z, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, MRMesh, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_9EIT, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockDataMeshTrackerComponent, 0x0260);
		}

		// class UMRMeshComponent : public UPrimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_BA3I, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, Material, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bNeverCreateCollisionMesh, 0x0422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_1NO1, 0x0423);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, CachedBodySetup, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, WireframeMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_32HM, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x0490);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_E6XP, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0120);
		}

		// class UClothingSimulationInteractorNv : public UClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationInteractorNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_3AXT, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0040);
		}

		// class UClothPhysicalMeshDataNv_Legacy : public UClothPhysicalMeshDataBase_Legacy
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothPhysicalMeshDataNv_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, MaxDistances, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopDistances, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopRadiuses, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, AnimDriveMultipliers, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataNv_Legacy, 0x0120);
		}

		// class UClothConfigNv : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothConfigNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ClothingWindMethod, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_8PL8, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraint, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraint, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraint, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraint, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionStiffness, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionCullScale, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Damping, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Friction, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindDragCoefficient, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindLiftCoefficient, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearDrag, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularDrag, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearInertiaScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularInertiaScale, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CentrifugalInertiaScale, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SolverFrequency, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, StiffnessFrequency, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityScale, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityOverride, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, bUseGravityOverride, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_0VLZ, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherStiffness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherLimit, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CollisionThickness, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveSpringStiffness, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveDamperStiffness, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindMethod, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_N0M4, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraintConfig, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraintConfig, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraintConfig, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraintConfig, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigNv, 0x0140);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0028);
		}

		// class UAnimNotifyState_TimedNiagaraEffect : public UAnimNotifyState
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotifyState_TimedNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, Template, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, bDestroyAtEnd, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, UnknownData_KNG9, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedNiagaraEffect, 0x0060);
		}

		// class UAnimNotify_PlayNiagaraEffect : public UAnimNotify
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotify_PlayNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Template, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, LocationOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, RotationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Scale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_J70O, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_09H0, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, SocketName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_403M, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayNiagaraEffect, 0x0090);
		}

		// class USplunkFunctionLibrary : public UObject
		TEST_METHOD(Class__TwSplunkHandler__SplunkFunctionLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplunkFunctionLibrary, SplunkURL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplunkFunctionLibrary, SplunkToken, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplunkFunctionLibrary, 0x0048);
		}

		// class UARBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBlueprintLibrary, 0x0028);
		}

		// class UARTraceResultLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARTraceResultLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultLibrary, 0x0028);
		}

		// class UARBaseAsyncTaskBlueprintProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AugmentedReality__ARBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBaseAsyncTaskBlueprintProxy, UnknownData_C67S, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBaseAsyncTaskBlueprintProxy, 0x0050);
		}

		// class UARSaveWorldAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARSaveWorldAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, UnknownData_QLW3, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSaveWorldAsyncTaskBlueprintProxy, 0x0080);
		}

		// class UARGetCandidateObjectAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARGetCandidateObjectAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnSuccess, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, UnknownData_AIP0, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, 0x0098);
		}

		// class UARLightEstimate : public UObject
		TEST_METHOD(Class__AugmentedReality__ARLightEstimate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLightEstimate, 0x0028);
		}

		// class UARBasicLightEstimate : public UARLightEstimate
		TEST_METHOD(Class__AugmentedReality__ARBasicLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientIntensityLumens, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColorTemperatureKelvin, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColor, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBasicLightEstimate, 0x0040);
		}

		// class AAROriginActor : public AActor
		TEST_METHOD(Class__AugmentedReality__AROriginActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAROriginActor, 0x0220);
		}

		// class UARPin : public UObject
		TEST_METHOD(Class__AugmentedReality__ARPin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackedGeometry, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, PinnedComponent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_PXTS, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_E9LP, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTrackingStateChanged, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTransformUpdated, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_N5WG, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPin, 0x00F0);
		}

		// class UARSessionConfig : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateMeshDataFromTrackedGeometry, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateCollisionForMeshData, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateNavMeshForMeshData, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseMeshDataForOcclusion, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bRenderMeshDataInWireframe, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bTrackSceneObjects, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUsePersonSegmentationForOcclusion, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldAlignment, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SessionType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneDetectionMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bHorizontalPlaneDetection, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bVerticalPlaneDetection, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutoFocus, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, LightEstimationMode, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FrameSyncMode, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraOverlay, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraTracking, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetCameraTracking, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetTrackedObjects, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_4MOC, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateImages, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumSimultaneousImagesTracked, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentCaptureProbeType, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_8X7T, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldMapData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateObjects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DesiredVideoFormat, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingDirection, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingUpdate, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_R30F, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SerializedARCandidateImageDatabase, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnabledSessionTrackingFeature, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_XGFV, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSessionConfig, 0x00A8);
		}

		// class AARSharedWorldGameMode : public AGameMode
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, BufferSizePerChunk, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameMode, UnknownData_2V52, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameMode, 0x0370);
		}

		// class AARSharedWorldGameState : public AGameState
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageData, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesTotal, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesTotal, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, PreviewImageBytesDelivered, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, ARWorldBytesDelivered, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldGameState, UnknownData_XWGJ, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldGameState, 0x02C8);
		}

		// class AARSharedWorldPlayerController : public APlayerController
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSharedWorldPlayerController, UnknownData_1FJP, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSharedWorldPlayerController, 0x0580);
		}

		// class AARSkyLight : public ASkyLight
		TEST_METHOD(Class__AugmentedReality__ARSkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, CaptureProbe, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AARSkyLight, UnknownData_ROVA, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AARSkyLight, 0x0240);
		}

		// class UARTexture : public UTexture
		TEST_METHOD(Class__AugmentedReality__ARTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, TextureType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, UnknownData_BO04, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Timestamp, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, ExternalTextureGuid, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Size, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTexture, 0x00D8);
		}

		// class UARTextureCameraImage : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraImage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraImage, 0x00D8);
		}

		// class UARTextureCameraDepth : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthQuality, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthAccuracy, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, bIsTemporallySmoothed, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, UnknownData_B9GW, 0x00DB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraDepth, 0x00E0);
		}

		// class UAREnvironmentCaptureProbeTexture : public UTextureCube
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, TextureType, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, UnknownData_O8I9, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Timestamp, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, ExternalTextureGuid, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Size, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbeTexture, 0x0130);
		}

		// class UARTraceResultDummy : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTraceResultDummy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultDummy, 0x0028);
		}

		// class UARTrackedGeometry : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTrackedGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UniqueId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_3V8K, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_FIDK, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnderlyingMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, ObjectClassification, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_LHD6, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LastUpdateFrameNumber, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_JZ9F, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, DebugName, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedGeometry, 0x00E8);
		}

		// class UARPlaneGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARPlaneGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_Q1K7, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Center, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Extent, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_5H6S, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, SubsumedBy, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneGeometry, 0x0120);
		}

		// class UARTrackedPoint : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPoint, UnknownData_A9T7, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPoint, 0x00F0);
		}

		// class UARTrackedImage : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, DetectedImage, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, EstimatedSize, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedImage, 0x00F8);
		}

		// class UARTrackedQRCode : public UARTrackedImage
		TEST_METHOD(Class__AugmentedReality__ARTrackedQRCode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, QRCode, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, Version, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, UnknownData_TRE2, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedQRCode, 0x0110);
		}

		// class UARFaceGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARFaceGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LookAtTarget, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, bIsTracked, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_UNUZ, 0x00F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, BlendShapes, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_RUD3, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceGeometry, 0x01E0);
		}

		// class UAREnvironmentCaptureProbe : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_4Z0C, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_EBNP, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, EnvironmentCaptureTexture, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbe, 0x0100);
		}

		// class UARTrackedObject : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedObject, DetectedObject, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedObject, 0x00F0);
		}

		// class UARTrackedPose : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_RM6Y, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_SVJL, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPose, 0x0140);
		}

		// class UARTrackableNotifyComponent : public UActorComponent
		TEST_METHOD(Class__AugmentedReality__ARTrackableNotifyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedGeometry, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedGeometry, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedGeometry, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPlane, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPlane, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPlane, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPoint, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPoint, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPoint, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedImage, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedImage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedImage, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedFace, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedFace, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedFace, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedEnvProbe, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedEnvProbe, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedEnvProbe, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedObject, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedObject, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedObject, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackableNotifyComponent, 0x0200);
		}

		// class UARTypesDummyClass : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTypesDummyClass)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTypesDummyClass, 0x0028);
		}

		// class UARCandidateImage : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, CandidateTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, FriendlyName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Width, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Height, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Orientation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, UnknownData_7WEW, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateImage, 0x0058);
		}

		// class UARCandidateObject : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, CandidateObjectData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, FriendlyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, BoundingBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, UnknownData_YQQ1, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateObject, 0x0070);
		}

		// class AFSH_Catfish_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Catfish_BP__FSH_Catfish_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Catfish_BP_C, VoiceGroupComponent_BP, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_Catfish_BP_C, TwAkEmitterArray, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Catfish_BP_C, 0x1050);
		}

		// class UManeaterControllerDisconnectModal_BP_C : public UMEControllerDisconnectedModal
		TEST_METHOD(WidgetBlueprintGeneratedClass__ManeaterControllerDisconnectModal_BP__ManeaterControllerDisconnectModal_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterControllerDisconnectModal_BP_C, ButtonIdle, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterControllerDisconnectModal_BP_C, IntroAnim, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterControllerDisconnectModal_BP_C, Layer1, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterControllerDisconnectModal_BP_C, Layer2, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterControllerDisconnectModal_BP_C, Layer4, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterControllerDisconnectModal_BP_C, RichTextBlock_1, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterControllerDisconnectModal_BP_C, 0x02A8);
		}

		// class UManeaterContinueModal_BP_C : public UMEControllerDisconnectedModal
		TEST_METHOD(WidgetBlueprintGeneratedClass__ManeaterContinueModal_BP__ManeaterContinueModal_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterContinueModal_BP_C, Layer1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterContinueModal_BP_C, Layer2, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterContinueModal_BP_C, Layer4, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterContinueModal_BP_C, RichTextBlock_1, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterContinueModal_BP_C, 0x0298);
		}

		// class UGA_Evo_Bio_Electric_Tail_T2_C : public UME_GameplayAbility_Projectiles
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Tail_T2__GA_Evo_Bio_Electric_Tail_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Tail_T2_C, 0x0458);
		}

		// class UGA_Evo_Bio_Electric_Tail_T1_C : public UME_GameplayAbility_Projectiles
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Tail_T1__GA_Evo_Bio_Electric_Tail_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Tail_T1_C, 0x0458);
		}

		// class UGA_Smash_Submerge_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Smash_Submerge__GA_Smash_Submerge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Smash_Submerge_C, UberGraphFrame, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Smash_Submerge_C, Pup_Explosion_Class, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Smash_Submerge_C, Teen_Explosion_Class, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Smash_Submerge_C, Adult_Explosion_Class, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Smash_Submerge_C, Elder_Explosion_Class, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_Smash_Submerge_C, Mega_Explosion_Class, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Smash_Submerge_C, 0x0430);
		}

		// class UAM_StationaryWaterReentryDownwards_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_StationaryWaterReentryDownwards__AM_StationaryWaterReentryDownwards_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_StationaryWaterReentryDownwards_C, 0x0620);
		}

		// class UAM_StationaryWaterReentryBackwardsAndUp_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_StationaryWaterReentryBackwardsAndUp__AM_StationaryWaterReentryBackwardsAndUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_StationaryWaterReentryBackwardsAndUp_C, 0x0620);
		}

		// class UAM_StationaryWaterReentryBackwardsAndDown_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_StationaryWaterReentryBackwardsAndDown__AM_StationaryWaterReentryBackwardsAndDown_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_StationaryWaterReentryBackwardsAndDown_C, 0x0620);
		}

		// class UAM_Lunge_Knifing_T1_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_Lunge_Knifing_T1__AM_Lunge_Knifing_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Lunge_Knifing_T1_C, 0x0620);
		}

		// class UAM_KillSequence_OnLand_C : public UAM_KillSequence_C
		TEST_METHOD(BlueprintGeneratedClass__AM_KillSequence_OnLand__AM_KillSequence_OnLand_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_KillSequence_OnLand_C, 0x0640);
		}

		// class UAM_KillSequence_Knifing_C : public UAM_KillSequence_C
		TEST_METHOD(BlueprintGeneratedClass__AM_KillSequence_Knifing__AM_KillSequence_Knifing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_KillSequence_Knifing_C, 0x0640);
		}

		// class UAM_KillSequence_C : public UME_GameplayAbility_KillSequence
		TEST_METHOD(BlueprintGeneratedClass__AM_KillSequence__AM_KillSequence_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAM_KillSequence_C, UberGraphFrame, 0x0638);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_KillSequence_C, 0x0640);
		}

		// class UAM_EvadeLeft_Land_C : public UME_GameplayAbility_SharkEvade
		TEST_METHOD(BlueprintGeneratedClass__AM_EvadeLeft_Land__AM_EvadeLeft_Land_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EvadeLeft_Land_C, 0x0620);
		}

		// class UAM_EvadeLeft_Knifing_C : public UME_GameplayAbility_SharkEvade
		TEST_METHOD(BlueprintGeneratedClass__AM_EvadeLeft_Knifing__AM_EvadeLeft_Knifing_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EvadeLeft_Knifing_C, 0x0620);
		}

		// class UAM_EvadeLeft_C : public UME_GameplayAbility_SharkEvade
		TEST_METHOD(BlueprintGeneratedClass__AM_EvadeLeft__AM_EvadeLeft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EvadeLeft_C, 0x0620);
		}

		// class UAM_ChunkSequence_Breaching_C : public UAM_ChunkSequence_C
		TEST_METHOD(BlueprintGeneratedClass__AM_ChunkSequence_Breaching__AM_ChunkSequence_Breaching_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_ChunkSequence_Breaching_C, 0x0628);
		}

		// class UAM_Bite_Shark_FullMouth_C : public UME_GameplayAbilitySharkMontage
		TEST_METHOD(BlueprintGeneratedClass__AM_Bite_Shark_FullMouth__AM_Bite_Shark_FullMouth_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Bite_Shark_FullMouth_C, 0x0620);
		}

		// class UGE_EVO_Shadow_TailFX_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Shadow_TailFX_T4__GE_EVO_Shadow_TailFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Shadow_TailFX_T4_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Stack_Count_5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack_Count_6__GE_Evo_Shadow_Stack_Count_5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_Count_5_C, 0x0870);
		}

		// class ABP_PetesBoat_V2_SteeringWheel_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_SteeringWheel__BP_PetesBoat_V2_SteeringWheel_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_SteeringWheel_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Chair_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Chair__BP_PetesBoat_V2_Chair_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Chair_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Bow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Bow__BP_PetesBoat_V2_Bow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Bow_C, 0x0230);
		}

		// class ABP_PetesBoat_V2_Boat_Top_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V2_Boat_Top__BP_PetesBoat_V2_Boat_Top_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V2_Boat_Top_C, 0x0230);
		}

		// class ABP_USCG_Small_Pete2_Phase2_Support_Divers_C : public ABP_Boss_Support_Boat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Small_Pete2_Phase2_Support_Divers__BP_USCG_Small_Pete2_Phase2_Support_Divers_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Pete2_Phase2_Support_Divers_C, UberGraphFrame, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Pete2_Phase2_Support_Divers_C, StartingLoc, 0x0D20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Small_Pete2_Phase2_Support_Divers_C, 0x0D2C);
		}

		// class UBP_PlayerSharkFlesh_IR_C : public UBP_SharkFlesh_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerSharkFlesh_IR__BP_PlayerSharkFlesh_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerSharkFlesh_IR_C, 0x0040);
		}

		// class UHunterLeaderName_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__HunterLeaderName_BP__HunterLeaderName_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterLeaderName_BP_C, Idle, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterLeaderName_BP_C, Intro, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterLeaderName_BP_C, FirstName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterLeaderName_BP_C, Image_71, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHunterLeaderName_BP_C, LastName, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHunterLeaderName_BP_C, 0x0258);
		}

		// class UBP_SharkFlesh_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SharkFlesh_IR__BP_SharkFlesh_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SharkFlesh_IR_C, 0x0040);
		}

		// class UGE_LevelUpEffect_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_LevelUpEffect__GE_LevelUpEffect_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_LevelUpEffect_C, 0x0870);
		}

		// class ABP_PlayerGrotto_C : public ABP_LandmarkBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerGrotto__BP_PlayerGrotto_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerGrotto_C, UnknownData_UJTJ, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerGrotto_C, UberGraphFrame, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerGrotto_C, Arrow, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerGrotto_C, SpawnPoint_BB, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerGrotto_C, SpawnPoint, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerGrotto_C, DistancePerHour, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerGrotto_C, 0x0354);
		}

		// class UGE_Evo_Shadow_Set_Bonus2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Set_Bonus2__GE_Evo_Shadow_Set_Bonus2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Set_Bonus2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Set_Bonus1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Set_Bonus1__GE_Evo_Shadow_Set_Bonus1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Set_Bonus1_C, 0x0870);
		}

		// class UGE_Evo_Bone_Set_Bonus5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Set_Bonus5__GE_Evo_Bone_Set_Bonus5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Set_Bonus5_C, 0x0870);
		}

		// class ABP_SwimmerController_C : public ABP_HumanController_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SwimmerController__BP_SwimmerController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_SwimmerController_C, UberGraphFrame, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SwimmerController_C, 0x07F8);
		}

		// class ABP_HumanController_C : public AME_HumanAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_HumanController__BP_HumanController_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanController_C, ThreatAlertLevelKeyName, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanController_C, CurrentThreatKeyName, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanController_C, ThreatAlertedKeyName, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanController_C, LastSawThreatLocationKey, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanController_C, LastSawThreatTimeKey, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanController_C, LastSawThreatmoveDirectionKeyName, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_HumanController_C, LastVisibleThreatActor, 0x07E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HumanController_C, 0x07F0);
		}

		// class ABP_PlayerSharkCameraManager_C : public AME_PlayerCameraManager
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerSharkCameraManager__BP_PlayerSharkCameraManager_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerSharkCameraManager_C, 0x2770);
		}

		// class UInGameMenuController_BP_C : public UInGameMenuController
		TEST_METHOD(WidgetBlueprintGeneratedClass__InGameMenuController_BP__InGameMenuController_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuController_BP_C, UberGraphFrame, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuController_BP_C, BlinkNewEvolution, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuController_BP_C, BlinkNewQuest, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuController_BP_C, LeftNav, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuController_BP_C, ResourceListWidget_BP, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameMenuController_BP_C, RightNav, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameMenuController_BP_C, 0x0348);
		}

		// class USavingThrobber_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SavingThrobber_BP__SavingThrobber_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USavingThrobber_BP_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavingThrobber_BP_C, SaveLoop, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USavingThrobber_BP_C, LoadingIcon, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USavingThrobber_BP_C, 0x0248);
		}

		// class UTVShowBug_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TVShowBug_BP__TVShowBug_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTVShowBug_BP_C, BugIntroAnimation, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTVShowBug_BP_C, 0x0238);
		}

		// class UGE_SpermWhaleVulnerable_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhaleVulnerable_BP__GE_SpermWhaleVulnerable_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhaleVulnerable_BP_C, 0x0870);
		}

		// class UGE_MakoVulnerable_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MakoVulnerable_BP__GE_MakoVulnerable_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MakoVulnerable_BP_C, 0x0870);
		}

		// class USettingsStepper_BP_C : public UMESettingsStepper
		TEST_METHOD(WidgetBlueprintGeneratedClass__SettingsStepper_BP__SettingsStepper_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USettingsStepper_BP_C, 0x0498);
		}

		// class ABP_Base_Canoe_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Canoe__BP_Base_Canoe_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Canoe_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Canoe_C, 0x0CD4);
		}

		// class ABP_Base_FishingTrawler_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_FishingTrawler__BP_Base_FishingTrawler_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_FishingTrawler_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_FishingTrawler_C, 0x0CD4);
		}

		// class ABP_FishingTrawler_Objective_WC_C : public ABP_Base_FishingTrawler_Objective_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawler_Objective_WC__BP_FishingTrawler_Objective_WC_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawler_Objective_WC_C, 0x0CD4);
		}

		// class ABP_Skiff_Melee_Gym_C : public ABP_Base_Skiff_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Melee_Gym__BP_Skiff_Melee_Gym_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Melee_Gym_C, 0x0CDC);
		}

		// class ABP_Base_Rowboat_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Rowboat__BP_Base_Rowboat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Rowboat_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Rowboat_C, 0x0CD4);
		}

		// class ABP_Base_PontoonBoat_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_PontoonBoat__BP_Base_PontoonBoat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_PontoonBoat_C, LastHitTime, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_PontoonBoat_C, 0x0CD4);
		}

		// class ABP_Base_PontoonPartyBoat_C : public ABP_Base_PontoonBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_PontoonPartyBoat__BP_Base_PontoonPartyBoat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_PontoonPartyBoat_C, 0x0CD4);
		}

		// class ABP_SkiBoat_Objective_WC_C : public ABP_Base_SkiBoat_Objective_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SkiBoat_Objective_WC__BP_SkiBoat_Objective_WC_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SkiBoat_Objective_WC_C, 0x0CD4);
		}

		// class ABP_Small_FishingBoat_Objective_DO_C : public ABP_Base_Small_FishingBoat_Objective_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Small_FishingBoat_Objective_DO__BP_Small_FishingBoat_Objective_DO_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Small_FishingBoat_Objective_DO_C, 0x0CDC);
		}

		// class ABP_Base_TourAirboat_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_TourAirboat__BP_Base_TourAirboat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_TourAirboat_C, SpotLight, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_TourAirboat_C, LastHitTime, 0x0CD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_TourAirboat_C, 0x0CDC);
		}

		// class UGE_MultiHit6_Vulnerability_C : public UGE_MultiHit4_Vulnerability_C
		TEST_METHOD(BlueprintGeneratedClass__GE_MultiHit6_Vulnerability__GE_MultiHit6_Vulnerability_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MultiHit6_Vulnerability_C, 0x0870);
		}

		// class UGE_MultiHit5_Vulnerability_C : public UGE_MultiHit4_Vulnerability_C
		TEST_METHOD(BlueprintGeneratedClass__GE_MultiHit5_Vulnerability__GE_MultiHit5_Vulnerability_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MultiHit5_Vulnerability_C, 0x0870);
		}

		// class UGE_MultiHit4_Vulnerability_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MultiHit4_Vulnerability__GE_MultiHit4_Vulnerability_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MultiHit4_Vulnerability_C, 0x0870);
		}

		// class UGE_MultiHit3_Vulnerability_C : public UGE_MultiHit4_Vulnerability_C
		TEST_METHOD(BlueprintGeneratedClass__GE_MultiHit3_Vulnerability__GE_MultiHit3_Vulnerability_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MultiHit3_Vulnerability_C, 0x0870);
		}

		// class UGE_MultiHit_VulnerabilityDelay_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MultiHit_VulnerabilityDelay__GE_MultiHit_VulnerabilityDelay_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MultiHit_VulnerabilityDelay_C, 0x0870);
		}

		// class UGE_EVO_Bio_Electric_TailElectricityFX_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EVO_Bio_Electric_TailElectricityFX_T4__GE_EVO_Bio_Electric_TailElectricityFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EVO_Bio_Electric_TailElectricityFX_T4_C, 0x0870);
		}

		// class AEVO_Bio_Electric_Tail_Projectile_T4_C : public AME_OverlapDamageProjectile
		TEST_METHOD(BlueprintGeneratedClass__EVO_Bio_Electric_Tail_Projectile_T4__EVO_Bio_Electric_Tail_Projectile_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEVO_Bio_Electric_Tail_Projectile_T4_C, 0x0268);
		}

		// class UBP_Rifle_Base_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rifle_Base__BP_Rifle_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rifle_Base_C, 0x06E0);
		}

		// class UGE_Rifle_Damage_Tier2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Rifle_Damage_Tier2__GE_Rifle_Damage_Tier2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Rifle_Damage_Tier2_C, 0x0870);
		}

		// class UBP_AssaultRifle_Tier6_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Tier6__BP_AssaultRifle_Tier6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Tier6_C, 0x06E0);
		}

		// class UGE_AssaultRifle_Damage_Tier7_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Damage_Tier7__GE_AssaultRifle_Damage_Tier7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Damage_Tier7_C, 0x0870);
		}

		// class ABP_HunterCaptain_CandymanCurtis_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterCaptain_CandymanCurtis__BP_HunterCaptain_CandymanCurtis_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HunterCaptain_CandymanCurtis_C, 0x0F50);
		}

		// class AAssaultRifle_Projectile_Tier5_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Tier5__AssaultRifle_Projectile_Tier5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Tier5_C, 0x0270);
		}

		// class UHMN_FemaleFit_ABP_C : public UHumanBase_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__HMN_FemaleFit_ABP__HMN_FemaleFit_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHMN_FemaleFit_ABP_C, 0x9201);
		}

		// class UGA_Evo_Shadow_Fins_T2_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Fins_T2__GA_Evo_Shadow_Fins_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Fins_T2_C, 0x0400);
		}

		// class UGE_Evo_Shadow_Fins_Bonus_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Fins_Bonus_T2__GE_Evo_Shadow_Fins_Bonus_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Fins_Bonus_T2_C, 0x0870);
		}

		// class UGE_Evo_Bone_Fins_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_T4__GE_Evo_Bone_Fins_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Fins_Defense_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Defense_T4__GE_Evo_Bone_Fins_Defense_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Defense_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Fins_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_T3__GE_Evo_Bone_Fins_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_T3_C, 0x0870);
		}

		// class UGA_Evo_Bone_Fins_T5_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Fins_T5__GA_Evo_Bone_Fins_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Fins_T5_C, 0x0400);
		}

		// class UGA_Evo_Bone_Fins_Evade_ImpactFX_T5_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Fins_Evade_ImpactFX_T5__GA_Evo_Bone_Fins_Evade_ImpactFX_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Fins_Evade_ImpactFX_T5_C, 0x0400);
		}

		// class UGE_Evo_Bone_Fins_Immunity_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Immunity_T1__GE_Evo_Bone_Fins_Immunity_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Immunity_T1_C, 0x0870);
		}

		// class UGA_Evo_Bone_Fins_Evade_ImpactFX_T2_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Fins_Evade_ImpactFX_T2__GA_Evo_Bone_Fins_Evade_ImpactFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Fins_Evade_ImpactFX_T2_C, 0x0400);
		}

		// class UGE_Evo_Bone_Fins_Evade_ImpactFX_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Fins_Evade_ImpactFX_T1__GE_Evo_Bone_Fins_Evade_ImpactFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Fins_Evade_ImpactFX_T1_C, 0x0870);
		}

		// class UME_HunterButton_BP_C : public UHunterButtonWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ME_HunterButton_BP__ME_HunterButton_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_HunterButton_BP_C, 0x0470);
		}

		// class UInfamyTierIcon_BP_C : public UInfamyTierIcon
		TEST_METHOD(WidgetBlueprintGeneratedClass__InfamyTierIcon_BP__InfamyTierIcon_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfamyTierIcon_BP_C, RarityBG, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfamyTierIcon_BP_C, 0x0280);
		}

		// class UGE_Evo_Tiger_Body_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Tiger_Body_T3__GE_Evo_Tiger_Body_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Tiger_Body_T3_C, 0x0870);
		}

		// class UGE_Evo_Tiger_Body_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Tiger_Body_T2__GE_Evo_Tiger_Body_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Tiger_Body_T2_C, 0x0870);
		}

		// class UGE_Evo_Subliminal_Evasion1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Subliminal_Evasion1__GE_Evo_Subliminal_Evasion1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Subliminal_Evasion1_C, 0x0870);
		}

		// class UGE_Evo_ReinforcedCartilage1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_ReinforcedCartilage1__GE_Evo_ReinforcedCartilage1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_ReinforcedCartilage1_C, 0x0870);
		}

		// class UGA_M_Mako_Bite_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Mako_Bite_BP__GA_M_Mako_Bite_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Mako_Bite_BP_C, 0x0510);
		}

		// class UGE_Mako_LungeClampCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Mako_LungeClampCD_BP__GE_Mako_LungeClampCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Mako_LungeClampCD_BP_C, 0x0870);
		}

		// class UGE_MakoThrashDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MakoThrashDamage_BP__GE_MakoThrashDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MakoThrashDamage_BP_C, 0x0870);
		}

		// class UGE_Mako_EvadeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Mako_EvadeCD_BP__GE_Mako_EvadeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Mako_EvadeCD_BP_C, 0x0870);
		}

		// class UGE_MakoBiteCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MakoBiteCooldown_BP__GE_MakoBiteCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MakoBiteCooldown_BP_C, 0x0870);
		}

		// class UWorldMapWidget_BP_C : public UWorldMapWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__WorldMapWidget_BP__WorldMapWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget_BP_C, UberGraphFrame, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget_BP_C, CaviarKey, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget_BP_C, CrawfishBay, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget_BP_C, DeadHorseLake, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget_BP_C, FatwickBayou, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget_BP_C, GoldenShores, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget_BP_C, ProsperitySands, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget_BP_C, SapphireBay, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldMapWidget_BP_C, TheGulf, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldMapWidget_BP_C, 0x0448);
		}

		// class URegionInfoWidget_BP_C : public URegionInfoWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__RegionInfoWidget_BP__RegionInfoWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget_BP_C, UberGraphFrame, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget_BP_C, CompletionPercentageCompletionP, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget_BP_C, Image_1, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget_BP_C, PoisonBounds, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget_BP_C, RegionBounds, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget_BP_C, RegionCanvas, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget_BP_C, RegionName, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget_BP_C, RegionBoundsScale, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionInfoWidget_BP_C, RegionHovered, 0x03F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URegionInfoWidget_BP_C, 0x03F5);
		}

		// class UMapMarkerPopupWidget_BP_C : public UMapMarkerPopupWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapMarkerPopupWidget_BP__MapMarkerPopupWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget_BP_C, UberGraphFrame, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget_BP_C, Description, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget_BP_C, FastTravelButton, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget_BP_C, FastTravelProgressBar, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget_BP_C, Icon, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget_BP_C, IconPopupSwitcher, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget_BP_C, Image_15, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget_BP_C, MapMarkerText, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget_BP_C, Name, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget_BP_C, QuestBG, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget_BP_C, ShortObjective, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapMarkerPopupWidget_BP_C, Focused_Landmark_Marker, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapMarkerPopupWidget_BP_C, 0x0360);
		}

		// class UMapLegend_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__MapLegend_BP__MapLegend_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_2, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_5, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_15, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_16, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_17, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_18, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_35, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_36, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_37, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_38, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_39, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_40, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_41, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_42, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_43, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapLegend_BP_C, Image_44, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapLegend_BP_C, 0x02B8);
		}

		// class USharkScale_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__SharkScale_BP__SharkScale_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USharkScale_BP_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharkScale_BP_C, SS_Number, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharkScale_BP_C, SS_RulerLine, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharkScale_BP_C, SharkSizeNumber, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharkScale_BP_C, BrushSize, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharkScale_BP_C, 0x0250);
		}

		// class UGrowthAnimation_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GrowthAnimation_BP__GrowthAnimation_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrowthAnimation_BP_C, InAnimation, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGrowthAnimation_BP_C, 0x0238);
		}

		// class UEvolution_Upgrade_BP_C : public UEvolutionUpgradeWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Evolution_Upgrade_BP__Evolution_Upgrade_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Upgrade_BP_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Upgrade_BP_C, EvolutionTooltipCurrent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Upgrade_BP_C, EvolutionTooltipUpgraded, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Upgrade_BP_C, Image_1, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Upgrade_BP_C, Image_2, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolution_Upgrade_BP_C, 0x02E8);
		}

		// class UEvolution_Tooltip_UpgradeCost_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Evolution_Tooltip_UpgradeCost_BP__Evolution_Tooltip_UpgradeCost_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_UpgradeCost_BP_C, EquipPrompt, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_UpgradeCost_BP_C, GrowthRequirementText, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_UpgradeCost_BP_C, GrowthRequirmentTitle, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_UpgradeCost_BP_C, NutrientCostText1, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_UpgradeCost_BP_C, NutrientCostText2, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_UpgradeCost_BP_C, NutrientImage1, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_UpgradeCost_BP_C, NutrientImage2, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_UpgradeCost_BP_C, PromptContainer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_UpgradeCost_BP_C, UpgradeCostContainer, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_UpgradeCost_BP_C, UpgradeInfoBox, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_UpgradeCost_BP_C, UpgradePrompt, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_UpgradeCost_BP_C, UpgradeText, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolution_Tooltip_UpgradeCost_BP_C, 0x0290);
		}

		// class UEvolution_Back_Button_BP_C : public UTwBaseButton
		TEST_METHOD(WidgetBlueprintGeneratedClass__Evolution_Back_Button_BP__Evolution_Back_Button_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Back_Button_BP_C, UberGraphFrame, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Back_Button_BP_C, IsLeft, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolution_Back_Button_BP_C, 0x0441);
		}

		// class AInventoryActor_PaperDoll_BP_C : public AME_InventoryActor
		TEST_METHOD(BlueprintGeneratedClass__InventoryActor_PaperDoll_BP__InventoryActor_PaperDoll_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryActor_PaperDoll_BP_C, PointLight2, 0x2040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryActor_PaperDoll_BP_C, PointLight1, 0x2048);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryActor_PaperDoll_BP_C, PointLight, 0x2050);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryActor_PaperDoll_BP_C, MaterialBillboard, 0x2058);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryActor_PaperDoll_BP_C, SkyLight, 0x2060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AInventoryActor_PaperDoll_BP_C, DirectionalLight, 0x2068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AInventoryActor_PaperDoll_BP_C, 0x2070);
		}

		// class UAgeTierDiamond_BP_C : public UAgeTierDiamond
		TEST_METHOD(WidgetBlueprintGeneratedClass__AgeTierDiamond_Bp__AgeTierDiamond_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAgeTierDiamond_BP_C, 0x0278);
		}

		// class UGA_M_KillerWhale_LandLunge_BP_C : public UGA_M_LandLunge_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_KillerWhale_LandLunge_BP__GA_M_KillerWhale_LandLunge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_KillerWhale_LandLunge_BP_C, 0x05E0);
		}

		// class UGA_M_KillerWhale_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_KillerWhale_EvadeRight_BP__GA_M_KillerWhale_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_KillerWhale_EvadeRight_BP_C, 0x05E0);
		}

		// class UGA_M_KillerWhale_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_KillerWhale_EvadeLeft_BP__GA_M_KillerWhale_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_KillerWhale_EvadeLeft_BP_C, 0x05E0);
		}

		// class UWHL_KillerWhale_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__WHL_KillerWhale_ABP__WHL_KillerWhale_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWHL_KillerWhale_ABP_C, 0x5C8C);
		}

		// class UBP_GE_Whipshot_XXL_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_Whipshot_XXL__BP_GE_Whipshot_XXL_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_Whipshot_XXL_C, 0x0870);
		}

		// class UGE_SpermWhale_EvadeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhale_EvadeCD_BP__GE_SpermWhale_EvadeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhale_EvadeCD_BP_C, 0x0870);
		}

		// class USequenceDirector_C : public ULevelSequenceDirector
		TEST_METHOD(BlueprintGeneratedClass__CINE_Pete3Battle_Intro_SEQ__SequenceDirector_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequenceDirector_C, 0x0030);
		}

		// class ABP_PT_Boat_Fragment04_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PT_Boat_Fragment04__BP_PT_Boat_Fragment04_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PT_Boat_Fragment04_C, 0x0230);
		}

		// class ABP_PT_Boat_Fragment03_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PT_Boat_Fragment03__BP_PT_Boat_Fragment03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PT_Boat_Fragment03_C, 0x0230);
		}

		// class ABP_PT_Boat_Fragment02_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PT_Boat_Fragment02__BP_PT_Boat_Fragment02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PT_Boat_Fragment02_C, 0x0230);
		}

		// class UGA_M_Apex_Alligator_ThrashV2_BP_C : public UGA_M_ThrashBase_V2_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Apex_Alligator_ThrashV2_BP__GA_M_Apex_Alligator_ThrashV2_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Apex_Alligator_ThrashV2_BP_C, 0x0510);
		}

		// class UGE_Alligator_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Alligator_Native__GE_Alligator_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Alligator_Native_C, 0x0870);
		}

		// class AAIController_Alligator_BP_C : public AAIController_Hostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Alligator_BP__AIController_Alligator_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Alligator_BP_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Alligator_BP_C, 0x07D0);
		}

		// class UGE_Evo_MineralDigestion5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_MineralDigestion5__GE_Evo_MineralDigestion5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_MineralDigestion5_C, 0x0870);
		}

		// class UGE_Evo_Hearty5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Hearty5__GE_Evo_Hearty5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Hearty5_C, 0x0870);
		}

		// class UGE_Evo_Hearty3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Hearty3__GE_Evo_Hearty3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Hearty3_C, 0x0870);
		}

		// class UGE_Evo_Brutal_Muscles5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Brutal_Muscles5__GE_Evo_Brutal_Muscles5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Brutal_Muscles5_C, 0x0870);
		}

		// class UGE_Evo_Adrenal_Gland4_Rating_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Adrenal_Gland4_Rating__GE_Evo_Adrenal_Gland4_Rating_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Adrenal_Gland4_Rating_C, 0x0870);
		}

		// class UGE_Evo_Adrenal_Gland4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Adrenal_Gland4__GE_Evo_Adrenal_Gland4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Adrenal_Gland4_C, 0x0870);
		}

		// class UGE_Evo_Adrenal_Gland3_Rating_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Adrenal_Gland3_Rating__GE_Evo_Adrenal_Gland3_Rating_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Adrenal_Gland3_Rating_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Tail_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Tail_T5__GE_Evo_Bio_Electric_Tail_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Tail_T5_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Tail_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Tail_T4__GE_Evo_Bio_Electric_Tail_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Tail_T4_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Tail_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Tail_T3__GE_Evo_Bio_Electric_Tail_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Tail_T3_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Fins_Immunity_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Fins_Immunity_T5__GE_Evo_Bio_Electric_Fins_Immunity_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Fins_Immunity_T5_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Fins_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Fins_T4__GE_Evo_Bio_Electric_Fins_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Fins_T4_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Fins_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Fins_T3__GE_Evo_Bio_Electric_Fins_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Fins_T3_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Fins_Immunity_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Fins_Immunity_T3__GE_Evo_Bio_Electric_Fins_Immunity_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Fins_Immunity_T3_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Fins_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Fins_T2__GE_Evo_Bio_Electric_Fins_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Fins_T2_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_Bonus_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_Bonus_T4__GE_Bio_Electric_Body_Bonus_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_Bonus_T4_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_T3__GE_Bio_Electric_Body_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_T3_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_LungeBonus_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_LungeBonus_T3__GE_Bio_Electric_Body_LungeBonus_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_LungeBonus_T3_C, 0x0870);
		}

		// class ABP_Base_Yacht_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Yacht__BP_Base_Yacht_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Yacht_C, RadioAkComponent, 0x0CD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Yacht_C, 0x0CD8);
		}

		// class ABP_Base_Hunter_Yacht_C : public ABP_Base_Yacht_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Hunter_Yacht__BP_Base_Hunter_Yacht_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Hunter_Yacht_C, RadioAkComponent_1, 0x0CD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Hunter_Yacht_C, 0x0CE0);
		}

		// class UBP_AssaultRifle_Tier8_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Tier8__BP_AssaultRifle_Tier8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Tier8_C, 0x06E0);
		}

		// class UGE_GreatWhiteBiteCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GreatWhiteBiteCooldown_BP__GE_GreatWhiteBiteCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GreatWhiteBiteCooldown_BP_C, 0x0870);
		}

		// class UGE_GreatWhite_EvadeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GreatWhite_EvadeCD_BP__GE_GreatWhite_EvadeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GreatWhite_EvadeCD_BP_C, 0x0870);
		}

		// class UGE_SpearGun_Damage_Tier3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpearGun_Damage_Tier3__GE_SpearGun_Damage_Tier3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpearGun_Damage_Tier3_C, 0x0870);
		}

		// class ABP_Base_Sailboat_Blue_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Sailboat_Blue_Empty__BP_Base_Sailboat_Blue_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Sailboat_Blue_Empty_C, LastHitTime_0_1, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Sailboat_Blue_Empty_C, 0x0BFC);
		}

		// class UGE_PlayerSharkStrikeDamage_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PlayerSharkStrikeDamage__GE_PlayerSharkStrikeDamage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PlayerSharkStrikeDamage_C, 0x0870);
		}

		// class UGI_AI_VulnerableStun_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GI_AI_VulnerableStun__GI_AI_VulnerableStun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGI_AI_VulnerableStun_C, 0x0870);
		}

		// class ABP_Base_Small_FishingBoat_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Small_FishingBoat_Empty__BP_Base_Small_FishingBoat_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Small_FishingBoat_Empty_C, ME_DistanceSignificance, 0x0BF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Small_FishingBoat_Empty_C, SpotLight_1, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Small_FishingBoat_Empty_C, LastHitTime_1, 0x0C08);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Small_FishingBoat_Empty_C, 0x0C0C);
		}

		// class ABP_Base_TourAirboat_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_TourAirboat_Empty__BP_Base_TourAirboat_Empty_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_TourAirboat_Empty_C, ME_DistanceSignificance, 0x0BF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_TourAirboat_Empty_C, 0x0C00);
		}

		// class ABP_Base_WaterTrike_Empty_C : public ABP_BoatBaseNoNav_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_WaterTrike_Empty__BP_Base_WaterTrike_Empty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_WaterTrike_Empty_C, 0x0BF8);
		}

		// class AAIController_Alligator_Hunted_BP_C : public AAIController_Alligator_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Alligator_Hunted_BP__AIController_Alligator_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Alligator_Hunted_BP_C, 0x07D0);
		}

		// class AAIController_Barracuda_Hunted_BP_C : public AAIController_Barracuda_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Barracuda_Hunted_BP__AIController_Barracuda_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Barracuda_Hunted_BP_C, 0x07D0);
		}

		// class AAIController_KillerWhale_Hunted_BP_C : public AAIController_KillerWhale_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_KillerWhale_Hunted_BP__AIController_KillerWhale_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_KillerWhale_Hunted_BP_C, 0x07D0);
		}

		// class UGE_MissingBody04_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MissingBody04__GE_MissingBody04_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MissingBody04_C, 0x0870);
		}

		// class UVoiceGroupComponent_BP_C : public UTwAkEmitterArrayComponent
		TEST_METHOD(BlueprintGeneratedClass__VoiceGroupComponent_BP__VoiceGroupComponent_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceGroupComponent_BP_C, 0x0130);
		}

		// class AWHL_SpermWhale_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WHL_SpermWhale_BP__WHL_SpermWhale_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWHL_SpermWhale_BP_C, VoiceGroupComponent_BP1, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWHL_SpermWhale_BP_C, VoiceGroupComponent_BP, 0x1048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWHL_SpermWhale_BP_C, 0x1050);
		}

		// class AWHL_SpermWhale_Apex_BP_C : public AWHL_SpermWhale_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WHL_SpermWhale_Apex_BP__WHL_SpermWhale_Apex_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWHL_SpermWhale_Apex_BP_C, UberGraphFrame, 0x1050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWHL_SpermWhale_Apex_BP_C, 0x1058);
		}

		// class ASHK_HammerHead_Apex_BP_C : public ASHK_HammerHead_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_HammerHead_Apex_BP__SHK_HammerHead_Apex_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASHK_HammerHead_Apex_BP_C, UberGraphFrame, 0x1050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_HammerHead_Apex_BP_C, 0x1058);
		}

		// class UEnemyHealthWidget_BP_C : public UEnemyHealthWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EnemyHealthWidget_BP__EnemyHealthWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyHealthWidget_BP_C, LockAnimation, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnemyHealthWidget_BP_C, IdleAnimation, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnemyHealthWidget_BP_C, 0x02A8);
		}

		// class UFSH_Catfish_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__FSH_Catfish_ABP__FSH_Catfish_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFSH_Catfish_ABP_C, 0x5C8C);
		}

		// class UGE_AssaultRifle_Damage_Tier2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Damage_Tier2__GE_AssaultRifle_Damage_Tier2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Damage_Tier2_C, 0x0870);
		}

		// class ABP_USCG_SmallSkiff_Debris_Radar_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SmallSkiff_Debris_Radar__BP_USCG_SmallSkiff_Debris_Radar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SmallSkiff_Debris_Radar_C, 0x0230);
		}

		// class ABP_USCG_SmallSkiff_Debris_LeftSide_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SmallSkiff_Debris_LeftSide__BP_USCG_SmallSkiff_Debris_LeftSide_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SmallSkiff_Debris_LeftSide_C, 0x0230);
		}

		// class ABP_USCG_SmallSkiff_Debris_LeftRear_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SmallSkiff_Debris_LeftRear__BP_USCG_SmallSkiff_Debris_LeftRear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SmallSkiff_Debris_LeftRear_C, 0x0230);
		}

		// class ABP_USCG_SmallSkiff_Debris_LeftMotor_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SmallSkiff_Debris_LeftMotor__BP_USCG_SmallSkiff_Debris_LeftMotor_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SmallSkiff_Debris_LeftMotor_C, 0x0230);
		}

		// class AAssaultRifle_Projectile_Tier9_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Tier9__AssaultRifle_Projectile_Tier9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Tier9_C, 0x0270);
		}

		// class ABP_Yacht_Stern_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Yacht_Stern__BP_Yacht_Stern_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Yacht_Stern_C, 0x0230);
		}

		// class ABP_Yacht_RightSide_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Yacht_RightSide__BP_Yacht_RightSide_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Yacht_RightSide_C, 0x0230);
		}

		// class UAM_Bio_Electric_Body_Activate_T5_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_Bio_Electric_Body_Activate_T5__AM_Bio_Electric_Body_Activate_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Bio_Electric_Body_Activate_T5_C, 0x05E0);
		}

		// class UAM_EVO_Bone_Body_Activate_T5_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_EVO_Bone_Body_Activate_T5__AM_EVO_Bone_Body_Activate_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EVO_Bone_Body_Activate_T5_C, 0x05E0);
		}

		// class UGE_Evo_Bone_Body_PayResource_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_PayResource_T5__GE_Evo_Bone_Body_PayResource_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_PayResource_T5_C, 0x0870);
		}

		// class UAM_EVO_Bone_Body_Activate_T4_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_EVO_Bone_Body_Activate_T4__AM_EVO_Bone_Body_Activate_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_EVO_Bone_Body_Activate_T4_C, 0x05E0);
		}

		// class UGE_Evo_Bone_Body_PayResource_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_PayResource_T4__GE_Evo_Bone_Body_PayResource_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_PayResource_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_AddResource_Damage_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_AddResource_Damage_T4__GE_Evo_Bone_Body_AddResource_Damage_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_AddResource_Damage_T4_C, 0x0870);
		}

		// class UGA_Evo_Bone_Body_Lunge_ImpactVFX_T4_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_Lunge_ImpactVFX_T4__GA_Evo_Bone_Body_Lunge_ImpactVFX_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_Lunge_ImpactVFX_T4_C, 0x05E0);
		}

		// class UGA_Evo_Bone_Body_T3_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_T3__GA_Evo_Bone_Body_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_T3_C, 0x05E0);
		}

		// class UGA_Evo_Bone_Body_Lunge_ImpactVFX_T3_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_Lunge_ImpactVFX_T3__GA_Evo_Bone_Body_Lunge_ImpactVFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_Lunge_ImpactVFX_T3_C, 0x05E0);
		}

		// class UGA_Evo_Bone_Body_T2_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_T2__GA_Evo_Bone_Body_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_T2_C, 0x05E0);
		}

		// class UGA_Evo_Bone_Body_AddResource_T2_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Body_AddResource_T2__GA_Evo_Bone_Body_AddResource_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Body_AddResource_T2_C, 0x0438);
		}

		// class UGE_Evo_Shadow_Body_Lunge_ImpactVFX_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Lunge_ImpactVFX_T1__GE_Evo_Shadow_Body_Lunge_ImpactVFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Lunge_ImpactVFX_T1_C, 0x0870);
		}

		// class ABP_EVO_Shadow_Body_AOE_T1_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Body_AOE_T1__BP_EVO_Shadow_Body_AOE_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Body_AOE_T1_C, 0x02D0);
		}

		// class ABP_EVO_Shadow_Body_Aura_T1_C : public AME_AuraDamageActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Body_Aura_T1__BP_EVO_Shadow_Body_Aura_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Body_Aura_T1_C, 0x0400);
		}

		// class UGE_Evo_Bone_Body_AddResource_Damage_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_AddResource_Damage_T1__GE_Evo_Bone_Body_AddResource_Damage_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_AddResource_Damage_T1_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_AddResource_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_AddResource_T2__GE_Evo_Bone_Body_AddResource_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_AddResource_T2_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Stack_Count_10_C : public UGE_Evo_Shadow_Stack_Count_1_C
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack_Count_11__GE_Evo_Shadow_Stack_Count_10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_Count_10_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Lunge_ImpactVFX_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Lunge_ImpactVFX_T3__GE_Evo_Shadow_Body_Lunge_ImpactVFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Lunge_ImpactVFX_T3_C, 0x0870);
		}

		// class USHK_MenuMegaShark_ABP_C : public USHK_MenuSharkBase_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__SHK_MenuMegaShark_ABP__SHK_MenuMegaShark_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USHK_MenuMegaShark_ABP_C, 0x07A0);
		}

		// class UGrottoMapMarkerWidget_BP_C : public UGrottoMapMarkerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__GrottoMapMarkerWidget_BP__GrottoMapMarkerWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGrottoMapMarkerWidget_BP_C, UberGraphFrame, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGrottoMapMarkerWidget_BP_C, 0x0318);
		}

		// class UGE_Evo_Bone_Tail_FX_Submerge_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Tail_FX_Submerge_T1__GE_Evo_Bone_Tail_FX_Submerge_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Tail_FX_Submerge_T1_C, 0x0870);
		}

		// class ABP_Evo_Bone_Tail_Smash_Explosion_Submerge_Mega_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Evo_Bone_Tail_Smash_Explosion_Submerge_Mega__BP_Evo_Bone_Tail_Smash_Explosion_Submerge_Mega_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Evo_Bone_Tail_Smash_Explosion_Submerge_Mega_C, 0x02D0);
		}

		// class ABP_Evo_Bone_Tail_Smash_Explosion_Submerge_Elder_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Evo_Bone_Tail_Smash_Explosion_Submerge_Elder__BP_Evo_Bone_Tail_Smash_Explosion_Submerge_Elder_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Evo_Bone_Tail_Smash_Explosion_Submerge_Elder_C, 0x02D0);
		}

		// class UGE_SpearGun_Damage_Tier2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpearGun_Damage_Tier2__GE_SpearGun_Damage_Tier2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpearGun_Damage_Tier2_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Head_ImpactFX_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Head_ImpactFX_T2__GE_Evo_Bio_Electric_Head_ImpactFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Head_ImpactFX_T2_C, 0x0870);
		}

		// class UGA_Evo_Bio_Electric_Head_T2_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bio_Electric_Head_T2__GA_Evo_Bio_Electric_Head_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bio_Electric_Head_T2_C, 0x0400);
		}

		// class UGE_Bio_Electric_Body_AOE_Dam_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AOE_Dam_T2__GE_Bio_Electric_Body_AOE_Dam_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AOE_Dam_T2_C, 0x0870);
		}

		// class UGA_Bio_Electric_Body_T1_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_T1__GA_Bio_Electric_Body_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_T1_C, 0x05E0);
		}

		// class UGA_Bio_Electric_Body_AddResource_Eat_T1_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AddResource_Eat_T1__GA_Bio_Electric_Body_AddResource_Eat_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AddResource_Eat_T1_C, 0x0438);
		}

		// class UGA_Bio_Electric_Body_T2_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_T2__GA_Bio_Electric_Body_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_T2_C, 0x05E0);
		}

		// class UGE_Bio_Electric_Body_AOE_Dam_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AOE_Dam_T3__GE_Bio_Electric_Body_AOE_Dam_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AOE_Dam_T3_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_PayResource_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_PayResource_T3__GE_Bio_Electric_Body_PayResource_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_PayResource_T3_C, 0x0870);
		}

		// class UGA_Bio_Electric_Body_T3_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_T3__GA_Bio_Electric_Body_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_T3_C, 0x05E0);
		}

		// class UGA_Bio_Electric_Body_AddResource_Eat_T3_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AddResource_Eat_T3__GA_Bio_Electric_Body_AddResource_Eat_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AddResource_Eat_T3_C, 0x0438);
		}

		// class UGA_Bio_Electric_Body_AddResource_Dam_T3_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Bio_Electric_Body_AddResource_Dam_T3__GA_Bio_Electric_Body_AddResource_Dam_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Bio_Electric_Body_AddResource_Dam_T3_C, 0x0438);
		}

		// class UAM_Bio_Electric_Body_Activate_T4_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__AM_Bio_Electric_Body_Activate_T4__AM_Bio_Electric_Body_Activate_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_Bio_Electric_Body_Activate_T4_C, 0x05E0);
		}

		// class UGE_BoatCrew_Melee_Stun_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_BoatCrew_Melee_Stun__GE_BoatCrew_Melee_Stun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_BoatCrew_Melee_Stun_C, 0x0870);
		}

		// class AShotgun_Projectile_Tier10_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__Shotgun_Projectile_Tier10__Shotgun_Projectile_Tier10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShotgun_Projectile_Tier10_C, 0x0270);
		}

		// class ABP_USCG_MediumSkiff_Debris_Roof_Minion_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_Roof_Minion__BP_USCG_MediumSkiff_Debris_Roof_Minion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_Roof_Minion_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_RightSide_Minion_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_RightSide_Minion__BP_USCG_MediumSkiff_Debris_RightSide_Minion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_RightSide_Minion_C, 0x0230);
		}

		// class UBP_AssaultRifle_Tier10_C : public UBP_AssaultRifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_AssaultRifle_Tier10__BP_AssaultRifle_Tier10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AssaultRifle_Tier10_C, 0x06E0);
		}

		// class UBP_MachineGun_C : public UBP_Rifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MachineGun__BP_MachineGun_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MachineGun_C, 0x06E0);
		}

		// class UBP_Rifle_Tier5_C : public UBP_Rifle_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rifle_Tier5__BP_Rifle_Tier5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Rifle_Tier5_C, 0x06E0);
		}

		// class UBP_MachineGun_Bounty_C : public UBP_MachineGun_C
		TEST_METHOD(BlueprintGeneratedClass__BP_MachineGun_Bounty__BP_MachineGun_Bounty_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MachineGun_Bounty_C, 0x06E0);
		}

		// class ASpearProjectile_Tier2_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__SpearProjectile_Tier2__SpearProjectile_Tier2_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ASpearProjectile_Tier2_C, UberGraphFrame, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASpearProjectile_Tier2_C, 0x0278);
		}

		// class UBP_Speargun_Base_C : public UME_WeaponComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_Speargun_Base__BP_Speargun_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Speargun_Base_C, 0x06E0);
		}

		// class UBP_Speargun_Tier2_C : public UBP_Speargun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Speargun_Tier2__BP_Speargun_Tier2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Speargun_Tier2_C, 0x06E0);
		}

		// class UBP_Speargun_Tier3_C : public UBP_Speargun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Speargun_Tier3__BP_Speargun_Tier3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Speargun_Tier3_C, 0x06E0);
		}

		// class ABP_DynamiteStick_QuickFuse_C : public ABP_DynamiteStick_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DynamiteStick_QuickFuse__BP_DynamiteStick_QuickFuse_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DynamiteStick_QuickFuse_C, 0x0390);
		}

		// class AShotgun_Projectile_Tier6_C : public AME_Projectile
		TEST_METHOD(BlueprintGeneratedClass__Shotgun_Projectile_Tier6__Shotgun_Projectile_Tier6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AShotgun_Projectile_Tier6_C, 0x0270);
		}

		// class UBP_Shotgun_Tier4_C : public UBP_Shotgun_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Shotgun_Tier4__BP_Shotgun_Tier4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Shotgun_Tier4_C, 0x06E0);
		}

		// class UBP_Dynamite_C : public UME_WeaponComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_Dynamite__BP_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Dynamite_C, 0x06E0);
		}

		// class UGCD_Bite_Release_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GCD_Bite_Release__GCD_Bite_Release_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCD_Bite_Release_C, 0x07B8);
		}

		// class UNewQuestWidget_BP_C : public UTwBaseWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__NewQuestWidget_BP__NewQuestWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewQuestWidget_BP_C, UberGraphFrame, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewQuestWidget_BP_C, BlinkAnimation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewQuestWidget_BP_C, viewmap, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewQuestWidget_BP_C, 0x0270);
		}

		// class UGA_M_HammerHead_EvadeDown_BP_C : public UGA_M_HammerHead_EvadeUp_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_HammerHead_EvadeDown_BP__GA_M_HammerHead_EvadeDown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_HammerHead_EvadeDown_BP_C, 0x05E0);
		}

		// class ABP_JetSki_Bounty2_Assault_C : public ABP_Base_JetSki_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Bounty2_Assault__BP_JetSki_Bounty2_Assault_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_JetSki_Bounty2_Assault_C, UberGraphFrame, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Bounty2_Assault_C, 0x0CE8);
		}

		// class ABP_JetSki_Bounty1_Speargun_C : public ABP_Base_JetSki_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Bounty1_Speargun__BP_JetSki_Bounty1_Speargun_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_JetSki_Bounty1_Speargun_C, UberGraphFrame, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Bounty1_Speargun_C, 0x0CE8);
		}

		// class ABP_JetSki_Bounty1_Boss_C : public ABP_Base_JetSki_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Bounty1_Boss__BP_JetSki_Bounty1_Boss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_JetSki_Bounty1_Boss_C, UberGraphFrame, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_JetSki_Bounty1_Boss_C, LastHitTime_0_1, 0x0CE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Bounty1_Boss_C, 0x0CEC);
		}

		// class UGA_ThrashEscape_Player_C : public UME_GameplayAbility_ThrashEscape
		TEST_METHOD(BlueprintGeneratedClass__GA_ThrashEscape_Player__GA_ThrashEscape_Player_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_ThrashEscape_Player_C, 0x0448);
		}

		// class UGE_SprintMaxSpeed_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SprintMaxSpeed_T1__GE_SprintMaxSpeed_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SprintMaxSpeed_T1_C, 0x0870);
		}

		// class UAM_StartThrashUp_C : public UAM_StartThrashDown_C
		TEST_METHOD(BlueprintGeneratedClass__AM_StartThrashUp__AM_StartThrashUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_StartThrashUp_C, 0x0620);
		}

		// class UAM_StartThrashRight_C : public UAM_StartThrashDown_C
		TEST_METHOD(BlueprintGeneratedClass__AM_StartThrashRight__AM_StartThrashRight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAM_StartThrashRight_C, 0x0620);
		}

		// class UCreditScrollWidget_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CreditScrollWidget_BP__CreditScrollWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditScrollWidget_BP_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditScrollWidget_BP_C, RollCredits, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditScrollWidget_BP_C, Animation_CreditsScroll, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditScrollWidget_BP_C, FadeOut, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditScrollWidget_BP_C, FadeIn, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditScrollWidget_BP_C, CreditsScroll, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreditScrollWidget_BP_C, ScrollSpeed, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditScrollWidget_BP_C, 0x0264);
		}

		// class UManeaterPauseMenuView_BP_C : public UManeaterHUDPauseMenuView
		TEST_METHOD(WidgetBlueprintGeneratedClass__ManeaterPauseMenuView_BP__ManeaterPauseMenuView_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterPauseMenuView_BP_C, UberGraphFrame, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterPauseMenuView_BP_C, Out, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterPauseMenuView_BP_C, In, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UManeaterPauseMenuView_BP_C, Image_1, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManeaterPauseMenuView_BP_C, 0x0318);
		}

		// class UPlayerHealthBar_BP_C : public UPlayerHealthBarWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__PlayerHealthBar_BP__PlayerHealthBar_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBar_BP_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBar_BP_C, LowHealth, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBar_BP_C, breathsymbol, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBar_BP_C, healthsymbol, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerHealthBar_BP_C, outline, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerHealthBar_BP_C, 0x02E8);
		}

		// class UObjectiveDecoratorQueueWidget_BP_C : public UObjectiveDecoratorQueueWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ObjectiveDecoratorQueueWidget_BP__ObjectiveDecoratorQueueWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectiveDecoratorQueueWidget_BP_C, 0x0288);
		}

		// class AFSH_Grouper_Med_BP_C : public AFSH_Grouper_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Grouper_Med_BP__FSH_Grouper_Med_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Grouper_Med_BP_C, 0x1050);
		}

		// class AFSH_ParrotFish_Small_BP_C : public AFSH_ParrotFish_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_ParrotFish_Small_BP__FSH_ParrotFish_Small_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_ParrotFish_Small_BP_C, 0x1050);
		}

		// class APrologue_Sub_Explorable_Paths_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_Explorable_Paths__Prologue_Sub_Explorable_Paths_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_Explorable_Paths_C, 0x0228);
		}

		// class AIC_Sub_Explorable_Paths_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__IC_Sub_Explorable_Paths__IC_Sub_Explorable_Paths_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AIC_Sub_Explorable_Paths_C, 0x0228);
		}

		// class AWorldMap_Facade_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__WorldMap_Facade__WorldMap_Facade_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Facade_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Facade_C, GameMode, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Facade_C, FacadeSpots, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Facade_C, FacadePoints, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldMap_Facade_C, 0x0258);
		}

		// class ABP_USCG_CommandBoat_Debris_LeftRearRoof_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_CommandBoat_Debris_LeftRearRoof__BP_USCG_CommandBoat_Debris_LeftRearRoof_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_CommandBoat_Debris_LeftRearRoof_C, 0x0230);
		}

		// class ABP_USCG_CommandBoat_Debris_LeftRear_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_CommandBoat_Debris_LeftRear__BP_USCG_CommandBoat_Debris_LeftRear_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_CommandBoat_Debris_LeftRear_C, 0x0230);
		}

		// class ABP_USCG_CommandBoat_Debris_Bow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_CommandBoat_Debris_Bow__BP_USCG_CommandBoat_Debris_Bow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_CommandBoat_Debris_Bow_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_RightRear_Boss_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_RightRear_Boss__BP_USCG_MediumSkiff_Debris_RightRear_Boss_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_RightRear_Boss_C, 0x0230);
		}

		// class ABP_USCG_MediumSkiff_Debris_FrontLeftChair_Boss_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_FrontLeftChair_Boss__BP_USCG_MediumSkiff_Debris_FrontLeftChair_Boss_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_FrontLeftChair_Boss_C, 0x0230);
		}

		// class UBP_PlayerShark_Tail_IR_C : public UBP_Base_IR_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerShark_Tail_IR__BP_PlayerShark_Tail_IR_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_PlayerShark_Tail_IR_C, 0x0040);
		}

		// class UGE_Smash_Emerge_Damage_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Smash_Emerge_Damage__GE_Smash_Emerge_Damage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Smash_Emerge_Damage_C, 0x0870);
		}

		// class UGE_Smash_Submerge_Damage_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Smash_Submerge_Damage__GE_Smash_Submerge_Damage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Smash_Submerge_Damage_C, 0x0870);
		}

		// class UGE_Evo_Bone_HeadFX_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_HeadFX_T1__GE_Evo_Bone_HeadFX_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_HeadFX_T1_C, 0x0870);
		}

		// class UGE_Evo_Bone_HeadFX_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_HeadFX_T2__GE_Evo_Bone_HeadFX_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_HeadFX_T2_C, 0x0870);
		}

		// class UGE_KillerWhaleBiteDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhaleBiteDamage_BP__GE_KillerWhaleBiteDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhaleBiteDamage_BP_C, 0x0870);
		}

		// class UGE_KillerWhaleThrashDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhaleThrashDamage_BP__GE_KillerWhaleThrashDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhaleThrashDamage_BP_C, 0x0870);
		}

		// class UGE_SpearGun_Damage_Pete1_C : public UGE_SpearGun_Damage_Tier2_C
		TEST_METHOD(BlueprintGeneratedClass__GE_SpearGun_Damage_Pete1__GE_SpearGun_Damage_Pete1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpearGun_Damage_Pete1_C, 0x0870);
		}

		// class UGE_AlligatorThrashDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AlligatorThrashDamage_BP__GE_AlligatorThrashDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AlligatorThrashDamage_BP_C, 0x0870);
		}

		// class UGE_AlligatorVulnerableTaunt_BP1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AlligatorVulnerableTaunt_BP1__GE_AlligatorVulnerableTaunt_BP1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AlligatorVulnerableTaunt_BP1_C, 0x0870);
		}

		// class UGE_AlligatorBiteDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_AlligatorBiteDamage_BP__GE_AlligatorBiteDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AlligatorBiteDamage_BP_C, 0x0870);
		}

		// class UBP_GE_DynamiteExplosionPete1Battle_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_DynamiteExplosionPete1Battle__BP_GE_DynamiteExplosionPete1Battle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_DynamiteExplosionPete1Battle_C, 0x0870);
		}

		// class ABP_Pete2_Dynamite_Explosion_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Pete2_Dynamite_Explosion__BP_Pete2_Dynamite_Explosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Pete2_Dynamite_Explosion_C, 0x02D0);
		}

		// class UGE_AssaultRifle_Pete3Support_C : public UGE_AssaultRifle_Damage_Tier3_C
		TEST_METHOD(BlueprintGeneratedClass__GE_AssaultRifle_Pete3Support__GE_AssaultRifle_Pete3Support_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_AssaultRifle_Pete3Support_C, 0x0870);
		}

		// class UGE_SpermWhale_TailwhipDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhale_TailwhipDamage_BP__GE_SpermWhale_TailwhipDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhale_TailwhipDamage_BP_C, 0x0870);
		}

		// class UGE_KillerWhale_ShakeOffCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhale_ShakeOffCD_BP__GE_KillerWhale_ShakeOffCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhale_ShakeOffCD_BP_C, 0x0870);
		}

		// class UBP_Dynamite_Pete1Battle_C : public UBP_Dynamite_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Dynamite_Pete1Battle__BP_Dynamite_Pete1Battle_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Dynamite_Pete1Battle_C, 0x06E0);
		}

		// class ABP_Pete2_USCGSmall_V1_AI_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Pete2_USCGSmall_V1_AI_Controller__BP_Pete2_USCGSmall_V1_AI_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Pete2_USCGSmall_V1_AI_Controller_C, 0x07E8);
		}

		// class ABP_PetesBoat_V1_AI_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_PetesBoat_V1_AI_Controller__BP_PetesBoat_V1_AI_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PetesBoat_V1_AI_Controller_C, 0x07E8);
		}

		// class UGA_M_HammerHead_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_HammerHead_EvadeLeft_BP__GA_M_HammerHead_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_HammerHead_EvadeLeft_BP_C, 0x05E0);
		}

		// class AAIController_HammerHead_BP_C : public AAIController_Hostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_HammerHead_BP__AIController_HammerHead_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_HammerHead_BP_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_HammerHead_BP_C, 0x07D0);
		}

		// class AAIController_Apex_Barracuda_BP_C : public AAIController_Barracuda_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Apex_Barracuda_BP__AIController_Apex_Barracuda_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Apex_Barracuda_BP_C, UberGraphFrame, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Apex_Barracuda_BP_C, 0x07D8);
		}

		// class AAIController_KillerWhale_Apex_BP_C : public AAIController_KillerWhale_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_KillerWhale_Apex_BP__AIController_KillerWhale_Apex_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_KillerWhale_Apex_BP_C, UberGraphFrame, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_KillerWhale_Apex_BP_C, 0x07D8);
		}

		// class ABP_Airboat_Bounty5_Spearguns_C : public ABP_Base_Airboat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Bounty5_Spearguns__BP_Airboat_Bounty5_Spearguns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Bounty5_Spearguns_C, 0x0CDC);
		}

		// class ABP_Airboat_Bounty5_Assault_Dynamite_C : public ABP_Base_Airboat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Bounty5_Assault_Dynamite__BP_Airboat_Bounty5_Assault_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Bounty5_Assault_Dynamite_C, 0x0CDC);
		}

		// class ABP_Airboat_Debris_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Debris_Fragment5__BP_Airboat_Debris_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Debris_Fragment5_C, 0x0230);
		}

		// class ABP_Airboat_Debris_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Debris_Fragment4__BP_Airboat_Debris_Fragment4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Debris_Fragment4_C, 0x0230);
		}

		// class ABP_Airboat_Debris_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Debris_Fragment3__BP_Airboat_Debris_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Debris_Fragment3_C, 0x0230);
		}

		// class ABountyManager_BP_C : public AME_BountyManager
		TEST_METHOD(BlueprintGeneratedClass__BountyManager_BP__BountyManager_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyManager_BP_C, UberGraphFrame, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyManager_BP_C, DefaultSceneRoot, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABountyManager_BP_C, Base_Max_Num_Active_Divers, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABountyManager_BP_C, 0x05DC);
		}

		// class UGCD_General_1_0_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GCD_General_1_1__GCD_General_1_0_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCD_General_1_0_C, 0x07B8);
		}

		// class UBP_GE_Whipshot_S_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_Whipshot_S__BP_GE_Whipshot_S_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_Whipshot_S_C, 0x0870);
		}

		// class UGCD_Bite_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GCD_Bite__GCD_Bite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCD_Bite_C, 0x07B8);
		}

		// class UGE_Smash_Emerge_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Smash_Emerge__GE_Smash_Emerge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Smash_Emerge_C, 0x0870);
		}

		// class UGE_PlayerSharkTailStrikeFX_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PlayerSharkTailStrikeFX__GE_PlayerSharkTailStrikeFX_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PlayerSharkTailStrikeFX_C, 0x0870);
		}

		// class UGA_M_Base_Recovery_BP_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Base_Recovery_BP__GA_M_Base_Recovery_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Base_Recovery_BP_C, 0x05E0);
		}

		// class UGCD_Bite_FullMouth_C : public UGameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GCD_Bite_FullMouth__GCD_Bite_FullMouth_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCD_Bite_FullMouth_C, 0x07B8);
		}

		// class UGE_DoubleJump_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_DoubleJump__GE_DoubleJump_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_DoubleJump_C, 0x0870);
		}

		// class UGE_EvadeRight_Land_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_EvadeRight_Land__GE_EvadeRight_Land_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EvadeRight_Land_C, 0x0870);
		}

		// class UGE_Evade_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evade__GE_Evade_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evade_C, 0x0870);
		}

		// class UGE_EvadeUp_C : public UGE_Evade_C
		TEST_METHOD(BlueprintGeneratedClass__GE_EvadeUp__GE_EvadeUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_EvadeUp_C, 0x0870);
		}

		// class ABP_Diver_AIController_Hunter_Elite_C : public ABP_Diver_AIController_Hunter_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Diver_AIController_Hunter_Elite__BP_Diver_AIController_Hunter_Elite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Diver_AIController_Hunter_Elite_C, 0x07B8);
		}

		// class ABP_PassengerController_C : public AME_HumanPassengerController
		TEST_METHOD(BlueprintGeneratedClass__BP_PassengerController__BP_PassengerController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PassengerController_C, 0x07B8);
		}

		// class ABP_Base_Airboat_C : public ABP_BoatBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Airboat__BP_Base_Airboat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Airboat_C, SpotLight, 0x0CD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Base_Airboat_C, LastHitTime, 0x0CD8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Airboat_C, 0x0CDC);
		}

		// class ABP_USCG_Command_Ship_Bounty11_Dynamite_LMG_C : public ABP_Base_USCG_Command_Ship_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Command_Ship_Bounty11_Dynamite_LMG__BP_USCG_Command_Ship_Bounty11_Dynamite_LMG_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Command_Ship_Bounty11_Dynamite_LMG_C, 0x0CE8);
		}

		// class ABP_USCG_Small_Bounty8_Mixed_Divers_C : public ABP_Base_USCG_Small_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Small_Bounty8_Mixed_Divers__BP_USCG_Small_Bounty8_Mixed_Divers_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty8_Mixed_Divers_C, LastHitTime_1, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty8_Mixed_Divers_C, SequencePlayer_0_1, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty8_Mixed_Divers_C, SequenceActor_0_1, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty8_Mixed_Divers_C, CinematicCamera_0_1, 0x0CF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Small_Bounty8_Mixed_Divers_C, 0x0D00);
		}

		// class ABP_USCG_Medium_Bounty9_Mixed_Dynamite_C : public ABP_Base_USCG_Medium_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Medium_Bounty9_Mixed_Dynamite__BP_USCG_Medium_Bounty9_Mixed_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Medium_Bounty9_Mixed_Dynamite_C, 0x0CDC);
		}

		// class ABP_USCG_Medium_Bounty9_Assault_MixDivers_C : public ABP_Base_USCG_Medium_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Medium_Bounty9_Assault_MixDivers__BP_USCG_Medium_Bounty9_Assault_MixDivers_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Medium_Bounty9_Assault_MixDivers_C, 0x0CDC);
		}

		// class ABP_Airboat_Bounty6_Shotgun_Dynamite_C : public ABP_Base_Airboat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Airboat_Bounty6_Shotgun_Dynamite__BP_Airboat_Bounty6_Shotgun_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Airboat_Bounty6_Shotgun_Dynamite_C, 0x0CDC);
		}

		// class ABP_Human_HunterBoat_C : public ABP_Swimmer_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Human_HunterBoat__BP_Human_HunterBoat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Human_HunterBoat_C, 0x0F50);
		}

		// class UGE_Alligator_LungeClampCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Alligator_LungeClampCD_BP__GE_Alligator_LungeClampCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Alligator_LungeClampCD_BP_C, 0x0870);
		}

		// class UGA_M_Alligator_ThrashV2_BP_C : public UGA_M_ThrashBase_V2_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Alligator_ThrashV2_BP__GA_M_Alligator_ThrashV2_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Alligator_ThrashV2_BP_C, 0x0510);
		}

		// class UGA_M_SpermWhale_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_SpermWhale_EvadeLeft_BP__GA_M_SpermWhale_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_SpermWhale_EvadeLeft_BP_C, 0x05E0);
		}

		// class UGE_SpermWhale_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhale_Native__GE_SpermWhale_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhale_Native_C, 0x0870);
		}

		// class UGA_M_SpermWhale_Recovery_BP_C : public UGA_M_Base_Recovery_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_SpermWhale_Recovery_BP__GA_M_SpermWhale_Recovery_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_SpermWhale_Recovery_BP_C, 0x05E0);
		}

		// class UGE_Evo_Shadow_Teeth_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Teeth_T5__GE_Evo_Shadow_Teeth_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Teeth_T5_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Teeth_Bonus_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Teeth_Bonus_T5__GE_Evo_Shadow_Teeth_Bonus_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Teeth_Bonus_T5_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Teeth_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Teeth_T2__GE_Evo_Shadow_Teeth_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Teeth_T2_C, 0x0870);
		}

		// class UGE_Evo_AdvancedSonar2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_AdvancedSonar2__GE_Evo_AdvancedSonar2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_AdvancedSonar2_C, 0x0870);
		}

		// class UGE_Evo_Amphibious_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Amphibious_T4__GE_Evo_Amphibious_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Amphibious_T4_C, 0x0870);
		}

		// class UGE_Evo_ProteinDigestion4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_ProteinDigestion4__GE_Evo_ProteinDigestion4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_ProteinDigestion4_C, 0x0870);
		}

		// class AEVO_Bio_Electric_Tail_Projectile_T3_C : public AME_OverlapDamageProjectile
		TEST_METHOD(BlueprintGeneratedClass__EVO_Bio_Electric_Tail_Projectile_T3__EVO_Bio_Electric_Tail_Projectile_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AEVO_Bio_Electric_Tail_Projectile_T3_C, 0x0268);
		}

		// class UGE_Evo_FatDigestion4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_FatDigestion4__GE_Evo_FatDigestion4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_FatDigestion4_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_AddResource_Damage_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_AddResource_Damage_T4__GE_Evo_Shadow_Body_AddResource_Damage_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_AddResource_Damage_T4_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_AddResource_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_AddResource_T4__GE_Evo_Shadow_Body_AddResource_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_AddResource_T4_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Body_AddResource_T4_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_AddResource_T4__GA_Evo_Shadow_Body_AddResource_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_AddResource_T4_C, 0x0438);
		}

		// class UGA_Evo_Shadow_Body_AddResource_Damage_T4_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_AddResource_Damage_T4__GA_Evo_Shadow_Body_AddResource_Damage_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_AddResource_Damage_T4_C, 0x0438);
		}

		// class UGE_Evo_Shadow_Body_PayResource_T5_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_PayResource_T5__GE_Evo_Shadow_Body_PayResource_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_PayResource_T5_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Body_AddResource_T5_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_AddResource_T5__GA_Evo_Shadow_Body_AddResource_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_AddResource_T5_C, 0x0438);
		}

		// class UGA_Evo_Shadow_Body_AddResource_Damage_T5_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_AddResource_Damage_T5__GA_Evo_Shadow_Body_AddResource_Damage_T5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_AddResource_Damage_T5_C, 0x0438);
		}

		// class UGE_Evo_Shadow_Body_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_T3__GE_Evo_Shadow_Body_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_T3_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_LungeBonus_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_LungeBonus_T3__GE_Evo_Shadow_Body_LungeBonus_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_LungeBonus_T3_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Bonus_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Bonus_T3__GE_Evo_Shadow_Body_Bonus_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Bonus_T3_C, 0x0870);
		}

		// class UBP_GE_PoisonBarrelDMG_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_PoisonBarrelDMG__BP_GE_PoisonBarrelDMG_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_PoisonBarrelDMG_C, 0x0870);
		}

		// class AWorldMap_Blocking_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__WorldMap_Blocking__WorldMap_Blocking_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldMap_Blocking_C, 0x0228);
		}

		// class ALightGenerator_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__LightGenerator_BP__LightGenerator_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightGenerator_BP_C, Billboard, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightGenerator_BP_C, MeshList, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightGenerator_BP_C, ActorsInWorld, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightGenerator_BP_C, StoredMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightGenerator_BP_C, MeshToAddlightsTo, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightGenerator_BP_C, SpawnedTag, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightGenerator_BP_C, MeshExcludeList, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALightGenerator_BP_C, StoredActorsWithTag, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALightGenerator_BP_C, 0x0290);
		}

		// class ABP_USCG_Small_Bounty_Assault_C : public ABP_Base_USCG_Small_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Small_Bounty_Assault__BP_USCG_Small_Bounty_Assault_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty_Assault_C, LastHitTime_1, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty_Assault_C, SequencePlayer_0_1, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty_Assault_C, SequenceActor_0_1, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Small_Bounty_Assault_C, CinematicCamera_0_1, 0x0CF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Small_Bounty_Assault_C, 0x0D00);
		}

		// class ADEP_BP_USCG_Small_Hunter_Minion_TranqAssault_C : public ABP_Base_USCG_Small_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__DEP_BP_USCG_Small_Hunter_Minion_TranqAssault__DEP_BP_USCG_Small_Hunter_Minion_TranqAssault_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADEP_BP_USCG_Small_Hunter_Minion_TranqAssault_C, 0x0CE4);
		}

		// class UGE_Spade_EvadeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Spade_EvadeCD_BP__GE_Spade_EvadeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Spade_EvadeCD_BP_C, 0x0870);
		}

		// class USHK_Seal_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__SHK_Seal_ABP__SHK_Seal_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USHK_Seal_ABP_C, 0x5C8C);
		}

		// class AAIController_Seal_BP_C : public AAIController_NonHostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Seal_BP__AIController_Seal_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Seal_BP_C, 0x07C8);
		}

		// class ABP_FishingTrawlerStern_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawlerStern__BP_FishingTrawlerStern_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawlerStern_C, 0x0230);
		}

		// class ABP_FishingTrawlerFragment8_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FishingTrawlerFragment8__BP_FishingTrawlerFragment8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FishingTrawlerFragment8_C, 0x0230);
		}

		// class ABP_WaterTrike_Fragment8_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_WaterTrike_Fragment8__BP_WaterTrike_Fragment8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_WaterTrike_Fragment8_C, 0x0230);
		}

		// class ABP_TourAirBoat_Fragment8_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TourAirBoat_Fragment8__BP_TourAirBoat_Fragment8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TourAirBoat_Fragment8_C, 0x0230);
		}

		// class ABP_TourAirBoat_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TourAirBoat_Fragment5__BP_TourAirBoat_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TourAirBoat_Fragment5_C, 0x0230);
		}

		// class ABP_TourAirBoat_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TourAirBoat_Fragment3__BP_TourAirBoat_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TourAirBoat_Fragment3_C, 0x0230);
		}

		// class ABP_TourAirBoat_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TourAirBoat_Fragment2__BP_TourAirBoat_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TourAirBoat_Fragment2_C, 0x0230);
		}

		// class ABP_TourAirBoat_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_TourAirBoat_Fragment1__BP_TourAirBoat_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TourAirBoat_Fragment1_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment2_Yellow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment2_Yellow__BP_Sailboat_Fragment2_Yellow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment2_Yellow_C, 0x0230);
		}

		// class ABP_Sailboat_Boom_Yellow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Boom_Yellow__BP_Sailboat_Boom_Yellow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Boom_Yellow_C, 0x0230);
		}

		// class ABP_Sailboat_Pulley_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Pulley__BP_Sailboat_Pulley_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Pulley_C, 0x0230);
		}

		// class ABP_Sailboat_Fragment7_Blue_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Sailboat_Fragment7_Blue__BP_Sailboat_Fragment7_Blue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Sailboat_Fragment7_Blue_C, 0x0230);
		}

		// class ABP_PontoonBoat_Fragment9_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment9__BP_PontoonBoat_Fragment9_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment9_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment9_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment8_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment8__BP_PontoonBoat_Fragment8_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment8_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment8_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment7__BP_PontoonBoat_Fragment7_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment7_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment7_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment15_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment15__BP_PontoonBoat_Fragment15_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment15_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment15_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment14_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment14__BP_PontoonBoat_Fragment14_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment14_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment14_C, 0x0238);
		}

		// class ABP_PontoonBoat_Fragment13_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_PontoonBoat_Fragment13__BP_PontoonBoat_Fragment13_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PontoonBoat_Fragment13_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PontoonBoat_Fragment13_C, 0x0238);
		}

		// class ABP_Human_MafiaHunter_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Human_MafiaHunter__BP_Human_MafiaHunter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Human_MafiaHunter_C, 0x0F50);
		}

		// class ABP_USCG_SpawnDiversGem_AICont_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SpawnDiversGem_AICont__BP_USCG_SpawnDiversGem_AICont_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SpawnDiversGem_AICont_C, 0x07E8);
		}

		// class ABP_Catamaran_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Catamaran_Fragment6__BP_Catamaran_Fragment6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Catamaran_Fragment6_C, 0x0230);
		}

		// class ABP_Catamaran_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Catamaran_Fragment5__BP_Catamaran_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Catamaran_Fragment5_C, 0x0230);
		}

		// class UGE_Swordfish_BiteDamage_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Swordfish_BiteDamage_BP__GE_Swordfish_BiteDamage_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Swordfish_BiteDamage_BP_C, 0x0870);
		}

		// class UGE_Swordfish_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Swordfish_Native__GE_Swordfish_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Swordfish_Native_C, 0x0870);
		}

		// class ABP_Kayak_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Kayak_Fragment1__BP_Kayak_Fragment1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Kayak_Fragment1_C, 0x0230);
		}

		// class ABP_Canoe_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Canoe_Fragment6__BP_Canoe_Fragment6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Canoe_Fragment6_C, 0x0230);
		}

		// class ABP_Canoe_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Canoe_Fragment5__BP_Canoe_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Canoe_Fragment5_C, 0x0230);
		}

		// class ABP_Canoe_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Canoe_Fragment2__BP_Canoe_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Canoe_Fragment2_C, 0x0230);
		}

		// class ABP_Bumperboat_FragmentFragment_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bumperboat_FragmentFragment__BP_Bumperboat_FragmentFragment_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bumperboat_FragmentFragment_C, 0x0230);
		}

		// class AFSH_Muskellunge_BP_C : public AFSH_Barracuda_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Muskellunge_BP__FSH_Muskellunge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Muskellunge_BP_C, 0x1050);
		}

		// class ABP_Base_Catamaran_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Catamaran_Controller__BP_Base_Catamaran_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Catamaran_Controller_C, 0x07E8);
		}

		// class ABP_Catamaran_Fragment9_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Catamaran_Fragment9__BP_Catamaran_Fragment9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Catamaran_Fragment9_C, 0x0230);
		}

		// class ABP_Objective_Hunter_AIController_Dynamite_C : public ABP_Base_Hunter_AIController_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Objective_Hunter_AIController_Dynamite__BP_Objective_Hunter_AIController_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Objective_Hunter_AIController_Dynamite_C, 0x07E8);
		}

		// class ABP_Hunter_Melee_Gym_AIController_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Hunter_Melee_Gym_AIController__BP_Hunter_Melee_Gym_AIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Hunter_Melee_Gym_AIController_C, 0x07E8);
		}

		// class ABP_Base_Unicorn_Raft_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Unicorn_Raft_Controller__BP_Base_Unicorn_Raft_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Unicorn_Raft_Controller_C, 0x07E8);
		}

		// class AFSH_MahiMahi_Small_BP_C : public AFSH_MahiMahi_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_MahiMahi_Small_BP__FSH_MahiMahi_Small_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_MahiMahi_Small_BP_C, 0x1050);
		}

		// class ABP_Objective_Hunter_AIController_WithDivers1_C : public ABP_Base_Hunter_AIController_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Objective_Hunter_AIController_WithDivers1__BP_Objective_Hunter_AIController_WithDivers1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Objective_Hunter_AIController_WithDivers1_C, 0x07E8);
		}

		// class ABP_Objective_Hunter_AIController_WithDivers1_Dynamite_C : public ABP_Objective_Hunter_AIController_WithDivers1_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Objective_Hunter_AIController_WithDivers1_Dynamite__BP_Objective_Hunter_AIController_WithDivers1_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Objective_Hunter_AIController_WithDivers1_Dynamite_C, 0x07E8);
		}

		// class ABP_Base_FishingTrawler_Objective_C : public ABP_Base_FishingTrawler_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_FishingTrawler_Objective__BP_Base_FishingTrawler_Objective_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_FishingTrawler_Objective_C, 0x0CD4);
		}

		// class ABP_SportFishingBoat_Radar_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Radar__BP_SportFishingBoat_Radar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Radar_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment3_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment3__BP_Tikibar_Fragment3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment3_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment2__BP_Tikibar_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment2_C, 0x0230);
		}

		// class ABP_Tikibar_Fragment15_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Tikibar_Fragment15__BP_Tikibar_Fragment15_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tikibar_Fragment15_C, 0x0230);
		}

		// class AWHL_KillerWhale_Albino_BP_C : public AWHL_KillerWhale_BP_C
		TEST_METHOD(BlueprintGeneratedClass__WHL_KillerWhale_Albino_BP__WHL_KillerWhale_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWHL_KillerWhale_Albino_BP_C, 0x1050);
		}

		// class AFSH_KingMackerel_Med_Albino_BP_C : public AFSH_KingMackerel_Med_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_KingMackerel_Med_Albino_BP__FSH_KingMackerel_Med_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_KingMackerel_Med_Albino_BP_C, 0x1048);
		}

		// class AFSH_KingMackerel_Large_Albino_BP_C : public AFSH_KingMackerel_Large_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_KingMackerel_Large_Albino_BP__FSH_KingMackerel_Large_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_KingMackerel_Large_Albino_BP_C, 0x1048);
		}

		// class UGE_MahiMahi_EvadeCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MahiMahi_EvadeCD_BP__GE_MahiMahi_EvadeCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MahiMahi_EvadeCD_BP_C, 0x0870);
		}

		// class UBeerBottle_BP_C : public UME_PassengerAttachment
		TEST_METHOD(BlueprintGeneratedClass__BeerBottle_BP__BeerBottle_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBeerBottle_BP_C, 0x06E0);
		}

		// class ULeftHanded_Oar_C : public UME_PassengerAttachment
		TEST_METHOD(BlueprintGeneratedClass__LeftHanded_Oar__LeftHanded_Oar_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeftHanded_Oar_C, 0x06E0);
		}

		// class ALG_JunctionSecondaryLight_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_JunctionSecondaryLight__LG_JunctionSecondaryLight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_JunctionSecondaryLight_C, 0x0238);
		}

		// class AWorldMap_Grottos_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__WorldMap_Grottos__WorldMap_Grottos_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Grottos_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Grottos_C, Grotto_PRO_ExecuteUbergraph_WorldMap_Grottos_RefProperty, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldMap_Grottos_C, 0x0238);
		}

		// class ALG_GrottoPurple_C : public ALG_Pointlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_GrottoPurple__LG_GrottoPurple_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_GrottoPurple_C, 0x0238);
		}

		// class AME_Grotto_BP_C : public AME_Grotto
		TEST_METHOD(BlueprintGeneratedClass__ME_Grotto_BP__ME_Grotto_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto_BP_C, UberGraphFrame, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto_BP_C, Billboard, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto_BP_C, Arrow, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto_BP_C, Widget, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto_BP_C, ShowInWorldWidget, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto_BP_C, UnknownData_DCZL, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto_BP_C, WidgetIndex, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto_BP_C, IsFromFastTravel_, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_Grotto_BP_C, IsInGrotto_, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_Grotto_BP_C, 0x0292);
		}

		// class AWorldMap_Gameplay_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__WorldMap_Gameplay__WorldMap_Gameplay_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Gameplay_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Gameplay_C, BP_BreakableGate_Adult4_2_ExecuteUbergraph_WorldMap_Gameplay_RefProperty, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Gameplay_C, TriggerBox_3_ExecuteUbergraph_WorldMap_Gameplay_RefProperty, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Gameplay_C, MeetPeteTeleportLocation_ExecuteUbergraph_WorldMap_Gameplay_RefProperty, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldMap_Gameplay_C, 0x0248);
		}

		// class AWorldMap_Regions_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__WorldMap_Regions__WorldMap_Regions_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Regions_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Regions_C, Sky, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Regions_C, DMI_RegionVolume_ExecuteUbergraph_WorldMap_Regions_RefProperty, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Regions_C, WB_RegionVolume_ExecuteUbergraph_WorldMap_Regions_RefProperty, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::AWorldMap_Regions_C, IC_RegionVolume_ExecuteUbergraph_WorldMap_Regions_RefProperty, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AWorldMap_Regions_C, 0x0250);
		}

		// class ABP_PlayerShark_C : public AME_PlayerSharkCharacter
		TEST_METHOD(BlueprintGeneratedClass__BP_PlayerShark__BP_PlayerShark_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UberGraphFrame, 0x1ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, FX_UnderwaterParticulates_P, 0x1ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Overlay, 0x1EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, ParticleSystem, 0x1EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, PectoralBubbles, 0x1EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, DorsalBubbles, 0x1EF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, MarineSnow, 0x1F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, EvolutionBodyAbility_Timeline_BodyTextureBlend_Brightness_D846599F492AE909DA231D89CA8BB89D, 0x1F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, EvolutionBodyAbility_Timeline__Direction_D846599F492AE909DA231D89CA8BB89D, 0x1F0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_XDH8, 0x1F0D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, EvolutionBodyAbility_Timeline, 0x1F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, TimeDilationTmeline_0_1_C6CF2D0C4DD2B12F980BE6A961CCA172, 0x1F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, TimeDilationTmeline__Direction_C6CF2D0C4DD2B12F980BE6A961CCA172, 0x1F1C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_0YHT, 0x1F1D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, TimeDilationTmeline, 0x1F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, ForceRotation_Forced_Additive_71D73A224BC2B8FEF937CE9E2C5476FD, 0x1F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, ForceRotation_Forced_Rotation_71D73A224BC2B8FEF937CE9E2C5476FD, 0x1F2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, ForceRotation__Direction_71D73A224BC2B8FEF937CE9E2C5476FD, 0x1F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_V29Q, 0x1F31);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, ForceRotation, 0x1F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, CurrentMovementAKEvent, 0x1F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, PlayerSharkController, 0x1F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, ManeaterHUD, 0x1F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, PlayerSharkState, 0x1F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, IsInCurrent, 0x1F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Triggered, 0x1F61);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Splashdown, 0x1F62);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, FirstPass, 0x1F63);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UseTailBubble, 0x1F64);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, RunIntensity, 0x1F65);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_MM8K, 0x1F66);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, SprintCounter, 0x1F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, CurrentArrayIndex, 0x1F6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, BubbleTrail, 0x1F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, DorsalEmitter, 0x1F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, L_Ventral, 0x1F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, R_Ventral, 0x1F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, CaudalTip, 0x1F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, SetShark, 0x1FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, SurfaceBreak, 0x1FA4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_K5XQ, 0x1FA5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, AboveWater, 0x1FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, BelowWater, 0x1FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, tempLastTickRotation, 0x1FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, tempDeltaRotation, 0x1FC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, tempAudioYawRange, 0x1FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, tempAudioPitchRange, 0x1FD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, tempYawValue, 0x1FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, tempPitchValue, 0x1FDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, tempSpeed, 0x1FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, InProximity, 0x1FE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_0Y9F, 0x1FE5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, L_BoostParticle, 0x1FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, R_BoostParticle, 0x1FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, LungeTier, 0x1FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, JumpTier, 0x1FFC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, CurrentAnimMontage, 0x2000);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, CachedAudioBiteEvent, 0x2008);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, TailwhipParticle, 0x2010);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, TailwhipStage, 0x2018);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_0WWL, 0x2019);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, KnifingForcedRotation, 0x201C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, KnifingIntroRotationAmount, 0x2028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, LungeTime, 0x202C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, ElectroGlow, 0x2030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, LungeElectroBodyGlow, 0x203C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, ElectroON, 0x2040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_39P1, 0x2041);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, ShadowGlow, 0x2044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, ShadowON, 0x2050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_OILT, 0x2051);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, CurrentPP, 0x2060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, TimeDilationPP, 0x25A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, DefaultPP, 0x2AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, bPlayingTimeDilationPP, 0x3020);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_CHY8, 0x3021);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, SprintPSC, 0x3028);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UpdateFX, 0x3030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, FXUpdateDuration, 0x3040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, FXUpdateRemaining, 0x3044);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, FXUpdateRate, 0x3048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, FXBodyGlow, 0x304C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, FXUpdating, 0x3058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_52F8, 0x3059);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, BoneGlow, 0x305C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, f_TTS, 0x3068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_RV11, 0x306C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, TTS_Timer, 0x3070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Crawfish_Completion_Pct, 0x3078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Fawtick_Completion_Pct, 0x307C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Dead_Horse_Completion_Pct, 0x3080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Golden_Shores_Completion_Pct, 0x3084);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Sapphire_Bay_Completion_Pct, 0x3088);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Prosperity_Completion_Pct, 0x308C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Caviar_Completion_Pct, 0x3090);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, The_Gulf_Completion_Pct, 0x3094);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Storyline_Index, 0x3098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Splunk_Data_Check, 0x309C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, UnknownData_DOAJ, 0x309D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_PlayerShark_C, Current_Evolution_Count, 0x30A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_PlayerShark_C, 0x30A4);
		}

		// class ABP_CaveCurrent_MiddleUp_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_CaveCurrent_MiddleUp__BP_CaveCurrent_MiddleUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_CaveCurrent_MiddleUp_C, 0x0280);
		}

		// class ABP_Bats_Circling_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Bats_Circling_PS__BP_Bats_Circling_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bats_Circling_PS_C, 0x0280);
		}

		// class ABP_Base_Yacht_Empty_GrayGreen_C : public ABP_Base_Yacht_Empty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Yacht_Empty_GrayGreen__BP_Base_Yacht_Empty_GrayGreen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Yacht_Empty_GrayGreen_C, 0x0C00);
		}

		// class ABP_Base_Yacht_Empty_BlackWhite_C : public ABP_Base_Yacht_Empty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Yacht_Empty_BlackWhite__BP_Base_Yacht_Empty_BlackWhite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Yacht_Empty_BlackWhite_C, 0x0C00);
		}

		// class ABP_UnderwaterMonster_Laser_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_UnderwaterMonster_Laser_PS__BP_UnderwaterMonster_Laser_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_UnderwaterMonster_Laser_PS_C, 0x0280);
		}

		// class ABP_OceanSewagePipe_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_OceanSewagePipe_PS__BP_OceanSewagePipe_PS_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_OceanSewagePipe_PS_C, TwAkEmitterArray, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_OceanSewagePipe_PS_C, 0x0288);
		}

		// class UME_AlbinoSpawnCondition_C : public UME_SpawnListCondition_StorylineProgress
		TEST_METHOD(BlueprintGeneratedClass__ME_AlbinoSpawnCondition__ME_AlbinoSpawnCondition_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UME_AlbinoSpawnCondition_C, 0x0038);
		}

		// class AAIController_ExploreTurtle_BP_C : public AAIController_Turtle_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_ExploreTurtle_BP__AIController_ExploreTurtle_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_ExploreTurtle_BP_C, 0x07C8);
		}

		// class AFSH_ParrotFish_ExploreSmall_BP_C : public AFSH_ParrotFish_Small_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_ParrotFish_ExploreSmall_BP__FSH_ParrotFish_ExploreSmall_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_ParrotFish_ExploreSmall_BP_C, 0x1050);
		}

		// class AFSH_ExploreGrouper_Large_BP_C : public AFSH_Grouper_Large_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_ExploreGrouper_Large_BP__FSH_ExploreGrouper_Large_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_ExploreGrouper_Large_BP_C, 0x1050);
		}

		// class ABP_DispersalBubbles_Escaping_Random_ENV_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_DispersalBubbles_Escaping_Random_ENV_PS__BP_DispersalBubbles_Escaping_Random_ENV_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DispersalBubbles_Escaping_Random_ENV_PS_C, 0x0280);
		}

		// class ABP_TunnelCurrent_OpeningUpSuction_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_TunnelCurrent_OpeningUpSuction__BP_TunnelCurrent_OpeningUpSuction_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TunnelCurrent_OpeningUpSuction_C, 0x0280);
		}

		// class ABP_TunnelCurrent_OpeningSuction_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_TunnelCurrent_OpeningSuction__BP_TunnelCurrent_OpeningSuction_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TunnelCurrent_OpeningSuction_C, 0x0280);
		}

		// class ABP_TunnelCurrent_MiddleUp_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_TunnelCurrent_MiddleUp__BP_TunnelCurrent_MiddleUp_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_TunnelCurrent_MiddleUp_C, 0x0280);
		}

		// class ABP_Tropical_Fishball_Sprite_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Tropical_Fishball_Sprite_PS__BP_Tropical_Fishball_Sprite_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Tropical_Fishball_Sprite_PS_C, 0x0280);
		}

		// class ABP_ToxicStream_Small_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_ToxicStream_Small_PS__BP_ToxicStream_Small_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_ToxicStream_Small_PS_C, 0x0280);
		}

		// class ABP_Minnow_Fishball_Sprite_Large_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Minnow_Fishball_Sprite_Large__BP_Minnow_Fishball_Sprite_Large_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Minnow_Fishball_Sprite_Large_C, 0x0280);
		}

		// class ABP_Minnow_Fishball_Sprite_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Minnow_Fishball_Sprite__BP_Minnow_Fishball_Sprite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Minnow_Fishball_Sprite_C, 0x0280);
		}

		// class ASB_Sub_FX_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__SB_Sub_FX__SB_Sub_FX_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASB_Sub_FX_C, 0x0228);
		}

		// class ADMI_Sub_LD_Env_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DMI_Sub_LD_Env__DMI_Sub_LD_Env_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_LD_Env_C, MotherPawn, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ADMI_Sub_LD_Env_C, DiverPawn, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADMI_Sub_LD_Env_C, 0x0238);
		}

		// class APrologue_Sub_Explorable_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_Explorable__Prologue_Sub_Explorable_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_Explorable_C, 0x0228);
		}

		// class ADO_Sub_HD_Env_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DO_Sub_HD_Env__DO_Sub_HD_Env_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADO_Sub_HD_Env_C, 0x0228);
		}

		// class APrologue_Sub_NightLighting_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_NightLighting__Prologue_Sub_NightLighting_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_NightLighting_C, UberGraphFrame, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_NightLighting_C, PrologueSpotLights, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_NightLighting_C, ProloguePointLights, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_NightLighting_C, PrologueFX, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_NightLighting_C, GameMode, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_NightLighting_C, PrologueSeagulls, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_NightLighting_C, PrologueBats, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_NightLighting_C, 0x0288);
		}

		// class ABP_Moths_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Moths_PS__BP_Moths_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Moths_PS_C, 0x0280);
		}

		// class ACaveJunction_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CaveJunction_BP__CaveJunction_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, StaticMesh1, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, TwAkSplineProximityEffects, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Cover4, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Cover1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Cover5, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Junction_5, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Cover2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Cover3, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Junction4, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Junction3, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Junction2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Junction, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, StaticMesh, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, DefaultSceneRoot, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Generate_Detail_Meshes, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, UnknownData_9HCW, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, GenerationPoints, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, CurrentMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, StartLineTrace, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, UnknownData_2W48, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, SidesToOpen, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, TEMPSidestoOpen, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, MeshGenerationSeed, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, InstanceComponent, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Hierarchical_Instance_Array, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, SpawnDetailOnlyOnHere, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, DetailMeshInstances, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, LightSpawnLocation, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, Light_Component_Array, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, ISMComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveJunction_BP_C, ISMArray, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACaveJunction_BP_C, 0x0378);
		}

		// class ACaveSpline_BP_C : public AActor
		TEST_METHOD(BlueprintGeneratedClass__CaveSpline_BP__CaveSpline_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, UberGraphFrame, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, Spline, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, DefaultSceneRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, SplineMeshArray, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, SplineMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, Show_Detail, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, UnknownData_QNUM, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, DetailMeshArray, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, DetailSpacing, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, DetailXStart, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, DetailYStart, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, DetailDrawScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, SplineMeshTempArray, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, NormalizeTangents, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, UnknownData_E8I9, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, NewVar_1, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, Length, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, MeshTileLength, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, Segments, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, CurrentIndex, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, CurrentMesh, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, MeshIndex, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, CurrentPointDistance, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, NextPointDistance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, Roll, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, StartScale, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, EndScale, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, SplineMaxDrawDistance, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, StartDrawIndex, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, Last_Draw_Index, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, EndLineTrace, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, StartLineTrace, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, UnknownData_D6PX, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, TEMPStaticMeshLocation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, PipeSplineInstanceST, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, InstanceGroup, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, UnknownData_6OX5, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, TempStaticMeshST, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, TEMPNumberMeshToSpawn, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, UnknownData_LYJ1, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, TEMPInstanceComponent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, Hierarchical_Instance_Array, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, MeshGenerationSeed, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, TEMPDetailMeshArray, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACaveSpline_BP_C, CoverMeshOffset, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACaveSpline_BP_C, 0x0374);
		}

		// class ASB_Sub_Paths_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__SB_Sub_Paths__SB_Sub_Paths_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASB_Sub_Paths_C, 0x0228);
		}

		// class APrologue_Sub_LD_Env_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_LD_Env__Prologue_Sub_LD_Env_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::APrologue_Sub_LD_Env_C, UberGraphFrame, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_LD_Env_C, 0x0230);
		}

		// class ASB_Sub_HD_Env_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__SB_Sub_HD_Env__SB_Sub_HD_Env_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASB_Sub_HD_Env_C, 0x0228);
		}

		// class ABP_Seagull_Floating_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_Seagull_Floating_PS__BP_Seagull_Floating_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Seagull_Floating_PS_C, 0x0280);
		}

		// class AME_LandmarkObjective_BP_C : public AME_LandmarkObjective
		TEST_METHOD(BlueprintGeneratedClass__ME_LandmarkObjective_BP__ME_LandmarkObjective_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, UberGraphFrame, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, AkLandMarkTell, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, Widget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, Timeline_0_NewTrack_0_A06BBFD04A7A4A5B72ECF6964273E2A0, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, Timeline_0__Direction_A06BBFD04A7A4A5B72ECF6964273E2A0, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, UnknownData_6NBW, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, Timeline_1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, Player, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, BoxExtents, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, ObjectiveName, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, UnknownData_OCJ9, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, NarratorAudio, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, SequencePlayer, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, SequenceActor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, CinematicCamera, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, CinematicSequence, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, CinematicSubLevel, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, InWorldWidget, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, ShowInWorldWidget_, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, UnknownData_5PKC, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, WidgetIndex, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, AssociatedSign, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, AttachedEmitter, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AME_LandmarkObjective_BP_C, NewVar_1, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AME_LandmarkObjective_BP_C, 0x02E9);
		}

		// class ADO_Sub_Gameplay_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__DO_Sub_Gameplay__DO_Sub_Gameplay_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADO_Sub_Gameplay_C, 0x0228);
		}

		// class ASB_Sub_Gameplay_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__SB_Sub_Gameplay__SB_Sub_Gameplay_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASB_Sub_Gameplay_C, 0x0228);
		}

		// class UNiagaraMergeable : public UObject
		TEST_METHOD(Class__NiagaraCore__NiagaraMergeable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMergeable, 0x0028);
		}

		// class UNiagaraDataInterfaceBase : public UNiagaraMergeable
		TEST_METHOD(Class__NiagaraCore__NiagaraDataInterfaceBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceBase, 0x0028);
		}

		// class UChaosDebugDrawComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDebugDrawComponent, UnknownData_RRU9, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDebugDrawComponent, 0x00B8);
		}

		// class UChaosEventListenerComponent : public UActorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosEventListenerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosEventListenerComponent, UnknownData_T6D0, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosEventListenerComponent, 0x00B8);
		}

		// class UChaosGameplayEventDispatcher : public UChaosEventListenerComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosGameplayEventDispatcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_M87B, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, CollisionEventRegistrations, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, BreakEventRegistrations, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_YJEX, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosGameplayEventDispatcher, 0x0270);
		}

		// class UChaosNotifyHandlerInterface : public UInterface
		TEST_METHOD(Class__ChaosSolverEngine__ChaosNotifyHandlerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosNotifyHandlerInterface, 0x0028);
		}

		// class UChaosSolverEngineBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverEngineBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverEngineBlueprintLibrary, 0x0028);
		}

		// class UChaosSolver : public UObject
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolver, 0x0028);
		}

		// class AChaosSolverActor : public AActor
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TimeStepMultiplier, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionIterations, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutIterations, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, PushOutPairIterations, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterConnectionFactor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ClusterUnionConnectionType, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateCollisionData, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_VMGO, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, CollisionFilterSettings, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateBreakingData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_3YMO, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, BreakingFilterSettings, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, DoGenerateTrailingData, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_VTZI, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, TrailingFilterSettings, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bHasFloor, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_IZE7, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, FloorHeight, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, MassScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, bGenerateContactGraph, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, ChaosDebugSubstepControl, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, SpriteComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, UnknownData_LZPY, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::AChaosSolverActor, GameplayEventDispatcherComponent, 0x02A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AChaosSolverActor, 0x02A8);
		}

		// class UChaosSolverSettings : public UDeveloperSettings
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, UnknownData_CXEM, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, DefaultChaosSolverActorClass, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverSettings, 0x0058);
		}

		// class UFieldNodeBase : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeBase, 0x00B0);
		}

		// class UFieldNodeVector : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeVector, 0x00B0);
		}

		// class URandomVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RandomVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, UnknownData_EH0P, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomVector, 0x00B8);
		}

		// class UOperatorField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__OperatorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_9CC3, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, RightField, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, LeftField, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Operation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_47R3, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOperatorField, 0x00D0);
		}

		// class UFieldNodeInt : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeInt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeInt, 0x00B0);
		}

		// class UToIntegerField : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__ToIntegerField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToIntegerField, FloatField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToIntegerField, 0x00B8);
		}

		// class UFieldNodeFloat : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeFloat, 0x00B0);
		}

		// class UToFloatField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__ToFloatField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToFloatField, IntField, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToFloatField, 0x00B8);
		}

		// class UCullingField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__CullingField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Culling, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Field, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Operation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, UnknownData_39Z9, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCullingField, 0x00C8);
		}

		// class UReturnResultsTerminal : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__ReturnResultsTerminal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReturnResultsTerminal, 0x00B0);
		}

		// class AFieldSystemActor : public AActor
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFieldSystemActor, FieldSystemComponent, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFieldSystemActor, 0x0228);
		}

		// class UFieldSystem : public UObject
		TEST_METHOD(Class__FieldSystemEngine__FieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystem, UnknownData_PRXU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystem, 0x0038);
		}

		// class UFieldSystemComponent : public UPrimitiveComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, FieldSystem, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_TR1F, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, SupportedSolvers, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_KM05, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemComponent, 0x0450);
		}

		// class UFieldSystemMetaData : public UActorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaData, 0x00B0);
		}

		// class UFieldSystemMetaDataIteration : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataIteration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, Iterations, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, UnknownData_N34W, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataIteration, 0x00B8);
		}

		// class UFieldSystemMetaDataProcessingResolution : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataProcessingResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, ResolutionType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, UnknownData_4QSN, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataProcessingResolution, 0x00B8);
		}

		// class UUniformInteger : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__UniformInteger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, UnknownData_V08M, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformInteger, 0x00B8);
		}

		// class URadialIntMask : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__RadialIntMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, Position, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, InteriorValue, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, ExteriorValue, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, SetMaskCondition, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, UnknownData_A1OT, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialIntMask, 0x00D0);
		}

		// class UUniformScalar : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__UniformScalar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, UnknownData_Q5Z1, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformScalar, 0x00B8);
		}

		// class URadialFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__RadialFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Radius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Falloff, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, UnknownData_88W9, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialFalloff, 0x00D8);
		}

		// class UPlaneFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__PlaneFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Distance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Position, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Normal, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Falloff, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, UnknownData_8T4H, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneFalloff, 0x00E0);
		}

		// class UBoxFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__BoxFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MinRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MaxRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Default, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Transform, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Falloff, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, UnknownData_Z7BW, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxFalloff, 0x0100);
		}

		// class UNoiseField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__NoiseField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MinRange, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MaxRange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, UnknownData_WA19, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, Transform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoiseField, 0x00F0);
		}

		// class UUniformVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__UniformVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Direction, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformVector, 0x00C0);
		}

		// class URadialVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RadialVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Magnitude, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Position, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialVector, 0x00C0);
		}

		// class UAnimationDataSourceRegistry : public UObject
		TEST_METHOD(Class__AnimationCore__AnimationDataSourceRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationDataSourceRegistry, DataSources, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationDataSourceRegistry, 0x0078);
		}

		// class ACameraRig_Crane : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitch, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYaw, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneArmLength, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountPitch, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, bLockMountYaw, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, UnknownData_Z55A, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, TransformComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneYawControl, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CranePitchControl, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Crane, CraneCameraMount, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Crane, 0x0250);
		}

		// class ACameraRig_Rail : public AActor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, CurrentPositionOnRail, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, bLockOrientationToRail, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, UnknownData_Y4BC, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, TransformComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailSplineComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACameraRig_Rail, RailCameraMount, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACameraRig_Rail, 0x0240);
		}

		// class ACineCameraActor : public ACameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, LookatTrackingSettings, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::ACineCameraActor, UnknownData_W6DE, 0x07E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ACineCameraActor, 0x07F0);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, Filmback, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_OLVU, 0x0845);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPreset, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x08A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_CXA2, 0x08A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x08B0);
		}

		// class ABP_AIDirector_C : public AME_AIDirector
		TEST_METHOD(BlueprintGeneratedClass__BP_AIDirector__BP_AIDirector_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AIDirector_C, DefaultSceneRoot, 0x0750);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AIDirector_C, 0x0758);
		}

		// class UGA_M_LungeClamp_Base_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_LungeClamp_Base_BP__GA_M_LungeClamp_Base_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_LungeClamp_Base_BP_C, 0x0510);
		}

		// class UGE_Evo_Shadow_Stack_Count_20_C : public UGE_Evo_Shadow_Stack_Count_1_C
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack_Count_21__GE_Evo_Shadow_Stack_Count_20_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_Count_20_C, 0x0870);
		}

		// class UThrashMeterV2_BP_C : public UThrashingWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__ThrashMeterV2_BP__ThrashMeterV2_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashMeterV2_BP_C, UberGraphFrame, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashMeterV2_BP_C, InAnimation_ProgressBar, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashMeterV2_BP_C, Max, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrashMeterV2_BP_C, BuildUp, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrashMeterV2_BP_C, 0x0338);
		}

		// class UEvolutionAbilityWidget_BP_C : public UEvolutionAbilityWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__EvolutionAbilityWidget_BP__EvolutionAbilityWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget_BP_C, UberGraphFrame, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget_BP_C, AbilityEquiped, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget_BP_C, AbilityOutline, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget_BP_C, Image_1, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget_BP_C, Image_2, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget_BP_C, SonarAbilityIcon, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolutionAbilityWidget_BP_C, SonarOutline, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolutionAbilityWidget_BP_C, 0x0378);
		}

		// class UCompassMarkerWidget_BP_C : public UCompassMarkerWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__CompassMarkerWidget_BP__CompassMarkerWidget_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompassMarkerWidget_BP_C, 0x0268);
		}

		// class UCrosshair_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Crosshair__Crosshair_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrosshair_C, JawOpenIdle, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrosshair_C, Image_1, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrosshair_C, 0x0240);
		}

		// class UGA_M_Barracuda_LandLunge_BP_C : public UGA_M_LandLunge_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Barracuda_LandLunge_BP__GA_M_Barracuda_LandLunge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Barracuda_LandLunge_BP_C, 0x05E0);
		}

		// class UGA_M_Barracuda_Feint_BP_C : public UME_GameplayAbility_WildlifeLunge
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Barracuda_Feint_BP__GA_M_Barracuda_Feint_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Barracuda_Feint_BP_C, 0x0510);
		}

		// class UGA_M_Barracuda_EvadeRight_BP_C : public UGA_M_EvadeRight_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Barracuda_EvadeRight_BP__GA_M_Barracuda_EvadeRight_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Barracuda_EvadeRight_BP_C, 0x05E0);
		}

		// class UGE_Barracuda_FeintCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Barracuda_FeintCD_BP__GE_Barracuda_FeintCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Barracuda_FeintCD_BP_C, 0x0870);
		}

		// class UGE_Apex_BarracudaBiteCooldown_BP_C : public UGE_BarracudaBiteCooldown_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GE_Apex_BarracudaBiteCooldown_BP__GE_Apex_BarracudaBiteCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Apex_BarracudaBiteCooldown_BP_C, 0x0870);
		}

		// class UGE_BarracudaBiteCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_BarracudaBiteCooldown_BP__GE_BarracudaBiteCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_BarracudaBiteCooldown_BP_C, 0x0870);
		}

		// class UGA_M_GreatWhite_ThrashV2_BP_C : public UGA_M_ThrashBase_V2_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_GreatWhite_ThrashV2_BP__GA_M_GreatWhite_ThrashV2_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_GreatWhite_ThrashV2_BP_C, 0x0510);
		}

		// class UGA_M_GreatWhite_ThrashClose_BP_C : public UGA_M_ThrashBase_V2_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_GreatWhite_ThrashClose_BP__GA_M_GreatWhite_ThrashClose_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_GreatWhite_ThrashClose_BP_C, 0x0510);
		}

		// class UGA_M_GreatWhite_LandLunge_BP_C : public UGA_M_LandLunge_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_GreatWhite_LandLunge_BP__GA_M_GreatWhite_LandLunge_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_GreatWhite_LandLunge_BP_C, 0x05E0);
		}

		// class ABP_DepthChargeBarrel_Pete2_C : public ABP_DepthChargeBarrel_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthChargeBarrel_Pete2__BP_DepthChargeBarrel_Pete2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthChargeBarrel_Pete2_C, 0x03E8);
		}

		// class AAssaultRifle_Projectile_Pete2_Phase1_C : public AAssaultRifle_Projectile_Tier3_C
		TEST_METHOD(BlueprintGeneratedClass__AssaultRifle_Projectile_Pete2_Phase1__AssaultRifle_Projectile_Pete2_Phase1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAssaultRifle_Projectile_Pete2_Phase1_C, 0x0270);
		}

		// class ABP_DepthChargeExplosion_Base_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthChargeExplosion_Base__BP_DepthChargeExplosion_Base_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthChargeExplosion_Base_C, 0x02D0);
		}

		// class ABP_Boss_Support_Boat_C : public ABP_Airboat_Bounty_Shotguns_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Boss_Support_Boat__BP_Boss_Support_Boat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, UnknownData_10HS, 0x0CDC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, UberGraphFrame, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, Boss1Phase1CineTriggered, 0x0CE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, UnknownData_G5JK, 0x0CE9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, PhasePlayerLoc, 0x0CEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, PhasePlayerRot, 0x0CF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, UnknownData_WNLC, 0x0D04);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, BossClass, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, Boss1Phase2CineTriggered, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, Boss3hase2CineTriggered, 0x0D11);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, Boss3hase3CineTriggered, 0x0D12);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, UnknownData_H8DR, 0x0D13);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Boss_Support_Boat_C, PhaseToCheck, 0x0D14);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Boss_Support_Boat_C, 0x0D18);
		}

		// class UGE_KillerWhaleVulnerable_Long_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_KillerWhaleVulnerable_Long_BP__GE_KillerWhaleVulnerable_Long_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_KillerWhaleVulnerable_Long_BP_C, 0x0870);
		}

		// class UGE_GreatWhiteVulnerable_Long_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_GreatWhiteVulnerable_Long_BP__GE_GreatWhiteVulnerable_Long_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_GreatWhiteVulnerable_Long_BP_C, 0x0870);
		}

		// class UGE_BarracudaVulnerable_Long_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_BarracudaVulnerable_Long_BP__GE_BarracudaVulnerable_Long_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_BarracudaVulnerable_Long_BP_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Fins_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Fins_T1__GE_Evo_Shadow_Fins_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Fins_T1_C, 0x0870);
		}

		// class UGA_Evo_Bone_Tail_FX_Tailwhip_T2_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Bone_Tail_FX_Tailwhip_T2__GA_Evo_Bone_Tail_FX_Tailwhip_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Bone_Tail_FX_Tailwhip_T2_C, 0x0400);
		}

		// class UGE_Evo_Bone_TailWhipFX_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_TailWhipFX_T3__GE_Evo_Bone_TailWhipFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_TailWhipFX_T3_C, 0x0870);
		}

		// class UGE_Evo_Bone_Teeth_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Teeth_T4__GE_Evo_Bone_Teeth_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Teeth_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Teeth_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Teeth_T3__GE_Evo_Bone_Teeth_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Teeth_T3_C, 0x0870);
		}

		// class UGE_Evo_Bone_Teeth_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Teeth_T2__GE_Evo_Bone_Teeth_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Teeth_T2_C, 0x0870);
		}

		// class UGE_Marlin_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Marlin_Native__GE_Marlin_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Marlin_Native_C, 0x0870);
		}

		// class ABP_Paddleboat_Fragment2_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Paddleboat_Fragment2__BP_Paddleboat_Fragment2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Paddleboat_Fragment2_C, 0x0230);
		}

		// class AFSH_Catfish_Medium_Albino_BP_C : public AFSH_Catfish_Medium_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Catfish_Medium_Albino_BP__FSH_Catfish_Medium_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Catfish_Medium_Albino_BP_C, 0x1050);
		}

		// class AFSH_Grouper_Small_Albino_BP_C : public AFSH_Grouper_Small_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Grouper_Small_Albino_BP__FSH_Grouper_Small_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Grouper_Small_Albino_BP_C, 0x1050);
		}

		// class ASHK_Medium_Seal_BP_C : public ASHK_Base_Seal_BP_C
		TEST_METHOD(BlueprintGeneratedClass__SHK_Medium_Seal_BP__SHK_Medium_Seal_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ASHK_Medium_Seal_BP_C, 0x1050);
		}

		// class ATRT_Small_Turtle_Albino_BP_C : public ATRT_Small_Turtle_BP_C
		TEST_METHOD(BlueprintGeneratedClass__TRT_Small_Turtle_Albino_BP__TRT_Small_Turtle_Albino_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ATRT_Small_Turtle_Albino_BP_C, 0x1050);
		}

		// class UBP_GE_Wildlife_Explosion_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_Wildlife_Explosion__BP_GE_Wildlife_Explosion_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_Wildlife_Explosion_C, 0x0870);
		}

		// class ABP_BarrelRaft_Barrel_A_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BarrelRaft_Barrel_A__BP_BarrelRaft_Barrel_A_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BarrelRaft_Barrel_A_C, 0x0230);
		}

		// class ABP_BarrelRaftAIController_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_BarrelRaftAIController__BP_BarrelRaftAIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BarrelRaftAIController_C, 0x07E8);
		}

		// class UBP_HunterSeaScooter_C : public UME_WeaponComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterSeaScooter__BP_HunterSeaScooter_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HunterSeaScooter_C, UberGraphFrame, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HunterSeaScooter_C, CastHumanOwner, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HunterSeaScooter_C, VelocityParticlesHandle, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HunterSeaScooter_C, FanSprayParticles, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HunterSeaScooter_C, ActiveFanSpray, 0x0700);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HunterSeaScooter_C, 0x0708);
		}

		// class ABP_Diver_AIController_Hunter_C : public ABP_Diver_AIController_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Diver_AIController_Hunter__BP_Diver_AIController_Hunter_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Diver_AIController_Hunter_C, 0x07B8);
		}

		// class UGE_Prologue_DeathBlow_Damage_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Prologue_DeathBlow_Damage__GE_Prologue_DeathBlow_Damage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Prologue_DeathBlow_Damage_C, 0x0870);
		}

		// class ABP_Skiff_Debris_RearLeft_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Debris_RearLeft__BP_Skiff_Debris_RearLeft_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Debris_RearLeft_C, 0x0230);
		}

		// class ABP_Skiff_Debris_LeftBow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Debris_LeftBow__BP_Skiff_Debris_LeftBow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Debris_LeftBow_C, 0x0230);
		}

		// class ABP_Skiff_Debris_Hull_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_Debris_Hull__BP_Skiff_Debris_Hull_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_Debris_Hull_C, 0x0230);
		}

		// class UMERegionToast_BP_C : public UMERegionToast
		TEST_METHOD(WidgetBlueprintGeneratedClass__MERegionToast_BP__MERegionToast_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMERegionToast_BP_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMERegionToast_BP_C, Intro, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMERegionToast_BP_C, Outro, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMERegionToast_BP_C, 0x02D8);
		}

		// class UBasicWidgetQueue_BP_C : public UTwWidgetQueue
		TEST_METHOD(WidgetBlueprintGeneratedClass__BasicWidgetQueue_BP__BasicWidgetQueue_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicWidgetQueue_BP_C, 0x0288);
		}

		// class UEvolution_Tooltip_StatContainer_BP_C : public UTwBaseWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__Evolution_Tooltip_StatContainer_BP__Evolution_Tooltip_StatContainer_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_StatContainer_BP_C, StatNameText, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvolution_Tooltip_StatContainer_BP_C, StatValueText, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvolution_Tooltip_StatContainer_BP_C, 0x0268);
		}

		// class UEpisodeTitle_BP_C : public UMENewEpisodeToast
		TEST_METHOD(WidgetBlueprintGeneratedClass__EpisodeTitle_BP__EpisodeTitle_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEpisodeTitle_BP_C, OutAnimation, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEpisodeTitle_BP_C, InAnimation, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEpisodeTitle_BP_C, 0x0298);
		}

		// class ABP_Base_Ai_Jetski_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Ai_Jetski_Controller__BP_Base_Ai_Jetski_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Ai_Jetski_Controller_C, 0x07E8);
		}

		// class ABP_USCG_Command_Ship_Electro_Bounty9_Boss_C : public ABP_Base_USCG_Command_Ship_Electro_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Command_Ship_Electro_Bounty9_Boss__BP_USCG_Command_Ship_Electro_Bounty9_Boss_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_Command_Ship_Electro_Bounty9_Boss_C, UberGraphFrame, 0x0CF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Command_Ship_Electro_Bounty9_Boss_C, 0x0CF8);
		}

		// class ABP_USCG_Command_Ship_Bounty11_Electro_LMG_C : public ABP_Base_USCG_Command_Ship_Electro_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_Command_Ship_Bounty11_Electro_LMG__BP_USCG_Command_Ship_Bounty11_Electro_LMG_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_Command_Ship_Bounty11_Electro_LMG_C, 0x0CF0);
		}

		// class ABP_Small_FishingBoat_Bounty9_Assault_Shotguns_C : public ABP_Base_Small_FishingBoat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Small_FishingBoat_Bounty9_Assault_Shotguns__BP_Small_FishingBoat_Bounty9_Assault_Shotguns_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Small_FishingBoat_Bounty9_Assault_Shotguns_C, 0x0CDC);
		}

		// class ABP_Small_FishingBoat_Bounty8_Mixed_Dynamite_C : public ABP_Base_Small_FishingBoat_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Small_FishingBoat_Bounty8_Mixed_Dynamite__BP_Small_FishingBoat_Bounty8_Mixed_Dynamite_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Small_FishingBoat_Bounty8_Mixed_Dynamite_C, 0x0CDC);
		}

		// class ABP_SmallFishingBoat_Debris_Fragment9_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmallFishingBoat_Debris_Fragment9__BP_SmallFishingBoat_Debris_Fragment9_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmallFishingBoat_Debris_Fragment9_C, 0x0230);
		}

		// class ABP_SmallFishingBoat_Debris_Fragment8_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmallFishingBoat_Debris_Fragment8__BP_SmallFishingBoat_Debris_Fragment8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmallFishingBoat_Debris_Fragment8_C, 0x0230);
		}

		// class ABP_SmallFishingBoat_Debris_Fragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SmallFishingBoat_Debris_Fragment7__BP_SmallFishingBoat_Debris_Fragment7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SmallFishingBoat_Debris_Fragment7_C, 0x0230);
		}

		// class UHunterSupport_HUNTER3_BP_C : public UHunterSupportEntry
		TEST_METHOD(BlueprintGeneratedClass__HunterSupport_HUNTER3_BP__HunterSupport_HUNTER3_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHunterSupport_HUNTER3_BP_C, 0x0068);
		}

		// class UGE_SprintMaxSpeed_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SprintMaxSpeed_T2__GE_SprintMaxSpeed_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SprintMaxSpeed_T2_C, 0x0870);
		}

		// class UGA_M_HammerHead_ThrashRelease_BP_C : public UGA_M_ThrashRelease_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_HammerHead_ThrashRelease_BP__GA_M_HammerHead_ThrashRelease_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_HammerHead_ThrashRelease_BP_C, 0x05E0);
		}

		// class UGA_M_Hammerhead_Recovery_BP_C : public UGA_M_Base_Recovery_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Hammerhead_Recovery_BP__GA_M_Hammerhead_Recovery_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Hammerhead_Recovery_BP_C, 0x05E0);
		}

		// class UGE_SpermWhale_FeintCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_SpermWhale_FeintCD_BP__GE_SpermWhale_FeintCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_SpermWhale_FeintCD_BP_C, 0x0870);
		}

		// class UGA_M_SpermWhale_ThrashV2_BP_C : public UGA_M_ThrashBase_V2_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_SpermWhale_ThrashV2_BP__GA_M_SpermWhale_ThrashV2_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_SpermWhale_ThrashV2_BP_C, 0x0510);
		}

		// class UGA_Evo_Shadow_Body_AddResource_T1_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_AddResource_T1__GA_Evo_Shadow_Body_AddResource_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_AddResource_T1_C, 0x0438);
		}

		// class UGA_Evo_Shadow_Body_AddResource_Damage_T1_C : public UME_GameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_AddResource_Damage_T1__GA_Evo_Shadow_Body_AddResource_Damage_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_AddResource_Damage_T1_C, 0x0438);
		}

		// class UGA_Evo_Shadow_Body_T2_C : public UGA_Evo_Shadow_Body_T1_C
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_T2__GA_Evo_Shadow_Body_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_T2_C, 0x0448);
		}

		// class AAIController_NonHostile_Base_BP_C : public AME_AnimalAIController
		TEST_METHOD(BlueprintGeneratedClass__AIController_NonHostile_Base_BP__AIController_NonHostile_Base_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_NonHostile_Base_BP_C, 0x07C8);
		}

		// class UBP_GE_Explosion_Pete3_C : public UBP_GE_Explosion_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GE_Explosion_Pete3__BP_GE_Explosion_Pete3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GE_Explosion_Pete3_C, 0x0870);
		}

		// class ABP_SportFishingBoat_Fragment8_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Fragment8__BP_SportFishingBoat_Fragment8_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Fragment8_C, 0x0230);
		}

		// class ABP_SportFishingBoat_Fragment7_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Fragment7__BP_SportFishingBoat_Fragment7_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Fragment7_C, 0x0230);
		}

		// class ABP_SportFishingBoat_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Fragment6__BP_SportFishingBoat_Fragment6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Fragment6_C, 0x0230);
		}

		// class ABP_SportFishingBoat_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SportFishingBoat_Fragment5__BP_SportFishingBoat_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SportFishingBoat_Fragment5_C, 0x0230);
		}

		// class ABP_Skiff_SeatPiece1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Skiff_SeatPiece1__BP_Skiff_SeatPiece1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Skiff_SeatPiece1_C, 0x0230);
		}

		// class ABP_Base_SkiffController_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_SkiffController__BP_Base_SkiffController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_SkiffController_C, 0x07E8);
		}

		// class ABP_Rowboat_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Rowboat_Fragment5__BP_Rowboat_Fragment5_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Rowboat_Fragment5_C, 0x0230);
		}

		// class ABP_Base_Rowboat_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_Rowboat_Controller__BP_Base_Rowboat_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_Rowboat_Controller_C, 0x07E8);
		}

		// class UGA_M_Marlin_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Marlin_EvadeLeft_BP__GA_M_Marlin_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Marlin_EvadeLeft_BP_C, 0x05E0);
		}

		// class AAIController_Grouper_BP_C : public AAIController_NonHostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Grouper_BP__AIController_Grouper_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Grouper_BP_C, 0x07C8);
		}

		// class ABP_Diver_C : public ABP_HumanBase_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Diver__BP_Diver_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Diver_C, UberGraphFrame, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Diver_C, BreathingAudioComponent, 0x0F58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Diver_C, 0x0F60);
		}

		// class ABP_SharkAIController_C : public AME_AnimalAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_SharkAIController__BP_SharkAIController_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_SharkAIController_C, 0x07C8);
		}

		// class ABP_Base_TourAirboat_Objective_C : public ABP_Base_TourAirboat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Base_TourAirboat_Objective__BP_Base_TourAirboat_Objective_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Base_TourAirboat_Objective_C, 0x0CDC);
		}

		// class AAIController_Marlin_BP_C : public AAIController_Hostile_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AIController_Marlin_BP__AIController_Marlin_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAIController_Marlin_BP_C, UberGraphFrame, 0x07C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAIController_Marlin_BP_C, 0x07D0);
		}

		// class AAudioSpline_GiantPipes_BP1_C : public AAudioSpline_BP_C
		TEST_METHOD(BlueprintGeneratedClass__AudioSpline_GiantPipes_BP1__AudioSpline_GiantPipes_BP1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AAudioSpline_GiantPipes_BP1_C, UberGraphFrame, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AAudioSpline_GiantPipes_BP1_C, 0x0280);
		}

		// class ABP_AkAmbientSoundNoOcclusion_C : public AAkAmbientSound
		TEST_METHOD(BlueprintGeneratedClass__BP_AkAmbientSoundNoOcclusion__BP_AkAmbientSoundNoOcclusion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AkAmbientSoundNoOcclusion_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_AkAmbientSoundNoOcclusion_C, Interpolation_Time, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_AkAmbientSoundNoOcclusion_C, 0x026C);
		}

		// class ABP_OilStream01_PS_C : public AME_SignificanceEmitter
		TEST_METHOD(BlueprintGeneratedClass__BP_OilStream01_PS__BP_OilStream01_PS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_OilStream01_PS_C, 0x0280);
		}

		// class ALG_Promenade_Amber_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_Promenade_Amber__LG_Promenade_Amber_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_Promenade_Amber_C, 0x0238);
		}

		// class ALG_WB_LightPole_Single_C : public ALG_Pointlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_WB_LightPole_Single__LG_WB_LightPole_Single_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_WB_LightPole_Single_C, 0x0238);
		}

		// class ALandMarkSignDestructible_BP_C : public ABP_BreakableBase_C
		TEST_METHOD(BlueprintGeneratedClass__LandMarkSignDestructible_BP__LandMarkSignDestructible_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandMarkSignDestructible_BP_C, UnknownData_W2CA, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandMarkSignDestructible_BP_C, UberGraphFrame, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandMarkSignDestructible_BP_C, PointLight, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandMarkSignDestructible_BP_C, Player, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandMarkSignDestructible_BP_C, DynamicMat, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::ALandMarkSignDestructible_BP_C, NavVector, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALandMarkSignDestructible_BP_C, 0x0434);
		}

		// class ALG_CaveBlue_C : public ALG_Pointlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_CaveBlue__LG_CaveBlue_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_CaveBlue_C, 0x0238);
		}

		// class UAudioCurveSourceComponent : public UAudioComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_7RE0, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_5O0R, 0x07E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x0810);
		}

		// class UGE_HammerHeadTailwhipCooldown_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HammerHeadTailwhipCooldown_BP__GE_HammerHeadTailwhipCooldown_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HammerHeadTailwhipCooldown_BP_C, 0x0870);
		}

		// class UBountyTimer_BP_C : public UBountyTimer
		TEST_METHOD(WidgetBlueprintGeneratedClass__BountyTimer_BP__BountyTimer_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBountyTimer_BP_C, 0x03F8);
		}

		// class UBossHealthWidget_BP_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__BossHealthWidget_BP__BossHealthWidget_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, DefeatHuntersComplete, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, DefeatHunters_Title, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, HealthBarContainer, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, HuntersContainer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, Image_2, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, Image_11, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, Progress_Bar_ShieldHealth, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, Progress_Title, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, ProgressBar_1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, ShieldContainer, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, SurviveTitle_Text, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, Text_FirstName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, Text_LastName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, TextBlock_Cage, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, TextBlock_SurviveTimer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBossHealthWidget_BP_C, TimerContainer, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBossHealthWidget_BP_C, 0x02B8);
		}

		// class ABP_Smash_Explosion_Submerge_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Smash_Explosion_Submerge__BP_Smash_Explosion_Submerge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Smash_Explosion_Submerge_C, 0x02D0);
		}

		// class ABP_Smash_Explosion_Emerge_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_Smash_Explosion_Emerge__BP_Smash_Explosion_Emerge_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Smash_Explosion_Emerge_C, 0x02D0);
		}

		// class UGE_PlayerSharkTailStrikeDamage_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PlayerSharkTailStrikeDamage__GE_PlayerSharkTailStrikeDamage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PlayerSharkTailStrikeDamage_C, 0x0870);
		}

		// class UGE_PlayerStunned_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PlayerStunned__GE_PlayerStunned_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PlayerStunned_C, 0x0870);
		}

		// class UGE_LungeMaxSpeed_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_LungeMaxSpeed_T1__GE_LungeMaxSpeed_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_LungeMaxSpeed_T1_C, 0x0870);
		}

		// class UGE_Lunge_TierUpMinTime_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Lunge_TierUpMinTime__GE_Lunge_TierUpMinTime_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Lunge_TierUpMinTime_C, 0x0870);
		}

		// class UGE_Lunge_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Lunge_T1__GE_Lunge_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Lunge_T1_C, 0x0870);
		}

		// class UGE_HammerHead_FeintCD_BP_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_HammerHead_FeintCD_BP__GE_HammerHead_FeintCD_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_HammerHead_FeintCD_BP_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Stack_Count_25_C : public UGE_Evo_Shadow_Stack_Count_1_C
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Stack_Count_26__GE_Evo_Shadow_Stack_Count_25_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Stack_Count_25_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Body_Bonus_End_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Body_Bonus_End_T3__GE_Evo_Shadow_Body_Bonus_End_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Body_Bonus_End_T3_C, 0x0870);
		}

		// class UGA_Evo_Shadow_Body_Lunge_ImpactVFX_T3_C : public UME_GameplayAbility_Montage
		TEST_METHOD(BlueprintGeneratedClass__GA_Evo_Shadow_Body_Lunge_ImpactVFX_T3__GA_Evo_Shadow_Body_Lunge_ImpactVFX_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_Evo_Shadow_Body_Lunge_ImpactVFX_T3_C, 0x05E0);
		}

		// class UGA_EVO_Shadow_Body_AOE_End_T1_C : public UGameplayAbility
		TEST_METHOD(BlueprintGeneratedClass__GA_EVO_Shadow_Body_AOE_End_T1__GA_EVO_Shadow_Body_AOE_End_T1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGA_EVO_Shadow_Body_AOE_End_T1_C, UberGraphFrame, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_EVO_Shadow_Body_AOE_End_T1_C, 0x0408);
		}

		// class UGE_Evo_Bone_Body_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_T3__GE_Evo_Bone_Body_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_T3_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_LungeBonus_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_LungeBonus_T3__GE_Evo_Bone_Body_LungeBonus_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_LungeBonus_T3_C, 0x0870);
		}

		// class UGE_Evo_Bone_Body_Bonus_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Body_Bonus_T3__GE_Evo_Bone_Body_Bonus_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Body_Bonus_T3_C, 0x0870);
		}

		// class ABP_USCG_MediumSkiff_Debris_Bow_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_MediumSkiff_Debris_Bow__BP_USCG_MediumSkiff_Debris_Bow_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_MediumSkiff_Debris_Bow_C, 0x0230);
		}

		// class ABP_HunterCaptain_PercyMetcalf_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterCaptain_PercyMetcalf__BP_HunterCaptain_PercyMetcalf_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HunterCaptain_PercyMetcalf_C, 0x0F50);
		}

		// class ABP_HunterCaptain_ButcherboyBrady_C : public ABP_Human_HunterBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_HunterCaptain_ButcherboyBrady__BP_HunterCaptain_ButcherboyBrady_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_HunterCaptain_ButcherboyBrady_C, 0x0F50);
		}

		// class UGE_Evo_Shadow_Fins_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Fins_T3__GE_Evo_Shadow_Fins_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Fins_T3_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Fins_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Fins_T2__GE_Evo_Shadow_Fins_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Fins_T2_C, 0x0870);
		}

		// class UGE_MissingLeftVentralFin_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_MissingLeftVentralFin__GE_MissingLeftVentralFin_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_MissingLeftVentralFin_C, 0x0870);
		}

		// class UAnimNotify_AkEvent_C : public UAnimNotify
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_AkEvent__AnimNotify_AkEvent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, Attach_Name, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, Event, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, Follow, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, UnknownData_71FS, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, EventName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_AkEvent_C, 0x0068);
		}

		// class ABP_Bumperboat_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bumperboat_Fragment1__BP_Bumperboat_Fragment1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_Bumperboat_Fragment1_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bumperboat_Fragment1_C, 0x0238);
		}

		// class ABP_Bumperboat_FragmentLeftSeat_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Bumperboat_FragmentLeftSeat__BP_Bumperboat_FragmentLeftSeat_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Bumperboat_FragmentLeftSeat_C, 0x0230);
		}

		// class AFSH_Catfish_Large_BP_C : public AFSH_Catfish_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Catfish_Large_BP__FSH_Catfish_Large_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Catfish_Large_BP_C, 0x1050);
		}

		// class ALMG_Bullet_Projectile_C : public ABulletprojectile_C
		TEST_METHOD(BlueprintGeneratedClass__LMG_Bullet_Projectile__LMG_Bullet_Projectile_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALMG_Bullet_Projectile_C, 0x0270);
		}

		// class ABP_Pete1_USCGSmall_V1_AI_Controller_C : public AME_BoatAIController
		TEST_METHOD(BlueprintGeneratedClass__BP_Pete1_USCGSmall_V1_AI_Controller__BP_Pete1_USCGSmall_V1_AI_Controller_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Pete1_USCGSmall_V1_AI_Controller_C, 0x07E8);
		}

		// class ABP_EVO_Shadow_Tail_AOE_T2_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Tail_AOE_T2__BP_EVO_Shadow_Tail_AOE_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Tail_AOE_T2_C, 0x02D0);
		}

		// class ABP_EVO_Shadow_Tail_AOE_T3_C : public AME_ExplosionActor
		TEST_METHOD(BlueprintGeneratedClass__BP_EVO_Shadow_Tail_AOE_T3__BP_EVO_Shadow_Tail_AOE_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_EVO_Shadow_Tail_AOE_T3_C, 0x02D0);
		}

		// class ABP_JetSki_Debris_Mirrors_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Debris_Mirrors__BP_JetSki_Debris_Mirrors_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Debris_Mirrors_C, 0x0230);
		}

		// class UGA_M_Grouper_EvadeLeft_BP_C : public UGA_M_EvadeLeft_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__GA_M_Grouper_EvadeLeft_BP__GA_M_Grouper_EvadeLeft_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGA_M_Grouper_EvadeLeft_BP_C, 0x05E0);
		}

		// class UFSH_Grouper_ABP_C : public UWildlife_Base_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__FSH_Grouper_ABP__FSH_Grouper_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFSH_Grouper_ABP_C, 0x5C8C);
		}

		// class UGE_NonHostile_Native_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_NonHostile_Native__GE_NonHostile_Native_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_NonHostile_Native_C, 0x0870);
		}

		// class UGE_Shotgun_Damage_Tier4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Shotgun_Damage_Tier4__GE_Shotgun_Damage_Tier4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Shotgun_Damage_Tier4_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Teeth_AOE_Damage_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_AOE_Damage_T3__GE_Evo_Bio_Electric_Teeth_AOE_Damage_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_AOE_Damage_T3_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Teeth_AOE_Damage_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_AOE_Damage_T4__GE_Evo_Bio_Electric_Teeth_AOE_Damage_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_AOE_Damage_T4_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_AOE_StunInstant_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AOE_StunInstant_T2__GE_Bio_Electric_Body_AOE_StunInstant_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AOE_StunInstant_T2_C, 0x0870);
		}

		// class UGE_Bio_Electric_Body_AOE_StunInstant_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Bio_Electric_Body_AOE_StunInstant_T3__GE_Bio_Electric_Body_AOE_StunInstant_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Bio_Electric_Body_AOE_StunInstant_T3_C, 0x0870);
		}

		// class UGE_Evo_Bone_Head_T4_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Head_T4__GE_Evo_Bone_Head_T4_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Head_T4_C, 0x0870);
		}

		// class UGE_Evo_Bone_Head_T3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Head_T3__GE_Evo_Bone_Head_T3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Head_T3_C, 0x0870);
		}

		// class UGE_Evo_Bone_Head_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Head_T2__GE_Evo_Bone_Head_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Head_T2_C, 0x0870);
		}

		// class UGE_Evo_Bio_Electric_Teeth_AOE_Damage_T2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bio_Electric_Teeth_AOE_Damage_T2__GE_Evo_Bio_Electric_Teeth_AOE_Damage_T2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bio_Electric_Teeth_AOE_Damage_T2_C, 0x0870);
		}

		// class UGE_Evo_Bone_Tail_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Bone_Tail_T1__GE_Evo_Bone_Tail_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Bone_Tail_T1_C, 0x0870);
		}

		// class UGE_Evo_Shadow_Tail_Damage_T1_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_Shadow_Tail_Damage_T1__GE_Evo_Shadow_Tail_Damage_T1_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_Shadow_Tail_Damage_T1_C, 0x0870);
		}

		// class ABP_Paddleboat_Fragment6_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Paddleboat_Fragment6__BP_Paddleboat_Fragment6_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_Paddleboat_Fragment6_C, 0x0230);
		}

		// class UTestMap_SpawnAIButton_C : public UUserWidget
		TEST_METHOD(WidgetBlueprintGeneratedClass__TestMap_SpawnAIButton__TestMap_SpawnAIButton_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIButton_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIButton_C, Button_1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIButton_C, TextBlock_1, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIButton_C, ButtonClicked, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIButton_C, ButtonStruct, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMap_SpawnAIButton_C, ButtonFocusedChanged, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMap_SpawnAIButton_C, 0x0288);
		}

		// class UTRT_Turtle_ABP_C : public UME_AnimInstance_WildlifeNPC
		TEST_METHOD(AnimBlueprintGeneratedClass__TRT_Turtle_ABP__TRT_Turtle_ABP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_Root, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_RandomPlayer, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_BlendListByBool_2, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_BlendListByEnum, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_SequencePlayer_6, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_SequencePlayer_5, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_SequencePlayer_4, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_SequencePlayer_3, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_Slot, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_ApplyAdditive, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_TransitionResult_2, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_TransitionResult, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_SequencePlayer_2, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_StateResult_2, 0x0C28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_LocalRefPose, 0x0C58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_StateResult, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_StateMachine, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_BlendListByBool, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_SequencePlayer, 0x0DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_ModifyBone, 0x0E68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_LocalToComponentSpace, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_ComponentToLocalSpace, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_LookAt_2, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, AnimGraphNode_LookAt, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, ValidOwningActor, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTRT_Turtle_ABP_C, ForwardLookAtLocation, 0x1314);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTRT_Turtle_ABP_C, 0x1320);
		}

		// class ABP_FamilyPontoonBoat_Fragment5_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FamilyPontoonBoat_Fragment5__BP_FamilyPontoonBoat_Fragment5_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FamilyPontoonBoat_Fragment5_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FamilyPontoonBoat_Fragment5_C, 0x0238);
		}

		// class ABP_FamilyPontoonBoat_Fragment4_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FamilyPontoonBoat_Fragment4__BP_FamilyPontoonBoat_Fragment4_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FamilyPontoonBoat_Fragment4_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FamilyPontoonBoat_Fragment4_C, 0x0238);
		}

		// class ABP_FamilyPontoonBoat_Fragment1_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FamilyPontoonBoat_Fragment1__BP_FamilyPontoonBoat_Fragment1_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FamilyPontoonBoat_Fragment1_C, UberGraphFrame, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FamilyPontoonBoat_Fragment1_C, 0x0238);
		}

		// class ABP_DepthBoat_Right_C : public ABP_VehicleDebris_C
		TEST_METHOD(BlueprintGeneratedClass__BP_DepthBoat_Right__BP_DepthBoat_Right_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_DepthBoat_Right_C, 0x0230);
		}

		// class ABP_USCG_SpawnDiversGem_C : public ABP_Base_USCG_Small_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_USCG_SpawnDiversGem__BP_USCG_SpawnDiversGem_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_SpawnDiversGem_C, UnknownData_GC1Q, 0x0CE4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_USCG_SpawnDiversGem_C, UberGraphFrame, 0x0CE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_USCG_SpawnDiversGem_C, 0x0CF0);
		}

		// class ADEP_BP_USCG_Torpedo_C : public ABP_Base_USCG_Command_Ship_C
		TEST_METHOD(BlueprintGeneratedClass__DEP_BP_USCG_Torpedo__DEP_BP_USCG_Torpedo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ADEP_BP_USCG_Torpedo_C, ME_TorpedoLauncher, 0x0CE8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ADEP_BP_USCG_Torpedo_C, 0x0CF0);
		}

		// class ABP_FlamingoBoat_C : public ABP_Base_PaddleBoat_C
		TEST_METHOD(BlueprintGeneratedClass__BP_FlamingoBoat__BP_FlamingoBoat_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_FlamingoBoat_C, LastHitTime_1, 0x0CD4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_FlamingoBoat_C, 0x0CD8);
		}

		// class AFSH_Barracuda_Hunted_BP_C : public AFSH_Barracuda_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_Barracuda_Hunted_BP__FSH_Barracuda_Hunted_BP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_Barracuda_Hunted_BP_C, 0x1050);
		}

		// class AFSH_SwordFish_BP_C : public AWildlife_Base_BP_C
		TEST_METHOD(BlueprintGeneratedClass__FSH_SwordFish_BP__FSH_SwordFish_BP_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, UberGraphFrame, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, VoiceGroupComponent_BP1, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, VoiceGroupComponent_BP, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_0_0_BandGlow_030610FA49361826FA88CE813E3CC0A7, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_0_0_BandScale_030610FA49361826FA88CE813E3CC0A7, 0x105C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_0_0_BandScroll_030610FA49361826FA88CE813E3CC0A7, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_0_0_IntakeRefraction_030610FA49361826FA88CE813E3CC0A7, 0x1064);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_0_0_GlowAmount_030610FA49361826FA88CE813E3CC0A7, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_0_0_RibbonOpacity_030610FA49361826FA88CE813E3CC0A7, 0x106C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_0_0_SparkleScale_030610FA49361826FA88CE813E3CC0A7, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_0_0_GlowON_030610FA49361826FA88CE813E3CC0A7, 0x1074);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_0_0__Direction_030610FA49361826FA88CE813E3CC0A7, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, UnknownData_NLX5, 0x1079);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_0_1, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_1_FadeRipple_43E1D102424C65592C8FE0B82B4EBA2E, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_1_Glowoff_43E1D102424C65592C8FE0B82B4EBA2E, 0x108C);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_1__Direction_43E1D102424C65592C8FE0B82B4EBA2E, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, UnknownData_MY9W, 0x1091);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, Timeline_2, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, SwordfishCharge, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, TurnCount, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, RibbonOpacity, 0x10AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, SparkleScale, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, GlowBloom, 0x10B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, IntakeRefraction, 0x10B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, UnknownData_1HBQ, 0x10BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, SwordfishChargeTail, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, LungingDone, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, ChargeSET, 0x10C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, UnknownData_HD8K, 0x10CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, RushStreak01, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, RushStreak02, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, RushStreak03, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, RushStreak04, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, RushNoseCone, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, ChargingDone, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::AFSH_SwordFish_BP_C, RushDone, 0x10F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AFSH_SwordFish_BP_C, 0x10FA);
		}

		// class AOuterLandscape_D_Low_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__OuterLandscape_D_Low__OuterLandscape_D_Low_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::AOuterLandscape_D_Low_C, 0x0228);
		}

		// class APrologue_Sub_Gameplay_2_C : public ALevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Prologue_Sub_Gameplay_3__Prologue_Sub_Gameplay_2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::APrologue_Sub_Gameplay_2_C, 0x0228);
		}

		// class ALG_SixHead_WorkLight_C : public ALG_Spotlight_Base_C
		TEST_METHOD(BlueprintGeneratedClass__LG_SixHead_WorkLight__LG_SixHead_WorkLight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ALG_SixHead_WorkLight_C, 0x0238);
		}

		// class UGE_Evo_MutagenDigestion3_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_MutagenDigestion3__GE_Evo_MutagenDigestion3_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_MutagenDigestion3_C, 0x0870);
		}

		// class UGE_Evo_MutagenDigestion2_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_Evo_MutagenDigestion2__GE_Evo_MutagenDigestion2_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_Evo_MutagenDigestion2_C, 0x0870);
		}

		// class ABP_JetSki_Bounty_Shotgun_C : public ABP_Base_JetSki_Bounty_C
		TEST_METHOD(BlueprintGeneratedClass__BP_JetSki_Bounty_Shotgun__BP_JetSki_Bounty_Shotgun_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ABP_JetSki_Bounty_Shotgun_C, UberGraphFrame, 0x0CE0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_JetSki_Bounty_Shotgun_C, 0x0CE8);
		}

		// class ABP_BreakableGate_Elder_C : public ABP_BreakableGate_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_BreakableGate_Elder__BP_BreakableGate_Elder_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ABP_BreakableGate_Elder_C, 0x0410);
		}

		// class USHK_Mother_ABP_C : public USHK_PlayerBase_ABP_C
		TEST_METHOD(AnimBlueprintGeneratedClass__SHK_Mother_ABP__SHK_Mother_ABP_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USHK_Mother_ABP_C, 0x8CD8);
		}

		// class UGE_PlayerSharkThrashDamage_C : public UME_GameplayEffect
		TEST_METHOD(BlueprintGeneratedClass__GE_PlayerSharkThrashDamage__GE_PlayerSharkThrashDamage_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGE_PlayerSharkThrashDamage_C, 0x0870);
		}

		// struct FMovieSceneSequenceLoopCount
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceLoopCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceLoopCount, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceLoopCount, 0x0004);
		}

		// struct FMovieSceneSequenceReplProperties
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceReplProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownStatus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, UnknownData_62VM, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownNumLoops, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceReplProperties, 0x0010);
		}

		// struct FMovieSceneWarpCounter
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneWarpCounter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWarpCounter, WarpCounts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWarpCounter, 0x0010);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bContinuouslyRespawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_XVL5, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Guid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_7FZM, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Name, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_L7LG, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, LevelName, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_89WQ, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_W67K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_RJ34, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSectionPtr, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_PVR0, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackDisplayOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackDisplayOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackDisplayOptions, UnknownData_V1Z1, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackDisplayOptions, 0x0004);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_YQ5V, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, PinnedNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00F0);
		}

		// struct FMovieSceneMarkedFrame
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneMarkedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, UnknownData_M738, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, Label, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarkedFrame, 0x0018);
		}

		// struct FMovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_66Z9, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_2UTC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// struct FMovieSceneByteChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_BL8X, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_DU1L, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_ZBQN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0088);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_ZKLB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, LUTOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x000C);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SegmentPtrLUT, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0020);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, SetupIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, TearDownIndex, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, SubTemplateSerialNumbers, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0070);
		}

		// struct FMovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_SDZG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, MetaData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneSubSectionFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionFieldData, UnknownData_SQHI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionFieldData, 0x0060);
		}

		// struct FMovieSceneTrackFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackFieldData, UnknownData_IBBP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackFieldData, 0x0060);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_809A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// struct FMovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_PAA6, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// struct FMovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_RQN0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_INM7, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x0320);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_HCJU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_XE7F, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// struct FGeneratedMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__GeneratedMovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedMovieSceneKeyStruct, UnknownData_VE2O, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedMovieSceneKeyStruct, 0x0050);
		}

		// struct FMovieSceneObjectPathChannelKeyValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannelKeyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, SoftPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, HardPtr, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannelKeyValue, 0x0030);
		}

		// struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, PropertyClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, UnknownData_RJ4J, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannel, 0x00C0);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_EN3P, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_CGRR, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_ELIG, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_RZO7, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_0TOE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// struct FMovieSceneEvaluationTrackSegments
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrackSegments)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SegmentIdentifierToIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SortedSegments, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrackSegments, 0x0020);
		}

		// struct FSectionEvaluationDataTree
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationDataTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationDataTree, UnknownData_OHOU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationDataTree, 0x0060);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_APMZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_PPNQ, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, Segments, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationTree, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_SFRG, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x00F8);
		}

		// struct FMovieSceneTimeTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeTransform, 0x000C);
		}

		// struct FMovieSceneTimeWarping
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeWarping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, End, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeWarping, 0x0008);
		}

		// struct FMovieSceneNestedSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneNestedSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, Warping, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNestedSequenceTransform, 0x0014);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, UnknownData_JSX3, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, NestedTransforms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x0020);
		}

		// struct FMovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_F2ND, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, FullPlayRange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnwarpedPlayRange, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_JXHU, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00E8);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_Y26K, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x00A0);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_3M46, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, EvaluationField, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Hierarchy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_5OYD, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TrackFieldData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SubSectionFieldData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x02F0);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_VGCR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, StartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_163M, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0014);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, bCanLoop, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, UnknownData_19S9, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, EndFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, FirstLoopStartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PrerollTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostrollTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0024);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// struct FMovieSceneObjectBindingIDs
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingIDs, IDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingIDs, 0x0010);
		}

		// struct FMovieSceneBoolChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_R5OG, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_NXCU, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// struct FMovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_N3Y2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// struct FMovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, PaddingByte, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_X3B0, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// struct FMovieSceneFloatChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_OWWF, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_W2WM, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// struct FMovieSceneIntegerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_WHPY, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_3T8H, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, NotifyFunctionName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0028);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0048);
		}

		// struct FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_A8HD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// struct FMovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// struct FMovieSceneSectionGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionGroup, Sections, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionGroup, 0x0010);
		}

		// struct FRandomMemory
		TEST_METHOD(ScriptStruct__TwAIFramework__RandomMemory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomMemory, CachedDiceRoll, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomMemory, LastDiceRollTimestamp, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomMemory, 0x0008);
		}

		// struct FTickAnimationSharingFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__AnimationSharing__TickAnimationSharingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickAnimationSharingFunction, UnknownData_ZOG9, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickAnimationSharingFunction, 0x0030);
		}

		// struct FAnimationSharingScalability
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSharingScalability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UseBlendTransitions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UnknownData_822H, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, BlendSignificanceValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, MaximumNumberConcurrentBlends, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, TickSignificanceValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSharingScalability, 0x0010);
		}

		// struct FAnimationSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, NumRandomizedInstances, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, Enabled, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, UnknownData_EXSZ, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSetup, 0x0018);
		}

		// struct FAnimationStateEntry
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, State, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_7I4A, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, AnimationSetups, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bOnDemand, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bAdditive, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_LNY9, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, BlendTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bReturnToPreviousState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bSetNextState, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, NextState, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_HF7D, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, MaximumNumberOfConcurrentInstances, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, WiggleTimePercentage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bRequiresCurves, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_UZG2, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateEntry, 0x0030);
		}

		// struct FPerSkeletonAnimationSharingSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__PerSkeletonAnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, Skeleton, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, SkeletalMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, BlendAnimBlueprint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AdditiveAnimBlueprint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, StateProcessorClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AnimationStates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerSkeletonAnimationSharingSetup, 0x0038);
		}

		// struct FAdaptorPolygon2Group
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon2Group)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, UnknownData_S9HT, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon2Group, 0x0048);
		}

		// struct FAdaptorTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorTriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorTriangleID, 0x0004);
		}

		// struct FAdaptorPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, UnknownData_XHXH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon, 0x0018);
		}

		// struct FPolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// struct FMeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_P5SH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// struct FMeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, UnknownData_04BX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// struct FMeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// struct FPolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_DX71, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// struct FVertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// struct FVertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// struct FVertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// struct FChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_VSSO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// struct FVertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// struct FVertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_7JS9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// struct FAttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_SZ8F, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// struct FAttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_DNIN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// struct FAttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_40IN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// struct FVertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// struct FPolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_15W7, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// struct FVertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// struct FPolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_MTDR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_533K, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0020);
		}

		// struct FEdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_0A67, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0020);
		}

		// struct FVertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_OZV0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_AOHX, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// struct FVertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_YOJD, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// struct FSubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// struct FSubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// struct FSubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// struct FSubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_I7XE, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// struct FSubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// struct FRenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_0E46, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// struct FRenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_0OW9, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// struct FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_O5WN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, GeometryCollectionCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, StartFrameOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, EndFrameOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, PlayRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_K6O0, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionParams, 0x0030);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplateParameters : public FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionStartTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionEndTime, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, 0x0038);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplate, 0x0058);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_8WKQ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_KX1Q, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_VW6E, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x0108);
		}

		// struct FInAppPurchaseReceiptInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo2, 0x0030);
		}

		// struct FOnlineProxyStoreOffer
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__OnlineProxyStoreOffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, OfferId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, LongDescription, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPriceText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_CG2K, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, PriceText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, NumericPrice, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_5I8H, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, CurrencyCode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ReleaseDate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ExpirationDate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DiscountType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_2W0R, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DynamicFields, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOnlineProxyStoreOffer, 0x0110);
		}

		// struct FInAppPurchaseRestoreInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseRestoreInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo2, 0x0030);
		}

		// struct FInAppPurchaseReceiptInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ItemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo, 0x0030);
		}

		// struct FInAppPurchaseProductInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, UnknownData_9SC3, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, ReceiptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DynamicFields, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo2, 0x00F8);
		}

		// struct FInAppPurchaseProductRequest2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductRequest2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, UnknownData_WHYM, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest2, 0x0018);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_GYMA, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_0J6A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, RemovedPartyMembers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0050);
		}

		// struct FSpectatorReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__SpectatorReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, SpectatorId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, Spectator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpectatorReservation, 0x0078);
		}

		// struct FWheelSetup
		TEST_METHOD(ScriptStruct__PhysXVehicles__WheelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, bDisableSteering, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_BJTI, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0020);
		}

		// struct FVehicleGearData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleGearData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, Ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// struct FVehicleTransmissionData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleTransmissionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_18TZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_9LWP, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// struct FVehicleEngineData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleEngineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_NLUI, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x00A0);
		}

		// struct FVehicleDifferential4WData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleDifferential4WData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_LBHS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// struct FReplicatedVehicleState
		TEST_METHOD(ScriptStruct__PhysXVehicles__ReplicatedVehicleState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// struct FVehicleInputRate
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleInputRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// struct FTireConfigMaterialFriction
		TEST_METHOD(ScriptStruct__PhysXVehicles__TireConfigMaterialFriction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, PhysicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, UnknownData_FEFR, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireConfigMaterialFriction, 0x0010);
		}

		// struct FAnimNode_WheelHandler : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__PhysXVehicles__AnimNode_WheelHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_TXF8, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x00E0);
		}

		// struct FVehicleAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleAnimInstanceProxy, UnknownData_9AAK, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleAnimInstanceProxy, 0x06F0);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_9ZLW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_6CRU, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Type, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_3D8A, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0060);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_H94X, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, Type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_SZO6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_9T4K, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_A249, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_C19H, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_YJW4, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_4SI1, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, UnknownData_FRFR, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerLeft, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerRight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffLeft, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffRight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0070);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, Input, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_XA2Q, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0028);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_3AA7, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_CH3H, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_OK7P, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x0048);
		}

		// struct FLandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_DMAH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// struct FLandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LODIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_DXPN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_18WM, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_0JRV, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLOD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, DetailMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_X5RF, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, LightingChannels, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, DynamicShadowDetailMode, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bVisibleInRayTracing, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_FLKL, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0048);
		}

		// struct FLandscapeMaterialTextureStreamingInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeMaterialTextureStreamingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TextureName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeMaterialTextureStreamingInfo, 0x000C);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_K7YP, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FLandscapeLayerBrush
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerBrush, UnknownData_H7M0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerBrush, 0x0001);
		}

		// struct FLandscapeLayer
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bVisible, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bLocked, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_6A9Z, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, HeightmapAlpha, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapAlpha, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, BlendMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_KT9J, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Brushes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapLayerAllocationBlend, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayer, 0x0088);
		}

		// struct FHeightmapData
		TEST_METHOD(ScriptStruct__Landscape__HeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeightmapData, Texture, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeightmapData, 0x0008);
		}

		// struct FWeightmapData
		TEST_METHOD(ScriptStruct__Landscape__WeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, Textures, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, LayerAllocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, TextureUsages, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapData, 0x0030);
		}

		// struct FLandscapeLayerComponentData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, HeightmapData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, WeightmapData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerComponentData, 0x0038);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, LayerContributionTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DirtyTexture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0038);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_535L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0010);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_R4SY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_SKRT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_637W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_5G9R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FSubmixEffectDynamicProcessorFilterSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicProcessorFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, UnknownData_OK2Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, Cutoff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, GainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicProcessorFilterSettings, 0x000C);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LinkMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_EMK8, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, Ratio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ExternalSubmix, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_Y6AX, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyGainDb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyHighshelf, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyLowshelf, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_QR90, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0050);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_ZT2K, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0034);
		}

		// struct FSubmixEffectReverbFastSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbFastSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, bBypass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, UnknownData_2SQC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, Density, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, Diffusion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, Gain, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, GainHF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, DecayTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, DecayHFRatio, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, ReflectionsGain, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, ReflectionsDelay, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, LateGain, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, LateDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, AirAbsorptionGainHF, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, WetLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, DryLevel, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbFastSettings, 0x0038);
		}

		// struct FDestructibleAdvancedParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleAdvancedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, DamageCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, ImpactVelocityThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, MaxChunkSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, FractureImpulseScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleAdvancedParameters, 0x0010);
		}

		// struct FDestructibleDebrisParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDebrisParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMax, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, ValidBounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDebrisParameters, 0x002C);
		}

		// struct FDestructibleDamageParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDamageParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageSpread, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bEnableImpactDamage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_VN0N, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactDamage, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DefaultImpactDamageDepth, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bCustomImpactResistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_WY11, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactResistance, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDamageParameters, 0x001C);
		}

		// struct FDestructibleChunkParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleChunkParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bIsSupportChunk, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotFracture, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotDamage, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotCrumble, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleChunkParameters, 0x0004);
		}

		// struct FFractureMaterial
		TEST_METHOD(ScriptStruct__ApexDestruction__FractureMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, Tangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UAngle, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, InteriorElementIndex, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureMaterial, 0x0024);
		}

		// struct FDestructibleSpecialHierarchyDepths
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleSpecialHierarchyDepths)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, SupportDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, MinimumFractureDepth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, bEnableDebris, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, UnknownData_OZ9R, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, DebrisDepth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, EssentialDepth, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleSpecialHierarchyDepths, 0x0014);
		}

		// struct FDestructibleDepthParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDepthParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDepthParameters, ImpactDamageOverride, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDepthParameters, 0x0001);
		}

		// struct FDestructibleParametersFlag
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParametersFlag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParametersFlag, UnknownData_UOAZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParametersFlag, 0x0004);
		}

		// struct FDestructibleParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DamageParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DebrisParameters, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, AdvancedParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, SpecialHierarchyDepths, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_F014, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DepthParameters, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, Flags, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_E6UB, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParameters, 0x0088);
		}

		// struct FUdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// struct FActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_RSXV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_QW82, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// struct FActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// struct FActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_VOJQ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0018);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0010);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_7Z6G, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FVirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_SYQ0, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0020);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FCustomizedToolMenuEntry
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, UnknownData_D9ZW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuEntry, 0x0004);
		}

		// struct FCustomizedToolMenuSection
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, Visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, UnknownData_7TH0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuSection, 0x0004);
		}

		// struct FCustomizedToolMenuNameArray
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuNameArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuNameArray, Names, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuNameArray, 0x0010);
		}

		// struct FCustomizedToolMenu
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Entries, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Sections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, EntryOrder, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, SectionOrder, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, UnknownData_XFYB, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenu, 0x01E8);
		}

		// struct FImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_G68C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_TQ0P, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisablePreintegratedGF, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileCSMQuality, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0009);
		}

		// struct FMyPluginStruct
		TEST_METHOD(ScriptStruct__UObjectPlugin__MyPluginStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMyPluginStruct, TestString, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMyPluginStruct, 0x0010);
		}

		// struct FTimedDataChannelSampleTime
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataChannelSampleTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataChannelSampleTime, UnknownData_MHD0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataChannelSampleTime, 0x0018);
		}

		// struct FTimedDataInputEvaluationData
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataInputEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToNewestSampleSeconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToOldestSampleSeconds, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataInputEvaluationData, 0x0008);
		}

		// struct FTemplateSequenceBindingOverrideData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, bOverridesDefault, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, UnknownData_2DR4, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceBindingOverrideData, 0x000C);
		}

		// struct FTemplateSequenceInstanceData : public FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceInstanceData, Operand, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceInstanceData, UnknownData_7TZ9, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceInstanceData, 0x0020);
		}

		// struct FTemplateSequenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceSectionTemplate, SectionStartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceSectionTemplate, OuterBindingId, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceSectionTemplate, InnerOperand, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceSectionTemplate, 0x0048);
		}

		// struct FSoundModulation
		TEST_METHOD(ScriptStruct__AudioExtensions__SoundModulation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulation, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulation, 0x0010);
		}

		// struct FSoundModulationParameter
		TEST_METHOD(ScriptStruct__AudioExtensions__SoundModulationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationParameter, Control, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationParameter, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationParameter, UnknownData_BXNX, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationParameter, 0x0014);
		}

		// struct FAudioTagBindingToEnum_ST
		TEST_METHOD(UserDefinedStruct__AudioTagBindingToEnum_ST__AudioTagBindingToEnum_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioTagBindingToEnum_ST, AudioEnum_2_97F22B674718921B1603378A7885D4D3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioTagBindingToEnum_ST, 0x0001);
		}

		// struct FAbilityTagToEnum_ST
		TEST_METHOD(UserDefinedStruct__AbilityTagToEnum_ST__AbilityTagToEnum_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityTagToEnum_ST, AbilityEnum_2_E0E832F04221B1C8A15D738CF43D948F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAbilityTagToEnum_ST, 0x0001);
		}

		// struct FActorParce_ST
		TEST_METHOD(UserDefinedStruct__ActorParce_ST__ActorParce_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorParce_ST, Actor_3_8B1A743641BA587DB2F62C82F1E55752, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorParce_ST, 0x0010);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FFrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_EJ7M, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, MovieExtension, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_RTG9, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseCustomFrameRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_Y9D0, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, CustomFrameRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, Resolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUsePathTracer, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, PathTracerSamplePerPixel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_WOVK, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0070);
		}

		// struct FCapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_J3G6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// struct FCapturedPixelsID
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixelsID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixelsID, Identifiers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixelsID, 0x0050);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, Position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FCombatButtonStruct
		TEST_METHOD(UserDefinedStruct__CombatButtonStruct__CombatButtonStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombatButtonStruct, Text_2_AC570FEA46DA3DB431805E97D8A2D31F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombatButtonStruct, Class_5_26C0539C4D88ED0283B336981E1A43F6, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombatButtonStruct, Index_8_A3B5569F4D48BC61A88712866420B1EB, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCombatButtonStruct, 0x001C);
		}

		// struct FMediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, MetaData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// struct FMediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_1NYK, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, SeekTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, PlayOnOpen, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Loop, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_BC34, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x0030);
		}

		// struct FInstanceMesh_ST
		TEST_METHOD(UserDefinedStruct__InstanceMesh_ST__InstanceMesh_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceMesh_ST, InstanceGroup_6_2C82039745676EAB7945D380C3D1AD50, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceMesh_ST, UnknownData_UCP0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceMesh_ST, StaticMesh_8_97CCBFA14A44252911E3098436464C68, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceMesh_ST, SpawnLocation_9_0E1EDD804C9818C69B0070BCF5869E13, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceMesh_ST, HasCollision__11_D3C283FD45EA2BF8FB40ECB838F22B53, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceMesh_ST, UnknownData_W2Z0, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceMesh_ST, MinDrawScale_22_1D8481064D2A71D8EAF47E81A393E139, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceMesh_ST, MaxDrawScale_19_2AFEA85B4550F45869BBBB97E987203C, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceMesh_ST, DrawDistance_23_FA6853EE41F16373361A7299954F59D5, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstanceMesh_ST, ZOffset_18_FBBFBE7F45C9609FE157B199243D8E79, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstanceMesh_ST, 0x0054);
		}

		// struct FFG_StoredMeshInformation_ST
		TEST_METHOD(UserDefinedStruct__FG_StoredMeshInformation_ST__FG_StoredMeshInformation_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFG_StoredMeshInformation_ST, StaticMesh_3_89B283C24AF8B6575694FEB48FCD07FF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFG_StoredMeshInformation_ST, FXToUse_19_D7C60C3F413526B1CECF33986603451F, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFG_StoredMeshInformation_ST, DrawDistiance_22_CB71F3914D0ED338CCB6A29BCD08B430, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFG_StoredMeshInformation_ST, CustomTag_14_DC01FDC646FF8C1A59ADA2B409192127, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFG_StoredMeshInformation_ST, 0x001C);
		}

		// struct FDetailMesh_Info_ST
		TEST_METHOD(UserDefinedStruct__DetailMesh_Info_ST__DetailMesh_Info_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, StaticMesh_12_18C1763D443AF040DED8C69A0666B607, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, MaterialOverride_9_78AACA934051F27B6924888949AAE831, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, DetailPoint_13_A40CFA904398114AECFBF6B574AC7552, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, MinDrawScale_16_9F42E91B4FAF33766CCAE8A55BB24B2B, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, MaxDrawScale_18_7CDA6F2C4E92405BA1845FA357CDF06F, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, DrawDistance_20_A179ED0C4F1CEA617466DF94EE73E94A, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, ZOffset_22_758DA2274FD726B5CBF0729552E12A79, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, Collision_24_6EC0837847EAF1A5502532AFC6979588, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, UnknownData_GFH8, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, TraceTransform_5_BCB6193E4EFF85E317E8DD8A21F30582, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, GenerateLights_34_A9656A4346B0AE2035196396DCEE8FDB, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, UnknownData_WJGO, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_Info_ST, LightSettings_37_7BFE47FE4F476BF1DCFF6E9C87949A6B, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetailMesh_Info_ST, 0x00A0);
		}

		// struct FBoneOffset
		TEST_METHOD(ScriptStruct__SkeletonRetarget__BoneOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneOffset, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneOffset, Offsets, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneOffset, 0x0040);
		}

		// struct FAnimNode_BoneOffset : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__SkeletonRetarget__AnimNode_BoneOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneOffset, SourceMesh, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneOffset, BoneOffsets, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneOffset, 0x00E0);
		}

		// struct FLG_MeshInformation_ST
		TEST_METHOD(UserDefinedStruct__LG_MeshInformation_ST__LG_MeshInformation_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLG_MeshInformation_ST, StaticMesh_2_89B283C24AF8B6575694FEB48FCD07FF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLG_MeshInformation_ST, LightActorToUse_8_F69C54AD44A905313B9E77B3808A25DF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLG_MeshInformation_ST, CustomTag_11_8A551D9F40A350B8FBC83280D440A2E1, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLG_MeshInformation_ST, 0x0018);
		}

		// struct FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector, 0x000C);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_NGSP, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_BH8O, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_YC9B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_TU84, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_U0U0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, v2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_0LQ8, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_N48D, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_U42V, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_P4TI, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_SJH7, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_9TFS, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, Seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_9K6H, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FFrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// struct FFrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// struct FFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// struct FQualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, Rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// struct FTimecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_GSPS, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_XYRC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0018);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0018);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x0008);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0010);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_CJU0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_2WO1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_UH35, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FPolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_441Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, bIsMinimalPatch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_XOPK, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B8);
		}

		// struct FGuid
		TEST_METHOD(ScriptStruct__CoreUObject__Guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGuid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGuid, 0x0010);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_X0R0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// struct FAutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Filename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_TE98, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, Timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0014);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_1WB6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, Z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FPlane : public FVector
		TEST_METHOD(ScriptStruct__CoreUObject__Plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlane, 0x0010);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, Z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct FColor
		TEST_METHOD(ScriptStruct__CoreUObject__Color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColor, 0x0004);
		}

		// struct FBox
		TEST_METHOD(ScriptStruct__CoreUObject__Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, Max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, IsValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox, UnknownData_01W8, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox, 0x001C);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, Max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_AF51, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, Origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, Center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_BSS1, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_CUDA, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_91L7, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, Points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_PRU5, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FAnimTweenTargetData
		TEST_METHOD(ScriptStruct__TwUIFramework__AnimTweenTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTweenTargetData, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTweenTargetData, Angle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTweenTargetData, Opacity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTweenTargetData, 0x0010);
		}

		// struct FTweenTargetDataMap
		TEST_METHOD(ScriptStruct__TwUIFramework__TweenTargetDataMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTweenTargetDataMap, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTweenTargetDataMap, TweenTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTweenTargetDataMap, UnknownData_HR8B, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTweenTargetDataMap, 0x0058);
		}

		// struct FTwMenuData
		TEST_METHOD(ScriptStruct__TwUIFramework__TwMenuData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwMenuData, Panel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwMenuData, MenuBarItem, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwMenuData, Label, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwMenuData, LookupName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwMenuData, IconTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwMenuData, EnablePlatformSensitive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwMenuData, TargetPlatform, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwMenuData, EnableInputDeviceSensitive, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwMenuData, TargetInputDevice, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwMenuData, UnknownData_OML5, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwMenuData, 0x0040);
		}

		// struct FPanelLifetimeResponder
		TEST_METHOD(ScriptStruct__TwUIFramework__PanelLifetimeResponder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPanelLifetimeResponder, UnknownData_790T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPanelLifetimeResponder, 0x0010);
		}

		// struct FViewPoppingResponder
		TEST_METHOD(ScriptStruct__TwUIFramework__ViewPoppingResponder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewPoppingResponder, UnknownData_9840, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewPoppingResponder, 0x0010);
		}

		// struct FRadioWidgetData
		TEST_METHOD(ScriptStruct__TwUIFramework__RadioWidgetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioWidgetData, Label, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadioWidgetData, 0x0018);
		}

		// struct FRadioWidgetEntry
		TEST_METHOD(ScriptStruct__TwUIFramework__RadioWidgetEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioWidgetEntry, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadioWidgetEntry, Button, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadioWidgetEntry, 0x0020);
		}

		// struct FTwPlatformIconRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__TwUIFramework__TwPlatformIconRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwPlatformIconRow, Icons, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwPlatformIconRow, 0x0058);
		}

		// struct FToastData
		TEST_METHOD(ScriptStruct__TwUIFramework__ToastData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastData, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastData, FadeDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastData, ToastText, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastData, ToastSubtext, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastData, ToastTexture, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastData, BackgroundColor, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToastData, 0x0070);
		}

		// struct FAnimTweenGroup
		TEST_METHOD(ScriptStruct__TwUIFramework__AnimTweenGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTweenGroup, Tweens, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTweenGroup, 0x0010);
		}

		// struct FGameplayEffectContextHandle
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectContextHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContextHandle, UnknownData_0801, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectContextHandle, 0x0018);
		}

		// struct FGameplayCueParameters
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, NormalizedMagnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, RawMagnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, EffectContext, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, MatchedTagName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, OriginalTag, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, AggregatedSourceTags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, AggregatedTargetTags, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, Location, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, Normal, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, Instigator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, EffectCauser, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, SourceObject, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, PhysicalMaterial, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, GameplayEffectLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, AbilityLevel, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueParameters, TargetAttachComponent, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueParameters, 0x00B8);
		}

		// struct FGameplayAttribute
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAttribute, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAttribute, Attribute, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAttribute, AttributeOwner, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAttribute, 0x0038);
		}

		// struct FGameplayEffectModifiedAttribute
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectModifiedAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifiedAttribute, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifiedAttribute, TotalMagnitude, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifiedAttribute, UnknownData_SWK2, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectModifiedAttribute, 0x0040);
		}

		// struct FGameplayEffectSpecForRPC
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectSpecForRPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, Def, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, ModifiedAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, EffectContext, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, AggregatedSourceTags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, AggregatedTargetTags, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, Level, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecForRPC, AbilityLevel, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectSpecForRPC, 0x0078);
		}

		// struct FGameplayAbilitySpecHandle
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilitySpecHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilitySpecHandle, 0x0004);
		}

		// struct FPredictionKey
		TEST_METHOD(ScriptStruct__GameplayAbilities__PredictionKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, Current, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, Base, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, UnknownData_GW64, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, PredictiveConnection, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, bIsStale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, bIsServerInitiated, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictionKey, UnknownData_TVFX, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictionKey, 0x0018);
		}

		// struct FGameplayAbilityTargetDataHandle
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityTargetDataHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetDataHandle, UnknownData_57PE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityTargetDataHandle, 0x0028);
		}

		// struct FGameplayAbilities_FServerAbilityRPCBatch
		TEST_METHOD(ScriptStruct__GameplayAbilities__ServerAbilityRPCBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, AbilitySpecHandle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, UnknownData_0S3A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, PredictionKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, TargetData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, InputPressed, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, Ended, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, Started, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FServerAbilityRPCBatch, UnknownData_OJKJ, 0x004B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FServerAbilityRPCBatch, 0x0050);
		}

		// struct FReplicatedPredictionKeyItem : public FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__GameplayAbilities__ReplicatedPredictionKeyItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedPredictionKeyItem, UnknownData_POLO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedPredictionKeyItem, PredictionKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedPredictionKeyItem, 0x0028);
		}

		// struct FReplicatedPredictionKeyMap : public FFastArraySerializer
		TEST_METHOD(ScriptStruct__GameplayAbilities__ReplicatedPredictionKeyMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedPredictionKeyMap, PredictionKeys, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedPredictionKeyMap, 0x0118);
		}

		// struct FMinimalReplicationTagCountMap
		TEST_METHOD(ScriptStruct__GameplayAbilities__MinimalReplicationTagCountMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalReplicationTagCountMap, UnknownData_7CP4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalReplicationTagCountMap, Owner, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalReplicationTagCountMap, UnknownData_57DN, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalReplicationTagCountMap, 0x0060);
		}

		// struct FActiveGameplayCue : public FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__GameplayAbilities__ActiveGameplayCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCue, GameplayCueTag, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCue, UnknownData_CGYW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCue, PredictionKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCue, Parameters, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCue, bPredictivelyRemoved, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCue, UnknownData_PPZ8, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGameplayCue, 0x00F0);
		}

		// struct FActiveGameplayCueContainer : public FFastArraySerializer
		TEST_METHOD(ScriptStruct__GameplayAbilities__ActiveGameplayCueContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCueContainer, GameplayCues, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCueContainer, UnknownData_6ULC, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayCueContainer, Owner, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGameplayCueContainer, 0x0128);
		}

		// struct FGameplayEffectAttributeCaptureDefinition
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectAttributeCaptureDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureDefinition, AttributeToCapture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureDefinition, AttributeSource, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureDefinition, bSnapshot, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureDefinition, UnknownData_FEM3, 0x003A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectAttributeCaptureDefinition, 0x0040);
		}

		// struct FGameplayEffectAttributeCaptureSpec
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectAttributeCaptureSpec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureSpec, BackingDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureSpec, UnknownData_PYT3, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectAttributeCaptureSpec, 0x0050);
		}

		// struct FGameplayEffectAttributeCaptureSpecContainer
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectAttributeCaptureSpecContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureSpecContainer, SourceAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureSpecContainer, TargetAttributes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureSpecContainer, bHasNonSnapshottedAttributes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectAttributeCaptureSpecContainer, UnknownData_TEWK, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectAttributeCaptureSpecContainer, 0x0028);
		}

		// struct FTagContainerAggregator
		TEST_METHOD(ScriptStruct__GameplayAbilities__TagContainerAggregator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagContainerAggregator, CapturedActorTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagContainerAggregator, CapturedSpecTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagContainerAggregator, ScopedTags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagContainerAggregator, UnknownData_EJBU, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagContainerAggregator, 0x0088);
		}

		// struct FModifierSpec
		TEST_METHOD(ScriptStruct__GameplayAbilities__ModifierSpec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModifierSpec, EvaluatedMagnitude, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModifierSpec, 0x0004);
		}

		// struct FScalableFloat
		TEST_METHOD(ScriptStruct__GameplayAbilities__ScalableFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalableFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalableFloat, UnknownData_MHWB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalableFloat, Curve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalableFloat, UnknownData_UH2U, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalableFloat, 0x0020);
		}

		// struct FGameplayAbilitySpecDef
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilitySpecDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, Ability, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, LevelScalableFloat, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, InputID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, RemovalPolicy, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, UnknownData_T4EG, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, SourceObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, UnknownData_2RPF, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, AssignedHandle, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecDef, UnknownData_6V9D, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilitySpecDef, 0x0090);
		}

		// struct FGameplayEffectSpec
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectSpec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, Def, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, ModifiedAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, CapturedRelevantAttributes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, UnknownData_RZTE, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, Duration, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, Period, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, ChanceToApplyToTarget, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, UnknownData_L854, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, CapturedSourceTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, CapturedTargetTags, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, DynamicGrantedTags, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, DynamicAssetTags, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, Modifiers, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, StackCount, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, UnknownData_F11K, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, GrantedAbilitySpecs, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, UnknownData_ZVC0, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, EffectContext, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, Level, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpec, UnknownData_HCK7, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectSpec, 0x0298);
		}

		// struct FActiveGameplayEffect : public FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__GameplayAbilities__ActiveGameplayEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, UnknownData_HGCG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, Spec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, PredictionKey, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, StartServerWorldTime, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, CachedStartServerWorldTime, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, StartWorldTime, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, bIsInhibited, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffect, UnknownData_O572, 0x02D5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGameplayEffect, 0x0370);
		}

		// struct FActiveGameplayEffectsContainer : public FFastArraySerializer
		TEST_METHOD(ScriptStruct__GameplayAbilities__ActiveGameplayEffectsContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectsContainer, UnknownData_J901, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectsContainer, GameplayEffects_Internal, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectsContainer, UnknownData_D3RG, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectsContainer, ApplicationImmunityQueryEffects, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectsContainer, UnknownData_PY73, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGameplayEffectsContainer, 0x0480);
		}

		// struct FAttributeMetaData : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayAbilities__AttributeMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, BaseValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, MinValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, MaxValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, UnknownData_MMYC, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, DerivedAttributeInfo, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, bCanStack, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeMetaData, UnknownData_S7VB, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributeMetaData, 0x0030);
		}

		// struct FGameplayAttributeData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAttributeData, UnknownData_XIDV, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAttributeData, BaseValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAttributeData, CurrentValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAttributeData, 0x0010);
		}

		// struct FGameplayTargetDataFilter
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayTargetDataFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, UnknownData_6PHH, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, SelfActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, SelfFilter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, UnknownData_9PM9, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, RequiredActorClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, bReverseFilter, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilter, UnknownData_YBN6, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTargetDataFilter, 0x0028);
		}

		// struct FGameplayAbilityTargetData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData, UnknownData_DMIO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityTargetData, 0x0008);
		}

		// struct FGameplayAbilityTargetData_SingleTargetHit : public FGameplayAbilityTargetData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityTargetData_SingleTargetHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_SingleTargetHit, HitResult, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_SingleTargetHit, bHitReplaced, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_SingleTargetHit, UnknownData_8MVP, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityTargetData_SingleTargetHit, 0x0098);
		}

		// struct FGameplayAbilityTargetingLocationInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityTargetingLocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, UnknownData_XT6G, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, LocationType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, UnknownData_LL5G, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, LiteralTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, SourceActor, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, SourceComponent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, SourceAbility, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetingLocationInfo, SourceSocketName, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityTargetingLocationInfo, 0x0070);
		}

		// struct FGameplayAbilityTargetData_ActorArray : public FGameplayAbilityTargetData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityTargetData_ActorArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_ActorArray, UnknownData_I2IL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_ActorArray, SourceLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_ActorArray, TargetActorArray, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityTargetData_ActorArray, 0x0090);
		}

		// struct FGameplayAbilityTargetData_LocationInfo : public FGameplayAbilityTargetData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityTargetData_LocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_LocationInfo, UnknownData_RICM, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_LocationInfo, SourceLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityTargetData_LocationInfo, TargetLocation, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityTargetData_LocationInfo, 0x00F0);
		}

		// struct FGameplayAbilitySpecHandleAndPredictionKey
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilitySpecHandleAndPredictionKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecHandleAndPredictionKey, AbilityHandle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecHandleAndPredictionKey, PredictionKeyAtCreation, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilitySpecHandleAndPredictionKey, 0x0008);
		}

		// struct FAbilityTaskDebugMessage
		TEST_METHOD(ScriptStruct__GameplayAbilities__AbilityTaskDebugMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityTaskDebugMessage, FromTask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityTaskDebugMessage, Message, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAbilityTaskDebugMessage, 0x0018);
		}

		// struct FAbilityEndedData
		TEST_METHOD(ScriptStruct__GameplayAbilities__AbilityEndedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityEndedData, AbilityThatEnded, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityEndedData, AbilitySpecHandle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityEndedData, bReplicateEndAbility, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityEndedData, bWasCancelled, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityEndedData, UnknownData_T5Q2, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAbilityEndedData, 0x0010);
		}

		// struct FGameplayAbilityActorInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, UnknownData_084M, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, OwnerActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, AvatarActor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, PlayerController, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, AbilitySystemComponent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, SkeletalMeshComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, AnimInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, MovementComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActorInfo, AffectedAnimInstanceTag, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityActorInfo, 0x0048);
		}

		// struct FMinimalGameplayCueReplicationProxy
		TEST_METHOD(ScriptStruct__GameplayAbilities__MinimalGameplayCueReplicationProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalGameplayCueReplicationProxy, UnknownData_IEW4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalGameplayCueReplicationProxy, Owner, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalGameplayCueReplicationProxy, UnknownData_5FJZ, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalGameplayCueReplicationProxy, 0x01C0);
		}

		// struct FGameplayCueTag
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTag, GameplayCueTag, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueTag, 0x0008);
		}

		// struct FGameplayCueTranslationLink
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueTranslationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslationLink, RulesCDO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslationLink, UnknownData_4EDI, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueTranslationLink, 0x0018);
		}

		// struct FGameplayCueTranslatorNodeIndex
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueTranslatorNodeIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslatorNodeIndex, Index, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueTranslatorNodeIndex, 0x0004);
		}

		// struct FGameplayCueTranslatorNode
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueTranslatorNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslatorNode, Links, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslatorNode, CachedIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslatorNode, CachedGameplayTag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslatorNode, CachedGameplayTagName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslatorNode, UnknownData_H1A2, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueTranslatorNode, 0x0078);
		}

		// struct FGameplayCueTranslationManager
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueTranslationManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslationManager, TranslationLUT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslationManager, TranslationNameToIndexMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslationManager, TagManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueTranslationManager, UnknownData_DNBO, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueTranslationManager, 0x0080);
		}

		// struct FActiveGameplayEffectQuery
		TEST_METHOD(ScriptStruct__GameplayAbilities__ActiveGameplayEffectQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectQuery, UnknownData_JKPF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGameplayEffectQuery, 0x0088);
		}

		// struct FActiveGameplayEffectHandle
		TEST_METHOD(ScriptStruct__GameplayAbilities__ActiveGameplayEffectHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectHandle, Handle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectHandle, bPassedFiltersAndWasExecuted, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGameplayEffectHandle, UnknownData_Q5XM, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGameplayEffectHandle, 0x0008);
		}

		// struct FGameplayModifierEvaluatedData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayModifierEvaluatedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, ModifierOp, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, UnknownData_0NBX, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, Magnitude, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, Handle, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, IsValid, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierEvaluatedData, UnknownData_AG9L, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayModifierEvaluatedData, 0x0050);
		}

		// struct FGameplayEffectCustomExecutionOutput
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectCustomExecutionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCustomExecutionOutput, OutputModifiers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCustomExecutionOutput, UnknownData_WHVE, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectCustomExecutionOutput, 0x0018);
		}

		// struct FGameplayEffectCustomExecutionParameters
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectCustomExecutionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCustomExecutionParameters, UnknownData_RNDH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectCustomExecutionParameters, 0x00F8);
		}

		// struct FGameplayTagBlueprintPropertyMapping
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayTagBlueprintPropertyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagBlueprintPropertyMapping, TagToMap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagBlueprintPropertyMapping, PropertyToEdit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagBlueprintPropertyMapping, PropertyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagBlueprintPropertyMapping, PropertyGuid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagBlueprintPropertyMapping, UnknownData_WCO6, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagBlueprintPropertyMapping, 0x0048);
		}

		// struct FGameplayTagBlueprintPropertyMap
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayTagBlueprintPropertyMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagBlueprintPropertyMap, UnknownData_5GTR, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagBlueprintPropertyMap, PropertyMappings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagBlueprintPropertyMap, 0x0020);
		}

		// struct FGameplayEffectContext
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, UnknownData_8TUE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, Instigator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, EffectCauser, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, AbilityCDO, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, AbilityInstanceNotReplicated, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, AbilityLevel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, SourceObject, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, InstigatorAbilitySystemComponent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, UnknownData_ORAU, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, Actors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, UnknownData_XEK7, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, WorldOrigin, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectContext, UnknownData_J95I, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectContext, 0x0070);
		}

		// struct FAttributeDefaults
		TEST_METHOD(ScriptStruct__GameplayAbilities__AttributeDefaults)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeDefaults, Attributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeDefaults, DefaultStartingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributeDefaults, 0x0010);
		}

		// struct FGameplayAbilityActivationInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityActivationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActivationInfo, ActivationMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActivationInfo, UnknownData_6FSB, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityActivationInfo, PredictionKeyWhenActivated, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityActivationInfo, 0x0020);
		}

		// struct FGameplayAbilitySpec : public FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilitySpec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, Handle, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, Ability, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, Level, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, InputID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, SourceObject, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, ActiveCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, UnknownData_VEPH, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, ActivationInfo, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, NonReplicatedInstances, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, ReplicatedInstances, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, GameplayEffectHandle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpec, UnknownData_3HZU, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilitySpec, 0x00C8);
		}

		// struct FGameplayAbilitySpecContainer : public FFastArraySerializer
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilitySpecContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecContainer, Items, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilitySpecContainer, Owner, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilitySpecContainer, 0x0120);
		}

		// struct FGameplayAbilityRepAnimMontage
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityRepAnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, AnimMontage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, Position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, BlendTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, NextSectionID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, UnknownData_U5S7, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, PredictionKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, SectionIdToPlay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityRepAnimMontage, UnknownData_3LSZ, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityRepAnimMontage, 0x0038);
		}

		// struct FGameplayAbilityLocalAnimMontage
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityLocalAnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityLocalAnimMontage, AnimMontage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityLocalAnimMontage, PlayBit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityLocalAnimMontage, UnknownData_16IK, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityLocalAnimMontage, PredictionKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityLocalAnimMontage, AnimatingAbility, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityLocalAnimMontage, 0x0030);
		}

		// struct FNetSerializeScriptStructCache
		TEST_METHOD(ScriptStruct__GameplayAbilities__NetSerializeScriptStructCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetSerializeScriptStructCache, ScriptStructs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetSerializeScriptStructCache, 0x0010);
		}

		// struct FGameplayEventData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, EventTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, Instigator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, Target, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, OptionalObject, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, OptionalObject2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, ContextHandle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, InstigatorTags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, TargetTags, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, EventMagnitude, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, UnknownData_0ECV, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEventData, TargetData, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEventData, 0x00B0);
		}

		// struct FAbilityTriggerData
		TEST_METHOD(ScriptStruct__GameplayAbilities__AbilityTriggerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityTriggerData, TriggerTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityTriggerData, TriggerSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityTriggerData, UnknownData_TPZQ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAbilityTriggerData, 0x000C);
		}

		// struct FGameplayAbilityBindInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayAbilityBindInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityBindInfo, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityBindInfo, UnknownData_D448, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayAbilityBindInfo, GameplayAbilityClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayAbilityBindInfo, 0x0010);
		}

		// struct FWorldReticleParameters
		TEST_METHOD(ScriptStruct__GameplayAbilities__WorldReticleParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldReticleParameters, AOEScale, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldReticleParameters, 0x000C);
		}

		// struct FGameplayTargetDataFilterHandle
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayTargetDataFilterHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTargetDataFilterHandle, UnknownData_W565, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTargetDataFilterHandle, 0x0010);
		}

		// struct FGameplayCueObjectLibrary
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, Paths, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, UnknownData_RB47, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, ActorObjectLibrary, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, StaticObjectLibrary, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, CueSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, UnknownData_OAQU, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, bShouldSyncScan, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, bShouldAsyncLoad, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, bShouldSyncLoad, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueObjectLibrary, bHasBeenInitialized, 0x004F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueObjectLibrary, 0x0050);
		}

		// struct FGameplayCuePendingExecute
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCuePendingExecute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, UnknownData_8ZTL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, PredictionKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, PayloadType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, UnknownData_08KG, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, OwningComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, FromSpec, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCuePendingExecute, CueParameters, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCuePendingExecute, 0x0170);
		}

		// struct FPreallocationInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__PreallocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreallocationInfo, UnknownData_6C96, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreallocationInfo, ClassesNeedingPreallocation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreallocationInfo, UnknownData_BUY6, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreallocationInfo, 0x0068);
		}

		// struct FGameplayCueNotifyData
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayCueNotifyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueNotifyData, GameplayCueTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueNotifyData, GameplayCueNotifyObj, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueNotifyData, LoadedGameplayCueClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayCueNotifyData, UnknownData_07PL, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayCueNotifyData, 0x0030);
		}

		// struct FAttributeBasedFloat
		TEST_METHOD(ScriptStruct__GameplayAbilities__AttributeBasedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, Coefficient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, PreMultiplyAdditiveValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, PostMultiplyAdditiveValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, BackingAttribute, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, AttributeCurve, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, AttributeCalculationType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, FinalChannel, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, UnknownData_0VWL, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, SourceTagFilter, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributeBasedFloat, TargetTagFilter, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributeBasedFloat, 0x00F8);
		}

		// struct FCustomCalculationBasedFloat
		TEST_METHOD(ScriptStruct__GameplayAbilities__CustomCalculationBasedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomCalculationBasedFloat, CalculationClassMagnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomCalculationBasedFloat, Coefficient, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomCalculationBasedFloat, PreMultiplyAdditiveValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomCalculationBasedFloat, PostMultiplyAdditiveValue, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomCalculationBasedFloat, FinalLookupCurve, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomCalculationBasedFloat, 0x0078);
		}

		// struct FSetByCallerFloat
		TEST_METHOD(ScriptStruct__GameplayAbilities__SetByCallerFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetByCallerFloat, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSetByCallerFloat, DataTag, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSetByCallerFloat, 0x0010);
		}

		// struct FGameplayEffectModifierMagnitude
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectModifierMagnitude)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifierMagnitude, MagnitudeCalculationType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifierMagnitude, UnknownData_GO4K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifierMagnitude, ScalableFloatMagnitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifierMagnitude, AttributeBasedMagnitude, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifierMagnitude, CustomMagnitude, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectModifierMagnitude, SetByCallerMagnitude, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectModifierMagnitude, 0x01A8);
		}

		// struct FGameplayModEvaluationChannelSettings
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayModEvaluationChannelSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModEvaluationChannelSettings, Channel, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayModEvaluationChannelSettings, 0x0001);
		}

		// struct FGameplayTagRequirements
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayTagRequirements)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRequirements, RequireTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRequirements, IgnoreTags, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRequirements, 0x0040);
		}

		// struct FGameplayModifierInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayModifierInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, ModifierOp, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, UnknownData_8A7G, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, Magnitude, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, ModifierMagnitude, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, EvaluationChannelSettings, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, UnknownData_AIC2, 0x0209);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, SourceTags, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierInfo, TargetTags, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayModifierInfo, 0x0290);
		}

		// struct FGameplayEffectExecutionScopedModifierInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectExecutionScopedModifierInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, CapturedAttribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, TransientAggregatorIdentifier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, AggregatorType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, ModifierOp, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, UnknownData_9FV7, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, ModifierMagnitude, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, EvaluationChannelSettings, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, UnknownData_JSSH, 0x01F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, SourceTags, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionScopedModifierInfo, TargetTags, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectExecutionScopedModifierInfo, 0x0280);
		}

		// struct FConditionalGameplayEffect
		TEST_METHOD(ScriptStruct__GameplayAbilities__ConditionalGameplayEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionalGameplayEffect, EffectClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionalGameplayEffect, RequiredSourceTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConditionalGameplayEffect, 0x0028);
		}

		// struct FGameplayEffectExecutionDefinition
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectExecutionDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionDefinition, CalculationClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionDefinition, PassedInTags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionDefinition, CalculationModifiers, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionDefinition, ConditionalGameplayEffectClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectExecutionDefinition, ConditionalGameplayEffects, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectExecutionDefinition, 0x0058);
		}

		// struct FGameplayEffectCue
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCue, MagnitudeAttribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCue, MinLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCue, MaxLevel, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectCue, GameplayCueTags, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectCue, 0x0060);
		}

		// struct FInheritedTagContainer
		TEST_METHOD(ScriptStruct__GameplayAbilities__InheritedTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInheritedTagContainer, CombinedTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInheritedTagContainer, Added, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInheritedTagContainer, Removed, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInheritedTagContainer, 0x0060);
		}

		// struct FGameplayEffectQuery
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, UnknownData_46ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, CustomMatchDelegate_BP, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, OwningTagQuery, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, EffectTagQuery, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, SourceTagQuery, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, ModifyingAttribute, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, EffectSource, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, EffectDefinition, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectQuery, UnknownData_DJNT, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectQuery, 0x0150);
		}

		// struct FGameplayTagReponsePair
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayTagReponsePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReponsePair, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReponsePair, ResponseGameplayEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReponsePair, ResponseGameplayEffects, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReponsePair, SoftCountCap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReponsePair, UnknownData_CFMZ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReponsePair, 0x0028);
		}

		// struct FGameplayTagResponseTableEntry
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayTagResponseTableEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagResponseTableEntry, Positive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagResponseTableEntry, Negative, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagResponseTableEntry, 0x0050);
		}

		// struct FGameplayEffectSpecHandle
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectSpecHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectSpecHandle, UnknownData_5FQU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectSpecHandle, 0x0010);
		}

		// struct FGameplayEffectRemovalInfo
		TEST_METHOD(ScriptStruct__GameplayAbilities__GameplayEffectRemovalInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectRemovalInfo, bPrematureRemoval, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectRemovalInfo, UnknownData_9LNC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectRemovalInfo, StackCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectRemovalInfo, EffectContext, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectRemovalInfo, 0x0020);
		}

		// struct FGameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_GE7M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// struct FMovieSceneMediaPlayerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaPlayerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, MediaSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, SectionStartFrame, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, bLoop, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, UnknownData_PZX0, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaPlayerPropertySectionTemplate, 0x0058);
		}

		// struct FMovieSceneMediaSectionParams
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSoundComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaPlayer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionStartFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionEndFrame, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, bLooping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, UnknownData_BVG9, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, StartFrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionParams, 0x0030);
		}

		// struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionTemplate, 0x0050);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, Content, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0010);
		}

		// struct FAnimationEventBinding
		TEST_METHOD(ScriptStruct__UMG__AnimationEventBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Delegate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, AnimationEvent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_J4QD, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UserTag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_2SK3, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationEventBinding, 0x0028);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_9FR4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00B8);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_W57I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FDynamicPropertyPath : public FCachedPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0028);
		}

		// struct FMovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// struct FMovieScene2DTransformSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Translation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Rotation, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Scale, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Shear, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, BlendType, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, UnknownData_W6O1, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Mask, 0x04AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformSectionTemplate, 0x04B0);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_JPAD, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02D0);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0090);
		}

		// struct FRichTextStyleRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x0270);
		}

		// struct FRichImageRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, Brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0090);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_CNC1, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FUserWidgetPool
		TEST_METHOD(ScriptStruct__UMG__UserWidgetPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, ActiveWidgets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, InactiveWidgets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, UnknownData_0KZ4, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserWidgetPool, 0x0080);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_E6EB, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x0024);
		}

		// struct FBlueprintWidgetAnimationDelegateBinding
		TEST_METHOD(ScriptStruct__UMG__BlueprintWidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UnknownData_43U8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, AnimationToBind, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UserTag, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintWidgetAnimationDelegateBinding, 0x001C);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, PropertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_PQVY, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0050);
		}

		// struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__UMG__WidgetComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetComponentInstanceData, UnknownData_T34A, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetComponentInstanceData, 0x00B8);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_9JF1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x0024);
		}

		// struct FMovieScene3DAttachSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DAttachSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachComponentName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentLocationRule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentRotationRule, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentScaleRule, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentLocationRule, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentRotationRule, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentScaleRule, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, UnknownData_JB2Y, 0x004E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DAttachSectionTemplate, 0x0050);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_BJD9, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_Z1Y1, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, Time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_G42M, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_Z7V1, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_A5BU, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_8I4I, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_C7I1, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_D5UO, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// struct FMovieSceneComponentTransformSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentTransformSectionTemplate, TemplateData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentTransformSectionTemplate, 0x0670);
		}

		// struct FMovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, ComponentName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, SocketName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0028);
		}

		// struct FMovieSceneActorReferenceData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_GW6G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_YM3T, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00B0);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x00F8);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioSection, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x0028);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_AVIH, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_O988, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_700D, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_OR46, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_SV8M, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraCutSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraCutSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CameraBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_THPA, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CutTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bHasCutTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bIsFinalSection, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_LFLA, 0x0072);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraCutSectionTemplate, 0x0080);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_69IT, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_LA0O, 0x02C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02D0);
		}

		// struct FMovieSceneEventPayloadVariable
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPayloadVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPayloadVariable, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPayloadVariable, 0x0010);
		}

		// struct FMovieSceneEventTemplateBase : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, EventReceivers, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, UnknownData_UEZB, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTemplateBase, 0x0038);
		}

		// struct FMovieSceneEventPtrs
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPtrs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, Function, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, BoundObjectProperty, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPtrs, 0x0028);
		}

		// struct FMovieSceneEventRepeaterTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventRepeaterTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventRepeaterTemplate, EventToTrigger, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventRepeaterTemplate, 0x0060);
		}

		// struct FMovieSceneEventTriggerTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, EventTimes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, Events, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerTemplate, 0x0058);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_ZLL2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0028);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0030);
		}

		// struct FMovieSceneEventSectionData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_7UUN, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_JTSK, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneLevelVisibilitySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneLevelVisibilitySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, Visibility, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, UnknownData_6UC6, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, LevelNames, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneLevelVisibilitySectionTemplate, 0x0038);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00A8);
		}

		// struct FBoolParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__BoolParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolParameterNameAndCurve, 0x0098);
		}

		// struct FVector2DParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__Vector2DParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, YCurve, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2DParameterNameAndCurves, 0x0148);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01E8);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0288);
		}

		// struct FTransformParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__TransformParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Translation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Rotation, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Scale, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformParameterNameAndCurves, 0x05A8);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Bools, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vector2Ds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Transforms, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0088);
		}

		// struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneObjectPropertyTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPropertyTemplate, ObjectChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPropertyTemplate, 0x0108);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_D1QU, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0088);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScenePrimitiveMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, UnknownData_1XGV, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialChannel, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePrimitiveMaterialTemplate, 0x00E8);
		}

		// struct FMovieSceneEulerTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEulerTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEulerTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEulerTransformPropertySectionTemplate, 0x0698);
		}

		// struct FMovieSceneTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformPropertySectionTemplate, TemplateData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformPropertySectionTemplate, 0x0698);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_VCGZ, 0x02CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02D0);
		}

		// struct FMovieSceneStringChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_AEVJ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00E8);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_SLWU, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00E0);
		}

		// struct FMovieSceneFloatPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFloatPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, FloatFunction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, BlendType, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, UnknownData_64PE, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatPropertySectionTemplate, 0x00F0);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_KARM, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_602U, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bForceCustomMode, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_5TPW, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_7D5R, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00D8);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00E0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x0100);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneSpawnSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSpawnSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnSectionTemplate, Curve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnSectionTemplate, 0x00B0);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_4DVL, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_OHKJ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, Vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, Vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_UVWK, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, Vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00D8);
		}

		// struct FMovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, Ptrs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0028);
		}

		// struct FMovieSceneEventChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_42GX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// struct FPointWeightMap
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__PointWeightMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointWeightMap, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointWeightMap, 0x0010);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, WeightMaps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00F8);
		}

		// struct FClothLODDataCommon
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothLODDataCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, CollisionData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_I14T, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODDataCommon, 0x0158);
		}

		// struct FClothParameterMask_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothParameterMask_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, CurrentTarget, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_YSZU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaxValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_3NNG, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_MXGR, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_Legacy, 0x0030);
		}

		// struct FClothConstraintSetup_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConstraintSetup_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup_Legacy, 0x0010);
		}

		// struct FClothConfig_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConfig_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_VQNE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_VKDK, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig_Legacy, 0x00D4);
		}

		// struct FCustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x004C);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, Radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, SurfacePoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_A5KR, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0028);
		}

		// struct FClothCollisionPrim_Box
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, UnknownData_MSS4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, HalfExtents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, BoneIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Box, 0x0030);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Boxes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0040);
		}

		// struct FLocationServicesData
		TEST_METHOD(ScriptStruct__LocationServicesBPLibrary__LocationServicesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Longitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Latitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, HorizontalAccuracy, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, VerticalAccuracy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Altitude, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationServicesData, 0x0018);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_2REL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_O2XN, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_GXZ1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, Settings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_MPQI, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ActiveShot, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_PW12, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x00B8);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_2D6D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0038);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// struct FLevelSequenceCameraSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceCameraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, bOverrideAspectRatioAxisConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, AspectRatioAxisConstraint, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceCameraSettings, 0x0002);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_4BWZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FKey
		TEST_METHOD(ScriptStruct__InputCore__Key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKey, UnknownData_99HD, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKey, 0x0018);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_9UTD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_IRTQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_WCMK, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_LQ5I, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x006F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_CIMZ, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_XVRT, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0088);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_DM7D, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0018);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Pressed, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Disabled, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x0278);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bSeparateFillAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bApplyOutlineToDropShadows, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_ZWEK, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0020);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_W1EC, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_4H6U, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0050);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, StrikeBrush, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x0268);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0CD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0DE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x0FD0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x1058);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0118);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0228);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_AB0S, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x06D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0700);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x04D0);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0118);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0B48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0B70);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_G603, 0x0092);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x0098);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_FJXK, 0x033C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0340);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x05F0);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x04D0);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x07F0);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_E0GS, 0x0A79);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0A80);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_1V57, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0120);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01A0);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x0A60);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x04F8);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_EMWH, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x0568);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x0580);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_KOTO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_DOQH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_H0DT, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0070);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_13NO, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_FFK3, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0038);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_NSBD, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_H0GC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0040);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHighlightedBrush, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHighlightedBrush, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x07C8);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowOffset, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowColorAndOpacity, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03B8);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x03F0);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0218);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x02E8);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_CKL6, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0028);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_1HR3, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// struct FCompositeSubFont : public FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_3QAI, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// struct FCaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_J8AB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// struct FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// struct FPolygonGroupID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// struct FPolygonID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// struct FVertexID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// struct FVertexInstanceID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// struct FEdgeID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// struct FTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__TriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// struct FUVMapSettings
		TEST_METHOD(ScriptStruct__StaticMeshDescription__UVMapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, UVTile, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Position, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Scale, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUVMapSettings, 0x0038);
		}

		// struct FEyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// struct FEyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_KNG1, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FVFXBindingTagToEnum_ST
		TEST_METHOD(UserDefinedStruct__VFXBindingTagToEnum_ST__VFXBindingTagToEnum_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVFXBindingTagToEnum_ST, VFXEnum_6_314A663943CE27E6BA66768233D34393, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVFXBindingTagToEnum_ST, 0x0001);
		}

		// struct FPlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_VUKV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// struct FSolverTrailingData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverTrailingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingData, 0x0030);
		}

		// struct FSolverBreakingData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverBreakingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingData, 0x0030);
		}

		// struct FSolverCollisionData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AccumulatedImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Normal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndex, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndexMesh, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndexMesh, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionData, 0x006C);
		}

		// struct FRecordedFrame
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__RecordedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, TransformIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, PreviousTransformIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, DisabledFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Collisions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Breakings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Trailings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Timestamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, UnknownData_UQJJ, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedFrame, 0x00B8);
		}

		// struct FRecordedTransformTrack
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__RecordedTransformTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedTransformTrack, Records, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedTransformTrack, 0x0010);
		}

		// struct FME_WaterStruct
		TEST_METHOD(UserDefinedStruct__ME_WaterStruct__ME_WaterStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_WaterStruct, WaterColor1_2_938FB7EE451359AEC1A93C89F78BAA5B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_WaterStruct, WaterColor2_4_24CB28C44D439788F61FDD8F5E0F8099, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_WaterStruct, WaterColorDeep_6_9F5D1C6A44EA75DAA131649B1F3CE1C1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_WaterStruct, WaterColorShoreline_8_8BC7EF83402621C054FDC1BBDDB93CE1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FME_WaterStruct, 0x0040);
		}

		// struct FFG_MeshInformation_ST
		TEST_METHOD(UserDefinedStruct__FG_MeshInformation_ST__FG_MeshInformation_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFG_MeshInformation_ST, StaticMesh_2_89B283C24AF8B6575694FEB48FCD07FF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFG_MeshInformation_ST, FXToUse_14_F69C54AD44A905313B9E77B3808A25DF, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFG_MeshInformation_ST, DrawDistiance_17_41C9DDFC4BEFC934811A9D964587CAA3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFG_MeshInformation_ST, CustomTag_11_8A551D9F40A350B8FBC83280D440A2E1, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFG_MeshInformation_ST, 0x001C);
		}

		// struct FMercunaNavigationConfiguration
		TEST_METHOD(ScriptStruct__Mercuna__MercunaNavigationConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaNavigationConfiguration, MaxPitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaNavigationConfiguration, MaxRoll, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaNavigationConfiguration, MoveOnlyInLookDirection, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaNavigationConfiguration, StopAtDestination, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaNavigationConfiguration, UnknownData_QX9S, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaNavigationConfiguration, HeightChangePenalty, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaNavigationConfiguration, SmoothPaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaNavigationConfiguration, UnknownData_YPEH, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaNavigationConfiguration, LookAheadTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaNavigationConfiguration, RollAnticipationTime, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMercunaNavigationConfiguration, 0x001C);
		}

		// struct FMercunaNavUsageTypes
		TEST_METHOD(ScriptStruct__Mercuna__MercunaNavUsageTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMercunaNavUsageTypes, 0x0004);
		}

		// struct FMercunaPawnUsageFlags
		TEST_METHOD(ScriptStruct__Mercuna__MercunaPawnUsageFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaPawnUsageFlags, RequiredUsageFlags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaPawnUsageFlags, AllowedUsageFlags, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMercunaPawnUsageFlags, 0x0008);
		}

		// struct FMercunaMoveRequest
		TEST_METHOD(ScriptStruct__Mercuna__MercunaMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaMoveRequest, UnknownData_HWC7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaMoveRequest, GoalActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercunaMoveRequest, UnknownData_1C0I, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMercunaMoveRequest, 0x0028);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, URL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FMediaSoundComponentSpectralData
		TEST_METHOD(ScriptStruct__MediaAssets__MediaSoundComponentSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, Magnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaSoundComponentSpectralData, 0x0008);
		}

		// struct FProjectedIconCache
		TEST_METHOD(ScriptStruct__Maneater__ProjectedIconCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectedIconCache, bWasOffscreen, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectedIconCache, UnknownData_FDY6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectedIconCache, LastScreenPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectedIconCache, UnknownData_YN3S, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectedIconCache, IconMID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectedIconCache, LastDistanceScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectedIconCache, bWasInterpolating, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectedIconCache, UnknownData_YQKR, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectedIconCache, LastDrawSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectedIconCache, InterpAlpha, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProjectedIconCache, UnknownData_VNMA, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProjectedIconCache, 0x0030);
		}

		// struct FSharkRamRotation
		TEST_METHOD(ScriptStruct__Maneater__SharkRamRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSharkRamRotation, MaxAngle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSharkRamRotation, MinAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSharkRamRotation, RotationCurve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSharkRamRotation, 0x0010);
		}

		// struct FCurveVectorInfo
		TEST_METHOD(ScriptStruct__Maneater__CurveVectorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveVectorInfo, ImpactThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveVectorInfo, RotationRollScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveVectorInfo, RotationPitchScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveVectorInfo, RotationTranslationScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveVectorInfo, PlayRate, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveVectorInfo, 0x0014);
		}

		// struct FGameplayVocabulary
		TEST_METHOD(ScriptStruct__Maneater__GameplayVocabulary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayVocabulary, LocalizedText, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayVocabulary, RichTextStyle, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayVocabulary, UnknownData_QBKY, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayVocabulary, 0x0020);
		}

		// struct FExplosionDamageEffects
		TEST_METHOD(ScriptStruct__Maneater__ExplosionDamageEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplosionDamageEffects, ScreenParticle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplosionDamageEffects, LoopingParticleOnMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplosionDamageEffects, EffectSound, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplosionDamageEffects, PostProcessWhileInsideExplosion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplosionDamageEffects, EffectPriority, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplosionDamageEffects, UnknownData_QC2G, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExplosionDamageEffects, 0x0028);
		}

		// struct FAbilityInitializationData : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__AbilityInitializationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityInitializationData, AbilityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityInitializationData, UnknownData_1QO4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityInitializationData, AbilityClass, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAbilityInitializationData, 0x0018);
		}

		// struct FPreDormantValues
		TEST_METHOD(ScriptStruct__Maneater__PreDormantValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreDormantValues, UnknownData_E592, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreDormantValues, 0x0010);
		}

		// struct FCombatLocation
		TEST_METHOD(ScriptStruct__Maneater__CombatLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombatLocation, UnknownData_52B3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCombatLocation, 0x0030);
		}

		// struct FDirectMoveRequest
		TEST_METHOD(ScriptStruct__Maneater__DirectMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectMoveRequest, UnknownData_BAFA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectMoveRequest, GoalActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectMoveRequest, 0x0020);
		}

		// struct FCombatPriorityBuff
		TEST_METHOD(ScriptStruct__Maneater__CombatPriorityBuff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombatPriorityBuff, PriorityBuff, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombatPriorityBuff, Time, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCombatPriorityBuff, 0x0008);
		}

		// struct FVisionType
		TEST_METHOD(ScriptStruct__Maneater__VisionType)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisionType, 0x0001);
		}

		// struct FAITargetPoint
		TEST_METHOD(ScriptStruct__Maneater__AITargetPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITargetPoint, TargetPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITargetPoint, bTestPoint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITargetPoint, bTraceTarget, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITargetPoint, bDistanceCheck, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITargetPoint, bDotProductCheck, 0x000F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITargetPoint, 0x0010);
		}

		// struct FAttackTarget
		TEST_METHOD(ScriptStruct__Maneater__AttackTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackTarget, TargetActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackTarget, TargetComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackTarget, UnknownData_ZROG, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttackTarget, 0x0018);
		}

		// struct FPropInstance
		TEST_METHOD(ScriptStruct__Maneater__PropInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropInstance, UnknownData_Q5BA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropInstance, 0x0018);
		}

		// struct FActivityAlertStruct
		TEST_METHOD(ScriptStruct__Maneater__ActivityAlertStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivityAlertStruct, AlertSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivityAlertStruct, bDropProp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivityAlertStruct, UnknownData_JHGU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivityAlertStruct, PercentChance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActivityAlertStruct, 0x0010);
		}

		// struct FActivityPropElement
		TEST_METHOD(ScriptStruct__Maneater__ActivityPropElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivityPropElement, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivityPropElement, Type, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActivityPropElement, 0x0010);
		}

		// struct FPropRandomTextureParam
		TEST_METHOD(ScriptStruct__Maneater__PropRandomTextureParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropRandomTextureParam, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropRandomTextureParam, 0x0010);
		}

		// struct FPropRandomScalarParam
		TEST_METHOD(ScriptStruct__Maneater__PropRandomScalarParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropRandomScalarParam, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropRandomScalarParam, 0x0010);
		}

		// struct FPropRandomVectorParam
		TEST_METHOD(ScriptStruct__Maneater__PropRandomVectorParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropRandomVectorParam, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropRandomVectorParam, 0x0010);
		}

		// struct FEvolutionAnimations
		TEST_METHOD(ScriptStruct__Maneater__EvolutionAnimations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionAnimations, IntroAnimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionAnimations, OutroAnimation, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEvolutionAnimations, 0x0010);
		}

		// struct FHitReactStruct
		TEST_METHOD(ScriptStruct__Maneater__HitReactStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactStruct, ChosenHitReact, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactStruct, bIsHitReactActive, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactStruct, bPlayHitReact, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitReactStruct, UnknownData_L265, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitReactStruct, 0x0010);
		}

		// struct FAdditiveAnimStruct
		TEST_METHOD(ScriptStruct__Maneater__AdditiveAnimStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdditiveAnimStruct, ChosenAdditiveAnimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdditiveAnimStruct, bIsAdditiveActive, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdditiveAnimStruct, bPlayAdditive, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdditiveAnimStruct, UnknownData_DWVW, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdditiveAnimStruct, 0x0010);
		}

		// struct FBoneBaseBlendWeight
		TEST_METHOD(ScriptStruct__Maneater__BoneBaseBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneBaseBlendWeight, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneBaseBlendWeight, UnknownData_5WZJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneBaseBlendWeight, BaseWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneBaseBlendWeight, 0x0008);
		}

		// struct FGrabbedIKSetup
		TEST_METHOD(ScriptStruct__Maneater__GrabbedIKSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabbedIKSetup, GrabbedJoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabbedIKSetup, UnknownData_7WNM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabbedIKSetup, GrabbedIKArray, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrabbedIKSetup, 0x0018);
		}

		// struct FAttackShapeRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__AttackShapeRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackShapeRow, AttackCollisionShape, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackShapeRow, UnknownData_S05C, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackShapeRow, AttackZOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackShapeRow, AttackLocalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackShapeRow, AttackLocalRotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackShapeRow, AttackLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackShapeRow, AttackRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackShapeRow, BoxCollisionShape, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackShapeRow, UnknownData_3R25, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttackShapeRow, 0x0040);
		}

		// struct FAttackerInfo
		TEST_METHOD(ScriptStruct__Maneater__AttackerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackerInfo, AttackingMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackerInfo, HitActors, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackerInfo, ControlledCharacter, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttackerInfo, 0x0020);
		}

		// struct FLoadedAssets
		TEST_METHOD(ScriptStruct__Maneater__LoadedAssets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadedAssets, SavedAudioEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadedAssets, SavedParticleSystem, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadedAssets, SavedAnimMontage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadedAssets, SavedMaterial, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadedAssets, SavedMesh, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadedAssets, 0x0028);
		}

		// struct FAssetLoadRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__AssetLoadRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetLoadRow, ParticleSystemAsset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetLoadRow, AudioEventAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetLoadRow, AnimMontageAsset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetLoadRow, MaterialAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetLoadRow, SkeletalMeshAsset, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetLoadRow, 0x00D0);
		}

		// struct FFullPropAnimationSet
		TEST_METHOD(ScriptStruct__Maneater__FullPropAnimationSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, IdleAnimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, SuspiciousAnimation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, AlertAimingBlendspace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, AlertAnimation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, MovingAnimation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, TurnRightAnimation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, TurnLeftAnimation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, FiringAnimations, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, HitFromForwradsAnimations, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, HitFromBehindAnimations, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, HitFromLeftAnimations, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, HitFromRightAnimations, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, IKElbowOffset, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullPropAnimationSet, AimingElbowRotation, 0x0174);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullPropAnimationSet, 0x0180);
		}

		// struct FAfflictionData
		TEST_METHOD(ScriptStruct__Maneater__AfflictionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAfflictionData, UnknownData_P27A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAfflictionData, GameplayTagToApply, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAfflictionData, 0x0010);
		}

		// struct FMEGameplayEffectMaterialEffect
		TEST_METHOD(ScriptStruct__Maneater__MEGameplayEffectMaterialEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectMaterialEffect, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectMaterialEffect, ScalarParamCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectMaterialEffect, VectorParamCuve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectMaterialEffect, EvolutionSlot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectMaterialEffect, bMasterPostProcess, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectMaterialEffect, bSonarPostProcess, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectMaterialEffect, UnknownData_9VTI, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMEGameplayEffectMaterialEffect, 0x0020);
		}

		// struct FMEGameplayEffectAudioEvent
		TEST_METHOD(ScriptStruct__Maneater__MEGameplayEffectAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectAudioEvent, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectAudioEvent, TargetActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectAudioEvent, UnknownData_S18I, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMEGameplayEffectAudioEvent, 0x000C);
		}

		// struct FMEGameplayEffectParticleSystem
		TEST_METHOD(ScriptStruct__Maneater__MEGameplayEffectParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, ParticleSystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, ParticleSystemTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, bUseStackingEffects, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, UnknownData_M6CH, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, SpawnDelay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, AttachSocket, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, RequireTags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, IgnoreTags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, UseActionMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, IsBeam, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, TargetActor, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, TargetType, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, UnknownData_2KXM, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayEffectParticleSystem, TargetParams, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMEGameplayEffectParticleSystem, 0x0070);
		}

		// struct FMEAttributeMetaData : public FAttributeMetaData
		TEST_METHOD(ScriptStruct__Maneater__MEAttributeMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEAttributeMetaData, bClampOnSet, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEAttributeMetaData, UnknownData_KL07, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMEAttributeMetaData, 0x0038);
		}

		// struct FMEGameplayAttributeData : public FGameplayAttributeData
		TEST_METHOD(ScriptStruct__Maneater__MEGameplayAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayAttributeData, MinValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayAttributeData, MaxValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayAttributeData, ClampOnSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEGameplayAttributeData, UnknownData_7XE8, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMEGameplayAttributeData, 0x0020);
		}

		// struct FME_AudioEvent
		TEST_METHOD(ScriptStruct__Maneater__ME_AudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_AudioEvent, Event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_AudioEvent, WWiseEvent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_AudioEvent, CooldownSeconds, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_AudioEvent, OverrideGlobal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_AudioEvent, NextFireTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_AudioEvent, StateTo, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_AudioEvent, IfState, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_AudioEvent, UnknownData_C768, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FME_AudioEvent, 0x0030);
		}

		// struct FAuraStatus
		TEST_METHOD(ScriptStruct__Maneater__AuraStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuraStatus, UnknownData_4MWN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuraStatus, GameplayEffectHandles, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuraStatus, 0x0018);
		}

		// struct FSpawnEntry
		TEST_METHOD(ScriptStruct__Maneater__SpawnEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnEntry, UnknownData_X889, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnEntry, 0x0028);
		}

		// struct FBoatNameData
		TEST_METHOD(ScriptStruct__Maneater__BoatNameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoatNameData, Prefixes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoatNameData, Adjectives, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoatNameData, Nouns, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoatNameData, Fonts, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoatNameData, FontColors, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoatNameData, 0x0050);
		}

		// struct FBoatPropeller
		TEST_METHOD(ScriptStruct__Maneater__BoatPropeller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoatPropeller, AttachSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoatPropeller, PropellerRotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoatPropeller, UnknownData_JBAT, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoatPropeller, PropellerMeshPtr, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoatPropeller, PropellerMeshComponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoatPropeller, PropellerPSC, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoatPropeller, 0x0050);
		}

		// struct FThrashPointThickness
		TEST_METHOD(ScriptStruct__Maneater__ThrashPointThickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashPointThickness, GrabbedJoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashPointThickness, UnknownData_PIF7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashPointThickness, LimbThickness, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FThrashPointThickness, 0x0008);
		}

		// struct FME_BountySpawnRequest
		TEST_METHOD(ScriptStruct__Maneater__ME_BountySpawnRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_BountySpawnRequest, UnknownData_GPI7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FME_BountySpawnRequest, 0x0018);
		}

		// struct FME_BountyAI
		TEST_METHOD(ScriptStruct__Maneater__ME_BountyAI)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_BountyAI, UnknownData_1Y84, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_BountyAI, ME_AIController, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_BountyAI, Pawn, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FME_BountyAI, 0x0018);
		}

		// struct FME_BountySpawnLocation
		TEST_METHOD(ScriptStruct__Maneater__ME_BountySpawnLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_BountySpawnLocation, UnknownData_2HNS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FME_BountySpawnLocation, 0x0018);
		}

		// struct FStructBoneOverride
		TEST_METHOD(ScriptStruct__Maneater__StructBoneOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructBoneOverride, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructBoneOverride, Density, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructBoneOverride, TestRadius, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructBoneOverride, 0x0010);
		}

		// struct FCharacterDialogRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__CharacterDialogRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDialogRow, bShouldPulse, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDialogRow, UnknownData_YUCP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDialogRow, PulseIntervalFloor, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDialogRow, PulseIntervalCeil, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDialogRow, CooldownDuration, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterDialogRow, 0x0018);
		}

		// struct FAbilityInfoStruct
		TEST_METHOD(ScriptStruct__Maneater__AbilityInfoStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityInfoStruct, AbilityClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityInfoStruct, AbilityEnum, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityInfoStruct, UnknownData_B3L4, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityInfoStruct, AbilityWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityInfoStruct, UnknownData_5M06, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAbilityInfoStruct, 0x0018);
		}

		// struct FComboAttack
		TEST_METHOD(ScriptStruct__Maneater__ComboAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboAttack, ComboInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboAttack, ComboAbility, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboAttack, 0x0028);
		}

		// struct FCharacterVoiceAge
		TEST_METHOD(ScriptStruct__Maneater__CharacterVoiceAge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterVoiceAge, Child, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterVoiceAge, Adult, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterVoiceAge, 0x0010);
		}

		// struct FCharacterVoiceGender
		TEST_METHOD(ScriptStruct__Maneater__CharacterVoiceGender)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterVoiceGender, Male, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterVoiceGender, Female, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterVoiceGender, 0x0020);
		}

		// struct FCharacterVoiceBinding
		TEST_METHOD(ScriptStruct__Maneater__CharacterVoiceBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterVoiceBinding, EventType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterVoiceBinding, UnknownData_JNFA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterVoiceBinding, Voices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterVoiceBinding, 0x0028);
		}

		// struct FWildlifeQueueEntry
		TEST_METHOD(ScriptStruct__Maneater__WildlifeQueueEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWildlifeQueueEntry, UnknownData_VOEO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWildlifeQueueEntry, 0x000C);
		}

		// struct FActionBindingSaveData
		TEST_METHOD(ScriptStruct__Maneater__ActionBindingSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActionBindingSaveData, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActionBindingSaveData, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActionBindingSaveData, Keys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActionBindingSaveData, 0x0030);
		}

		// struct FAxisBindingSaveData
		TEST_METHOD(ScriptStruct__Maneater__AxisBindingSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxisBindingSaveData, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxisBindingSaveData, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxisBindingSaveData, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxisBindingSaveData, UnknownData_7VFY, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxisBindingSaveData, Keys, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxisBindingSaveData, 0x0038);
		}

		// struct FMEControlScheme
		TEST_METHOD(ScriptStruct__Maneater__MEControlScheme)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEControlScheme, ControlSchemeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEControlScheme, ActionMappings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEControlScheme, AxisMappings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMEControlScheme, 0x0038);
		}

		// struct FMEControlSchemeSaveData
		TEST_METHOD(ScriptStruct__Maneater__MEControlSchemeSaveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMEControlSchemeSaveData, ControlSchemes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMEControlSchemeSaveData, 0x0010);
		}

		// struct FBindableKeyEntry
		TEST_METHOD(ScriptStruct__Maneater__BindableKeyEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBindableKeyEntry, BindingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBindableKeyEntry, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBindableKeyEntry, bKeyboardOnly, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBindableKeyEntry, bIsAxis, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBindableKeyEntry, UnknownData_G8JN, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBindableKeyEntry, Scale, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBindableKeyEntry, 0x0028);
		}

		// struct FStartingAttributes
		TEST_METHOD(ScriptStruct__Maneater__StartingAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartingAttributes, AbilityAttributeSetClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartingAttributes, AttributeDefaults, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartingAttributes, 0x0010);
		}

		// struct FHitDeformation
		TEST_METHOD(ScriptStruct__Maneater__HitDeformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitDeformation, LocalPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitDeformation, LocalDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitDeformation, DeformRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitDeformation, 0x001C);
		}

		// struct FChunkBreakEffect
		TEST_METHOD(ScriptStruct__Maneater__ChunkBreakEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkBreakEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkBreakEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkBreakEffect, 0x0010);
		}

		// struct FAudioDialogueMapping
		TEST_METHOD(ScriptStruct__Maneater__AudioDialogueMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioDialogueMapping, PlayingID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioDialogueMapping, UnknownData_Q93R, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioDialogueMapping, DialogueText, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioDialogueMapping, TimeSeconds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioDialogueMapping, SubtitleId, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioDialogueMapping, 0x0028);
		}

		// struct FDialogue : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__Dialogue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogue, EventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogue, UnknownData_PJV2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogue, Speaker, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogue, UnknownData_3B5U, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogue, AudioFile, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogue, DialogueText, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogue, ShowSubtitle, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogue, UnknownData_CMP0, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogue, 0x0048);
		}

		// struct FFullDiverAnimationSet
		TEST_METHOD(ScriptStruct__Maneater__FullDiverAnimationSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullDiverAnimationSet, IdleAnimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullDiverAnimationSet, SuspiciousAnimation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullDiverAnimationSet, AlertAnimation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullDiverAnimationSet, MovingAnimation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullDiverAnimationSet, MovingAlertAnimation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullDiverAnimationSet, FiringAnimations, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullDiverAnimationSet, 0x0038);
		}

		// struct FEvolutionData
		TEST_METHOD(ScriptStruct__Maneater__EvolutionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionData, EvolutionRarity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionData, CurrentSlot, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionData, EvolutionEquipped, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionData, bIsNewEvolution, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionData, UnknownData_Z9SE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionData, EvolutionDefinition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEvolutionData, 0x0010);
		}

		// struct FDisplayStatRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__DisplayStatRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisplayStatRow, DisplayText, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisplayStatRow, DisplayAsPercentage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisplayStatRow, IsMultiplier, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisplayStatRow, UnknownData_W120, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDisplayStatRow, 0x0028);
		}

		// struct FEvolutionVisualEffect
		TEST_METHOD(ScriptStruct__Maneater__EvolutionVisualEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionVisualEffect, AttachMeshes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEvolutionVisualEffect, 0x0010);
		}

		// struct FGameplayEffectItem
		TEST_METHOD(ScriptStruct__Maneater__GameplayEffectItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectItem, GameplayEffectClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectItem, StackCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectItem, UnknownData_933H, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectItem, 0x0010);
		}

		// struct FReconcileAchievementParams
		TEST_METHOD(ScriptStruct__Maneater__ReconcileAchievementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReconcileAchievementParams, UnknownData_19Y4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReconcileAchievementParams, SaveGames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReconcileAchievementParams, 0x0020);
		}

		// struct FStoryCinematicDataRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__StoryCinematicDataRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, CinematicSubLevelName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, LevelSequenceActorName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, TimeOfDay, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, UnknownData_4TDT, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, StateEvent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, NarratorOutroEventName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, RespawnLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, CinematicStreamLocation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, UnknownData_6711, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, PostCinematicTravelLocation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, bAdvanceToNextStoryEvent, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, bStartPlayingAfterCinematic, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, bDoNotAutoFadeInSequence, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, bPlayCinematicPauseAllEvent, 0x0083);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryCinematicDataRow, UnknownData_HH1O, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStoryCinematicDataRow, 0x0090);
		}

		// struct FDirectionalAnimData
		TEST_METHOD(ScriptStruct__Maneater__DirectionalAnimData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalAnimData, MontageToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalAnimData, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalAnimData, SectionName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalAnimData, UnknownData_6HZL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectionalAnimData, 0x0018);
		}

		// struct FSpeciesKillSequence
		TEST_METHOD(ScriptStruct__Maneater__SpeciesKillSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpeciesKillSequence, KillAnimations, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpeciesKillSequence, 0x0010);
		}

		// struct FSizeDifferenceKillSequence
		TEST_METHOD(ScriptStruct__Maneater__SizeDifferenceKillSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSizeDifferenceKillSequence, LargerOrEqualVictimAnims, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSizeDifferenceKillSequence, SmallerVictimAnims, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSizeDifferenceKillSequence, 0x0020);
		}

		// struct FGrowthStageSequences
		TEST_METHOD(ScriptStruct__Maneater__GrowthStageSequences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSequences, SpeciesOverrideInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSequences, SizeDifferenceInfo, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrowthStageSequences, 0x0070);
		}

		// struct FCustomGrowthStage
		TEST_METHOD(ScriptStruct__Maneater__CustomGrowthStage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGrowthStage, OverrideStage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGrowthStage, UnknownData_WIEZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGrowthStage, CustomZHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGrowthStage, CustomForwardsForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGrowthStage, CustomDuration, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomGrowthStage, 0x0010);
		}

		// struct FStageSpecificCamera
		TEST_METHOD(ScriptStruct__Maneater__StageSpecificCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStageSpecificCamera, GrowthStage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStageSpecificCamera, UnknownData_VM9B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStageSpecificCamera, CamAnim, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStageSpecificCamera, fCameraScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStageSpecificCamera, UnknownData_TTCJ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStageSpecificCamera, 0x0018);
		}

		// struct FGrowthStageAnimData
		TEST_METHOD(ScriptStruct__Maneater__GrowthStageAnimData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageAnimData, MontageEventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageAnimData, CachedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageAnimData, DefaultAnimation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageAnimData, UnknownData_9OOV, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageAnimData, AnimWeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageAnimData, PlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageAnimData, SectionName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageAnimData, UnknownData_F4UG, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageAnimData, RequiredGameplayTags, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageAnimData, IgnoreGameplayTags, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrowthStageAnimData, 0x0068);
		}

		// struct FGrowthStageContainer
		TEST_METHOD(ScriptStruct__Maneater__GrowthStageContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageContainer, StageArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageContainer, UnknownData_7XZO, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrowthStageContainer, 0x0018);
		}

		// struct FMontageEntry
		TEST_METHOD(ScriptStruct__Maneater__MontageEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMontageEntry, AnimMontage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMontageEntry, AnimWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMontageEntry, UnknownData_GKJY, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMontageEntry, 0x0010);
		}

		// struct FAttachedAudioEvent
		TEST_METHOD(ScriptStruct__Maneater__AttachedAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachedAudioEvent, AudioEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachedAudioEvent, SocketName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttachedAudioEvent, 0x0010);
		}

		// struct FHumanNPCAppearanceConfig : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__HumanNPCAppearanceConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, Gender, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, UnknownData_GFMQ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, Mesh, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, AnimBP, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, Body, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, Hair, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, Clothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, Region1_Config_Override, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, Region2_Config_Override, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, Region3_Config_Override, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, RandomizeNumberOfRegions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, ShuffleRegions, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, UnknownData_GTNS, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCAppearanceConfig, DynamicDialogue, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHumanNPCAppearanceConfig, 0x0068);
		}

		// struct FBodyRegionColorSet
		TEST_METHOD(ScriptStruct__Maneater__BodyRegionColorSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyRegionColorSet, RegionColors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyRegionColorSet, bAllowShuffle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyRegionColorSet, UnknownData_K2VI, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyRegionColorSet, 0x0018);
		}

		// struct FMinMaxRange
		TEST_METHOD(ScriptStruct__Maneater__MinMaxRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinMaxRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinMaxRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinMaxRange, 0x0008);
		}

		// struct FHumanNPCRegionConfig : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__HumanNPCRegionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCRegionConfig, RegionTilingMask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCRegionConfig, ColorSets, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCRegionConfig, Scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCRegionConfig, RandomOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCRegionConfig, ShuffleColors, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCRegionConfig, UnknownData_RZMT, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHumanNPCRegionConfig, 0x0040);
		}

		// struct FHumanNPCTextureSet : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__HumanNPCTextureSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCTextureSet, Albedo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCTextureSet, Normal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCTextureSet, RAM, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCTextureSet, Masks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHumanNPCTextureSet, 0x0028);
		}

		// struct FHumanNPCHairColor
		TEST_METHOD(ScriptStruct__Maneater__HumanNPCHairColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCHairColor, HairRootColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCHairColor, HairTipColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHumanNPCHairColor, 0x0020);
		}

		// struct FHumanNPCTextureSet_Hair : public FHumanNPCTextureSet
		TEST_METHOD(ScriptStruct__Maneater__HumanNPCTextureSet_Hair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCTextureSet_Hair, HairColors, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHumanNPCTextureSet_Hair, 0x0038);
		}

		// struct FHumanNPCTextureSet_Clothing : public FHumanNPCTextureSet
		TEST_METHOD(ScriptStruct__Maneater__HumanNPCTextureSet_Clothing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCTextureSet_Clothing, Region1_Config, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCTextureSet_Clothing, Region2_Config, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCTextureSet_Clothing, Region3_Config, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHumanNPCTextureSet_Clothing, 0x0040);
		}

		// struct FHumanNPCTextureSet_Body : public FHumanNPCTextureSet
		TEST_METHOD(ScriptStruct__Maneater__HumanNPCTextureSet_Body)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHumanNPCTextureSet_Body, SkinRange, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHumanNPCTextureSet_Body, 0x0030);
		}

		// struct FDirectionalLunges
		TEST_METHOD(ScriptStruct__Maneater__DirectionalLunges)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalLunges, LungeRightMontage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalLunges, LungeLeftMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalLunges, LungeForwardMontage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalLunges, LungeBackwardsMontage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalLunges, LungeUpMontage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalLunges, LungeDownMontage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalLunges, ForwardDotThreshold, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalLunges, UpDotThreshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalLunges, bInvertLunge, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalLunges, UnknownData_IJJ0, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectionalLunges, 0x0040);
		}

		// struct FMontageInstanceEntry
		TEST_METHOD(ScriptStruct__Maneater__MontageInstanceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMontageInstanceEntry, MontageInstance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMontageInstanceEntry, AnimWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMontageInstanceEntry, UnknownData_UW78, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMontageInstanceEntry, 0x0010);
		}

		// struct FNarratorTableEntry : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__NarratorTableEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, PlayOnlyOnce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, UnknownData_VCBH, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, PlayFirstTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, PlaySubsequentTimes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, SubsequentPlayChancePercent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, UnknownData_W9KC, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, GroupName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, GroupCooldown, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, DelayBeforePlayFirstTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, DelayBeforePlaySubsequentTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, bAllowDuringBounty, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, bAllowDuringBoss, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNarratorTableEntry, UnknownData_V02H, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNarratorTableEntry, 0x0058);
		}

		// struct FWaveParameter
		TEST_METHOD(ScriptStruct__Maneater__WaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveParameter, Rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveParameter, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveParameter, Amplitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveParameter, Steepness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveParameter, TimeScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaveParameter, 0x0014);
		}

		// struct FWaveSetParameters
		TEST_METHOD(ScriptStruct__Maneater__WaveSetParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave01, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave02, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave03, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave04, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave05, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave06, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave07, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaveSetParameters, Wave08, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaveSetParameters, 0x00A0);
		}

		// struct FFluidDisturbanceEffect
		TEST_METHOD(ScriptStruct__Maneater__FluidDisturbanceEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFluidDisturbanceEffect, EffectType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFluidDisturbanceEffect, UnknownData_L7JA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFluidDisturbanceEffect, DisturbanceOrigin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFluidDisturbanceEffect, DisturbanceRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFluidDisturbanceEffect, DisturbanceIntensity, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFluidDisturbanceEffect, 0x0018);
		}

		// struct FParticleSystemParams : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__ParticleSystemParams)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemParams, 0x0008);
		}

		// struct FShadowEffectParams : public FParticleSystemParams
		TEST_METHOD(ScriptStruct__Maneater__ShadowEffectParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShadowEffectParams, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShadowEffectParams, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShadowEffectParams, Scale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShadowEffectParams, Offset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShadowEffectParams, 0x0018);
		}

		// struct FElectrifiedEffectParams : public FParticleSystemParams
		TEST_METHOD(ScriptStruct__Maneater__ElectrifiedEffectParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElectrifiedEffectParams, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElectrifiedEffectParams, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElectrifiedEffectParams, Scale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FElectrifiedEffectParams, Offset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElectrifiedEffectParams, 0x0018);
		}

		// struct FPassengerHitReactionStruct
		TEST_METHOD(ScriptStruct__Maneater__PassengerHitReactionStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerHitReactionStruct, HitReactionMovingForward, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerHitReactionStruct, HitReactionMovingRight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerHitReactionStruct, HitReactionMovingLeft, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerHitReactionStruct, HitReactionMovingBackward, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassengerHitReactionStruct, 0x0040);
		}

		// struct FDiverPropSetup
		TEST_METHOD(ScriptStruct__Maneater__DiverPropSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiverPropSetup, GenderSpecific, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiverPropSetup, BodySpecific, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiverPropSetup, UnknownData_ZS31, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiverPropSetup, AnimationSet, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDiverPropSetup, 0x0010);
		}

		// struct FPathQueueEntry
		TEST_METHOD(ScriptStruct__Maneater__PathQueueEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathQueueEntry, UnknownData_CE12, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPathQueueEntry, 0x0038);
		}

		// struct FPathRequest
		TEST_METHOD(ScriptStruct__Maneater__PathRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathRequest, UnknownData_HVPI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPathRequest, 0x0030);
		}

		// struct FImpactEffectResult
		TEST_METHOD(ScriptStruct__Maneater__ImpactEffectResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactEffectResult, ImpactParticleComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactEffectResult, ImpactAudioComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactEffectResult, ImpactDecalComponent, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImpactEffectResult, 0x0078);
		}

		// struct FImpactResponseInstance
		TEST_METHOD(ScriptStruct__Maneater__ImpactResponseInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactResponseInstance, Effects, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactResponseInstance, Class, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactResponseInstance, Instigator, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactResponseInstance, Recipient, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactResponseInstance, RecipientSurface, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactResponseInstance, UnknownData_WKL5, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactResponseInstance, CreationTime, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImpactResponseInstance, 0x0098);
		}

		// struct FImpactDecal
		TEST_METHOD(ScriptStruct__Maneater__ImpactDecal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDecal, DecalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDecal, DecalSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDecal, DecalLifespan, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDecal, bAbsoluteRotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDecal, UnknownData_SH83, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactDecal, DecalRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImpactDecal, 0x0028);
		}

		// struct FImpactEffect
		TEST_METHOD(ScriptStruct__Maneater__ImpactEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactEffect, ImpactParticleEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactEffect, ImpactSoundEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactEffect, ImpactDecal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImpactEffect, ImpactCameraShake, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImpactEffect, 0x0040);
		}

		// struct FEvolutionSetGameplayEffects
		TEST_METHOD(ScriptStruct__Maneater__EvolutionSetGameplayEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionSetGameplayEffects, SetGameplayEffects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEvolutionSetGameplayEffects, 0x0010);
		}

		// struct FEvolutionSetStatRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__EvolutionSetStatRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionSetStatRow, SetType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionSetStatRow, UnknownData_SJCR, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionSetStatRow, GameplayEffectsPerNumberEquipped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionSetStatRow, EvolutionsInSet, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionSetStatRow, EvolutionSetName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEvolutionSetStatRow, 0x0048);
		}

		// struct FEvolutionEffects
		TEST_METHOD(ScriptStruct__Maneater__EvolutionEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionEffects, GameplayEffectsOnEquip, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionEffects, ConditionalGameplayEffects, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEvolutionEffects, 0x0020);
		}

		// struct FEvolutionDisplayStat
		TEST_METHOD(ScriptStruct__Maneater__EvolutionDisplayStat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionDisplayStat, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionDisplayStat, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionDisplayStat, StatValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionDisplayStat, ProcType, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionDisplayStat, UnknownData_UINK, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEvolutionDisplayStat, 0x0030);
		}

		// struct FEvolutionUpgradeCost
		TEST_METHOD(ScriptStruct__Maneater__EvolutionUpgradeCost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionUpgradeCost, NutrientType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionUpgradeCost, UnknownData_LFLP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionUpgradeCost, NutrientCost, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEvolutionUpgradeCost, 0x0008);
		}

		// struct FEvolutionUpgradePrice
		TEST_METHOD(ScriptStruct__Maneater__EvolutionUpgradePrice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionUpgradePrice, PrimaryCost, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionUpgradePrice, SecondaryCost, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEvolutionUpgradePrice, 0x0010);
		}

		// struct FLandmarkSubObject
		TEST_METHOD(ScriptStruct__Maneater__LandmarkSubObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmarkSubObject, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmarkSubObject, Description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmarkSubObject, Found, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandmarkSubObject, UnknownData_DIU1, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandmarkSubObject, 0x0048);
		}

		// struct FConditionStatus
		TEST_METHOD(ScriptStruct__Maneater__ConditionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionStatus, ConditionText, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionStatus, Completed, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionStatus, UnknownData_3L9H, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConditionStatus, 0x0020);
		}

		// struct FLerpParams
		TEST_METHOD(ScriptStruct__Maneater__LerpParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLerpParams, UnknownData_3813, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLerpParams, 0x0008);
		}

		// struct FAttachedParticleSystem
		TEST_METHOD(ScriptStruct__Maneater__AttachedParticleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachedParticleSystem, ParticleToSpawn, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachedParticleSystem, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttachedParticleSystem, UnknownData_TN5L, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttachedParticleSystem, 0x000C);
		}

		// struct FGrowthStageVFX
		TEST_METHOD(ScriptStruct__Maneater__GrowthStageVFX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, PerfectEntrySplash, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, PerfectTrailBubbles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, SmallEntrySplash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, SmallTrailBubbles, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, MediumEntrySplash, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, MediumTrailBubbles, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, LargeEntrySplash, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, LargeTrailBubbles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, ExitWaterSplash, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, ExitWaterSplashSound, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, ExitWaterTrail, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, FloppingTakeoffFromWater, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, FloppingLandInWater, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, EnterKnifingFromUnderwaterTrail, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, EnterKnifingFromBreachTrail, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageVFX, ExitKnifingUnderwaterTrail, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrowthStageVFX, 0x0098);
		}

		// struct FGrowthStageSettings
		TEST_METHOD(ScriptStruct__Maneater__GrowthStageSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSettings, SharkMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSettings, SoftSharkAnimBP, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSettings, SharkAnimBP, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSettings, SharkPhysAsset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSettings, StartingPlayerLevel, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSettings, EndingPlayerLevel, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSettings, StartingScalePercent, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSettings, EndingScalePercent, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSettings, BaseCapsuleRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSettings, BaseCapsuleHalfHeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrowthStageSettings, StageVFX, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrowthStageSettings, 0x00F0);
		}

		// struct FActionModeAbilitySet
		TEST_METHOD(ScriptStruct__Maneater__ActionModeAbilitySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActionModeAbilitySet, ActionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActionModeAbilitySet, UnknownData_BD66, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActionModeAbilitySet, MappedAbilities, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActionModeAbilitySet, 0x0018);
		}

		// struct FInputAbilitySet
		TEST_METHOD(ScriptStruct__Maneater__InputAbilitySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAbilitySet, PrimaryInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAbilitySet, SecondaryInput, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAbilitySet, UnknownData_BBRL, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAbilitySet, ActionModeAbilitySets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAbilitySet, 0x0018);
		}

		// struct FAIProximityCache
		TEST_METHOD(ScriptStruct__Maneater__AIProximityCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIProximityCache, AISearchType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIProximityCache, AISearchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIProximityCache, MaxSearchDist, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIProximityCache, UnknownData_4R3P, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIProximityCache, ProximityList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIProximityCache, 0x0028);
		}

		// struct FEvolutionClassRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__EvolutionClassRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionClassRow, EvolutionClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEvolutionClassRow, 0x0010);
		}

		// struct FPlayerPersistentStat
		TEST_METHOD(ScriptStruct__Maneater__PlayerPersistentStat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentStat, StatType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentStat, UnknownData_ZCOU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentStat, StatValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerPersistentStat, 0x0008);
		}

		// struct FSpeciesStatBinding
		TEST_METHOD(ScriptStruct__Maneater__SpeciesStatBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpeciesStatBinding, SpeciesStats, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpeciesStatBinding, 0x0010);
		}

		// struct FSharkEvolutionSettings
		TEST_METHOD(ScriptStruct__Maneater__SharkEvolutionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSharkEvolutionSettings, EvoName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSharkEvolutionSettings, UnknownData_L8GF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSharkEvolutionSettings, GrowthLevelChange, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSharkEvolutionSettings, 0x0008);
		}

		// struct FME_DotProductToDistance
		TEST_METHOD(ScriptStruct__Maneater__ME_DotProductToDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_DotProductToDistance, OrderedDistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_DotProductToDistance, DotProduct, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_DotProductToDistance, PriorityPenalty, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FME_DotProductToDistance, 0x000C);
		}

		// struct FME_TargetableActorData
		TEST_METHOD(ScriptStruct__Maneater__ME_TargetableActorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TargetableActorData, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TargetableActorData, CurrentDotProduct, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TargetableActorData, CurrentDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TargetableActorData, PriorityPenalty, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TargetableActorData, SphereBoundsRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TargetableActorData, bIsOnScreen, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TargetableActorData, bOnlyWhipshotTarget, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TargetableActorData, UnknownData_1GEO, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FME_TargetableActorData, 0x001C);
		}

		// struct FSonarData
		TEST_METHOD(ScriptStruct__Maneater__SonarData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSonarData, UnknownData_KHK9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSonarData, 0x000C);
		}

		// struct FSpawnListConditionProperty
		TEST_METHOD(ScriptStruct__Maneater__SpawnListConditionProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnListConditionProperty, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnListConditionProperty, PropertyValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnListConditionProperty, 0x000C);
		}

		// struct FSpawnListCondition
		TEST_METHOD(ScriptStruct__Maneater__SpawnListCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnListCondition, ConditionClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnListCondition, ConditionObj, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnListCondition, ConditionProperties, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnListCondition, 0x0020);
		}

		// struct FSpawnListEntry
		TEST_METHOD(ScriptStruct__Maneater__SpawnListEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnListEntry, SpawnList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnListEntry, SpawnChanceMod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnListEntry, MinSpawnCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnListEntry, MaxSpawnCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnListEntry, UnknownData_N2LC, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnListEntry, SpawnConditions, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnListEntry, 0x0028);
		}

		// struct FSpawnObjectiveInfo
		TEST_METHOD(ScriptStruct__Maneater__SpawnObjectiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnObjectiveInfo, SpawnLists, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnObjectiveInfo, ObjectiveSpawnVolumes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnObjectiveInfo, SpawnCount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnObjectiveInfo, UnknownData_WDX4, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnObjectiveInfo, SpawnVolumeCollections, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnObjectiveInfo, SpawnLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnObjectiveInfo, SpawnDistance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnObjectiveInfo, DespawnDistance, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnObjectiveInfo, 0x0068);
		}

		// struct FMESpawnerInfo
		TEST_METHOD(ScriptStruct__Maneater__MESpawnerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMESpawnerInfo, VolumeCollection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMESpawnerInfo, SpawnPoint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMESpawnerInfo, Significance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMESpawnerInfo, UnweightedSignificance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMESpawnerInfo, LastSpawnTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMESpawnerInfo, SpawnCooldownCounter, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMESpawnerInfo, 0x0020);
		}

		// struct FSpawnDataEntry
		TEST_METHOD(ScriptStruct__Maneater__SpawnDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataEntry, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataEntry, SpawnChanceMod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnDataEntry, UnknownData_LJ06, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnDataEntry, 0x0010);
		}

		// struct FEvolutionLoot
		TEST_METHOD(ScriptStruct__Maneater__EvolutionLoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionLoot, DropChance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionLoot, UnknownData_54MN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEvolutionLoot, EvolutionClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEvolutionLoot, 0x0010);
		}

		// struct FNutritionalValue : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__NutritionalValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, ProteinDropChance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, ProteinMinAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, ProteinMaxAmount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, FatDropChance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, FatMinAmount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, FatMaxAmount, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, MineralDropChance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, MineralMinAmount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, MineralMaxAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, MutagenDropChance, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, MutagenMinAmount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, MutagenMaxAmount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, EvolutionRewards, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, HealingValue, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutritionalValue, UnknownData_YHQR, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNutritionalValue, 0x0050);
		}

		// struct FNutrientChunkInfo
		TEST_METHOD(ScriptStruct__Maneater__NutrientChunkInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutrientChunkInfo, SpawnLocationBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutrientChunkInfo, ChunkToSpawn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutrientChunkInfo, ChunkScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutrientChunkInfo, UnknownData_LS14, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutrientChunkInfo, NutritionInfo, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNutrientChunkInfo, 0x0068);
		}

		// struct FNutrientChunkList : public FTableRowBase
		TEST_METHOD(ScriptStruct__Maneater__NutrientChunkList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutrientChunkList, GoreChunkList, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNutrientChunkList, UnknownData_1Z8B, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNutrientChunkList, 0x0020);
		}

		// struct FTimedWeatherEvent
		TEST_METHOD(ScriptStruct__Maneater__TimedWeatherEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedWeatherEvent, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedWeatherEvent, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedWeatherEvent, BlendInTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedWeatherEvent, BlendOutTime, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedWeatherEvent, 0x0010);
		}

		// struct FTimeOfDayPhaseSettings
		TEST_METHOD(ScriptStruct__Maneater__TimeOfDayPhaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayPhaseSettings, Phase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayPhaseSettings, UnknownData_DBLY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayPhaseSettings, PhaseHours, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayPhaseSettings, PhaseSpeedScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayPhaseSettings, PhaseTimeElapsed, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeOfDayPhaseSettings, 0x0014);
		}

		// struct FTimeOfDayCubemap
		TEST_METHOD(ScriptStruct__Maneater__TimeOfDayCubemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCubemap, Cubemap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCubemap, ActiveTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeOfDayCubemap, UnknownData_R3LW, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeOfDayCubemap, 0x0010);
		}

		// struct FME_TutorialPopupEvent
		TEST_METHOD(ScriptStruct__Maneater__ME_TutorialPopupEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialPopupEvent, PopupType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialPopupEvent, UnknownData_F765, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialPopupEvent, PopupIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialPopupEvent, PageCount, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FME_TutorialPopupEvent, 0x000C);
		}

		// struct FCanSpawnDiverMemory
		TEST_METHOD(ScriptStruct__Maneater__CanSpawnDiverMemory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanSpawnDiverMemory, CachedAIC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanSpawnDiverMemory, UnknownData_ICVJ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanSpawnDiverMemory, 0x0018);
		}

		// struct FCanUseAbilityMemory
		TEST_METHOD(ScriptStruct__Maneater__CanUseAbilityMemory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanUseAbilityMemory, CachedAIC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanUseAbilityMemory, NextUpdateTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanUseAbilityMemory, UnknownData_6CG0, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanUseAbilityMemory, 0x0010);
		}

		// struct FPawnRelevantMemory
		TEST_METHOD(ScriptStruct__Maneater__PawnRelevantMemory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnRelevantMemory, NextUpdateTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnRelevantMemory, UnknownData_IEAN, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnRelevantMemory, 0x0008);
		}

		// struct FTimeSinceLastSpawnMemory
		TEST_METHOD(ScriptStruct__Maneater__TimeSinceLastSpawnMemory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeSinceLastSpawnMemory, UnknownData_MINP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeSinceLastSpawnMemory, 0x0010);
		}

		// struct FBaseAbilityMemory
		TEST_METHOD(ScriptStruct__Maneater__BaseAbilityMemory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAbilityMemory, UnknownData_3KW6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAbilityMemory, 0x0008);
		}

		// struct FGameplayEffectParticleSystems
		TEST_METHOD(ScriptStruct__Maneater__GameplayEffectParticleSystems)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayEffectParticleSystems, UnknownData_VNZ4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayEffectParticleSystems, 0x0010);
		}

		// struct FAbilityInfoListStruct
		TEST_METHOD(ScriptStruct__Maneater__AbilityInfoListStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAbilityInfoListStruct, InfoStructArray, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAbilityInfoListStruct, 0x0010);
		}

		// struct FLimbGoreParameters
		TEST_METHOD(ScriptStruct__Maneater__LimbGoreParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLimbGoreParameters, GoreParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLimbGoreParameters, MaskParamName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLimbGoreParameters, bMaskCharacter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLimbGoreParameters, UnknownData_SFAM, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLimbGoreParameters, 0x0014);
		}

		// struct FMomentumForce
		TEST_METHOD(ScriptStruct__Maneater__MomentumForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMomentumForce, UnknownData_04ZL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMomentumForce, Force, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMomentumForce, Duration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMomentumForce, UnknownData_QZRV, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMomentumForce, UnknownData_024L, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMomentumForce, 0x0030);
		}

		// struct FGrabPointEffects
		TEST_METHOD(ScriptStruct__Maneater__GrabPointEffects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabPointEffects, GrabPointDamagedParticle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabPointEffects, GrabPointDamagedPersistentParticle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabPointEffects, GrabPointDestroyedParticle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabPointEffects, UnknownData_7B4P, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabPointEffects, GrabPointParticleOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabPointEffects, UnknownData_17VO, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabPointEffects, GrabPointDestroyedParticleSocket, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabPointEffects, GrabPointDestroyedSound, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabPointEffects, GoreCapOverrideBone, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabPointEffects, AdditionalBonesToHide, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrabPointEffects, UnknownData_ET6H, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrabPointEffects, 0x0090);
		}

		// struct FStageSpecificOffset
		TEST_METHOD(ScriptStruct__Maneater__StageSpecificOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStageSpecificOffset, PlayerStage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStageSpecificOffset, UnknownData_SFX2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStageSpecificOffset, SpecialTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStageSpecificOffset, 0x0040);
		}

		// struct FThrashGrabPoint
		TEST_METHOD(ScriptStruct__Maneater__ThrashGrabPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, GrabPointCollisionBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, GrabJoint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, UnknownData_ZKHK, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, LimbThickness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, UnknownData_JWR0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, GrabPointMaxHealth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, UnknownData_N2OB, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, Effects, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, GrabPhysicsMethod, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, UnknownData_GY1A, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, BreakAwayAnimation, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, PlayerSharkOnlyBreakAwayAnimation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, GrabPointChainMap, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, ParentConsumptionPoint, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, UnknownData_OFUK, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, HiddenJointsOnGrab, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, GrabbedTransformOffset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, PlayerOffset, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, Index, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, UnknownData_W0ZC, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, ThrashAttacker, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, UnknownData_JQYS, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, DamageModifier, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, SelfEffects, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, ConsumerEffects, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, GrabbedIKSetup, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThrashGrabPoint, UnknownData_5WEK, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FThrashGrabPoint, 0x0180);
		}

		// struct FAlertEventParams
		TEST_METHOD(ScriptStruct__Maneater__AlertEventParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlertEventParams, AlertEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlertEventParams, bAttachToCharacter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlertEventParams, UnknownData_VNG9, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlertEventParams, 0x0010);
		}

		// struct FBeachActivityEntry
		TEST_METHOD(ScriptStruct__Maneater__BeachActivityEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeachActivityEntry, Activity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeachActivityEntry, ConfigTableOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeachActivityEntry, ChanceToActivate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeachActivityEntry, bOverrideDefaultRoamSettings, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeachActivityEntry, UnknownData_X1XK, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeachActivityEntry, ChanceToRoam, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeachActivityEntry, RoamRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeachActivityEntry, 0x0020);
		}

		// struct FPassengerPropInfo
		TEST_METHOD(ScriptStruct__Maneater__PassengerPropInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerPropInfo, BossPhaseNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerPropInfo, AttachmentChance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerPropInfo, PropAttachments, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerPropInfo, SecondAttachmentChance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerPropInfo, UnknownData_FADZ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerPropInfo, SecondPropAttachments, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassengerPropInfo, 0x0030);
		}

		// struct FPassengerData
		TEST_METHOD(ScriptStruct__Maneater__PassengerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, PassengerClasses, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, DefaultPropAttachments, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, BossPhasePropAttachments, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, SeatIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, PercentChance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, MinHitVelocityToEject, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, UnknownData_SXHE, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, PassengerClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, PassengerCharacter, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, PassengerMesh, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, PassengerAnimBP, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, PropAttachment, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, SecondPropAttachment, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerData, UnknownData_6MS5, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassengerData, 0x0098);
		}

		// struct FPassengerPropSetup
		TEST_METHOD(ScriptStruct__Maneater__PassengerPropSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerPropSetup, PassengerStance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerPropSetup, GenderSpecific, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerPropSetup, BodySpecific, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerPropSetup, UnknownData_P6U1, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerPropSetup, AnimationSet, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassengerPropSetup, 0x0010);
		}

		// struct FPassengerAnimationStruct
		TEST_METHOD(ScriptStruct__Maneater__PassengerAnimationStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerAnimationStruct, AnimationSets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerAnimationStruct, IntroCinematicAnimation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassengerAnimationStruct, DefeatedPlayerCinematicAnimation, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassengerAnimationStruct, 0x0020);
		}

		// struct FVehicleSeat
		TEST_METHOD(ScriptStruct__Maneater__VehicleSeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, UnknownData_G7EO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, AttachSocket, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, UnknownData_GUX0, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, EjectionAngle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, EjectionImpulseXY, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, EjectionImpulseZ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, UnknownData_M3DO, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, SeatOverrideAniamtions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, bCanTrackTarget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, UnknownData_I1ZI, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, UnderStarboardBlendspace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, StarboardRotationOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, StarboardLocationOffset, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, UnderPortBlendspace, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, PortRotationOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, PortLocationOffset, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, bCanStand, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, bCanCrouch, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, bCanSit, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, bCanKneel, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, bCanLayDown, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, UnknownData_SZK7, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, AimOverEdgePitchAngle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, AimOverEdgeWaterDepth, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, bPassengerIsLocked, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, UnknownData_Z4AF, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, MinAngle, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, MaxAngle, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleSeat, UnknownData_H6FJ, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleSeat, 0x00A8);
		}

		// struct FVehicleDamageMaterialPoint
		TEST_METHOD(ScriptStruct__Maneater__VehicleDamageMaterialPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDamageMaterialPoint, MaterialParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDamageMaterialPoint, DamageRadiusParameterName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDamageMaterialPoint, UnknownData_API0, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDamageMaterialPoint, 0x0020);
		}

		// struct FSeatEnclosureSetting
		TEST_METHOD(ScriptStruct__Maneater__SeatEnclosureSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatEnclosureSetting, SeatIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSeatEnclosureSetting, UnknownData_WIOF, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSeatEnclosureSetting, 0x0008);
		}

		// struct FVehicleDestructionLocation
		TEST_METHOD(ScriptStruct__Maneater__VehicleDestructionLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, DestructionLocationHealth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, UnknownData_ICPD, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, SwapoutMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, HitBoxSocket, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, HitBoxRadius, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, UnknownData_U0RF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, ProtectedSeatIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, SeatIndicesToMarkAsDestroyed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, SeatIndicesToEject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, SeatIndicesToEnableTracking, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, SeatEnclosureSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, DestroyedParticle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, DestroyedParticleSocket, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, DestructionSound, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, DamagedParticle, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, DamagedSound, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, bDrawDebug, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, UnknownData_KUXB, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, AuraWhenActive, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, CurrentAura, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDestructionLocation, AuraAttachSocket, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDestructionLocation, 0x00B8);
		}

		// struct FBossPhaseInfo
		TEST_METHOD(ScriptStruct__Maneater__BossPhaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossPhaseInfo, HealthPctToTriggerNextPhase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossPhaseInfo, BattleTimeToTriggerNextPhase, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossPhaseInfo, NumDeadPassengersToTriggerNextPhase, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossPhaseInfo, bRestorePassengersOnNextPhase, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossPhaseInfo, UnknownData_7FKE, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossPhaseInfo, ProtectedSeatIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossPhaseInfo, PossibleHunterClasses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossPhaseInfo, MaxHuntersInPlay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossPhaseInfo, HunterRespawnDelay, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossPhaseInfo, bReinforcePartialHunterWaves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBossPhaseInfo, UnknownData_W3U9, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBossPhaseInfo, 0x0040);
		}

		// struct FBountyViewData
		TEST_METHOD(ScriptStruct__Maneater__BountyViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBountyViewData, HunterFirstName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBountyViewData, HunterLastName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBountyViewData, HunterBio, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBountyViewData, HunterQuote, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBountyViewData, HunterSupportEntries, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBountyViewData, HunterIcon, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBountyViewData, HunterPortrait, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBountyViewData, 0x00C0);
		}

		// struct FRegionCol2DArray2
		TEST_METHOD(ScriptStruct__Maneater__RegionCol2DArray2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionCol2DArray2, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRegionCol2DArray2, 0x0010);
		}

		// struct FRegionCol2DArray
		TEST_METHOD(ScriptStruct__Maneater__RegionCol2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionCol2DArray, Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionCol2DArray, _SizeX, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionCol2DArray, _SizeY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRegionCol2DArray, 0x0018);
		}

		// struct FWorldRegion
		TEST_METHOD(ScriptStruct__Maneater__WorldRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegion, Region, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegion, UnknownData_ONZC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegion, RegionIcon, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegion, RegionOverheadTextureCollision, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegion, RegionCollisionData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegion, RegionBounds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegion, RandomAmbientNarratorEventName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegion, RegionGrotto, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegion, bIsRegionPoisonable, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegion, UnknownData_AH5B, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegion, MinimumBountySpawnDistance, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldRegion, 0x0090);
		}

		// struct FWorldRegionState
		TEST_METHOD(ScriptStruct__Maneater__WorldRegionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, Bounds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, Landmarks, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, Grottos, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, NutrientCaches, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, WhalesCarcasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, Beaches, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, SpawnVolumeCollections, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, SpawnPointActors, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, Breakables, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, RegionData, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, RegionIndex, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, bVisited, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldRegionState, UnknownData_RGIN, 0x011D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldRegionState, 0x0120);
		}

		// struct FRichTextActionMapping
		TEST_METHOD(ScriptStruct__Maneater__RichTextActionMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextActionMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextActionMapping, AxisScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextActionMapping, RichTextStyle, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextActionMapping, UnknownData_A1XX, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextActionMapping, 0x0010);
		}

		// struct FTutorialPopupPage
		TEST_METHOD(ScriptStruct__Maneater__TutorialPopupPage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialPopupPage, Title, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialPopupPage, Body, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialPopupPage, ActionBinds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialPopupPage, Image, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTutorialPopupPage, 0x0048);
		}

		// struct FPlayerTutorialPopup
		TEST_METHOD(ScriptStruct__Maneater__PlayerTutorialPopup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTutorialPopup, MaxDisplays, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTutorialPopup, bImmediateDisplay, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTutorialPopup, DisplayType, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTutorialPopup, UnknownData_1ZEU, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTutorialPopup, Priority, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTutorialPopup, UnknownData_QVQC, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerTutorialPopup, TutorialPages, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerTutorialPopup, 0x0020);
		}

		// struct FME_TutorialEvent
		TEST_METHOD(ScriptStruct__Maneater__ME_TutorialEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, PlayerTooltipText, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, TutorialName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, InputText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, InputActionNames, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, AutoHideTimer, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, UnknownData_7899, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, WaypointLocation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, StartNarratorEventName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, InitialProgressNarratorEventName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, FinishNarratorEventName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, SaveGameAtStep, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, UnknownData_3MW3, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, AutoCompleteTimer, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, DelayBeforeShowingUI, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, NumRepeatTimesToComplete, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, UnknownData_6GCI, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, TimeActivityNeededToCompleteStep, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, DisableTooltipUI, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialEvent, UnknownData_TLIB, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FME_TutorialEvent, 0x00C0);
		}

		// struct FME_TutorialTipEvent
		TEST_METHOD(ScriptStruct__Maneater__ME_TutorialTipEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialTipEvent, HeaderText, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialTipEvent, BodyText, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialTipEvent, InputText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FME_TutorialTipEvent, InputActionNames, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FME_TutorialTipEvent, 0x0058);
		}

		// struct FMovementTarget
		TEST_METHOD(ScriptStruct__Maneater__MovementTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementTarget, MovementTargetComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementTarget, MovementLocation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovementTarget, UnknownData_11CK, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementTarget, 0x0018);
		}

		// struct FFloatIntervalBP
		TEST_METHOD(ScriptStruct__Maneater__FloatIntervalBP)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatIntervalBP, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatIntervalBP, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatIntervalBP, 0x0008);
		}

		// struct FStoryObjective
		TEST_METHOD(ScriptStruct__Maneater__StoryObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryObjective, CompletionPct, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryObjective, bRenderProjectedIcons, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryObjective, UnknownData_W2NB, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryObjective, ObjectiveHint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryObjective, ObjectiveIcon, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryObjective, ObjectiveIconTint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryObjective, ObjectiveTargetTypes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryObjective, ObjectiveTargets, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoryObjective, UnknownData_JLOJ, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStoryObjective, 0x00A8);
		}

		// struct FNavigationFilterArea
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_86JV, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// struct FNavigationFilterFlags
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_74AH, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// struct FSupportedAreaData
		TEST_METHOD(ScriptStruct__NavigationSystem__SupportedAreaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_JK34, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// struct FNavGraphEdge
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_8GC7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// struct FNavLinkCustomInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__NavigationSystem__NavLinkCustomInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, NavLinkUserId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, UnknownData_41TR, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavLinkCustomInstanceData, 0x0060);
		}

		// struct FRecastNavMeshGenerationProperties
		TEST_METHOD(ScriptStruct__NavigationSystem__RecastNavMeshGenerationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TilePoolSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileSizeUU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxSlope, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxStepHeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MinRegionArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MergeRegionSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MaxSimplificationError, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileNumberHardLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionPartitioning, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerPartitioning, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_V7AI, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionChunkSplits, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerChunkSplits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_NCKQ, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecastNavMeshGenerationProperties, 0x0040);
		}

		// struct FNavCollisionCylinder
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// struct FNavCollisionBox
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// struct FNavGraphNode
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, Owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_VH2C, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// struct FCompassDirection
		TEST_METHOD(ScriptStruct__ManeaterUI__CompassDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompassDirection, Widget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompassDirection, DefaultPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompassDirection, Direction, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompassDirection, UnknownData_LYID, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompassDirection, 0x0028);
		}

		// struct FRegionToastData
		TEST_METHOD(ScriptStruct__ManeaterUI__RegionToastData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionToastData, Duration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionToastData, Region, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionToastData, UnknownData_9REH, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionToastData, RegionName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionToastData, RegionImage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionToastData, bFirstTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionToastData, UnknownData_6NB9, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionToastData, RegionProgress, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRegionToastData, 0x0030);
		}

		// struct FTrackedCompassActor
		TEST_METHOD(ScriptStruct__ManeaterUI__TrackedCompassActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCompassActor, TargetActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackedCompassActor, Texture, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackedCompassActor, 0x0010);
		}

		// struct FMapSettings
		TEST_METHOD(ScriptStruct__ManeaterUI__MapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapSettings, IconLibrary, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapSettings, 0x0050);
		}

		// struct FMapMarkerData
		TEST_METHOD(ScriptStruct__ManeaterUI__MapMarkerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerData, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerData, MarkerType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerData, UnknownData_E6RO, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerData, Position, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerData, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerData, Radius, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerData, UnknownData_3LXY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMarkerData, IconOverride, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapMarkerData, 0x0058);
		}

		// struct FRegionData
		TEST_METHOD(ScriptStruct__ManeaterUI__RegionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, Region, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, UnknownData_5OJT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, RegionName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, RegionIcon, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, RegionCompletionPercentage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, LandmarkCompletionPercentage, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, LandmarkProgressText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, TerrorizeCompletionPercentage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, PopControlCompletionPercentage, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, CacheCompletionPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, UnknownData_ML9M, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, CacheProgressText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, ApexCompletionPercentage, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, HuntCompletionPercentage, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, CollectionCompletionPercentage, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, UnknownData_6I9V, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, CollectionProgressText, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, MapMarkerData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, PlayerObjectives, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, Landmarks, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, Grotto, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, CollisionData, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, bIsRegionPoisoned, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionData, UnknownData_EJPC, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRegionData, 0x00F0);
		}

		// struct FResolutionValue
		TEST_METHOD(ScriptStruct__ManeaterUI__ResolutionValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResolutionValue, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResolutionValue, Y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResolutionValue, 0x0008);
		}

		// struct FTutorialEntry
		TEST_METHOD(ScriptStruct__ManeaterUI__TutorialEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialEntry, UnknownData_7ISO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTutorialEntry, 0x00C0);
		}

		// struct FGameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTag, TagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTag, 0x0008);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_KGDD, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_QV1N, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0010);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_RAO5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_Y3F3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_QSY8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0050);
		}

		// struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_TOPR, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0028);
		}

		// struct FRestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FXRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x000C);
		}

		// struct FGeomComponentCacheParameters
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeomComponentCacheParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CacheMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_C4OX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TargetCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, ReverseCacheBeginTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveCollisionData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateCollisionData, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_LW67, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSizeMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoCollisionDataSpatialHash, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_W2MC, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSpatialHashRadius, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxCollisionPerCell, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveBreakingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateBreakingData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_QXKG, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSizeMax, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoBreakingDataSpatialHash, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_6Q08, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSpatialHashRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxBreakingPerCell, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveTrailingData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateTrailingData, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_YP3Q, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingDataSizeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinSpeedThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinVolumeThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_WIPI, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomComponentCacheParameters, 0x0050);
		}

		// struct FChaosCollisionEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Impulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, UnknownData_RCG2, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventData, 0x0058);
		}

		// struct FChaosBreakingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Mass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventData, 0x001C);
		}

		// struct FChaosTrailingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, ParticleIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventData, 0x002C);
		}

		// struct FGeometryCollectionDebugDrawActorSelectedRigidBody
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawActorSelectedRigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, UnknownData_UFGP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, Solver, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, GeometryCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, 0x0018);
		}

		// struct FGeometryCollectionDebugDrawWarningMessage
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawWarningMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawWarningMessage, UnknownData_LCJG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawWarningMessage, 0x0001);
		}

		// struct FChaosCollisionEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxNumberResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, UnknownData_5CVR, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventRequestSettings, 0x0018);
		}

		// struct FChaosBreakingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinMass, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, UnknownData_H5EL, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventRequestSettings, 0x0018);
		}

		// struct FChaosTrailingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinAngularSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, UnknownData_57BQ, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventRequestSettings, 0x0018);
		}

		// struct FGeometryCollectionSizeSpecificData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSizeSpecificData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, ImplicitType, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, UnknownData_5DNS, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinLevelSetResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxLevelSetResolution, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinClusterLevelSetResolution, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxClusterLevelSetResolution, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionObjectReductionPercentage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionParticlesFraction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaximumCollisionParticles, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSizeSpecificData, 0x0024);
		}

		// struct FNetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__NetCore__NetAnalyticsDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_1O38, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x000C);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__AssetRegistry__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_IVFP, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_BY0M, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00E8);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0028);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_S5XC, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0050);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0018);
		}

		// struct FAssetRegistryDependencyOptions
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetRegistryDependencyOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftPackageReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardPackageReferences, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSearchableNames, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftManagementReferences, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardManagementReferences, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetRegistryDependencyOptions, 0x0005);
		}

		// struct FGeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_5ZGC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// struct FGeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_9BDI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// struct FGeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_NYRS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// struct FTrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_OM2S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// struct FGizmoFloatParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoFloatParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, CurrentValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoFloatParameterChange, 0x0008);
		}

		// struct FGizmoVec2ParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoVec2ParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, CurrentValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoVec2ParameterChange, 0x0010);
		}

		// struct FInputRayHit
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__InputRayHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRayHit, UnknownData_RS91, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRayHit, 0x0028);
		}

		// struct FBrushStampData
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BrushStampData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushStampData, UnknownData_RPUO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushStampData, 0x00A8);
		}

		// struct FBehaviorInfo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BehaviorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, Behavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, UnknownData_550X, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorInfo, 0x0020);
		}

		// struct FActiveGizmo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__ActiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGizmo, UnknownData_LXEI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGizmo, 0x0030);
		}

		// struct FTestMap_SpawnAI_ST
		TEST_METHOD(UserDefinedStruct__TestMap_SpawnAI_ST__TestMap_SpawnAI_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTestMap_SpawnAI_ST, Text_2_AC570FEA46DA3DB431805E97D8A2D31F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTestMap_SpawnAI_ST, Class_5_26C0539C4D88ED0283B336981E1A43F6, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMap_SpawnAI_ST, 0x0018);
		}

		// struct FMercuna3DMovementAccelerations
		TEST_METHOD(ScriptStruct__Mercuna3DMovement__Mercuna3DMovementAccelerations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementAccelerations, Forward, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementAccelerations, Backward, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementAccelerations, Sideways, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMercuna3DMovementAccelerations, 0x000C);
		}

		// struct FMercuna3DMovementWorldAccelerations
		TEST_METHOD(ScriptStruct__Mercuna3DMovement__Mercuna3DMovementWorldAccelerations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementWorldAccelerations, Upward, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementWorldAccelerations, Downward, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMercuna3DMovementWorldAccelerations, 0x0008);
		}

		// struct FMercuna3DMovementProperties
		TEST_METHOD(ScriptStruct__Mercuna3DMovement__Mercuna3DMovementProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementProperties, MaxSpeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementProperties, MaxAccel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementProperties, MaxAccelerations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementProperties, MaxAngSpeed, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementProperties, MaxPitchRate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementProperties, MaxYawRate, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementProperties, MaxRollRate, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementProperties, MaxAngAccel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementProperties, bEnableWorldAccelerationLimits, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementProperties, UnknownData_E3U6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMercuna3DMovementProperties, WorldAccelerationLimits, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMercuna3DMovementProperties, 0x003C);
		}

		// struct FAudioCaptureDeviceInfo
		TEST_METHOD(ScriptStruct__AudioCapture__AudioCaptureDeviceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, DeviceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, NumInputChannels, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, SampleRate, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioCaptureDeviceInfo, 0x0010);
		}

		// struct FNiagaraDataInterfaceGeneratedFunction
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGeneratedFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGeneratedFunction, UnknownData_Z6W2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGeneratedFunction, 0x0028);
		}

		// struct FNiagaraDataInterfaceGPUParamInfo
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGPUParamInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DataInterfaceHLSLSymbol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DIClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, GeneratedFunctions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGPUParamInfo, 0x0030);
		}

		// struct FNiagaraCompileEvent
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraCompileEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Severity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, UnknownData_LG8Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, Message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, NodeGuid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, PinGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, StackGuids, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileEvent, 0x0048);
		}

		// struct FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCacheAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, PlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_KRLC, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_6CZ8, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0040);
		}

		// struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0048);
		}

		// struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0068);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_V2CK, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// struct FSpawnedLightInformation_ST
		TEST_METHOD(UserDefinedStruct__SpawnedLightInformation_ST__SpawnedLightInformation_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, Intensity_7_4EFCE05F431A947E79AFFAAE80272A9B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, LightColor_9_EB9BE582408410EC23390CA837E09D3E, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, AttenuationRadious_11_0EA92D364A306577550A6F8F2DA7914D, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, InnerConeAngle_26_886463F845656A4CACFD6F889687DDD2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, OuterConeAngle_13_4946BABB470888806178729C6E94CC87, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, Temperature_15_352639444DC5D33EB048018AFD510B1F, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, CastShadows_19_BE2F525D4A77BB18E3916EB1257EDFC5, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, UnknownData_EP09, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, VolumetricScatteringIntensity_22_63BED5224F7B6F5F57514FB6CD3AEE20, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, RandomIntensityRange_31_ED30B917445C4AA752F6F8BFD937A5A7, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, LowestPossibleIntensity_33_67845A9F41E4632494240387C76BBB46, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, RandomTemperatureRange_35_D14E17FD47B6CB380BFA54872F913A1C, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, LowestPossibleTemperature_37_93CBFB484682233AFE60B6AAECE59DEA, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, LightOffset_47_2D2D944843815EF376F1CF8B1721525D, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, MaxDrawDistance_44_5E472B5A41D22F8B7B5174A886E2E25A, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedLightInformation_ST, MaxDrawDistanceFadeRange_46_D0FE2A8D4650FBFBB02B1293FA5A6F9C, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnedLightInformation_ST, 0x003C);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_2KJ8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_DBIE, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_B6ZV, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerByteArray
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerByteArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_SBYE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, ByteArray, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_54HO, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Int8Array, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_8F9E, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerByteArray, 0x0038);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Text, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_NHBE, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector4, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_APIC, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Quat, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Color, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_GYV7, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x0090);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStruct, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x0140);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, ByteArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_9MQA, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StructArray, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0060);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SubClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Object, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, WeakObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ClassPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPath, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x00A0);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0003);
		}

		// struct FStructSerializerSetTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerSetTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StrSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, IntSet, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, NameSet, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StructSet, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerSetTestStruct, 0x0140);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_9U68, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_CUUK, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Sets, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x0450);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_TX0J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Data, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_NDIH, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0038);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_TT1Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_G8CD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_ZLQB, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0090);
		}

		// struct FPipeJunction_ST
		TEST_METHOD(UserDefinedStruct__PipeJunction_ST__PipeJunction_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPipeJunction_ST, WhatSide__12_02038ECD473011428D9E43834E289900, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPipeJunction_ST, UnknownData_ZLXH, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPipeJunction_ST, CapsToOpen_8_3518D0F74610EEE6DBBF2BA86DA37F8D, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPipeJunction_ST, SecondarySide__18_FBE5E8A34B203DEE6A685FB39D7EB1B7, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPipeJunction_ST, UnknownData_I7EX, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPipeJunction_ST, SecondarySideNumber_25_D02516E148ADF8E0434A129BB713A800, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPipeJunction_ST, DontSpawnLights__15_3043F3AC41FAD50E06BB0090BBD8E615, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPipeJunction_ST, 0x0021);
		}

		// struct FAkMainOutputSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkMainOutputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, AudioDeviceShareset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, DeviceID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, PanningRule, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, UnknownData_O5G9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, ChannelConfigType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, UnknownData_SXJ5, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, ChannelMask, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, NumberOfChannels, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, UnknownData_UDW1, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMainOutputSettings, 0x0028);
		}

		// struct FAkSpatialAudioSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkSpatialAudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, MaxSoundPropagationDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, DiffractionFlags, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, MovementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, NumberOfPrimaryRays, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, ReflectionOrder, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, EnableDiffractionOnReflections, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, EnableDirectPathDiffraction, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, UnknownData_IR92, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, MaximumPathLength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, EnableTransmission, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, UnknownData_LOV4, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkSpatialAudioSettings, 0x0020);
		}

		// struct FAkCommonInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommonInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, MaximumNumberOfMemoryPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, MaximumNumberOfPositioningPaths, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, CommandQueueSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, SamplesPerFrame, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, MainOutputSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, StreamingLookAheadRatio, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, NumberOfRefillsInVoice, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, UnknownData_3Q9U, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, SpatialAudioSettings, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommonInitializationSettings, 0x0060);
		}

		// struct FAkCommonInitializationSettingsWithSampleRate : public FAkCommonInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommonInitializationSettingsWithSampleRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettingsWithSampleRate, SampleRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettingsWithSampleRate, UnknownData_4QRO, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommonInitializationSettingsWithSampleRate, 0x0068);
		}

		// struct FAkCommunicationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommunicationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, PoolSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, DiscoveryBroadcastPort, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, CommandPort, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, NotificationPort, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, UnknownData_ZDVL, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, NetworkName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommunicationSettings, 0x0020);
		}

		// struct FAkCommunicationSettingsWithSystemInitialization : public FAkCommunicationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommunicationSettingsWithSystemInitialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithSystemInitialization, InitializeSystemComms, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithSystemInitialization, UnknownData_7APM, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommunicationSettingsWithSystemInitialization, 0x0028);
		}

		// struct FAkAdvancedSpatialAudioSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkAdvancedSpatialAudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedSpatialAudioSettings, DiffractionShadowAttenuationFactor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedSpatialAudioSettings, DiffractionShadowDegrees, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAdvancedSpatialAudioSettings, 0x0008);
		}

		// struct FAkAdvancedInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, IO_MemorySize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, IO_Granularity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, TargetAutoStreamBufferLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, UseStreamCache, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, UnknownData_K1IC, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, MaximumPinnedBytesInCache, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, EnableGameSyncPreparation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, UnknownData_6LCX, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, ContinuousPlaybackLookAhead, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, MonitorQueuePoolSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, MaximumHardwareTimeoutMs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, DebugOutOfRangeCheckEnabled, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, UnknownData_7CQF, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, DebugOutOfRangeLimit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, SpatialAudioSettings, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAdvancedInitializationSettings, 0x0034);
		}

		// struct FAkAdvancedInitializationSettingsWithMultiCoreRendering : public FAkAdvancedInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkAdvancedInitializationSettingsWithMultiCoreRendering)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettingsWithMultiCoreRendering, EnableMultiCoreRendering, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettingsWithMultiCoreRendering, UnknownData_RPTD, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAdvancedInitializationSettingsWithMultiCoreRendering, 0x0038);
		}

		// struct FAkAndroidAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkAndroidAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAndroidAdvancedInitializationSettings, AudioAPI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAndroidAdvancedInitializationSettings, RoundFrameSizeToHardwareSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAndroidAdvancedInitializationSettings, UnknownData_MZ4L, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAndroidAdvancedInitializationSettings, 0x0040);
		}

		// struct FAkBoolPropertyToControl
		TEST_METHOD(ScriptStruct__AkAudio__AkBoolPropertyToControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkBoolPropertyToControl, ItemProperty, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkBoolPropertyToControl, 0x0010);
		}

		// struct FAkWwiseObjectDetails
		TEST_METHOD(ScriptStruct__AkAudio__AkWwiseObjectDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseObjectDetails, ItemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseObjectDetails, ItemPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseObjectDetails, ItemId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWwiseObjectDetails, 0x0030);
		}

		// struct FAkWwiseItemToControl
		TEST_METHOD(ScriptStruct__AkAudio__AkWwiseItemToControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseItemToControl, ItemPicked, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseItemToControl, ItemPath, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWwiseItemToControl, 0x0040);
		}

		// struct FAkHololensAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkHololensAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkHololensAdvancedInitializationSettings, AudioAPI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkHololensAdvancedInitializationSettings, GlobalFocus, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkHololensAdvancedInitializationSettings, UseHeadMountedDisplayAudioDevice, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkHololensAdvancedInitializationSettings, UnknownData_VUDD, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkHololensAdvancedInitializationSettings, 0x0040);
		}

		// struct FAKWaapiJsonObject
		TEST_METHOD(ScriptStruct__AkAudio__AKWaapiJsonObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAKWaapiJsonObject, UnknownData_0ER2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAKWaapiJsonObject, 0x0010);
		}

		// struct FAkWaapiSubscriptionId
		TEST_METHOD(ScriptStruct__AkAudio__AkWaapiSubscriptionId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWaapiSubscriptionId, UnknownData_JMZP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWaapiSubscriptionId, 0x0008);
		}

		// struct FAkAmbSoundCheckpointRecord
		TEST_METHOD(ScriptStruct__AkAudio__AkAmbSoundCheckpointRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAmbSoundCheckpointRecord, bCurrentlyPlaying, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAmbSoundCheckpointRecord, 0x0001);
		}

		// struct FAkAudioSession
		TEST_METHOD(ScriptStruct__AkAudio__AkAudioSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, AudioSessionCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, UnknownData_AJNJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, AudioSessionCategoryOptions, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, AudioSessionMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, UnknownData_MW97, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAudioSession, 0x000C);
		}

		// struct FAkExternalSourceInfo
		TEST_METHOD(ScriptStruct__AkAudio__AkExternalSourceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, ExternalSrcName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, CodecID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, UnknownData_NIGE, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, Filename, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, ExternalSourceAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, IsStreamed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, UnknownData_SD8W, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkExternalSourceInfo, 0x0038);
		}

		// struct FAkSegmentInfo
		TEST_METHOD(ScriptStruct__AkAudio__AkSegmentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, CurrentPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, PreEntryDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, ActiveDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, PostExitDuration, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, RemainingLookAheadTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, BeatDuration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, BarDuration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, GridDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, GridOffset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkSegmentInfo, 0x0024);
		}

		// struct FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiEventBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiEventBase, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiEventBase, Chan, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiEventBase, 0x0002);
		}

		// struct FAkMidiProgramChange : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiProgramChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiProgramChange, ProgramNum, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiProgramChange, 0x0003);
		}

		// struct FAkMidiChannelAftertouch : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiChannelAftertouch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiChannelAftertouch, Value, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiChannelAftertouch, 0x0003);
		}

		// struct FAkMidiNoteAftertouch : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiNoteAftertouch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteAftertouch, Note, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteAftertouch, Value, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiNoteAftertouch, 0x0004);
		}

		// struct FAkMidiPitchBend : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiPitchBend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiPitchBend, ValueLsb, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiPitchBend, ValueMsb, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiPitchBend, FullValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiPitchBend, 0x0008);
		}

		// struct FAkMidiCc : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiCc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiCc, Cc, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiCc, Value, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiCc, 0x0004);
		}

		// struct FAkMidiNoteOnOff : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiNoteOnOff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteOnOff, Note, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteOnOff, Velocity, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiNoteOnOff, 0x0004);
		}

		// struct FAkMidiGeneric : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiGeneric, Param1, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiGeneric, Param2, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiGeneric, 0x0004);
		}

		// struct FAkChannelMask
		TEST_METHOD(ScriptStruct__AkAudio__AkChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkChannelMask, ChannelMask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkChannelMask, 0x0004);
		}

		// struct FAkGeometrySurfaceOverride
		TEST_METHOD(ScriptStruct__AkAudio__AkGeometrySurfaceOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfaceOverride, AcousticTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfaceOverride, UnknownData_9BUI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfaceOverride, OcclusionValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkGeometrySurfaceOverride, 0x0010);
		}

		// struct FAkAcousticSurface
		TEST_METHOD(ScriptStruct__AkAudio__AkAcousticSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAcousticSurface, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAcousticSurface, Occlusion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAcousticSurface, Name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAcousticSurface, 0x0018);
		}

		// struct FAkTriangle
		TEST_METHOD(ScriptStruct__AkAudio__AkTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkTriangle, Point0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkTriangle, Point1, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkTriangle, Point2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkTriangle, Surface, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkTriangle, 0x0008);
		}

		// struct FAkGeometryData
		TEST_METHOD(ScriptStruct__AkAudio__AkGeometryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, Surfaces, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, Triangles, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, ToOverrideAcousticTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, ToOverrideOcclusion, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkGeometryData, 0x0050);
		}

		// struct FAkPluginInfo
		TEST_METHOD(ScriptStruct__AkAudio__AkPluginInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPluginInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPluginInfo, PluginID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPluginInfo, UnknownData_X3J9, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPluginInfo, dll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPluginInfo, 0x0028);
		}

		// struct FAkCommunicationSettingsWithCommSelection : public FAkCommunicationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommunicationSettingsWithCommSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithCommSelection, CommunicationSystem, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithCommSelection, UnknownData_B2UQ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithCommSelection, UnknownData_9TJS, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommunicationSettingsWithCommSelection, 0x0028);
		}

		// struct FAkPropertyToControl
		TEST_METHOD(ScriptStruct__AkAudio__AkPropertyToControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPropertyToControl, ItemProperty, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPropertyToControl, 0x0010);
		}

		// struct FAkPS4AdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkPS4AdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS4AdvancedInitializationSettings, ACPBatchBufferSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS4AdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS4AdvancedInitializationSettings, UnknownData_BMCY, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPS4AdvancedInitializationSettings, 0x0040);
		}

		// struct FAkPS5AdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkPS5AdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS5AdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS5AdvancedInitializationSettings, UnknownData_WG3V, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPS5AdvancedInitializationSettings, 0x003C);
		}

		// struct FAkGeometrySurfacePropertiesToMap
		TEST_METHOD(ScriptStruct__AkAudio__AkGeometrySurfacePropertiesToMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfacePropertiesToMap, AcousticTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfacePropertiesToMap, OcclusionValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfacePropertiesToMap, UnknownData_7RMR, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkGeometrySurfacePropertiesToMap, 0x0030);
		}

		// struct FAkPoly
		TEST_METHOD(ScriptStruct__AkAudio__AkPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPoly, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPoly, Occlusion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPoly, EnableSurface, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPoly, UnknownData_QYTC, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPoly, 0x0010);
		}

		// struct FAkWaapiFieldNames
		TEST_METHOD(ScriptStruct__AkAudio__AkWaapiFieldNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWaapiFieldNames, FieldName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWaapiFieldNames, 0x0010);
		}

		// struct FAkWaapiUri
		TEST_METHOD(ScriptStruct__AkAudio__AkWaapiUri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWaapiUri, Uri, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWaapiUri, 0x0010);
		}

		// struct FAkWindowsAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkWindowsAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWindowsAdvancedInitializationSettings, AudioAPI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWindowsAdvancedInitializationSettings, GlobalFocus, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWindowsAdvancedInitializationSettings, UseHeadMountedDisplayAudioDevice, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWindowsAdvancedInitializationSettings, UnknownData_1PLA, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWindowsAdvancedInitializationSettings, 0x0040);
		}

		// struct FAkWinGDKAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkWinGDKAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWinGDKAdvancedInitializationSettings, AudioAPI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWinGDKAdvancedInitializationSettings, GlobalFocus, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWinGDKAdvancedInitializationSettings, UseHeadMountedDisplayAudioDevice, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWinGDKAdvancedInitializationSettings, UnknownData_3QTO, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWinGDKAdvancedInitializationSettings, 0x0040);
		}

		// struct FAkXboxOneGDKApuHeapInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkXboxOneGDKApuHeapInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKApuHeapInitializationSettings, CachedSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKApuHeapInitializationSettings, NonCachedSize, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXboxOneGDKApuHeapInitializationSettings, 0x0008);
		}

		// struct FAkXboxOneGDKAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkXboxOneGDKAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKAdvancedInitializationSettings, MaximumNumberOfXMAVoices, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKAdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKAdvancedInitializationSettings, UnknownData_PGEO, 0x003B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXboxOneGDKAdvancedInitializationSettings, 0x003C);
		}

		// struct FAkXboxOneApuHeapInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkXboxOneApuHeapInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneApuHeapInitializationSettings, CachedSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneApuHeapInitializationSettings, NonCachedSize, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXboxOneApuHeapInitializationSettings, 0x0008);
		}

		// struct FAkXboxOneAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkXboxOneAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneAdvancedInitializationSettings, MaximumNumberOfXMAVoices, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneAdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneAdvancedInitializationSettings, UnknownData_OMKX, 0x003B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXboxOneAdvancedInitializationSettings, 0x003C);
		}

		// struct FAkXSXApuHeapInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkXSXApuHeapInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXApuHeapInitializationSettings, CachedSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXApuHeapInitializationSettings, NonCachedSize, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXSXApuHeapInitializationSettings, 0x0008);
		}

		// struct FAkXSXAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkXSXAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXAdvancedInitializationSettings, MaximumNumberOfXMAVoices, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXAdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXAdvancedInitializationSettings, UnknownData_LW3Q, 0x003B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXSXAdvancedInitializationSettings, 0x003C);
		}

		// struct FAkAudioEventTrackKey
		TEST_METHOD(ScriptStruct__AkAudio__AkAudioEventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, UnknownData_GC7Q, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, AkAudioEvent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, EventName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAudioEventTrackKey, 0x0020);
		}

		// struct FMovieSceneAkAudioEventTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneAkAudioEventTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAkAudioEventTemplate, Section, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAkAudioEventTemplate, 0x0028);
		}

		// struct FMovieSceneAkAudioRTPCTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneAkAudioRTPCTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAkAudioRTPCTemplate, Section, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAkAudioRTPCTemplate, 0x0028);
		}

		// struct FMovieSceneTangentDataSerializationHelper
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneTangentDataSerializationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, TangentWeightMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, UnknownData_5C02, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, ArriveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, LeaveTangentWeight, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentDataSerializationHelper, 0x0014);
		}

		// struct FMovieSceneFloatValueSerializationHelper
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneFloatValueSerializationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, InterpMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, TangentMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, UnknownData_6PY2, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, Tangent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValueSerializationHelper, 0x001C);
		}

		// struct FMovieSceneFloatChannelSerializationHelper
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneFloatChannelSerializationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, PreInfinityExtrap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, PostInfinityExtrap, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, UnknownData_8V1P, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, Values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, bHasDefaultValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, UnknownData_SB30, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannelSerializationHelper, 0x0030);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_V7AB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_OAHR, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_I6EY, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0028);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_L14N, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0030);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, Rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FVector_NetQuantize100 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, UnknownData_D1DS, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, Index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_GGFD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0030);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0020);
		}

		// struct FLevelStreamingWrapper
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingWrapper, StreamingLevel, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingWrapper, 0x0008);
		}

		// struct FStreamingLevelsToConsider
		TEST_METHOD(ScriptStruct__Engine__StreamingLevelsToConsider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, StreamingLevels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, UnknownData_32MZ, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingLevelsToConsider, 0x0028);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_OYPR, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, GameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0078);
		}

		// struct FPSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_L6KR, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// struct FPSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_V1CK, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// struct FWorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_CZ7Z, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// struct FLightingChannels
		TEST_METHOD(ScriptStruct__Engine__LightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingChannels, 0x0001);
		}

		// struct FCustomPrimitiveData
		TEST_METHOD(ScriptStruct__Engine__CustomPrimitiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPrimitiveData, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomPrimitiveData, 0x0010);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_WBS2, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x000C);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_YQTC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_XQ01, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FBodyInstance
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_Y7HA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_2OOD, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_CAWF, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_HFHZ, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_WPDB, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_UOO0, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_I0L1, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_4TGJ, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0110);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_KP1Q, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0028);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_OPSE, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UnknownData_UI0V, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_XCW2, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FPerPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__PerPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformFloat, 0x0004);
		}

		// struct FSkeletalMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, UnknownData_OHJ0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdTangentNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, MorphThresholdPosition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshBuildSettings, 0x0014);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TerminationCriterion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_6SG5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfVertPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfTriangles, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfVerts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_0GWM, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_GXY7, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, VolumeImportance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_6MOU, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x003C);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_CINY, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0010);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BuildSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToPrioritize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, WeightOfPrioritization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_CYGI, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePoseOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SkinCacheUsage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_HG64, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x00B8);
		}

		// struct FPerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__PerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformInt, 0x0004);
		}

		// struct FPerPlatformBool
		TEST_METHOD(ScriptStruct__Engine__PerPlatformBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformBool, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformBool, 0x0001);
		}

		// struct FSkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x0008);
		}

		// struct FSkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_ZEJS, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_SMXX, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0030);
		}

		// struct FSkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_WWCM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// struct FSkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_LX3D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// struct FSkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// struct FSkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// struct FSkinWeightProfileInfo
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfile, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, UnknownData_9Z9P, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfileFromLODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileInfo, 0x0010);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, MetaData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0068);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_E9ND, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_K29A, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0030);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_R6X4, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_BKQV, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_1A0D, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FBPComponentClassOverride
		TEST_METHOD(ScriptStruct__Engine__BPComponentClassOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPComponentClassOverride, 0x0010);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_P1AC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_N3UZ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FAnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_22RC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// struct FAnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// struct FAnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_OLTD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_UONQ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SlotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_4E6P, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Duration, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_RPTU, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_ON5S, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_4RSU, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_K243, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_KXL1, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00B8);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_HKDC, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_XTBO, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_L1PL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0060);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_M5IJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0068);
		}

		// struct FRealCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RealCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PreInfinityExtrap, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PostInfinityExtrap, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, UnknownData_3CMV, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRealCurve, 0x0070);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_25GE, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FRichCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0080);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0088);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_M78G, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_TQGA, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_YS7H, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00B0);
		}

		// struct FAttenuationSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AttenuationSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, UnknownData_KHC6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMin, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, ManualSubmixSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, CustomSubmixSendCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttenuationSubmixSendSettings, 0x00A8);
		}

		// struct FSoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_08SA, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, BinauralRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMethod, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_9GA4, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SubmixSendSettings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMax, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMin, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMax, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualPriorityAttenuation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_B3QF, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomPriorityAttenuationCurve, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x03A0);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_P1IX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// struct FChannelDefinition
		TEST_METHOD(ScriptStruct__Engine__ChannelDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, StaticChannelIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bTickOnCreate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bServerOpen, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bClientOpen, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialServer, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialClient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, UnknownData_5HY4, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChannelDefinition, 0x0028);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_JUT3, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FVector_NetQuantize10 : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_9UMY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_R61V, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x0038);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_ORB7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_GKBA, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_LPDA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_IKGO, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_SEJB, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0098);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_OH0S, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x00A0);
		}

		// struct FVector_NetQuantize : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FVector_NetQuantizeNormal : public FVector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FHitResult
		TEST_METHOD(ScriptStruct__Engine__HitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, UnknownData_6BEF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, ImpactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, PhysMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Actor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, Component, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, BoneName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitResult, MyBoneName, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitResult, 0x0088);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_TAB4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, HitResult, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x0094);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_E7JX, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0030);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_SGSA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x0090);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_Z47I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_WDNN, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_LN9K, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_1UPT, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_F8EA, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_WVXU, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_X4CX, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_HXGG, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasBackup, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_MGWU, 0x0315);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_O9I8, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasCurve, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMeterMask, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_SKFY, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionTemporalBlendWeight, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_H38L, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOSamplesPerPixel, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIType, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_L9GJ, 0x0459);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIMaxBounces, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGISamplesPerPixel, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurTargetFPS, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ReflectionsType, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_Z73M, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxRoughness, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxBounces, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsSamplesPerPixel, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsShadows, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, TranslucencyType, 0x0506);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_CNJL, 0x0507);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyMaxRoughness, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyRefractionRays, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencySamplesPerPixel, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyShadows, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_V3OW, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingMaxBounces, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingSamplesPerPixel, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_8EXW, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0540);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_DW08, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0018);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, Out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, StatName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_GKHY, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0010);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_SWHR, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x003C);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0010);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, Path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, Comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0018);
		}

		// struct FCachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, PlayerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_XER1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_RP80, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Color, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Actor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Material, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_W6KA, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0080);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_CZNT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FTireFrictionScalePair
		TEST_METHOD(ScriptStruct__Engine__TireFrictionScalePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, TireType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, UnknownData_7C8H, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireFrictionScalePair, 0x0010);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_AXKX, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_EOND, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_VR6W, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_6WV7, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x05D0);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, Timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_XYS2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x05E0);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_IBAW, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, PlayerState, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_OAWH, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x05F0);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, Enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_4WI2, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, Obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_2BX3, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, bApplyReverb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_JHA7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, Volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, bIsWorldSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_3UJ3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FBroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOuterBounds, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_PADB, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPOuterBounds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0040);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_YOW0, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0010);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0010);
		}

		// struct FMaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_IK58, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Index, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0010);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0024);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0030);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0028);
		}

		// struct FRuntimeVirtualTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__RuntimeVirtualTextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeVirtualTextureParameterValue, 0x0028);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_4BX7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0030);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0008);
		}

		// struct FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, bOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, UnknownData_YMU4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ExpressionGUID, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterBase, 0x0024);
		}

		// struct FStaticSwitchParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_5D1F, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x0028);
		}

		// struct FStaticComponentMaskParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x0027);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x0028);
		}

		// struct FStaticTerrainLayerWeightParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_CNY8, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x002C);
		}

		// struct FMaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// struct FStaticMaterialLayersParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, UnknownData_9RNL, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// struct FStaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// struct FMaterialCachedParameterEntry
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameterEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, NameHashes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ParameterInfos, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ExpressionGuids, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, Overrides, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameterEntry, 0x0040);
		}

		// struct FMaterialCachedParameters
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, Entries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, ScalarValues, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, VectorValues, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, TextureValues, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontValues, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontPageValues, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeVirtualTextureValues, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameters, 0x01A0);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, UnknownData_SBOH, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_FFDO, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bHasValidCookedData, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_K6LB, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0048);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_KWTQ, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_1RKO, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleAttackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_G44Y, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleReleaseTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VoiceStealReleaseTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0020);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_ZPPZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_NPR5, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x00B0);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SourceBusSendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_0PK6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_FGSR, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x00B0);
		}

		// struct FSoundWaveSpectralDataEntry
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, Magnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, NormalizedMagnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataEntry, 0x0008);
		}

		// struct FSoundWaveSpectralTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, Data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, TimeSec, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, UnknownData_S780, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralTimeData, 0x0018);
		}

		// struct FSoundWaveEnvelopeTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, TimeSec, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeTimeData, 0x0008);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, Time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_LCMY, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_E7GZ, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0014);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, Animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, Max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_99IU, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, Color, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x0018);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_ARJX, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_W4ES, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, LayerNodeIndices, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_TZJU, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0058);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, StateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x0008);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_RMY2, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_2JBK, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, UnknownData_Z0FR, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// struct FCachedPoseIndices
		TEST_METHOD(ScriptStruct__Engine__CachedPoseIndices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPoseIndices, OrderedSavedPoseNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPoseIndices, 0x0010);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourcePropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceSubPropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceArrayIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, bInstanceIsTarget, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyType, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_00AB, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestProperty, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestArrayIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, Size, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceStructSubProperty, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0080);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, ValueHandlerNodeProperty, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_GE8B, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0048);
		}

		// struct FGraphAssetPlayerInformation
		TEST_METHOD(ScriptStruct__Engine__GraphAssetPlayerInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphAssetPlayerInformation, PlayerNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphAssetPlayerInformation, 0x0010);
		}

		// struct FAnimGraphBlendOptions
		TEST_METHOD(ScriptStruct__Engine__AnimGraphBlendOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendOutTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGraphBlendOptions, 0x0008);
		}

		// struct FAnimBlueprintFunction
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Group, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, OutputPoseNodeIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_DFH7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNames, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNodeIndices, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_CL56, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, bImplemented, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_M06M, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunction, 0x0068);
		}

		// struct FAnimBlueprintFunctionData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunctionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, OutputPoseNodeProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputPoseNodeProperties, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputProperties, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunctionData, 0x0040);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_N25I, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x000C);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0018);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x0098);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_UXXL, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x000C);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_DTQB, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, StartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_JIYN, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, MetaData, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0058);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0018);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0040);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_QG58, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_7OLX, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, Priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_HPV3, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x000C);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_PLVX, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_A7AC, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_GYBT, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0088);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x001C);
		}

		// struct FPrimaryAssetRulesCustomOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesCustomOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterDirectory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, Rules, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, UnknownData_Q1BW, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesCustomOverride, 0x0038);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_FUAV, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_XQD2, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0020);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_GRKF, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceID, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FBandwidthTestItem
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestItem, Kilobyte, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestItem, 0x0010);
		}

		// struct FBandwidthTestGenerator
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, ReplicatedBuffers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, UnknownData_ZKXK, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestGenerator, 0x0020);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_W630, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0010);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0018);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_G2TA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0018);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0014);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, Direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, ItemName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0020);
		}

		// struct FActiveCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__ActiveCameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeInstance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeSource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveCameraShakeInfo, 0x0010);
		}

		// struct FPooledCameraShakes
		TEST_METHOD(ScriptStruct__Engine__PooledCameraShakes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPooledCameraShakes, PooledShakes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPooledCameraShakes, 0x0010);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_Q27B, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, X, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_XIA0, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_YHSR, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_J0VP, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0048);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x000C);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0018);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0010);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0018);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FDebugCameraControllerSettingsViewModeIndex
		TEST_METHOD(ScriptStruct__Engine__DebugCameraControllerSettingsViewModeIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_FLE8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, ViewModeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_B57N, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugCameraControllerSettingsViewModeIndex, 0x0010);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_IRGI, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_HHGI, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Level, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_EZU6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00B0);
		}

		// struct FMulticastRecordOptions
		TEST_METHOD(ScriptStruct__Engine__MulticastRecordOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, FuncPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bServerSkip, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bClientSkip, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, UnknownData_5N0A, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMulticastRecordOptions, 0x0018);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_951Z, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_6KQ7, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_WISY, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_FXJ8, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipLoadOptions, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DuplicateNonOptionalMips, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_E25M, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x0054);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_NFGJ, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FExponentialHeightFogData
		TEST_METHOD(ScriptStruct__Engine__ExponentialHeightFogData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightFalloff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExponentialHeightFogData, 0x000C);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_GBWM, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VerticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_S3U5, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_IM9K, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_WGI4, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_Y7W8, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_P94K, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_NOFO, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_RV00, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00B0);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_ESLF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, Curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0090);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, Amplitude, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x0110);
		}

		// struct FHLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_1G77, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, Key, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0030);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0020);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0078);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_U3G9, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_JML6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0018);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x0014);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_J33E, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0028);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_Y42D, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_ONPW, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_ZE6M, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0038);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_90N3, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x0018);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_3T8L, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0028);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, UnknownData_FSDR, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, Key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0028);
		}

		// struct FInputActionSpeechMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionSpeechMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, SpeechKeyword, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionSpeechMapping, 0x0010);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_0BGP, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0010);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_QIN5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_D0RJ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, StartTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_ZVDS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_1C2X, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_DTND, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TransitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0014);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x000C);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x000C);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x000C);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x000C);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x000C);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x000C);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0010);
		}

		// struct FShadingModelMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ShadingModelMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShadingModelMaterialInput, 0x000C);
		}

		// struct FVirtualTextureBuildSettings
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileBorderSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressCrunch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressZlib, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, UnknownData_D7Y7, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureBuildSettings, 0x000C);
		}

		// struct FEquirectProps
		TEST_METHOD(ScriptStruct__Engine__EquirectProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftUVRect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightUVRect, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightBias, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquirectProps, 0x0048);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SurfaceAlbedo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, WorldUnitScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, bEnableBurley, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, UnknownData_9KJR, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, TransmissionTintColor, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x008C);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0014);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_CSL6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0040);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_GOW6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0040);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_AVT4, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0040);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_03H9, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PlayRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_R8UC, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x0098);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_1HL8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_EH8R, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0018);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0028);
		}

		// struct FTTPropertyTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTPropertyTrack, PropertyName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTPropertyTrack, 0x0020);
		}

		// struct FTTFloatTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0028);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_12VS, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TangentTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x0088);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00A8);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_GZPU, 0x009F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00A0);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_Z8UB, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x0160);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Values, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_05IS, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0020);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0020);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0020);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_2415, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_GTTK, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x000C);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_Y96Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_DKAZ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_TV65, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_F0G1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, Data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_UPXX, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0018);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x0008);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, Data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, ActionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_SVI3, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0010);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_NZFG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, ArrayReplicationKey, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_PKN3, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, DeltaFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_Q39J, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x0108);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_8WOX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0010);
		}

		// struct FInputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, Max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// struct FInputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_MOFH, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_RVUZ, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_JDMY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_J2B6, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0030);
		}

		// struct FInputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_TES2, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0048);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_F1PT, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_5XWY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_OUG3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_FQO5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x06E0);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_7UB8, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_YWE1, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0030);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x000C);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_RXET, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0038);
		}

		// struct FSolverIterations
		TEST_METHOD(ScriptStruct__Engine__SolverIterations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverIterations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverPushOutIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointPushOutIterations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionPushOutIterations, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverIterations, 0x0018);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Group, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0030);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_3F73, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x000C);
		}

		// struct FActorComponentDuplicatedObjectData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentDuplicatedObjectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentDuplicatedObjectData, UnknownData_AKK7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentDuplicatedObjectData, 0x0010);
		}

		// struct FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_E513, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentCreationMethod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_H75H, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTypeSerializedIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SavedProperties, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, DuplicatedObjects, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedNames, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentInstanceData, 0x0058);
		}

		// struct FSceneComponentInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SceneComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneComponentInstanceData, AttachedInstanceComponents, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneComponentInstanceData, 0x00A8);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_4ZCD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, Name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_UQRQ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_47DZ, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, Radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, X, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, Z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_0J31, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, Length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, IndexData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_5I2Y, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_DPIS, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00B0);
		}

		// struct FKTaperedCapsuleElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_E00U, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_DMIP, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_6Z2Q, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x000C);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_YOO9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0070);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_76Z0, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x0014);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_M2H9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0078);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_9BYU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, Time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_T48I, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_FPU6, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, Length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_0NQV, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0010);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_UCO5, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x000C);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Name, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0014);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x000C);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_6V4U, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_KIPT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_7BS7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FStateMachineStateDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineStateDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineStateDebugData, UnknownData_2DP2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineStateDebugData, 0x0010);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FAnimationErrorStats
		TEST_METHOD(ScriptStruct__Engine__AnimationErrorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationErrorStats, UnknownData_J5GE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationErrorStats, 0x0010);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x0198);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x04E0);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_7EP9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_70HZ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x0040);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_ILIG, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, ItemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_JARV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_IAVS, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, LifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_8BJ5, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_GPUP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_4AOA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_LRHJ, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PlayRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, Blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_WVDP, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_3S2Q, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01B0);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_RXUV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_PVU3, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBiasClamp, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_XFJA, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x00D0);
		}

		// struct FAnimNode_CustomProperty : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_CustomProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, SourcePropertyNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, DestPropertyNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, TargetInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, UnknownData_7JGP, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CustomProperty, 0x0058);
		}

		// struct FAnimNode_Inertialization : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Inertialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, UnknownData_J3T8, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Inertialization, 0x0070);
		}

		// struct FInertializationPoseDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationPoseDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPoseDiff, UnknownData_9Q7G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPoseDiff, 0x0028);
		}

		// struct FInertializationCurveDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationCurveDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationCurveDiff, UnknownData_1IDN, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationCurveDiff, 0x0008);
		}

		// struct FInertializationBoneDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationBoneDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationBoneDiff, UnknownData_BSRF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationBoneDiff, 0x003C);
		}

		// struct FInertializationPose
		TEST_METHOD(ScriptStruct__Engine__InertializationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPose, UnknownData_7YV2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPose, 0x0090);
		}

		// struct FAnimNode_LinkedAnimGraph : public FAnimNode_CustomProperty
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoseNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InstanceClass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, Tag, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_F34U, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_C6JI, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimGraph, 0x00A0);
		}

		// struct FAnimNode_LinkedAnimLayer : public FAnimNode_LinkedAnimGraph
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Interface, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Layer, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimLayer, 0x00B0);
		}

		// struct FAnimNode_LinkedInputPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedInputPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Graph, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, InputPose, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, UnknownData_BRJM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedInputPose, 0x0078);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_F9OE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x00B8);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, Sequence, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_2TBC, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0078);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_FT40, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00B0);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_R9GP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_PZMT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_2V6M, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_5570, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_4W5F, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_REI5, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x0058);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_OR2I, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0028);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0028);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0020);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0020);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0018);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_3AD1, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x0830);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_OUJ1, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0030);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_47I3, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0010);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0028);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_WRHF, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0038);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_3JC4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeInstanceData, UnknownData_M3E7, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeInstanceData, 0x0150);
		}

		// struct FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEffectParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEffectParameters, UnknownData_FWZB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEffectParameters, 0x0008);
		}

		// struct FAudioReverbEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioReverbEffect, UnknownData_SQ7Z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioReverbEffect, 0x0048);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_NV0C, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_U8J1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0030);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_8E5L, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x001C);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_VSRZ, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0058);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0018);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, Category, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_FO2N, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00D0);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_5Z1M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_G82U, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_WOYH, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_AYOO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_G1OH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_VLM4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_I829, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_I3O1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_S3MS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// struct FBookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_X0YP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_FLIG, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0024);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_TAT8, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x001C);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_DQEP, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0018);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_EBT8, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x001C);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_762K, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_T61Z, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FChildActorAttachedActorInfo
		TEST_METHOD(ScriptStruct__Engine__ChildActorAttachedActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, SocketName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, RelativeTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorAttachedActorInfo, 0x0040);
		}

		// struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ChildActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorClass, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, AttachedActors, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, UnknownData_QKHO, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorComponentInstanceData, 0x00D8);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_G6AH, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_ZOFP, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_L4SL, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_ND4R, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_ZBE8, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_SMDC, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_1F3L, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_FY5S, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_JVX5, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_PE4B, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x0104);
		}

		// struct FConstraintInstance
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_Z9HB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_KJDB, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_NAMS, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01B8);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x0208);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x000C);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0018);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0010);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_T2AF, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0020);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0030);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0048);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_54EO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SearchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, DisplayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_46GP, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FURL
		TEST_METHOD(ScriptStruct__Engine__URL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Valid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FURL, Portal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FURL, 0x0068);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_VIPZ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, Tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_92Z9, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LODIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0010);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_H4BO, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FWorldContext
		TEST_METHOD(ScriptStruct__Engine__WorldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_Y0J6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastURL, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LastRemoteURL, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingNetGame, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PackagesToFullyLoad, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_OZPO, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, LoadedLevelsForPendingMapChange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_YRKU, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ObjectReferencers, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, PendingLevelStreamingStatusUpdates, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, GameViewport, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, OwningGameInstance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, ActiveNetDrivers, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldContext, UnknownData_NRG0, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldContext, 0x0280);
		}

		// struct FOverlapUpdateInfo
		TEST_METHOD(ScriptStruct__Engine__OverlapUpdateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapUpdateInfo, bDoNotifies, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapUpdateInfo, UnknownData_OPLM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapUpdateInfo, UpdateComponent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapUpdateInfo, 0x0010);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_O9I7, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_NIUZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_TRAX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_LUN0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x0008);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, OtherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, PathToComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_CHE6, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0028);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x0008);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_4Q1O, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00A8);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_HMRO, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_2WG8, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_941M, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_69VG, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_KOR8, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x0088);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x000C);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0018);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, Distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, Component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_LCQR, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_IUZ2, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_GEPM, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_VER2, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_A9X1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_MNUG, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, ParticleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_OJEM, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0028);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_PYF5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_ASIT, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FMaterialShadingModelField
		TEST_METHOD(ScriptStruct__Engine__MaterialShadingModelField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialShadingModelField, ShadingModelField, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialShadingModelField, 0x0002);
		}

		// struct FForceFeedbackParameters
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, Tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bLooping, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bIgnoreTimeDilation, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bPlayWhilePaused, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, UnknownData_AESH, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackParameters, 0x000C);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, HitResult, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, UnknownData_UQ2G, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00B8);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, LaunchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_NUKF, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_Q8QZ, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_DJL1, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_VJF8, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_VYKU, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// struct FClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_NF9W, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_G60J, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FInstancedStaticMeshLightMapInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshLightMapInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshLightMapInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, StaticMesh, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, CachedStaticLighting, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMCustomData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_VO3H, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, InstancingRandomSeed, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_6513, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshComponentInstanceData, 0x0140);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_D32C, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0080);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, Rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_AZZK, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_LLDD, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x000C);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, Points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, Duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_IY0C, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_5G1P, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_LJZ1, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_AZG2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_IFSR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_MUC8, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_HG13, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x0060);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_M5Y3, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_VL6J, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0038);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_FOHE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_TC0A, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x0127);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_ITVI, 0x012A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x012C);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_C1KR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, Texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_TQ1W, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_ZXJ4, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, Transform, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, LightGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, PreviewShadowMapChannel, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_S6BY, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedLightInstanceData, 0x0100);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, RemainingLifeTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_26BQ, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, End, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, RemainingLifeTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_TAL8, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, UnknownData_M7OF, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_Q1V3, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, Material, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_JP04, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_BO0L, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FMaterialCachedExpressionData
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedExpressionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, Parameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ReferencedTextures, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, FunctionInfos, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ParameterCollectionInfos, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayers, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayerBlends, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, GrassTypes, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DynamicParameterNames, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, QualityLevelsUsed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, UnknownData_A82R, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedExpressionData, 0x0228);
		}

		// struct FParameterChannelNames
		TEST_METHOD(ScriptStruct__Engine__ParameterChannelNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterChannelNames, 0x0060);
		}

		// struct FCustomDefine
		TEST_METHOD(ScriptStruct__Engine__CustomDefine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomDefine, 0x0020);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, Input, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_SFZC, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x001C);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x0008);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0020);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, Input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_PMFV, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0030);
		}

		// struct FScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_CWF8, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0058);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, ID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x0018);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x0028);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x001C);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, Actors, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0018);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, Timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_CQUC, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_FHXN, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ISMComponentToUse, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentVertices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TerminationCriterion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_I328, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x000C);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0078);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, Color, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavDataClass, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0078);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_K0FP, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_TKKE, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_0YOZ, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, Direction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_JEJO, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_33PZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0030);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0060);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Left, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0048);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMaxSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMinSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLoss, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktJitter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0034);
		}

		// struct FNetworkEmulationProfileDescription
		TEST_METHOD(ScriptStruct__Engine__NetworkEmulationProfileDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, Tooltip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetworkEmulationProfileDescription, 0x0020);
		}

		// struct FNodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_3TR2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_N3E2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_ZE3W, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_THLL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_R0P1, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0028);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, BoneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0014);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_FPLR, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_27EC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_QB1O, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_NDE0, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0048);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x000C);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_IMBZ, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_FSOW, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_42GB, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_377C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_OYTN, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0020);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_I9AQ, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_YCMY, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_MPIP, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_DUCE, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_ZZVW, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_BZXA, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x0280);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, Material, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0010);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_1DIS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FParticleSystemWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemWorldManagerTickFunction, UnknownData_MVAD, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemWorldManagerTickFunction, 0x0030);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_YSQL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_6VIA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FFreezablePerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__FreezablePerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreezablePerPlatformInt, UnknownData_IDG4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreezablePerPlatformInt, 0x0004);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_API6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0024);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x002C);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x010C);
		}

		// struct FChaosPhysicsSettings
		TEST_METHOD(ScriptStruct__Engine__ChaosPhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DefaultThreadingModel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadTickMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadBufferMode, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsSettings, 0x0003);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_AXVE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, Name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x000C);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_L18A, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_DQYC, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, Filename, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_EA49, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x0014);
		}

		// struct FUpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LODIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_SRRU, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0010);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_0PJG, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0030);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_0XV6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_19RP, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0038);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0028);
		}

		// struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_RCFC, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, ComponentTransform, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, VisibilityId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_HDY3, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, LODParent, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentInstanceData, 0x00F0);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, Description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0038);
		}

		// struct FCompressedRichCurve
		TEST_METHOD(ScriptStruct__Engine__CompressedRichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedRichCurve, UnknownData_BTLY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedRichCurve, 0x0018);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_FWXT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0010);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0028);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_7AWA, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0060);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, Mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_UZXE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_SOSD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_LR6J, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, StartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Duration, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Settings, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_D4TS, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_8KGS, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_AKTV, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_8JZO, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_VJL8, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_078O, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_ARG8, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_ZJA6, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_155N, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_5UFO, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_2G37, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, BiasCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MeterMask, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_8VCZ, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x0040);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_SNYX, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_3JS3, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_EXZ3, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_6UX9, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_2390, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_9W0A, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FSimpleCurveKey
		TEST_METHOD(ScriptStruct__Engine__SimpleCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurveKey, 0x0008);
		}

		// struct FSimpleCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__SimpleCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, InterpMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, UnknownData_MJF8, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurve, 0x0088);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_J0EM, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_FMJ0, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0078);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_7JE0, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_2ONP, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0058);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_EILO, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x0014);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_PRVU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0030);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_D6TI, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0030);
		}

		// struct FBoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_BC5N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x000C);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_HAIE, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BonesToPrioritize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, WeightOfPrioritization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_RDGM, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BakePose, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_6WK2, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0080);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0010);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0018);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x003C);
		}

		// struct FTentDistribution
		TEST_METHOD(ScriptStruct__Engine__TentDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipAltitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, Width, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTentDistribution, 0x000C);
		}

		// struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedSkyLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, LightGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, AverageBrightness, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, UnknownData_4R1I, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedSkyLightInstanceData, 0x0160);
		}

		// struct FSkylightCubemapCacheEntry
		TEST_METHOD(ScriptStruct__Engine__SkylightCubemapCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkylightCubemapCacheEntry, Cubemap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkylightCubemapCacheEntry, UnknownData_1672, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkylightCubemapCacheEntry, 0x0010);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_3TVH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0070);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_R9CY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0020);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LowPassFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, AttenuationDistanceScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_KIC4, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LoadingBehavior, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_E5C2, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, DefaultSubmix, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_RX07, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x0058);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_7L1T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_9B28, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_D8NN, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_P77Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_0UG4, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, LowPassFilterFrequency, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_3FY0, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_XVO6, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0020);
		}

		// struct FAudioEQEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_DK44, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0040);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, Volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_DH32, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0020);
		}

		// struct FSoundWaveEnvelopeDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, Envelope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, PlaybackTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, SoundWave, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeDataPerSound, 0x0010);
		}

		// struct FSoundWaveSpectralData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, Magnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, NormalizedMagnitude, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralData, 0x000C);
		}

		// struct FSoundWaveSpectralDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SpectralData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, PlaybackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, UnknownData_VL01, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SoundWave, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataPerSound, 0x0020);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_05T0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// struct FSplineInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, bSplineHasBeenEdited, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, UnknownData_9QFR, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurves, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurvesPreUCS, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineInstanceData, 0x0180);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, InputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, Type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_B2LN, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FSplineMeshInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartPos, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndPos, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartTangent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndTangent, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshInstanceData, 0x00D8);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_Y2WI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_AKY6, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0030);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_CWAA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bForceOpaque, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, UnknownData_VCFQ, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_IRJ9, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_9TD1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_HNSR, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_IO1T, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, Normal, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0020);
		}

		// struct FStaticMeshVertexColorLODData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshVertexColorLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, PaintedVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, VertexBufferColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, LODIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, UnknownData_3Y3W, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshVertexColorLODData, 0x0028);
		}

		// struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StaticMesh, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, VertexColorLODs, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, CachedStaticLighting, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StreamingTextureData, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, UnknownData_AOUS, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentInstanceData, 0x0130);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_Y2W2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0088);
		}

		// struct FTextureFormatSettings
		TEST_METHOD(ScriptStruct__Engine__TextureFormatSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureFormatSettings, CompressionSettings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureFormatSettings, 0x0002);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_XFTT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0030);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_WIRZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0038);
		}

		// struct FTextureSourceBlock
		TEST_METHOD(ScriptStruct__Engine__TextureSourceBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, SizeY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumSlices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumMips, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSourceBlock, 0x0018);
		}

		// struct FStreamingRenderAssetPrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingRenderAssetPrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, RenderAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, UnknownData_2W5G, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingRenderAssetPrimitiveInfo, 0x0030);
		}

		// struct FTTLinearColorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0028);
		}

		// struct FTTVectorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0028);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_0RNR, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0068);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0010);
		}

		// struct FVirtualTextureSpacePoolConfig
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureSpacePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MinTileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MaxTileSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, Formats, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, SizeInMegabyte, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, bAllowSizeScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_754R, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureSpacePoolConfig, 0x0020);
		}

		// struct FVoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_F3TH, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0030);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_FEVM, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0030);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_3NJD, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_UZX0, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x004C);
		}

		// struct FAIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// struct FAIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Tag, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_OPJU, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_PXG8, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x003C);
		}

		// struct FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_J8UY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0020);
		}

		// struct FAIDataProviderTypedValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, UnknownData_Q1C6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0030);
		}

		// struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_7S9K, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0038);
		}

		// struct FAIDataProviderStructValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_DFIF, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0030);
		}

		// struct FActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, Target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_1EKW, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// struct FAISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_0TSK, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// struct FAISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_EIZH, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// struct FAITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_RFGF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, OtherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// struct FIntervalCountdown
		TEST_METHOD(ScriptStruct__AIModule__IntervalCountdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, Interval, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, UnknownData_NNE8, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntervalCountdown, 0x0008);
		}

		// struct FAIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, GoalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_YRRR, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// struct FBehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_XYT9, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// struct FBlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_S1WS, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0018);
		}

		// struct FCrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// struct FCrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// struct FEnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_7AM5, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x0178);
		}

		// struct FEnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, World, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_ABHK, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// struct FBlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_OG6Z, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_8FWN, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0028);
		}

		// struct FAIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_SSLG, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0038);
		}

		// struct FEQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_GZX2, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_XBM0, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0048);
		}

		// struct FEnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_WFZ4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, ItemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_8T65, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_4ZXB, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// struct FEnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_T7RA, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_6O3B, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// struct FEnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_Z511, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// struct FGenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// struct FPawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// struct FPawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_KDVI, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// struct FBTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_Y9L0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// struct FBTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// struct FEnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_EJD8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_C1Q8, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_R067, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0038);
		}

		// struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_AI8Z, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0038);
		}

		// struct FEnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_6JE6, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0010);
		}

		// struct FAIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_NTFQ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// struct FAINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_M215, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_QD3U, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// struct FAIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_Z5XT, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// struct FAITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_P3Q2, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// struct FDatasmithCameraFilmbackSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFilmbackSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorHeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFilmbackSettingsTemplate, 0x0008);
		}

		// struct FDatasmithAssetImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithAssetImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithAssetImportOptions, PackagePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithAssetImportOptions, 0x0008);
		}

		// struct FDatasmithStaticMeshImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMeshImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MinLightmapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MaxLightmapResolution, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bGenerateLightmapUVs, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bRemoveDegenerates, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMeshImportOptions, 0x0004);
		}

		// struct FDatasmithImportBaseOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithImportBaseOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, SceneHandling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeGeometry, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeMaterial, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeLight, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeCamera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeAnimation, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_5K1V, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, AssetOptions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, StaticMeshOptions, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithImportBaseOptions, 0x0014);
		}

		// struct FDatasmithReimportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithReimportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bUpdateActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bRespawnDeletedActors, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithReimportOptions, 0x0002);
		}

		// struct FDatasmithStaticParameterSetTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticParameterSetTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticParameterSetTemplate, StaticSwitchParameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticParameterSetTemplate, 0x0050);
		}

		// struct FDatasmithMeshSectionInfoTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoTemplate, MaterialIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoTemplate, 0x0004);
		}

		// struct FDatasmithMeshSectionInfoMapTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoMapTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoMapTemplate, Map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoMapTemplate, 0x0050);
		}

		// struct FDatasmithStaticMaterialTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialInterface, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMaterialTemplate, 0x0010);
		}

		// struct FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, ChordTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, MaxEdgeLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, NormalTolerance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, StitchingTechnique, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, UnknownData_1BU5, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithTessellationOptions, 0x0010);
		}

		// struct FDatasmithMeshBuildSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshBuildSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, UnknownData_1T7F, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, DstLightmapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshBuildSettingsTemplate, 0x0010);
		}

		// struct FDatasmithCameraLookatTrackingSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLookatTrackingSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, UnknownData_KLJW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, ActorToTrack, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLookatTrackingSettingsTemplate, 0x0030);
		}

		// struct FDatasmithCameraLensSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLensSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLensSettingsTemplate, MaxFStop, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLensSettingsTemplate, 0x0004);
		}

		// struct FDatasmithCameraFocusSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFocusSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, UnknownData_I6K9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, ManualFocusDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFocusSettingsTemplate, 0x0008);
		}

		// struct FDatasmithPostProcessSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithPostProcessSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_U2M4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_8WV6, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, WhiteTemp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, VignetteIntensity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, FilmWhitePoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, AutoExposureMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_E87P, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraISO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraShutterSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, DepthOfFieldFstop, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithPostProcessSettingsTemplate, 0x0040);
		}

		// struct FFunctionCaller
		TEST_METHOD(ScriptStruct__VariantManagerContent__FunctionCaller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionCaller, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionCaller, 0x0008);
		}

		// struct FCapturedPropSegment
		TEST_METHOD(ScriptStruct__VariantManagerContent__CapturedPropSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, UnknownData_ZCJZ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, ComponentName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPropSegment, 0x0028);
		}

		// struct FNiagaraTypeDefinition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, ClassStructOrEnum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnderlyingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnknownData_BSGW, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinition, 0x0010);
		}

		// struct FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, TypeDef, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableBase, 0x0018);
		}

		// struct FNiagaraVariable : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, VarData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariable, 0x0028);
		}

		// struct FNiagaraVariableWithOffset : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableWithOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, Offset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, UnknownData_SU2E, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableWithOffset, 0x0020);
		}

		// struct FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_H68K, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, Owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, SortedParameterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, ParameterData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, DataInterfaces, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UObjects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_K0FD, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterStore, 0x00B8);
		}

		// struct FNiagaraUserRedirectionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserRedirectionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserRedirectionParameterStore, UserParameterRedirects, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserRedirectionParameterStore, 0x0108);
		}

		// struct FNCPoolElement
		TEST_METHOD(ScriptStruct__Niagara__NCPoolElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, UnknownData_WAXT, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPoolElement, 0x0010);
		}

		// struct FNCPool
		TEST_METHOD(ScriptStruct__Niagara__NCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, UnknownData_6VXW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPool, 0x0038);
		}

		// struct FNiagaraUserParameterBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserParameterBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserParameterBinding, Parameter, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserParameterBinding, 0x0028);
		}

		// struct FNDIStaticMeshSectionFilter
		TEST_METHOD(ScriptStruct__Niagara__NDIStaticMeshSectionFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNDIStaticMeshSectionFilter, AllowedMaterialSlots, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNDIStaticMeshSectionFilter, 0x0010);
		}

		// struct FNiagaraDeviceProfileStateEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDeviceProfileStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, QualityLevelMask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, SetQualityLevelMask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDeviceProfileStateEntry, 0x0010);
		}

		// struct FNiagaraPlatformSet
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, QualityLevelMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_2N76, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, DeviceProfileStates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_0OQO, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSet, 0x0020);
		}

		// struct FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_1KYC, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxTimeWithoutRender, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettings, 0x0030);
		}

		// struct FNiagaraSystemScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, UnknownData_MTRI, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, SpawnCountScale, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettings, 0x0028);
		}

		// struct FNiagaraEmitterScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettingsArray, Settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraEventReceiverProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventReceiverProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEventGenerator, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEmitter, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventReceiverProperties, 0x0018);
		}

		// struct FNiagaraTypeLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentByteOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentRegisterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentByteOffsets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentRegisterOffsets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeLayoutInfo, 0x0040);
		}

		// struct FNiagaraVariableLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, FloatComponentStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, Int32ComponentStart, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, LayoutInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableLayoutInfo, 0x0048);
		}

		// struct FNiagaraDataSetID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, UnknownData_HLGU, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetID, 0x000C);
		}

		// struct FNiagaraDataSetCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, Variables, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, VariableLayouts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalFloatComponents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalInt32Components, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_AYWV, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, ID, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, SimTarget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_VPBT, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetCompiledData, 0x0040);
		}

		// struct FNiagaraEventGeneratorProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventGeneratorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, MaxEventsPerFrame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, ID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, UnknownData_NUV3, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, DataSetCompiledData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventGeneratorProperties, 0x0050);
		}

		// struct FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, Script, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventReceivers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventGenerators, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScriptProperties, 0x0028);
		}

		// struct FNiagaraDetailsLevelScaleOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDetailsLevelScaleOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Low, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Medium, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, High, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Epic, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Cine, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDetailsLevelScaleOverrides, 0x0014);
		}

		// struct FNiagaraEmitterScalabilityOverride : public FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverride, UnknownData_7S6V, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverride, 0x0030);
		}

		// struct FNiagaraEmitterScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraEventScriptProperties : public FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, ExecutionMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_ORF1, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SpawnNumber, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MaxEventsPerFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEmitterID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEventName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, bRandomSpawnNumber, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_0041, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MinSpawnNumber, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_XF06, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventScriptProperties, 0x0058);
		}

		// struct FNiagaraMeshMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMeshMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, ExplicitMat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, UserParamBinding, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMeshMaterialOverride, 0x0030);
		}

		// struct FNiagaraScriptExecutionPaddingInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionPaddingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestOffset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestSize, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionPaddingInfo, 0x0008);
		}

		// struct FNiagaraScriptExecutionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, ParameterSize, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddedParameterSize, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddingInfo, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, UnknownData_LPOP, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionParameterStore, 0x00D8);
		}

		// struct FNiagaraVMExecutableDataId
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableDataId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, CompilerVersionID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_I112, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageTypeID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_S0UG, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptCompileHash, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableDataId, 0x0048);
		}

		// struct FNiagaraParameterDataSetBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, ParameterOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, DataSetComponentOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBinding, 0x0008);
		}

		// struct FNiagaraParameterDataSetBindingCollection
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBindingCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, FloatOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, Int32Offsets, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBindingCollection, 0x0020);
		}

		// struct FNiagaraEmitterCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, SpawnAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnIntervalVar, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInterpSpawnStartDTVar, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnGroupVar, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterAgeVar, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterRandomSeedVar, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterTotalSpawnedParticlesVar, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, DataSetCompiledData, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterCompiledData, 0x0140);
		}

		// struct FNiagaraInputConditionMetadata
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInputConditionMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, TargetValues, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInputConditionMetadata, 0x0018);
		}

		// struct FNiagaraVariableMetaData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CategoryName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAdvancedDisplay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_08ET, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditorSortPriority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bInlineEditConditionToggle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_VFJA, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditCondition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, VisibleCondition, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, PropertyMetaData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ScopeName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Usage, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_HXWQ, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bIsStaticSwitch, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_FCHD, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, StaticSwitchDefaultValue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAddedToNodeGraphDeepCopy, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bOutputIsPersistent, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_AOSX, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CachedNamespacelessVariableName, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bCreatedInSystemEditor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bUseLegacyNameString, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_NUI4, 0x00E2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableMetaData, 0x00E8);
		}

		// struct FNiagaraParameterScopeInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterScopeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, Scope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_0K7U, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_S0EW, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, NamespaceString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterScopeInfo, 0x0018);
		}

		// struct FNiagaraCompileHashVisitorDebugInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCompileHashVisitorDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyValues, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHashVisitorDebugInfo, 0x0030);
		}

		// struct FNiagaraID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, Index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, AcquireTag, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraID, 0x0008);
		}

		// struct FNiagaraSpawnInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, InterpStartDt, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, IntervalDt, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, SpawnGroup, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSpawnInfo, 0x0010);
		}

		// struct FNiagaraMatrix
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMatrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMatrix, 0x0040);
		}

		// struct FNiagaraTestStructInner
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTestStructInner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStructInner, InnerVector1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStructInner, InnerVector2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTestStructInner, 0x0018);
		}

		// struct FNiagaraTestStruct
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, Vector1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, Vector2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, InnerStruct1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, InnerStruct2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTestStruct, 0x0048);
		}

		// struct FNiagaraParameterMap
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterMap, UnknownData_CKXD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterMap, 0x0001);
		}

		// struct FNiagaraNumeric
		TEST_METHOD(ScriptStruct__Niagara__NiagaraNumeric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraNumeric, UnknownData_NVPI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraNumeric, 0x0001);
		}

		// struct FNiagaraBool
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBool, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBool, 0x0004);
		}

		// struct FNiagaraInt32
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInt32, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInt32, 0x0004);
		}

		// struct FNiagaraFloat
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFloat, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFloat, 0x0004);
		}

		// struct FNiagaraVariant
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, DataInterface, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Bytes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, CurrentMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_1WGJ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_0O79, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariant, 0x0028);
		}

		// struct FNiagaraWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Niagara__NiagaraWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraWorldManagerTickFunction, UnknownData_5GVF, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraWorldManagerTickFunction, 0x0030);
		}

		// struct FMovieSceneNiagaraParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraParameterSectionTemplate, Parameter, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraParameterSectionTemplate, 0x0048);
		}

		// struct FMovieSceneNiagaraBoolParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraBoolParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, BoolChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneNiagaraColorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraColorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, RedChannel, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, GreenChannel, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, BlueChannel, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, AlphaChannel, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraColorParameterSectionTemplate, 0x02C8);
		}

		// struct FMovieSceneNiagaraFloatParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraFloatParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, FloatChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, 0x00E8);
		}

		// struct FMovieSceneNiagaraIntegerParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraIntegerParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, IntegerChannel, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneNiagaraSystemTrackImplementation : public FMovieSceneTrackImplementation
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackImplementation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartBehavior, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_TXPY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEvaluateBehavior, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_YDMU, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndBehavior, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_S7ST, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, AgeUpdateMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_G38N, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackImplementation, 0x0028);
		}

		// struct FMovieSceneNiagaraSystemTrackTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackTemplate, 0x0020);
		}

		// struct FMovieSceneNiagaraVectorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraVectorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, VectorChannels, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, ChannelsUsed, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, UnknownData_EF5S, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, 0x02D0);
		}

		// struct FNiagaraRandInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRandInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRandInfo, 0x000C);
		}

		// struct FNiagaraScriptVariableBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptVariableBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptVariableBinding, Name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptVariableBinding, 0x0008);
		}

		// struct FNiagaraVariableDataInterfaceBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableDataInterfaceBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableDataInterfaceBinding, BoundVariable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableDataInterfaceBinding, 0x0028);
		}

		// struct FNiagaraVariableAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, BoundVariable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DataSetVariable, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DefaultValueIfNonExistent, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableAttributeBinding, 0x0078);
		}

		// struct FNiagaraVariableInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Variable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Definition, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, DataInterface, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableInfo, 0x0048);
		}

		// struct FNiagaraSystemUpdateContext
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemUpdateContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReInit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, SystemSimsToDestroy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, UnknownData_GN2E, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemUpdateContext, 0x0038);
		}

		// struct FVMFunctionSpecifier
		TEST_METHOD(ScriptStruct__Niagara__VMFunctionSpecifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMFunctionSpecifier, 0x0010);
		}

		// struct FVMExternalFunctionBindingInfo
		TEST_METHOD(ScriptStruct__Niagara__VMExternalFunctionBindingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, OwnerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, InputParamLocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, NumOutputs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, UnknownData_AV31, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, FunctionSpecifiers, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMExternalFunctionBindingInfo, 0x0038);
		}

		// struct FNiagaraStatScope
		TEST_METHOD(ScriptStruct__Niagara__NiagaraStatScope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FullName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FriendlyName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraStatScope, 0x0010);
		}

		// struct FNiagaraScriptDataInterfaceCompileInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceCompileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UserPtrIdx, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_R2WV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, Type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapRead, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapWrite, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, bIsPlaceholder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_AA6H, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceCompileInfo, 0x0038);
		}

		// struct FNiagaraScriptDataInterfaceInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, DataInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UserPtrIdx, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UnknownData_6YXS, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, Type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapRead, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapWrite, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceInfo, 0x0038);
		}

		// struct FNiagaraFunctionSignature
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFunctionSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Inputs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Outputs, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, OwnerName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, UnknownData_O0H3, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, FunctionSpecifiers, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFunctionSignature, 0x0088);
		}

		// struct FNiagaraScriptDataUsageInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataUsageInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataUsageInfo, bReadsAttributeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataUsageInfo, 0x0001);
		}

		// struct FNiagaraDataSetProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, UnknownData_MO6S, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, Variables, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetProperties, 0x0020);
		}

		// struct FBasicParticleData
		TEST_METHOD(ScriptStruct__Niagara__BasicParticleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Velocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasicParticleData, 0x001C);
		}

		// struct FMeshTriCoordinate
		TEST_METHOD(ScriptStruct__Niagara__MeshTriCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, Tri, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, BaryCoord, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriCoordinate, 0x0010);
		}

		// struct FNiagaraGraphViewSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraGraphViewSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Zoom, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, bIsValid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, UnknownData_ALSC, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraGraphViewSettings, 0x0010);
		}

		// struct FNiagaraSystemScalabilityOverride : public FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverride, UnknownData_VPMX, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverride, 0x0038);
		}

		// struct FNiagaraSystemScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraEmitterHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, IdName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, bIsEnabled, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_LC19, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Name, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_11J4, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Instance, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterHandle, 0x0030);
		}

		// struct FNiagaraCollisionEventPayload
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCollisionEventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, ParticleIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, PhysicalMaterialIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCollisionEventPayload, 0x002C);
		}

		// struct FNiagaraParameters
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameters, Parameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameters, 0x0010);
		}

		// struct FNiagaraBoundParameter
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBoundParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, SrcOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, DestOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBoundParameter, 0x0030);
		}

		// struct FNiagaraPlatformSetConflictEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, QualityLevelMask, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictEntry, 0x000C);
		}

		// struct FNiagaraPlatformSetConflictInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetAIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetBIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, Conflicts, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictInfo, 0x0018);
		}

		// struct FNiagaraScalabilityManager
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScalabilityManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, EffectType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, ManagedComponents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, UnknownData_PHYN, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScalabilityManager, 0x0040);
		}

		// struct FSimulationStageMetaData
		TEST_METHOD(ScriptStruct__Niagara__SimulationStageMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, IterationSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, UnknownData_SDD5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, OutputDestinations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MinStage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MaxStage, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulationStageMetaData, 0x0028);
		}

		// struct FNiagaraVMExecutableData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ByteCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, OptimizedByteCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumTempRegisters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumUserPtrs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Parameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, InternalParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataSetToParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Attributes, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataUsage, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_5USY, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataInterfaceInfo, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, CalledVMExternalFunctions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ReadDataSets, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, WriteDataSets, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, StatScopes, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DIParamInfo, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, LastCompileStatus, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_4RKH, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, SimulationStageMetaData, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableData, 0x0128);
		}

		// struct FNiagaraModuleDependency
		TEST_METHOD(ScriptStruct__Niagara__NiagaraModuleDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ScriptConstraint, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, UnknownData_ZH7C, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Description, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraModuleDependency, 0x0028);
		}

		// struct FNiagaraScriptHighlight
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptHighlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, Color, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, DisplayName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptHighlight, 0x0028);
		}

		// struct FNiagaraSystemCompileRequest
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_8DJY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, RootObjects, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_XPSX, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompileRequest, 0x0080);
		}

		// struct FEmitterCompiledScriptPair
		TEST_METHOD(ScriptStruct__Niagara__EmitterCompiledScriptPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterCompiledScriptPair, UnknownData_B6EE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterCompiledScriptPair, 0x0078);
		}

		// struct FNiagaraSystemCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, InstanceParamStore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, DataSetCompiledData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceParamsDataSetCompiledData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceParamsDataSetCompiledData, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceGlobalBinding, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceSystemBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceOwnerBinding, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceEmitterBindings, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceGlobalBinding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceSystemBinding, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceOwnerBinding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceEmitterBindings, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompiledData, 0x0258);
		}

		// struct FAppleImageUtilsImageConversionResult
		TEST_METHOD(ScriptStruct__AppleImageUtils__AppleImageUtilsImageConversionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, Error, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, ImageData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleImageUtilsImageConversionResult, 0x0020);
		}

		// struct FSynth1PatchCable
		TEST_METHOD(ScriptStruct__Synthesis__Synth1PatchCable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Destination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, UnknownData_N7YH, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth1PatchCable, 0x0008);
		}

		// struct FPatchId
		TEST_METHOD(ScriptStruct__Synthesis__PatchId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatchId, ID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPatchId, 0x0004);
		}

		// struct FSourceEffectBitCrusherSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedSampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedBits, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherSettings, 0x0008);
		}

		// struct FSourceEffectChorusSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Spread, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusSettings, 0x0018);
		}

		// struct FSourceEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_P2K5, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, Ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_1JBY, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FSourceEffectEnvelopeFollowerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEnvelopeFollowerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, AttackTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, ReleaseTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, PeakMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, bIsAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, UnknownData_VJSF, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEnvelopeFollowerSettings, 0x000C);
		}

		// struct FSourceEffectEQBand
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, UnknownData_SLC4, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQBand, 0x0010);
		}

		// struct FSourceEffectEQSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQSettings, 0x0010);
		}

		// struct FSourceEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterCircuit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_Q0IB, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, CutoffFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterSettings, 0x000C);
		}

		// struct FSourceEffectFoldbackDistortionSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFoldbackDistortionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, InputGainDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, ThresholdDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, OutputGainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFoldbackDistortionSettings, 0x000C);
		}

		// struct FSourceEffectMidSideSpreaderSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectMidSideSpreaderSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, InputMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_IAFC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, SpreadAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, OutputMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, bEqualPower, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_UMZ8, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectMidSideSpreaderSettings, 0x000C);
		}

		// struct FSourceEffectPannerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPannerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Spread, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Pan, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPannerSettings, 0x0008);
		}

		// struct FSourceEffectPhaserSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPhaserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, WetLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, LFOType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UseQuadraturePhase, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UnknownData_8BVQ, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPhaserSettings, 0x0010);
		}

		// struct FSourceEffectSimpleDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectSimpleDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, SpeedOfSound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DelayAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DryAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, WetAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, Feedback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, UnknownData_JIQH, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectSimpleDelaySettings, 0x0018);
		}

		// struct FSourceEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_6TPG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, WetLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectStereoDelaySettings, 0x0014);
		}

		// struct FSourceEffectWaveShaperSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectWaveShaperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, OutputGainDb, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectWaveShaperSettings, 0x0008);
		}

		// struct FSubmixEffectDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, DelayLength, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDelaySettings, 0x000C);
		}

		// struct FSubmixEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterAlgorithm, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, UnknownData_KENW, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFilterSettings, 0x000C);
		}

		// struct FSubmixEffectFlexiverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFlexiverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, PreDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, DecayTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, RoomDampening, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, Complexity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFlexiverbSettings, 0x0010);
		}

		// struct FTapDelayInfo
		TEST_METHOD(ScriptStruct__Synthesis__TapDelayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapLineMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, UnknownData_SQSS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, DelayLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, OutputChannel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, PanInDegrees, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapId, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTapDelayInfo, 0x0018);
		}

		// struct FSubmixEffectTapDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectTapDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, Taps, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectTapDelaySettings, 0x0018);
		}

		// struct FSynthKnobStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthKnobStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnob, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnobOverlay, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnob, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnobOverlay, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MinValueAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MaxValueAngle, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, KnobSize, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, UnknownData_TC7G, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthKnobStyle, 0x0238);
		}

		// struct FSynthSlateStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthSlateStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, SizeType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, ColorStyle, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, UnknownData_Q6UF, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthSlateStyle, 0x0010);
		}

		// struct FEpicSynth1Patch
		TEST_METHOD(ScriptStruct__Synthesis__EpicSynth1Patch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, UnknownData_THTR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchCables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEpicSynth1Patch, 0x0018);
		}

		// struct FModularSynthPreset : public FTableRowBase
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_6Z0Q, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_R5LH, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Gain, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Octave, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Semitones, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Cents, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1PulseWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Type, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_FCCL, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Gain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Octave, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Semitones, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Cents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2PulseWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Portamento, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_F3RK, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Spread, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Pan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Frequency, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Gain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Type, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Mode, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1PatchType, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_FDUN, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Frequency, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Gain, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Type, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Mode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2PatchType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_7H3R, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, GainDb, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, AttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, DecayTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, SustainGain, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ReleaseTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvPatchType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvBiasPatchType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_ITPV, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_9EAF, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDepth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeAttackTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDecayTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeSustainGain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeReleaseTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_NHK0, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterFrequency, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterAlgorithm, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_C3N5, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_74SS, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_GG9Z, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayFeedback, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayWetlevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayRatio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_32YP, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusDepth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFeedback, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFrequency, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_XGTZ, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Patches, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPreset, 0x00E0);
		}

		// struct FModularSynthPresetBankEntry
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPresetBankEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, PresetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, Preset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPresetBankEntry, 0x00F0);
		}

		// struct FSourceEffectRingModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectRingModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, ModulatorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_P0L7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Depth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, DryLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, WetLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectRingModulationSettings, 0x0014);
		}

		// struct FSubmixEffectConvolutionReverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectConvolutionReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, NormalizationVolumeDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bInvertRearChannelBleedPhase, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bSurroundRearChannelFlip, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_5A3S, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, ImpulseResponse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, AllowHArdwareAcceleration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_ZIGF, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectConvolutionReverbSettings, 0x0020);
		}

		// struct FSynth2DSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__Synth2DSliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalThumbImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledThumbImage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalBarImage, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledBarImage, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BackgroundImage, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BarThickness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, UnknownData_46G1, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth2DSliderStyle, 0x02B8);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_JQ8Y, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0028);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_1Z99, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_ICCA, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0028);
		}

		// struct FCachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_Y93T, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_22FC, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0028);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, Text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, UserName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_JPDJ, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_5GLO, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_MY7T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FSolverCollisionFilterSettings
		TEST_METHOD(ScriptStruct__ChaosSolvers__SolverCollisionFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, UnknownData_0PL9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinImpulse, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionFilterSettings, 0x0010);
		}

		// struct FSolverBreakingFilterSettings
		TEST_METHOD(ScriptStruct__ChaosSolvers__SolverBreakingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, UnknownData_J6S7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingFilterSettings, 0x0010);
		}

		// struct FSolverTrailingFilterSettings
		TEST_METHOD(ScriptStruct__ChaosSolvers__SolverTrailingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, UnknownData_ITPT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingFilterSettings, 0x0010);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_MRGW, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_CUR7, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00C8);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_INFY, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_URXV, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0128);
		}

		// struct FAnimNode_StateResult : public FAnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0030);
		}

		// struct FRotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0040);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_JXP2, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_J6TY, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, MaxDeltaTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_65O3, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0260);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0020);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, Curve, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_FDHB, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0138);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_I4NE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_H68A, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0040);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_ORWO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_YF3E, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0060);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_1ESU, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_MK24, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_8PIA, 0x01D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x01E0);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_SKWK, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_9JLN, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00C8);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_8OHO, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0930);
		}

		// struct FPositionHistory
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PositionHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Positions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Range, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, UnknownData_U08Z, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPositionHistory, 0x0030);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, Values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, ScaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_ZH6Q, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, DistanceMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, FunctionType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_0NQU, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x00A0);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x002C);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_X3J5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00A0);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_GALM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0038);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_H88I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x003C);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_Z1W4, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_Q6C2, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_KZUD, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x01B0);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_8M0Y, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0038);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Rotation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Scale, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_B7K0, 0x0102);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0108);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_HH7P, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_03G4, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0058);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_1R7I, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_P9Y0, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0050);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_ZS8T, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Rotation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Scale, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0100);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_SH0Q, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0078);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_N5XH, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x0098);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_TNBV, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x0090);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DistanceMethod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, FunctionType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_LHSS, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_2R90, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bIsHidden, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_8MRN, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00C0);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, SolverType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_LWHE, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Radius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_JZY6, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, NormalizeMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_WPAY, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMax, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x002C);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_4XQB, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_NKX4, 0x0127);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0128);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Mode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_MEO4, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x0090);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, Sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_ZMAV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0050);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_H421, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_SN1M, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0078);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0010);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_ZZJV, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0018);
		}

		// struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_IXSL, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x00D8);
		}

		// struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_USX0, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x01B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bForceDisableCollisionBetweenConstraintBodies, 0x01BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_GAKA, 0x01BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_4ZTA, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideSolverIterations, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_SKVA, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x0590);
		}

		// struct FAnimNode_RigidBody_Chaos : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody_Chaos)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverridePhysicsAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverrideWorldGravity, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ExternalForce, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ComponentLinearAccScale, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ComponentLinearVelScale, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ComponentAppliedLinearAccClamp, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, CachedBoundsScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, BaseBoneRef, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverlapChannel, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, SimulationSpace, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, bForceDisableCollisionBetweenConstraintBodies, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverrideSolverIterations, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, UnknownData_OI1T, 0x013C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody_Chaos, 0x0580);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_UL8O, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00A0);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, Multiplier, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_96TF, 0x00EE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x00F0);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, X, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Y, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Z, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PlayRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_NUWT, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, BlendSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_ESJI, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x00E0);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_E2EV, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x0185);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_6JTX, 0x0186);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x0188);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_TFUN, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_S5M4, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x0078);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, Sequence, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_FQW4, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_X31E, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0048);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_2XRF, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0048);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_I1OT, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_WWV5, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_XP3F, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0260);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0014);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_KI4Z, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_AU6O, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x01B0);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_KWXA, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_TPY9, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x0048);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_UIWX, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0024);
		}

		// struct FRotationRetargetingInfo
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationRetargetingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_9832, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, Target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, RotationComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_WU4R, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TwistAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bUseAbsoluteAngle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_BU6D, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMinimum, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMaximum, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMinimum, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMaximum, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingType, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_L316, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, CustomCurve, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bFlipEasing, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_EEB9, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingWeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_JWE2, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationRetargetingInfo, 0x0130);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_TZG4, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_64SM, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_FTY4, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_SD2V, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RetargetingSettings, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_JX8Z, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x0440);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_6XOS, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_YO3N, 0x00C6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00C8);
		}

		// struct FAngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x0028);
		}

		// struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x00E8);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_TEP5, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x0024);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_ZK39, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_ZKPK, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_HMOB, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0068);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, TransitionType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_H325, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_I836, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x0098);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_SP8I, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00A0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_KXAH, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00B0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_TQ5P, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00A0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_ZNFJ, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x00E8);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, Multiplier, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ParameterName, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_H3R0, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0118);
		}

		// struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_Q6RK, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RootBone, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_LHAT, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x0180);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_ZA9W, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x001C);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_9VEF, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0108);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_4D6S, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x00F0);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x00F8);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bUseAttachedParent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCurves, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_SE76, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x0140);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, UnknownData_ILSH, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0040);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_1FMV, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, RootBone, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_VE7W, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x0190);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_WGFA, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0120);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceScaleBlend, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_RHGN, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_PF20, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_Y1AZ, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00C0);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_ER3R, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x00F8);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_KZRL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_2309, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_VTEC, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, Filename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_9NFP, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_8KC4, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_OQ7O, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// struct FClothConstraintSetupNv
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeNv__ClothConstraintSetupNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetupNv, 0x0010);
		}

		// struct FARSharedWorldReplicationState
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSharedWorldReplicationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, PreviewImageOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, ARWorldOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSharedWorldReplicationState, 0x0008);
		}

		// struct FARTraceResult
		TEST_METHOD(ScriptStruct__AugmentedReality__ARTraceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, DistanceFromCamera, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TraceChannel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_X2W8, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, LocalToTrackingTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TrackedGeometry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_RKBI, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARTraceResult, 0x0060);
		}

		// struct FARSkeletonDefinition
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSkeletonDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, NumJoints, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, UnknownData_XE9A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, JointNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, ParentIndices, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSkeletonDefinition, 0x0028);
		}

		// struct FARPose3D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, IsJointTracked, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransformSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, UnknownData_MLVV, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose3D, 0x0050);
		}

		// struct FARPose2D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, JointLocations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, IsJointTracked, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose2D, 0x0048);
		}

		// struct FARVideoFormat
		TEST_METHOD(ScriptStruct__AugmentedReality__ARVideoFormat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, FPS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Width, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Height, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARVideoFormat, 0x000C);
		}

		// struct FARSessionStatus
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, AdditionalInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, Status, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, UnknownData_ILE9, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionStatus, 0x0018);
		}

		// struct FLG_StoredMeshInformation_ST
		TEST_METHOD(UserDefinedStruct__LG_StoredMeshInformation_ST__LG_StoredMeshInformation_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLG_StoredMeshInformation_ST, StaticMesh_3_89B283C24AF8B6575694FEB48FCD07FF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLG_StoredMeshInformation_ST, LightingInfo_11_D7C60C3F413526B1CECF33986603451F, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLG_StoredMeshInformation_ST, CustomTag_14_DC01FDC646FF8C1A59ADA2B409192127, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLG_StoredMeshInformation_ST, 0x0018);
		}

		// struct FDetailMesh_InstanceInfo_ST
		TEST_METHOD(UserDefinedStruct__DetailMesh_InstanceInfo_ST__DetailMesh_InstanceInfo_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_InstanceInfo_ST, InstanceName_4_F7FB857044A9F98CB06D30998B7158CA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_InstanceInfo_ST, DetailMesh_6_9A9E5FF0482D8CD46D468BBB156A6C68, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetailMesh_InstanceInfo_ST, 0x0018);
		}

		// struct FNiagaraCompileHash
		TEST_METHOD(ScriptStruct__NiagaraCore__NiagaraCompileHash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHash, DataHash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHash, 0x0010);
		}

		// struct FChaosPhysicsCollisionInfo
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosPhysicsCollisionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Normal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AccumulatedImpulse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Velocity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AngularVelocity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherAngularVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Mass, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherMass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, UnknownData_SQ1U, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsCollisionInfo, 0x0070);
		}

		// struct FChaosBreakEvent
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosBreakEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Velocity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, AngularVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Mass, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakEvent, 0x0030);
		}

		// struct FBreakEventCallbackWrapper
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__BreakEventCallbackWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreakEventCallbackWrapper, UnknownData_MCBD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBreakEventCallbackWrapper, 0x0040);
		}

		// struct FChaosDebugSubstepControl
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosDebugSubstepControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bPause, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bSubstep, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bStep, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDebugSubstepControl, 0x0003);
		}

		// struct FChaosHandlerSet
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosHandlerSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, UnknownData_TGLD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, ChaosHandlers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosHandlerSet, 0x0058);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0010);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_YMZA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FTransformNoScale
		TEST_METHOD(ScriptStruct__AnimationCore__TransformNoScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, UnknownData_6W3U, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, Rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformNoScale, 0x0020);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_ND9C, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_8NUU, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0028);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_S8MR, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_DCY5, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FTransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// struct FEulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, Scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// struct FFABRIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__FABRIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFABRIKChainLink, UnknownData_UUTT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFABRIKChainLink, 0x0038);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, Type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_NO4C, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_APGN, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_OCWT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_Y2Y1, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_VLXY, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_M5WX, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_CYRW, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FCCDIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__CCDIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCCDIKChainLink, UnknownData_NZAK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCCDIKChainLink, 0x0080);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_9CKJ, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_28VQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_JDRK, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_CRW3, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0050);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_3GXF, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0038);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_3SLI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_FG5S, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_HV44, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_1W8W, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0058);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, Name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FDetailMesh_ST
		TEST_METHOD(UserDefinedStruct__DetailMesh_ST__DetailMesh_ST)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_ST, StaticMesh_3_92F9378B43ED0EAAC048F58FCEFD2D4E, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_ST, InstanceNumber_5_26F671BB4E67930E8C8AB0815DC16B3E, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_ST, HasCollision__7_AE05FEB24BD98A05928208AF3A8F4DB4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_ST, UnknownData_V95K, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_ST, MinDrawScale_19_5076B0B748175E53BE4D0A81A794FB9D, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_ST, MaxDrawScale_16_C40BC1914EC5167CA9358789F32CE26D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_ST, DrawDistance_20_9F42BAE945B501F7DDF26EB42F15F04A, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailMesh_ST, ZOffset_15_50A28E5C4D2918F0360394AA09061470, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetailMesh_ST, 0x0020);
		}
	};
}
